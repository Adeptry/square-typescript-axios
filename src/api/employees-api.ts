/* tslint:disable */
/* eslint-disable */
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ListEmployeesResponse } from '../models';
// @ts-ignore
import { RetrieveEmployeeResponse } from '../models';
/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export const EmployeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ListEmployees
         * @param {string} [locationId] 
         * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
         * @param {number} [limit] The number of employees to be returned on each page.
         * @param {string} [cursor] The token required to retrieve the specified page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees: async (locationId?: string, status?: string, limit?: number, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary RetrieveEmployee
         * @param {string} id UUID for the employee that was requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployee: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveEmployee.');
            }
            const localVarPath = `/v2/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeesApi - functional programming interface
 * @export
 */
export const EmployeesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ListEmployees
         * @param {string} [locationId] 
         * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
         * @param {number} [limit] The number of employees to be returned on each page.
         * @param {string} [cursor] The token required to retrieve the specified page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployees(locationId?: string, status?: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEmployeesResponse>> {
            const localVarAxiosArgs = await EmployeesApiAxiosParamCreator(configuration).listEmployees(locationId, status, limit, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary RetrieveEmployee
         * @param {string} id UUID for the employee that was requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveEmployee(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveEmployeeResponse>> {
            const localVarAxiosArgs = await EmployeesApiAxiosParamCreator(configuration).retrieveEmployee(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EmployeesApi - factory interface
 * @export
 */
export const EmployeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary ListEmployees
         * @param {string} [locationId] 
         * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
         * @param {number} [limit] The number of employees to be returned on each page.
         * @param {string} [cursor] The token required to retrieve the specified page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees(locationId?: string, status?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListEmployeesResponse> {
            return EmployeesApiFp(configuration).listEmployees(locationId, status, limit, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary RetrieveEmployee
         * @param {string} id UUID for the employee that was requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployee(id: string, options?: any): AxiosPromise<RetrieveEmployeeResponse> {
            return EmployeesApiFp(configuration).retrieveEmployee(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeesApi - object-oriented interface
 * @export
 * @class EmployeesApi
 * @extends {BaseAPI}
 */
export class EmployeesApi extends BaseAPI {
    /**
     * 
     * @summary ListEmployees
     * @param {string} [locationId] 
     * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {number} [limit] The number of employees to be returned on each page.
     * @param {string} [cursor] The token required to retrieve the specified page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    public listEmployees(locationId?: string, status?: string, limit?: number, cursor?: string, options?: any) {
        return EmployeesApiFp(this.configuration).listEmployees(locationId, status, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary RetrieveEmployee
     * @param {string} id UUID for the employee that was requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    public retrieveEmployee(id: string, options?: any) {
        return EmployeesApiFp(this.configuration).retrieveEmployee(id, options).then((request) => request(this.axios, this.basePath));
    }
}
