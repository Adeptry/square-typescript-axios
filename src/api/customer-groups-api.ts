/* tslint:disable */
/* eslint-disable */
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateCustomerGroupRequest } from '../models';
// @ts-ignore
import { CreateCustomerGroupResponse } from '../models';
// @ts-ignore
import { DeleteCustomerGroupResponse } from '../models';
// @ts-ignore
import { ListCustomerGroupsResponse } from '../models';
// @ts-ignore
import { RetrieveCustomerGroupResponse } from '../models';
// @ts-ignore
import { UpdateCustomerGroupRequest } from '../models';
// @ts-ignore
import { UpdateCustomerGroupResponse } from '../models';
/**
 * CustomerGroupsApi - axios parameter creator
 * @export
 */
export const CustomerGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new customer group for a business.   The request must include the `name` value of the group.
         * @summary CreateCustomerGroup
         * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerGroup: async (body: CreateCustomerGroupRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCustomerGroup.');
            }
            const localVarPath = `/v2/customers/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a customer group as identified by the `group_id` value.
         * @summary DeleteCustomerGroup
         * @param {string} groupId The ID of the customer group to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerGroup: async (groupId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling deleteCustomerGroup.');
            }
            const localVarPath = `/v2/customers/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the list of customer groups of a business.
         * @summary ListCustomerGroups
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerGroups: async (cursor?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/customers/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific customer group as identified by the `group_id` value.
         * @summary RetrieveCustomerGroup
         * @param {string} groupId The ID of the customer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomerGroup: async (groupId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling retrieveCustomerGroup.');
            }
            const localVarPath = `/v2/customers/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a customer group as identified by the `group_id` value.
         * @summary UpdateCustomerGroup
         * @param {string} groupId The ID of the customer group to update.
         * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerGroup: async (groupId: string, body: UpdateCustomerGroupRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling updateCustomerGroup.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCustomerGroup.');
            }
            const localVarPath = `/v2/customers/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["CUSTOMERS_WRITE", "CUSTOMERS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerGroupsApi - functional programming interface
 * @export
 */
export const CustomerGroupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new customer group for a business.   The request must include the `name` value of the group.
         * @summary CreateCustomerGroup
         * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomerGroup(body: CreateCustomerGroupRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerGroupResponse>> {
            const localVarAxiosArgs = await CustomerGroupsApiAxiosParamCreator(configuration).createCustomerGroup(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a customer group as identified by the `group_id` value.
         * @summary DeleteCustomerGroup
         * @param {string} groupId The ID of the customer group to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerGroup(groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomerGroupResponse>> {
            const localVarAxiosArgs = await CustomerGroupsApiAxiosParamCreator(configuration).deleteCustomerGroup(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the list of customer groups of a business.
         * @summary ListCustomerGroups
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerGroups(cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerGroupsResponse>> {
            const localVarAxiosArgs = await CustomerGroupsApiAxiosParamCreator(configuration).listCustomerGroups(cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a specific customer group as identified by the `group_id` value.
         * @summary RetrieveCustomerGroup
         * @param {string} groupId The ID of the customer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveCustomerGroup(groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveCustomerGroupResponse>> {
            const localVarAxiosArgs = await CustomerGroupsApiAxiosParamCreator(configuration).retrieveCustomerGroup(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a customer group as identified by the `group_id` value.
         * @summary UpdateCustomerGroup
         * @param {string} groupId The ID of the customer group to update.
         * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomerGroup(groupId: string, body: UpdateCustomerGroupRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerGroupResponse>> {
            const localVarAxiosArgs = await CustomerGroupsApiAxiosParamCreator(configuration).updateCustomerGroup(groupId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CustomerGroupsApi - factory interface
 * @export
 */
export const CustomerGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new customer group for a business.   The request must include the `name` value of the group.
         * @summary CreateCustomerGroup
         * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerGroup(body: CreateCustomerGroupRequest, options?: any): AxiosPromise<CreateCustomerGroupResponse> {
            return CustomerGroupsApiFp(configuration).createCustomerGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a customer group as identified by the `group_id` value.
         * @summary DeleteCustomerGroup
         * @param {string} groupId The ID of the customer group to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerGroup(groupId: string, options?: any): AxiosPromise<DeleteCustomerGroupResponse> {
            return CustomerGroupsApiFp(configuration).deleteCustomerGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the list of customer groups of a business.
         * @summary ListCustomerGroups
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerGroups(cursor?: string, options?: any): AxiosPromise<ListCustomerGroupsResponse> {
            return CustomerGroupsApiFp(configuration).listCustomerGroups(cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific customer group as identified by the `group_id` value.
         * @summary RetrieveCustomerGroup
         * @param {string} groupId The ID of the customer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomerGroup(groupId: string, options?: any): AxiosPromise<RetrieveCustomerGroupResponse> {
            return CustomerGroupsApiFp(configuration).retrieveCustomerGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a customer group as identified by the `group_id` value.
         * @summary UpdateCustomerGroup
         * @param {string} groupId The ID of the customer group to update.
         * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerGroup(groupId: string, body: UpdateCustomerGroupRequest, options?: any): AxiosPromise<UpdateCustomerGroupResponse> {
            return CustomerGroupsApiFp(configuration).updateCustomerGroup(groupId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerGroupsApi - object-oriented interface
 * @export
 * @class CustomerGroupsApi
 * @extends {BaseAPI}
 */
export class CustomerGroupsApi extends BaseAPI {
    /**
     * Creates a new customer group for a business.   The request must include the `name` value of the group.
     * @summary CreateCustomerGroup
     * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    public createCustomerGroup(body: CreateCustomerGroupRequest, options?: any) {
        return CustomerGroupsApiFp(this.configuration).createCustomerGroup(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a customer group as identified by the `group_id` value.
     * @summary DeleteCustomerGroup
     * @param {string} groupId The ID of the customer group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    public deleteCustomerGroup(groupId: string, options?: any) {
        return CustomerGroupsApiFp(this.configuration).deleteCustomerGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the list of customer groups of a business.
     * @summary ListCustomerGroups
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    public listCustomerGroups(cursor?: string, options?: any) {
        return CustomerGroupsApiFp(this.configuration).listCustomerGroups(cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific customer group as identified by the `group_id` value.
     * @summary RetrieveCustomerGroup
     * @param {string} groupId The ID of the customer group to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    public retrieveCustomerGroup(groupId: string, options?: any) {
        return CustomerGroupsApiFp(this.configuration).retrieveCustomerGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a customer group as identified by the `group_id` value.
     * @summary UpdateCustomerGroup
     * @param {string} groupId The ID of the customer group to update.
     * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    public updateCustomerGroup(groupId: string, body: UpdateCustomerGroupRequest, options?: any) {
        return CustomerGroupsApiFp(this.configuration).updateCustomerGroup(groupId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
