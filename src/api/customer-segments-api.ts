/* tslint:disable */
/* eslint-disable */
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ListCustomerSegmentsResponse } from '../models';
// @ts-ignore
import { RetrieveCustomerSegmentResponse } from '../models';
/**
 * CustomerSegmentsApi - axios parameter creator
 * @export
 */
export const CustomerSegmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the list of customer segments of a business.
         * @summary ListCustomerSegments
         * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerSegments: async (cursor?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/customers/segments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific customer segment as identified by the `segment_id` value.
         * @summary RetrieveCustomerSegment
         * @param {string} segmentId The Square-issued ID of the customer segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomerSegment: async (segmentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'segmentId' is not null or undefined
            if (segmentId === null || segmentId === undefined) {
                throw new RequiredError('segmentId','Required parameter segmentId was null or undefined when calling retrieveCustomerSegment.');
            }
            const localVarPath = `/v2/customers/segments/{segment_id}`
                .replace(`{${"segment_id"}}`, encodeURIComponent(String(segmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerSegmentsApi - functional programming interface
 * @export
 */
export const CustomerSegmentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves the list of customer segments of a business.
         * @summary ListCustomerSegments
         * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerSegments(cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerSegmentsResponse>> {
            const localVarAxiosArgs = await CustomerSegmentsApiAxiosParamCreator(configuration).listCustomerSegments(cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a specific customer segment as identified by the `segment_id` value.
         * @summary RetrieveCustomerSegment
         * @param {string} segmentId The Square-issued ID of the customer segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveCustomerSegment(segmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveCustomerSegmentResponse>> {
            const localVarAxiosArgs = await CustomerSegmentsApiAxiosParamCreator(configuration).retrieveCustomerSegment(segmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CustomerSegmentsApi - factory interface
 * @export
 */
export const CustomerSegmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves the list of customer segments of a business.
         * @summary ListCustomerSegments
         * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerSegments(cursor?: string, options?: any): AxiosPromise<ListCustomerSegmentsResponse> {
            return CustomerSegmentsApiFp(configuration).listCustomerSegments(cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific customer segment as identified by the `segment_id` value.
         * @summary RetrieveCustomerSegment
         * @param {string} segmentId The Square-issued ID of the customer segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomerSegment(segmentId: string, options?: any): AxiosPromise<RetrieveCustomerSegmentResponse> {
            return CustomerSegmentsApiFp(configuration).retrieveCustomerSegment(segmentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerSegmentsApi - object-oriented interface
 * @export
 * @class CustomerSegmentsApi
 * @extends {BaseAPI}
 */
export class CustomerSegmentsApi extends BaseAPI {
    /**
     * Retrieves the list of customer segments of a business.
     * @summary ListCustomerSegments
     * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSegmentsApi
     */
    public listCustomerSegments(cursor?: string, options?: any) {
        return CustomerSegmentsApiFp(this.configuration).listCustomerSegments(cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific customer segment as identified by the `segment_id` value.
     * @summary RetrieveCustomerSegment
     * @param {string} segmentId The Square-issued ID of the customer segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSegmentsApi
     */
    public retrieveCustomerSegment(segmentId: string, options?: any) {
        return CustomerSegmentsApiFp(this.configuration).retrieveCustomerSegment(segmentId, options).then((request) => request(this.axios, this.basePath));
    }
}
