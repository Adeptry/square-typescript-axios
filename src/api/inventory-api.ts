/* tslint:disable */
/* eslint-disable */
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BatchChangeInventoryRequest } from '../models';
// @ts-ignore
import { BatchChangeInventoryResponse } from '../models';
// @ts-ignore
import { BatchRetrieveInventoryChangesRequest } from '../models';
// @ts-ignore
import { BatchRetrieveInventoryChangesResponse } from '../models';
// @ts-ignore
import { BatchRetrieveInventoryCountsRequest } from '../models';
// @ts-ignore
import { BatchRetrieveInventoryCountsResponse } from '../models';
// @ts-ignore
import { RetrieveInventoryAdjustmentResponse } from '../models';
// @ts-ignore
import { RetrieveInventoryChangesResponse } from '../models';
// @ts-ignore
import { RetrieveInventoryCountResponse } from '../models';
// @ts-ignore
import { RetrieveInventoryPhysicalCountResponse } from '../models';
/**
 * InventoryApi - axios parameter creator
 * @export
 */
export const InventoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
         * @summary BatchChangeInventory
         * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchChangeInventory: async (body: BatchChangeInventoryRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling batchChangeInventory.');
            }
            const localVarPath = `/v2/inventory/batch-change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["INVENTORY_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
         * @summary BatchRetrieveInventoryChanges
         * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveInventoryChanges: async (body: BatchRetrieveInventoryChangesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling batchRetrieveInventoryChanges.');
            }
            const localVarPath = `/v2/inventory/batch-retrieve-changes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["INVENTORY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
         * @summary BatchRetrieveInventoryCounts
         * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveInventoryCounts: async (body: BatchRetrieveInventoryCountsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling batchRetrieveInventoryCounts.');
            }
            const localVarPath = `/v2/inventory/batch-retrieve-counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["INVENTORY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
         * @summary RetrieveInventoryAdjustment
         * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryAdjustment: async (adjustmentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'adjustmentId' is not null or undefined
            if (adjustmentId === null || adjustmentId === undefined) {
                throw new RequiredError('adjustmentId','Required parameter adjustmentId was null or undefined when calling retrieveInventoryAdjustment.');
            }
            const localVarPath = `/v2/inventory/adjustment/{adjustment_id}`
                .replace(`{${"adjustment_id"}}`, encodeURIComponent(String(adjustmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["INVENTORY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryChanges
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryChanges: async (catalogObjectId: string, locationIds?: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogObjectId' is not null or undefined
            if (catalogObjectId === null || catalogObjectId === undefined) {
                throw new RequiredError('catalogObjectId','Required parameter catalogObjectId was null or undefined when calling retrieveInventoryChanges.');
            }
            const localVarPath = `/v2/inventory/{catalog_object_id}/changes`
                .replace(`{${"catalog_object_id"}}`, encodeURIComponent(String(catalogObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["INVENTORY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (locationIds !== undefined) {
                localVarQueryParameter['location_ids'] = locationIds;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryCount
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryCount: async (catalogObjectId: string, locationIds?: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogObjectId' is not null or undefined
            if (catalogObjectId === null || catalogObjectId === undefined) {
                throw new RequiredError('catalogObjectId','Required parameter catalogObjectId was null or undefined when calling retrieveInventoryCount.');
            }
            const localVarPath = `/v2/inventory/{catalog_object_id}`
                .replace(`{${"catalog_object_id"}}`, encodeURIComponent(String(catalogObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["INVENTORY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (locationIds !== undefined) {
                localVarQueryParameter['location_ids'] = locationIds;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
         * @summary RetrieveInventoryPhysicalCount
         * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryPhysicalCount: async (physicalCountId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'physicalCountId' is not null or undefined
            if (physicalCountId === null || physicalCountId === undefined) {
                throw new RequiredError('physicalCountId','Required parameter physicalCountId was null or undefined when calling retrieveInventoryPhysicalCount.');
            }
            const localVarPath = `/v2/inventory/physical-count/{physical_count_id}`
                .replace(`{${"physical_count_id"}}`, encodeURIComponent(String(physicalCountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["INVENTORY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InventoryApi - functional programming interface
 * @export
 */
export const InventoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
         * @summary BatchChangeInventory
         * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchChangeInventory(body: BatchChangeInventoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchChangeInventoryResponse>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).batchChangeInventory(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
         * @summary BatchRetrieveInventoryChanges
         * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchRetrieveInventoryChanges(body: BatchRetrieveInventoryChangesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchRetrieveInventoryChangesResponse>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).batchRetrieveInventoryChanges(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
         * @summary BatchRetrieveInventoryCounts
         * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchRetrieveInventoryCounts(body: BatchRetrieveInventoryCountsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchRetrieveInventoryCountsResponse>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).batchRetrieveInventoryCounts(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
         * @summary RetrieveInventoryAdjustment
         * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveInventoryAdjustment(adjustmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveInventoryAdjustmentResponse>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).retrieveInventoryAdjustment(adjustmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryChanges
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveInventoryChanges(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveInventoryChangesResponse>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).retrieveInventoryChanges(catalogObjectId, locationIds, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryCount
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveInventoryCount(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveInventoryCountResponse>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).retrieveInventoryCount(catalogObjectId, locationIds, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
         * @summary RetrieveInventoryPhysicalCount
         * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveInventoryPhysicalCount(physicalCountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveInventoryPhysicalCountResponse>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).retrieveInventoryPhysicalCount(physicalCountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InventoryApi - factory interface
 * @export
 */
export const InventoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
         * @summary BatchChangeInventory
         * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchChangeInventory(body: BatchChangeInventoryRequest, options?: any): AxiosPromise<BatchChangeInventoryResponse> {
            return InventoryApiFp(configuration).batchChangeInventory(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
         * @summary BatchRetrieveInventoryChanges
         * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveInventoryChanges(body: BatchRetrieveInventoryChangesRequest, options?: any): AxiosPromise<BatchRetrieveInventoryChangesResponse> {
            return InventoryApiFp(configuration).batchRetrieveInventoryChanges(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
         * @summary BatchRetrieveInventoryCounts
         * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveInventoryCounts(body: BatchRetrieveInventoryCountsRequest, options?: any): AxiosPromise<BatchRetrieveInventoryCountsResponse> {
            return InventoryApiFp(configuration).batchRetrieveInventoryCounts(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
         * @summary RetrieveInventoryAdjustment
         * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryAdjustment(adjustmentId: string, options?: any): AxiosPromise<RetrieveInventoryAdjustmentResponse> {
            return InventoryApiFp(configuration).retrieveInventoryAdjustment(adjustmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryChanges
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryChanges(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any): AxiosPromise<RetrieveInventoryChangesResponse> {
            return InventoryApiFp(configuration).retrieveInventoryChanges(catalogObjectId, locationIds, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryCount
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryCount(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any): AxiosPromise<RetrieveInventoryCountResponse> {
            return InventoryApiFp(configuration).retrieveInventoryCount(catalogObjectId, locationIds, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
         * @summary RetrieveInventoryPhysicalCount
         * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryPhysicalCount(physicalCountId: string, options?: any): AxiosPromise<RetrieveInventoryPhysicalCountResponse> {
            return InventoryApiFp(configuration).retrieveInventoryPhysicalCount(physicalCountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
export class InventoryApi extends BaseAPI {
    /**
     * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
     * @summary BatchChangeInventory
     * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public batchChangeInventory(body: BatchChangeInventoryRequest, options?: any) {
        return InventoryApiFp(this.configuration).batchChangeInventory(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
     * @summary BatchRetrieveInventoryChanges
     * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public batchRetrieveInventoryChanges(body: BatchRetrieveInventoryChangesRequest, options?: any) {
        return InventoryApiFp(this.configuration).batchRetrieveInventoryChanges(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
     * @summary BatchRetrieveInventoryCounts
     * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public batchRetrieveInventoryCounts(body: BatchRetrieveInventoryCountsRequest, options?: any) {
        return InventoryApiFp(this.configuration).batchRetrieveInventoryCounts(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
     * @summary RetrieveInventoryAdjustment
     * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public retrieveInventoryAdjustment(adjustmentId: string, options?: any) {
        return InventoryApiFp(this.configuration).retrieveInventoryAdjustment(adjustmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryChanges
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public retrieveInventoryChanges(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any) {
        return InventoryApiFp(this.configuration).retrieveInventoryChanges(catalogObjectId, locationIds, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryCount
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public retrieveInventoryCount(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any) {
        return InventoryApiFp(this.configuration).retrieveInventoryCount(catalogObjectId, locationIds, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
     * @summary RetrieveInventoryPhysicalCount
     * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public retrieveInventoryPhysicalCount(physicalCountId: string, options?: any) {
        return InventoryApiFp(this.configuration).retrieveInventoryPhysicalCount(physicalCountId, options).then((request) => request(this.axios, this.basePath));
    }
}
