/* tslint:disable */
/* eslint-disable */
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { V1BankAccount } from '../models';
// @ts-ignore
import { V1CreateRefundRequest } from '../models';
// @ts-ignore
import { V1Order } from '../models';
// @ts-ignore
import { V1Payment } from '../models';
// @ts-ignore
import { V1Refund } from '../models';
// @ts-ignore
import { V1Settlement } from '../models';
// @ts-ignore
import { V1UpdateOrderRequest } from '../models';
/**
 * V1TransactionsApi - axios parameter creator
 * @export
 */
export const V1TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
         * @summary CreateRefund
         * @param {string} locationId The ID of the original payment\&#39;s associated location.
         * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: async (locationId: string, body: V1CreateRefundRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling createRefund.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createRefund.');
            }
            const localVarPath = `/v1/{location_id}/refunds`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary ListBankAccounts
         * @param {string} locationId The ID of the location to list bank accounts for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: async (locationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling listBankAccounts.');
            }
            const localVarPath = `/v1/{location_id}/bank-accounts`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["BANK_ACCOUNTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides summary information for a merchant\'s online store orders.
         * @summary ListOrders
         * @param {string} locationId The ID of the location to list online store orders for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: async (locationId: string, order?: string, limit?: number, batchToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling listOrders.');
            }
            const localVarPath = `/v1/{location_id}/orders`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["ORDERS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (batchToken !== undefined) {
                localVarQueryParameter['batch_token'] = batchToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
         * @summary ListPayments
         * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: async (locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, includePartial?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling listPayments.');
            }
            const localVarPath = `/v1/{location_id}/payments`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (batchToken !== undefined) {
                localVarQueryParameter['batch_token'] = batchToken;
            }

            if (includePartial !== undefined) {
                localVarQueryParameter['include_partial'] = includePartial;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
         * @summary ListRefunds
         * @param {string} locationId The ID of the location to list refunds for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds: async (locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling listRefunds.');
            }
            const localVarPath = `/v1/{location_id}/refunds`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (batchToken !== undefined) {
                localVarQueryParameter['batch_token'] = batchToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
         * @summary ListSettlements
         * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which settlements are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
         * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSettlements: async (locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, status?: string, batchToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling listSettlements.');
            }
            const localVarPath = `/v1/{location_id}/settlements`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["SETTLEMENTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (batchToken !== undefined) {
                localVarQueryParameter['batch_token'] = batchToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary RetrieveBankAccount
         * @param {string} locationId The ID of the bank account\&#39;s associated location.
         * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBankAccount: async (locationId: string, bankAccountId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling retrieveBankAccount.');
            }
            // verify required parameter 'bankAccountId' is not null or undefined
            if (bankAccountId === null || bankAccountId === undefined) {
                throw new RequiredError('bankAccountId','Required parameter bankAccountId was null or undefined when calling retrieveBankAccount.');
            }
            const localVarPath = `/v1/{location_id}/bank-accounts/{bank_account_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)))
                .replace(`{${"bank_account_id"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["BANK_ACCOUNTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides comprehensive information for a single online store order, including the order\'s history.
         * @summary RetrieveOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrder: async (locationId: string, orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling retrieveOrder.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling retrieveOrder.');
            }
            const localVarPath = `/v1/{location_id}/orders/{order_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["ORDERS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides comprehensive information for a single payment.
         * @summary RetrievePayment
         * @param {string} locationId The ID of the payment\&#39;s associated location.
         * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePayment: async (locationId: string, paymentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling retrievePayment.');
            }
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new RequiredError('paymentId','Required parameter paymentId was null or undefined when calling retrievePayment.');
            }
            const localVarPath = `/v1/{location_id}/payments/{payment_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)))
                .replace(`{${"payment_id"}}`, encodeURIComponent(String(paymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
         * @summary RetrieveSettlement
         * @param {string} locationId The ID of the settlements\&#39;s associated location.
         * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSettlement: async (locationId: string, settlementId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling retrieveSettlement.');
            }
            // verify required parameter 'settlementId' is not null or undefined
            if (settlementId === null || settlementId === undefined) {
                throw new RequiredError('settlementId','Required parameter settlementId was null or undefined when calling retrieveSettlement.');
            }
            const localVarPath = `/v1/{location_id}/settlements/{settlement_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)))
                .replace(`{${"settlement_id"}}`, encodeURIComponent(String(settlementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["SETTLEMENTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
         * @summary UpdateOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: async (locationId: string, orderId: string, body: V1UpdateOrderRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling updateOrder.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling updateOrder.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrder.');
            }
            const localVarPath = `/v1/{location_id}/orders/{order_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["ORDERS_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1TransactionsApi - functional programming interface
 * @export
 */
export const V1TransactionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
         * @summary CreateRefund
         * @param {string} locationId The ID of the original payment\&#39;s associated location.
         * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRefund(locationId: string, body: V1CreateRefundRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Refund>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).createRefund(locationId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary ListBankAccounts
         * @param {string} locationId The ID of the location to list bank accounts for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBankAccounts(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1BankAccount>>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).listBankAccounts(locationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides summary information for a merchant\'s online store orders.
         * @summary ListOrders
         * @param {string} locationId The ID of the location to list online store orders for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrders(locationId: string, order?: string, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Order>>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).listOrders(locationId, order, limit, batchToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
         * @summary ListPayments
         * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPayments(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, includePartial?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Payment>>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).listPayments(locationId, order, beginTime, endTime, limit, batchToken, includePartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
         * @summary ListRefunds
         * @param {string} locationId The ID of the location to list refunds for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRefunds(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Refund>>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).listRefunds(locationId, order, beginTime, endTime, limit, batchToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
         * @summary ListSettlements
         * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which settlements are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
         * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSettlements(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, status?: string, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Settlement>>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).listSettlements(locationId, order, beginTime, endTime, limit, status, batchToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary RetrieveBankAccount
         * @param {string} locationId The ID of the bank account\&#39;s associated location.
         * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveBankAccount(locationId: string, bankAccountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1BankAccount>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).retrieveBankAccount(locationId, bankAccountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides comprehensive information for a single online store order, including the order\'s history.
         * @summary RetrieveOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOrder(locationId: string, orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Order>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).retrieveOrder(locationId, orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides comprehensive information for a single payment.
         * @summary RetrievePayment
         * @param {string} locationId The ID of the payment\&#39;s associated location.
         * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievePayment(locationId: string, paymentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Payment>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).retrievePayment(locationId, paymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
         * @summary RetrieveSettlement
         * @param {string} locationId The ID of the settlements\&#39;s associated location.
         * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSettlement(locationId: string, settlementId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Settlement>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).retrieveSettlement(locationId, settlementId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
         * @summary UpdateOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder(locationId: string, orderId: string, body: V1UpdateOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Order>> {
            const localVarAxiosArgs = await V1TransactionsApiAxiosParamCreator(configuration).updateOrder(locationId, orderId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * V1TransactionsApi - factory interface
 * @export
 */
export const V1TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
         * @summary CreateRefund
         * @param {string} locationId The ID of the original payment\&#39;s associated location.
         * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund(locationId: string, body: V1CreateRefundRequest, options?: any): AxiosPromise<V1Refund> {
            return V1TransactionsApiFp(configuration).createRefund(locationId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary ListBankAccounts
         * @param {string} locationId The ID of the location to list bank accounts for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts(locationId: string, options?: any): AxiosPromise<Array<V1BankAccount>> {
            return V1TransactionsApiFp(configuration).listBankAccounts(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides summary information for a merchant\'s online store orders.
         * @summary ListOrders
         * @param {string} locationId The ID of the location to list online store orders for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(locationId: string, order?: string, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1Order>> {
            return V1TransactionsApiFp(configuration).listOrders(locationId, order, limit, batchToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
         * @summary ListPayments
         * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, includePartial?: boolean, options?: any): AxiosPromise<Array<V1Payment>> {
            return V1TransactionsApiFp(configuration).listPayments(locationId, order, beginTime, endTime, limit, batchToken, includePartial, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
         * @summary ListRefunds
         * @param {string} locationId The ID of the location to list refunds for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1Refund>> {
            return V1TransactionsApiFp(configuration).listRefunds(locationId, order, beginTime, endTime, limit, batchToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
         * @summary ListSettlements
         * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which settlements are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
         * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSettlements(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, status?: string, batchToken?: string, options?: any): AxiosPromise<Array<V1Settlement>> {
            return V1TransactionsApiFp(configuration).listSettlements(locationId, order, beginTime, endTime, limit, status, batchToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary RetrieveBankAccount
         * @param {string} locationId The ID of the bank account\&#39;s associated location.
         * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBankAccount(locationId: string, bankAccountId: string, options?: any): AxiosPromise<V1BankAccount> {
            return V1TransactionsApiFp(configuration).retrieveBankAccount(locationId, bankAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides comprehensive information for a single online store order, including the order\'s history.
         * @summary RetrieveOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrder(locationId: string, orderId: string, options?: any): AxiosPromise<V1Order> {
            return V1TransactionsApiFp(configuration).retrieveOrder(locationId, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides comprehensive information for a single payment.
         * @summary RetrievePayment
         * @param {string} locationId The ID of the payment\&#39;s associated location.
         * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePayment(locationId: string, paymentId: string, options?: any): AxiosPromise<V1Payment> {
            return V1TransactionsApiFp(configuration).retrievePayment(locationId, paymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
         * @summary RetrieveSettlement
         * @param {string} locationId The ID of the settlements\&#39;s associated location.
         * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSettlement(locationId: string, settlementId: string, options?: any): AxiosPromise<V1Settlement> {
            return V1TransactionsApiFp(configuration).retrieveSettlement(locationId, settlementId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
         * @summary UpdateOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(locationId: string, orderId: string, body: V1UpdateOrderRequest, options?: any): AxiosPromise<V1Order> {
            return V1TransactionsApiFp(configuration).updateOrder(locationId, orderId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1TransactionsApi - object-oriented interface
 * @export
 * @class V1TransactionsApi
 * @extends {BaseAPI}
 */
export class V1TransactionsApi extends BaseAPI {
    /**
     * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
     * @summary CreateRefund
     * @param {string} locationId The ID of the original payment\&#39;s associated location.
     * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public createRefund(locationId: string, body: V1CreateRefundRequest, options?: any) {
        return V1TransactionsApiFp(this.configuration).createRefund(locationId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary ListBankAccounts
     * @param {string} locationId The ID of the location to list bank accounts for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public listBankAccounts(locationId: string, options?: any) {
        return V1TransactionsApiFp(this.configuration).listBankAccounts(locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides summary information for a merchant\'s online store orders.
     * @summary ListOrders
     * @param {string} locationId The ID of the location to list online store orders for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public listOrders(locationId: string, order?: string, limit?: number, batchToken?: string, options?: any) {
        return V1TransactionsApiFp(this.configuration).listOrders(locationId, order, limit, batchToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
     * @summary ListPayments
     * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public listPayments(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, includePartial?: boolean, options?: any) {
        return V1TransactionsApiFp(this.configuration).listPayments(locationId, order, beginTime, endTime, limit, batchToken, includePartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public listRefunds(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, options?: any) {
        return V1TransactionsApiFp(this.configuration).listRefunds(locationId, order, beginTime, endTime, limit, batchToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
     * @summary ListSettlements
     * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which settlements are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
     * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public listSettlements(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, status?: string, batchToken?: string, options?: any) {
        return V1TransactionsApiFp(this.configuration).listSettlements(locationId, order, beginTime, endTime, limit, status, batchToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary RetrieveBankAccount
     * @param {string} locationId The ID of the bank account\&#39;s associated location.
     * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public retrieveBankAccount(locationId: string, bankAccountId: string, options?: any) {
        return V1TransactionsApiFp(this.configuration).retrieveBankAccount(locationId, bankAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides comprehensive information for a single online store order, including the order\'s history.
     * @summary RetrieveOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public retrieveOrder(locationId: string, orderId: string, options?: any) {
        return V1TransactionsApiFp(this.configuration).retrieveOrder(locationId, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides comprehensive information for a single payment.
     * @summary RetrievePayment
     * @param {string} locationId The ID of the payment\&#39;s associated location.
     * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public retrievePayment(locationId: string, paymentId: string, options?: any) {
        return V1TransactionsApiFp(this.configuration).retrievePayment(locationId, paymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
     * @summary RetrieveSettlement
     * @param {string} locationId The ID of the settlements\&#39;s associated location.
     * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public retrieveSettlement(locationId: string, settlementId: string, options?: any) {
        return V1TransactionsApiFp(this.configuration).retrieveSettlement(locationId, settlementId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
     * @summary UpdateOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    public updateOrder(locationId: string, orderId: string, body: V1UpdateOrderRequest, options?: any) {
        return V1TransactionsApiFp(this.configuration).updateOrder(locationId, orderId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
