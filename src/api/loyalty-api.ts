/* tslint:disable */
/* eslint-disable */
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccumulateLoyaltyPointsRequest } from '../models';
// @ts-ignore
import { AccumulateLoyaltyPointsResponse } from '../models';
// @ts-ignore
import { AdjustLoyaltyPointsRequest } from '../models';
// @ts-ignore
import { AdjustLoyaltyPointsResponse } from '../models';
// @ts-ignore
import { CalculateLoyaltyPointsRequest } from '../models';
// @ts-ignore
import { CalculateLoyaltyPointsResponse } from '../models';
// @ts-ignore
import { CreateLoyaltyAccountRequest } from '../models';
// @ts-ignore
import { CreateLoyaltyAccountResponse } from '../models';
// @ts-ignore
import { CreateLoyaltyRewardRequest } from '../models';
// @ts-ignore
import { CreateLoyaltyRewardResponse } from '../models';
// @ts-ignore
import { DeleteLoyaltyRewardResponse } from '../models';
// @ts-ignore
import { ListLoyaltyProgramsResponse } from '../models';
// @ts-ignore
import { RedeemLoyaltyRewardRequest } from '../models';
// @ts-ignore
import { RedeemLoyaltyRewardResponse } from '../models';
// @ts-ignore
import { RetrieveLoyaltyAccountResponse } from '../models';
// @ts-ignore
import { RetrieveLoyaltyRewardResponse } from '../models';
// @ts-ignore
import { SearchLoyaltyAccountsRequest } from '../models';
// @ts-ignore
import { SearchLoyaltyAccountsResponse } from '../models';
// @ts-ignore
import { SearchLoyaltyEventsRequest } from '../models';
// @ts-ignore
import { SearchLoyaltyEventsResponse } from '../models';
// @ts-ignore
import { SearchLoyaltyRewardsRequest } from '../models';
// @ts-ignore
import { SearchLoyaltyRewardsResponse } from '../models';
/**
 * LoyaltyApi - axios parameter creator
 * @export
 */
export const LoyaltyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
         * @summary AccumulateLoyaltyPoints
         * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
         * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accumulateLoyaltyPoints: async (accountId: string, body: AccumulateLoyaltyPointsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accumulateLoyaltyPoints.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accumulateLoyaltyPoints.');
            }
            const localVarPath = `/v2/loyalty/accounts/{account_id}/accumulate`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
         * @summary AdjustLoyaltyPoints
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
         * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustLoyaltyPoints: async (accountId: string, body: AdjustLoyaltyPointsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling adjustLoyaltyPoints.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling adjustLoyaltyPoints.');
            }
            const localVarPath = `/v2/loyalty/accounts/{account_id}/adjust`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
         * @summary CalculateLoyaltyPoints
         * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
         * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateLoyaltyPoints: async (programId: string, body: CalculateLoyaltyPointsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling calculateLoyaltyPoints.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calculateLoyaltyPoints.');
            }
            const localVarPath = `/v2/loyalty/programs/{program_id}/calculate`
                .replace(`{${"program_id"}}`, encodeURIComponent(String(programId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a loyalty account.
         * @summary CreateLoyaltyAccount
         * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoyaltyAccount: async (body: CreateLoyaltyAccountRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createLoyaltyAccount.');
            }
            const localVarPath = `/v2/loyalty/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
         * @summary CreateLoyaltyReward
         * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoyaltyReward: async (body: CreateLoyaltyRewardRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createLoyaltyReward.');
            }
            const localVarPath = `/v2/loyalty/rewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
         * @summary DeleteLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoyaltyReward: async (rewardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rewardId' is not null or undefined
            if (rewardId === null || rewardId === undefined) {
                throw new RequiredError('rewardId','Required parameter rewardId was null or undefined when calling deleteLoyaltyReward.');
            }
            const localVarPath = `/v2/loyalty/rewards/{reward_id}`
                .replace(`{${"reward_id"}}`, encodeURIComponent(String(rewardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
         * @summary ListLoyaltyPrograms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoyaltyPrograms: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/loyalty/programs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
         * @summary RedeemLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
         * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemLoyaltyReward: async (rewardId: string, body: RedeemLoyaltyRewardRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rewardId' is not null or undefined
            if (rewardId === null || rewardId === undefined) {
                throw new RequiredError('rewardId','Required parameter rewardId was null or undefined when calling redeemLoyaltyReward.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling redeemLoyaltyReward.');
            }
            const localVarPath = `/v2/loyalty/rewards/{reward_id}/redeem`
                .replace(`{${"reward_id"}}`, encodeURIComponent(String(rewardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a loyalty account.
         * @summary RetrieveLoyaltyAccount
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLoyaltyAccount: async (accountId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling retrieveLoyaltyAccount.');
            }
            const localVarPath = `/v2/loyalty/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a loyalty reward.
         * @summary RetrieveLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLoyaltyReward: async (rewardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rewardId' is not null or undefined
            if (rewardId === null || rewardId === undefined) {
                throw new RequiredError('rewardId','Required parameter rewardId was null or undefined when calling retrieveLoyaltyReward.');
            }
            const localVarPath = `/v2/loyalty/rewards/{reward_id}`
                .replace(`{${"reward_id"}}`, encodeURIComponent(String(rewardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
         * @summary SearchLoyaltyAccounts
         * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyAccounts: async (body: SearchLoyaltyAccountsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling searchLoyaltyAccounts.');
            }
            const localVarPath = `/v2/loyalty/accounts/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
         * @summary SearchLoyaltyEvents
         * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyEvents: async (body: SearchLoyaltyEventsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling searchLoyaltyEvents.');
            }
            const localVarPath = `/v2/loyalty/events/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
         * @summary SearchLoyaltyRewards
         * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyRewards: async (body: SearchLoyaltyRewardsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling searchLoyaltyRewards.');
            }
            const localVarPath = `/v2/loyalty/rewards/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["LOYALTY_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoyaltyApi - functional programming interface
 * @export
 */
export const LoyaltyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
         * @summary AccumulateLoyaltyPoints
         * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
         * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accumulateLoyaltyPoints(accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccumulateLoyaltyPointsResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).accumulateLoyaltyPoints(accountId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
         * @summary AdjustLoyaltyPoints
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
         * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adjustLoyaltyPoints(accountId: string, body: AdjustLoyaltyPointsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdjustLoyaltyPointsResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).adjustLoyaltyPoints(accountId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
         * @summary CalculateLoyaltyPoints
         * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
         * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateLoyaltyPoints(programId: string, body: CalculateLoyaltyPointsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculateLoyaltyPointsResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).calculateLoyaltyPoints(programId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a loyalty account.
         * @summary CreateLoyaltyAccount
         * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLoyaltyAccount(body: CreateLoyaltyAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoyaltyAccountResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).createLoyaltyAccount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
         * @summary CreateLoyaltyReward
         * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLoyaltyReward(body: CreateLoyaltyRewardRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoyaltyRewardResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).createLoyaltyReward(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
         * @summary DeleteLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLoyaltyReward(rewardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteLoyaltyRewardResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).deleteLoyaltyReward(rewardId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
         * @summary ListLoyaltyPrograms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLoyaltyPrograms(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLoyaltyProgramsResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).listLoyaltyPrograms(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
         * @summary RedeemLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
         * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemLoyaltyReward(rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedeemLoyaltyRewardResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).redeemLoyaltyReward(rewardId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a loyalty account.
         * @summary RetrieveLoyaltyAccount
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveLoyaltyAccount(accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveLoyaltyAccountResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).retrieveLoyaltyAccount(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a loyalty reward.
         * @summary RetrieveLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveLoyaltyReward(rewardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveLoyaltyRewardResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).retrieveLoyaltyReward(rewardId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
         * @summary SearchLoyaltyAccounts
         * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLoyaltyAccounts(body: SearchLoyaltyAccountsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLoyaltyAccountsResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).searchLoyaltyAccounts(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
         * @summary SearchLoyaltyEvents
         * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLoyaltyEvents(body: SearchLoyaltyEventsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLoyaltyEventsResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).searchLoyaltyEvents(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
         * @summary SearchLoyaltyRewards
         * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLoyaltyRewards(body: SearchLoyaltyRewardsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLoyaltyRewardsResponse>> {
            const localVarAxiosArgs = await LoyaltyApiAxiosParamCreator(configuration).searchLoyaltyRewards(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoyaltyApi - factory interface
 * @export
 */
export const LoyaltyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
         * @summary AccumulateLoyaltyPoints
         * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
         * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accumulateLoyaltyPoints(accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any): AxiosPromise<AccumulateLoyaltyPointsResponse> {
            return LoyaltyApiFp(configuration).accumulateLoyaltyPoints(accountId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
         * @summary AdjustLoyaltyPoints
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
         * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustLoyaltyPoints(accountId: string, body: AdjustLoyaltyPointsRequest, options?: any): AxiosPromise<AdjustLoyaltyPointsResponse> {
            return LoyaltyApiFp(configuration).adjustLoyaltyPoints(accountId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
         * @summary CalculateLoyaltyPoints
         * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
         * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateLoyaltyPoints(programId: string, body: CalculateLoyaltyPointsRequest, options?: any): AxiosPromise<CalculateLoyaltyPointsResponse> {
            return LoyaltyApiFp(configuration).calculateLoyaltyPoints(programId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a loyalty account.
         * @summary CreateLoyaltyAccount
         * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoyaltyAccount(body: CreateLoyaltyAccountRequest, options?: any): AxiosPromise<CreateLoyaltyAccountResponse> {
            return LoyaltyApiFp(configuration).createLoyaltyAccount(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
         * @summary CreateLoyaltyReward
         * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoyaltyReward(body: CreateLoyaltyRewardRequest, options?: any): AxiosPromise<CreateLoyaltyRewardResponse> {
            return LoyaltyApiFp(configuration).createLoyaltyReward(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
         * @summary DeleteLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoyaltyReward(rewardId: string, options?: any): AxiosPromise<DeleteLoyaltyRewardResponse> {
            return LoyaltyApiFp(configuration).deleteLoyaltyReward(rewardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
         * @summary ListLoyaltyPrograms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoyaltyPrograms(options?: any): AxiosPromise<ListLoyaltyProgramsResponse> {
            return LoyaltyApiFp(configuration).listLoyaltyPrograms(options).then((request) => request(axios, basePath));
        },
        /**
         * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
         * @summary RedeemLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
         * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemLoyaltyReward(rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any): AxiosPromise<RedeemLoyaltyRewardResponse> {
            return LoyaltyApiFp(configuration).redeemLoyaltyReward(rewardId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a loyalty account.
         * @summary RetrieveLoyaltyAccount
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLoyaltyAccount(accountId: string, options?: any): AxiosPromise<RetrieveLoyaltyAccountResponse> {
            return LoyaltyApiFp(configuration).retrieveLoyaltyAccount(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a loyalty reward.
         * @summary RetrieveLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLoyaltyReward(rewardId: string, options?: any): AxiosPromise<RetrieveLoyaltyRewardResponse> {
            return LoyaltyApiFp(configuration).retrieveLoyaltyReward(rewardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
         * @summary SearchLoyaltyAccounts
         * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyAccounts(body: SearchLoyaltyAccountsRequest, options?: any): AxiosPromise<SearchLoyaltyAccountsResponse> {
            return LoyaltyApiFp(configuration).searchLoyaltyAccounts(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
         * @summary SearchLoyaltyEvents
         * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyEvents(body: SearchLoyaltyEventsRequest, options?: any): AxiosPromise<SearchLoyaltyEventsResponse> {
            return LoyaltyApiFp(configuration).searchLoyaltyEvents(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
         * @summary SearchLoyaltyRewards
         * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyRewards(body: SearchLoyaltyRewardsRequest, options?: any): AxiosPromise<SearchLoyaltyRewardsResponse> {
            return LoyaltyApiFp(configuration).searchLoyaltyRewards(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoyaltyApi - object-oriented interface
 * @export
 * @class LoyaltyApi
 * @extends {BaseAPI}
 */
export class LoyaltyApi extends BaseAPI {
    /**
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
     * @summary AccumulateLoyaltyPoints
     * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
     * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public accumulateLoyaltyPoints(accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any) {
        return LoyaltyApiFp(this.configuration).accumulateLoyaltyPoints(accountId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
     * @summary AdjustLoyaltyPoints
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
     * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public adjustLoyaltyPoints(accountId: string, body: AdjustLoyaltyPointsRequest, options?: any) {
        return LoyaltyApiFp(this.configuration).adjustLoyaltyPoints(accountId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
     * @summary CalculateLoyaltyPoints
     * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
     * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public calculateLoyaltyPoints(programId: string, body: CalculateLoyaltyPointsRequest, options?: any) {
        return LoyaltyApiFp(this.configuration).calculateLoyaltyPoints(programId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a loyalty account.
     * @summary CreateLoyaltyAccount
     * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public createLoyaltyAccount(body: CreateLoyaltyAccountRequest, options?: any) {
        return LoyaltyApiFp(this.configuration).createLoyaltyAccount(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @summary CreateLoyaltyReward
     * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public createLoyaltyReward(body: CreateLoyaltyRewardRequest, options?: any) {
        return LoyaltyApiFp(this.configuration).createLoyaltyReward(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @summary DeleteLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public deleteLoyaltyReward(rewardId: string, options?: any) {
        return LoyaltyApiFp(this.configuration).deleteLoyaltyReward(rewardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
     * @summary ListLoyaltyPrograms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public listLoyaltyPrograms(options?: any) {
        return LoyaltyApiFp(this.configuration).listLoyaltyPrograms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @summary RedeemLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
     * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public redeemLoyaltyReward(rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any) {
        return LoyaltyApiFp(this.configuration).redeemLoyaltyReward(rewardId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a loyalty account.
     * @summary RetrieveLoyaltyAccount
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public retrieveLoyaltyAccount(accountId: string, options?: any) {
        return LoyaltyApiFp(this.configuration).retrieveLoyaltyAccount(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a loyalty reward.
     * @summary RetrieveLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public retrieveLoyaltyReward(rewardId: string, options?: any) {
        return LoyaltyApiFp(this.configuration).retrieveLoyaltyReward(rewardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @summary SearchLoyaltyAccounts
     * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public searchLoyaltyAccounts(body: SearchLoyaltyAccountsRequest, options?: any) {
        return LoyaltyApiFp(this.configuration).searchLoyaltyAccounts(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * @summary SearchLoyaltyEvents
     * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public searchLoyaltyEvents(body: SearchLoyaltyEventsRequest, options?: any) {
        return LoyaltyApiFp(this.configuration).searchLoyaltyEvents(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
     * @summary SearchLoyaltyRewards
     * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    public searchLoyaltyRewards(body: SearchLoyaltyRewardsRequest, options?: any) {
        return LoyaltyApiFp(this.configuration).searchLoyaltyRewards(body, options).then((request) => request(this.axios, this.basePath));
    }
}
