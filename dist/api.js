"use strict";
// tslint:disable
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1TransactionsApi = exports.V1TransactionsApiFactory = exports.V1TransactionsApiFp = exports.V1TransactionsApiAxiosParamCreator = exports.V1LocationsApi = exports.V1LocationsApiFactory = exports.V1LocationsApiFp = exports.V1LocationsApiAxiosParamCreator = exports.V1ItemsApi = exports.V1ItemsApiFactory = exports.V1ItemsApiFp = exports.V1ItemsApiAxiosParamCreator = exports.V1EmployeesApi = exports.V1EmployeesApiFactory = exports.V1EmployeesApiFp = exports.V1EmployeesApiAxiosParamCreator = exports.TransactionsApi = exports.TransactionsApiFactory = exports.TransactionsApiFp = exports.TransactionsApiAxiosParamCreator = exports.TerminalApi = exports.TerminalApiFactory = exports.TerminalApiFp = exports.TerminalApiAxiosParamCreator = exports.TeamApi = exports.TeamApiFactory = exports.TeamApiFp = exports.TeamApiAxiosParamCreator = exports.SubscriptionsApi = exports.SubscriptionsApiFactory = exports.SubscriptionsApiFp = exports.SubscriptionsApiAxiosParamCreator = exports.RefundsApi = exports.RefundsApiFactory = exports.RefundsApiFp = exports.RefundsApiAxiosParamCreator = exports.PaymentsApi = exports.PaymentsApiFactory = exports.PaymentsApiFp = exports.PaymentsApiAxiosParamCreator = exports.OrdersApi = exports.OrdersApiFactory = exports.OrdersApiFp = exports.OrdersApiAxiosParamCreator = exports.OAuthApi = exports.OAuthApiFactory = exports.OAuthApiFp = exports.OAuthApiAxiosParamCreator = exports.MobileAuthorizationApi = exports.MobileAuthorizationApiFactory = exports.MobileAuthorizationApiFp = exports.MobileAuthorizationApiAxiosParamCreator = exports.MerchantsApi = exports.MerchantsApiFactory = exports.MerchantsApiFp = exports.MerchantsApiAxiosParamCreator = exports.LoyaltyApi = exports.LoyaltyApiFactory = exports.LoyaltyApiFp = exports.LoyaltyApiAxiosParamCreator = exports.LocationsApi = exports.LocationsApiFactory = exports.LocationsApiFp = exports.LocationsApiAxiosParamCreator = exports.LaborApi = exports.LaborApiFactory = exports.LaborApiFp = exports.LaborApiAxiosParamCreator = exports.InvoicesApi = exports.InvoicesApiFactory = exports.InvoicesApiFp = exports.InvoicesApiAxiosParamCreator = exports.InventoryApi = exports.InventoryApiFactory = exports.InventoryApiFp = exports.InventoryApiAxiosParamCreator = exports.EmployeesApi = exports.EmployeesApiFactory = exports.EmployeesApiFp = exports.EmployeesApiAxiosParamCreator = exports.DisputesApi = exports.DisputesApiFactory = exports.DisputesApiFp = exports.DisputesApiAxiosParamCreator = exports.DevicesApi = exports.DevicesApiFactory = exports.DevicesApiFp = exports.DevicesApiAxiosParamCreator = exports.CustomersApi = exports.CustomersApiFactory = exports.CustomersApiFp = exports.CustomersApiAxiosParamCreator = exports.CustomerSegmentsApi = exports.CustomerSegmentsApiFactory = exports.CustomerSegmentsApiFp = exports.CustomerSegmentsApiAxiosParamCreator = exports.CustomerGroupsApi = exports.CustomerGroupsApiFactory = exports.CustomerGroupsApiFp = exports.CustomerGroupsApiAxiosParamCreator = exports.CheckoutApi = exports.CheckoutApiFactory = exports.CheckoutApiFp = exports.CheckoutApiAxiosParamCreator = exports.CatalogApi = exports.CatalogApiFactory = exports.CatalogApiFp = exports.CatalogApiAxiosParamCreator = exports.CashDrawersApi = exports.CashDrawersApiFactory = exports.CashDrawersApiFp = exports.CashDrawersApiAxiosParamCreator = exports.BankAccountsApi = exports.BankAccountsApiFactory = exports.BankAccountsApiFp = exports.BankAccountsApiAxiosParamCreator = exports.ApplePayApi = exports.ApplePayApiFactory = exports.ApplePayApiFp = exports.ApplePayApiAxiosParamCreator = exports.Weekday = exports.V1VariationPricingType = exports.V1VariationInventoryAlertType = exports.V1UpdateOrderRequestAction = exports.V1UpdateModifierListRequestSelectionType = exports.V1TimecardEventEventType = exports.V1TenderType = exports.V1TenderEntryMethod = exports.V1TenderCardBrand = exports.V1SettlementStatus = exports.V1SettlementEntryType = exports.V1RefundType = exports.V1PaymentTaxInclusionType = exports.V1PaymentSurchargeType = exports.V1PaymentItemizationItemizationType = exports.V1PageCellPlaceholderType = exports.V1PageCellObjectType = exports.V1OrderState = exports.V1OrderHistoryEntryAction = exports.V1ModifierListSelectionType = exports.V1MerchantBusinessType = exports.V1MerchantAccountType = exports.V1ListSettlementsRequestStatus = exports.V1ListEmployeesRequestStatus = exports.V1ItemVisibility = exports.V1ItemType = exports.V1ItemColor = exports.V1FeeType = exports.V1FeeInclusionType = exports.V1FeeCalculationPhase = exports.V1FeeAdjustmentType = exports.V1EmployeeStatus = exports.V1EmployeeRolePermissions = exports.V1DiscountDiscountType = exports.V1DiscountColor = exports.V1CreateRefundRequestType = exports.V1CashDrawerShiftEventType = exports.V1CashDrawerEventEventType = exports.V1BankAccountType = exports.V1AdjustInventoryRequestAdjustmentType = exports.TransactionType = exports.TransactionProduct = exports.TenderType = exports.TenderCardDetailsStatus = exports.TenderCardDetailsEntryMethod = exports.TeamMemberStatus = exports.TeamMemberAssignedLocationsAssignmentType = exports.TaxInclusionType = exports.TaxCalculationPhase = exports.SubscriptionStatus = exports.SubscriptionEventSubscriptionEventType = exports.SubscriptionCadence = exports.SortOrder = exports.ShiftWorkdayMatcher = exports.ShiftStatus = exports.ShiftSortField = exports.ShiftFilterStatus = exports.SearchOrdersSortField = exports.SearchCatalogItemsRequestStockLevel = exports.RegisterDomainResponseStatus = exports.RefundStatus = exports.ProductType = exports.Product = exports.OrderState = exports.OrderServiceChargeCalculationPhase = exports.OrderLineItemTaxType = exports.OrderLineItemTaxScope = exports.OrderLineItemDiscountType = exports.OrderLineItemDiscountScope = exports.OrderFulfillmentType = exports.OrderFulfillmentState = exports.OrderFulfillmentPickupDetailsScheduleType = exports.MerchantStatus = exports.MeasurementUnitWeight = exports.MeasurementUnitVolume = exports.MeasurementUnitUnitType = exports.MeasurementUnitTime = exports.MeasurementUnitLength = exports.MeasurementUnitGeneric = exports.MeasurementUnitArea = exports.LoyaltyRewardStatus = exports.LoyaltyProgramStatus = exports.LoyaltyProgramRewardDefinitionType = exports.LoyaltyProgramRewardDefinitionScope = exports.LoyaltyProgramAccrualRuleType = exports.LoyaltyEventType = exports.LoyaltyEventSource = exports.LoyaltyAccountMappingType = exports.LocationType = exports.LocationStatus = exports.LocationCapability = exports.JobAssignmentPayType = exports.InvoiceStatus = exports.InvoiceSortField = exports.InvoiceRequestType = exports.InvoiceRequestMethod = exports.InvoicePaymentReminderStatus = exports.InventoryState = exports.InventoryChangeType = exports.InventoryAlertType = exports.InlineTypes = exports.ExcludeStrategy = exports.ErrorCode = exports.ErrorCategory = exports.EmployeeStatus = exports.EcomVisibility = exports.DisputeState = exports.DisputeReason = exports.DisputeEvidenceType = exports.DeviceCodeStatus = exports.DayOfWeek = exports.CustomerSortField = exports.CustomerInclusionExclusion = exports.CustomerCreationSource = exports.Currency = exports.Country = exports.CatalogQuickAmountsSettingsOption = exports.CatalogQuickAmountType = exports.CatalogPricingType = exports.CatalogObjectType = exports.CatalogModifierListSelectionType = exports.CatalogItemProductType = exports.CatalogDiscountType = exports.CatalogDiscountModifyTaxBasis = exports.CatalogCustomAttributeDefinitionType = exports.CatalogCustomAttributeDefinitionSellerVisibility = exports.CatalogCustomAttributeDefinitionAppVisibility = exports.CashDrawerShiftState = exports.CashDrawerEventType = exports.CardType = exports.CardSquareProduct = exports.CardPrepaidType = exports.CardBrand = exports.BankAccountType = exports.BankAccountStatus = exports.ActionCancelReason = void 0;
var globalImportUrl = require("url");
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
var ActionCancelReason;
(function (ActionCancelReason) {
    ActionCancelReason["BUYERCANCELED"] = "BUYER_CANCELED";
    ActionCancelReason["SELLERCANCELED"] = "SELLER_CANCELED";
    ActionCancelReason["TIMEDOUT"] = "TIMED_OUT";
})(ActionCancelReason = exports.ActionCancelReason || (exports.ActionCancelReason = {}));
/**
 * Indicates the current verification status of a `BankAccount` object.
 * @export
 * @enum {string}
 */
var BankAccountStatus;
(function (BankAccountStatus) {
    BankAccountStatus["VERIFICATIONINPROGRESS"] = "VERIFICATION_IN_PROGRESS";
    BankAccountStatus["VERIFIED"] = "VERIFIED";
    BankAccountStatus["DISABLED"] = "DISABLED";
})(BankAccountStatus = exports.BankAccountStatus || (exports.BankAccountStatus = {}));
/**
 * Indicates the financial purpose of the bank account.
 * @export
 * @enum {string}
 */
var BankAccountType;
(function (BankAccountType) {
    BankAccountType["CHECKING"] = "CHECKING";
    BankAccountType["SAVINGS"] = "SAVINGS";
    BankAccountType["INVESTMENT"] = "INVESTMENT";
    BankAccountType["OTHER"] = "OTHER";
    BankAccountType["BUSINESSCHECKING"] = "BUSINESS_CHECKING";
})(BankAccountType = exports.BankAccountType || (exports.BankAccountType = {}));
/**
 * Indicates a card\'s brand, such as `VISA` or `MASTERCARD`.
 * @export
 * @enum {string}
 */
var CardBrand;
(function (CardBrand) {
    CardBrand["OTHERBRAND"] = "OTHER_BRAND";
    CardBrand["VISA"] = "VISA";
    CardBrand["MASTERCARD"] = "MASTERCARD";
    CardBrand["AMERICANEXPRESS"] = "AMERICAN_EXPRESS";
    CardBrand["DISCOVER"] = "DISCOVER";
    CardBrand["DISCOVERDINERS"] = "DISCOVER_DINERS";
    CardBrand["JCB"] = "JCB";
    CardBrand["CHINAUNIONPAY"] = "CHINA_UNIONPAY";
    CardBrand["SQUAREGIFTCARD"] = "SQUARE_GIFT_CARD";
    CardBrand["SQUARECAPITALCARD"] = "SQUARE_CAPITAL_CARD";
    CardBrand["INTERAC"] = "INTERAC";
    CardBrand["EFTPOS"] = "EFTPOS";
    CardBrand["FELICA"] = "FELICA";
})(CardBrand = exports.CardBrand || (exports.CardBrand = {}));
/**
 * Indicates a card\'s prepaid type, such as `NOT_PREPAID` or `PREPAID`.
 * @export
 * @enum {string}
 */
var CardPrepaidType;
(function (CardPrepaidType) {
    CardPrepaidType["UNKNOWNPREPAIDTYPE"] = "UNKNOWN_PREPAID_TYPE";
    CardPrepaidType["NOTPREPAID"] = "NOT_PREPAID";
    CardPrepaidType["PREPAID"] = "PREPAID";
})(CardPrepaidType = exports.CardPrepaidType || (exports.CardPrepaidType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var CardSquareProduct;
(function (CardSquareProduct) {
    CardSquareProduct["UNKNOWNSQUAREPRODUCT"] = "UNKNOWN_SQUARE_PRODUCT";
    CardSquareProduct["CONNECTAPI"] = "CONNECT_API";
    CardSquareProduct["DASHBOARD"] = "DASHBOARD";
    CardSquareProduct["REGISTERCLIENT"] = "REGISTER_CLIENT";
    CardSquareProduct["BUYERDASHBOARD"] = "BUYER_DASHBOARD";
    CardSquareProduct["WEB"] = "WEB";
    CardSquareProduct["INVOICES"] = "INVOICES";
    CardSquareProduct["GIFTCARD"] = "GIFT_CARD";
    CardSquareProduct["VIRTUALTERMINAL"] = "VIRTUAL_TERMINAL";
    CardSquareProduct["READERSDK"] = "READER_SDK";
})(CardSquareProduct = exports.CardSquareProduct || (exports.CardSquareProduct = {}));
/**
 * Indicates a card\'s type, such as `CREDIT` or `DEBIT`.
 * @export
 * @enum {string}
 */
var CardType;
(function (CardType) {
    CardType["UNKNOWNCARDTYPE"] = "UNKNOWN_CARD_TYPE";
    CardType["CREDIT"] = "CREDIT";
    CardType["DEBIT"] = "DEBIT";
})(CardType = exports.CardType || (exports.CardType = {}));
/**
 * The types of events on a CashDrawerShift. Each event type represents an employee action on the actual cash drawer represented by a CashDrawerShift.
 * @export
 * @enum {string}
 */
var CashDrawerEventType;
(function (CashDrawerEventType) {
    CashDrawerEventType["NOSALE"] = "NO_SALE";
    CashDrawerEventType["CASHTENDERPAYMENT"] = "CASH_TENDER_PAYMENT";
    CashDrawerEventType["OTHERTENDERPAYMENT"] = "OTHER_TENDER_PAYMENT";
    CashDrawerEventType["CASHTENDERCANCELLEDPAYMENT"] = "CASH_TENDER_CANCELLED_PAYMENT";
    CashDrawerEventType["OTHERTENDERCANCELLEDPAYMENT"] = "OTHER_TENDER_CANCELLED_PAYMENT";
    CashDrawerEventType["CASHTENDERREFUND"] = "CASH_TENDER_REFUND";
    CashDrawerEventType["OTHERTENDERREFUND"] = "OTHER_TENDER_REFUND";
    CashDrawerEventType["PAIDIN"] = "PAID_IN";
    CashDrawerEventType["PAIDOUT"] = "PAID_OUT";
})(CashDrawerEventType = exports.CashDrawerEventType || (exports.CashDrawerEventType = {}));
/**
 * The current state of a cash drawer shift.
 * @export
 * @enum {string}
 */
var CashDrawerShiftState;
(function (CashDrawerShiftState) {
    CashDrawerShiftState["OPEN"] = "OPEN";
    CashDrawerShiftState["ENDED"] = "ENDED";
    CashDrawerShiftState["CLOSED"] = "CLOSED";
})(CashDrawerShiftState = exports.CashDrawerShiftState || (exports.CashDrawerShiftState = {}));
/**
 * Defines the visibility of a custom attribute to applications other than their creating application.
 * @export
 * @enum {string}
 */
var CatalogCustomAttributeDefinitionAppVisibility;
(function (CatalogCustomAttributeDefinitionAppVisibility) {
    CatalogCustomAttributeDefinitionAppVisibility["HIDDEN"] = "APP_VISIBILITY_HIDDEN";
    CatalogCustomAttributeDefinitionAppVisibility["READONLY"] = "APP_VISIBILITY_READ_ONLY";
    CatalogCustomAttributeDefinitionAppVisibility["READWRITEVALUES"] = "APP_VISIBILITY_READ_WRITE_VALUES";
})(CatalogCustomAttributeDefinitionAppVisibility = exports.CatalogCustomAttributeDefinitionAppVisibility || (exports.CatalogCustomAttributeDefinitionAppVisibility = {}));
/**
 * Defines the visibility of a custom attribute to sellers in Square client applications, Square APIs or in Square UIs (including Square Point of Sale applications and Square Dashboard).
 * @export
 * @enum {string}
 */
var CatalogCustomAttributeDefinitionSellerVisibility;
(function (CatalogCustomAttributeDefinitionSellerVisibility) {
    CatalogCustomAttributeDefinitionSellerVisibility["HIDDEN"] = "SELLER_VISIBILITY_HIDDEN";
    CatalogCustomAttributeDefinitionSellerVisibility["READWRITEVALUES"] = "SELLER_VISIBILITY_READ_WRITE_VALUES";
})(CatalogCustomAttributeDefinitionSellerVisibility = exports.CatalogCustomAttributeDefinitionSellerVisibility || (exports.CatalogCustomAttributeDefinitionSellerVisibility = {}));
/**
 * Defines the possible types for a custom attribute.
 * @export
 * @enum {string}
 */
var CatalogCustomAttributeDefinitionType;
(function (CatalogCustomAttributeDefinitionType) {
    CatalogCustomAttributeDefinitionType["STRING"] = "STRING";
    CatalogCustomAttributeDefinitionType["BOOLEAN"] = "BOOLEAN";
    CatalogCustomAttributeDefinitionType["NUMBER"] = "NUMBER";
    CatalogCustomAttributeDefinitionType["SELECTION"] = "SELECTION";
})(CatalogCustomAttributeDefinitionType = exports.CatalogCustomAttributeDefinitionType || (exports.CatalogCustomAttributeDefinitionType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var CatalogDiscountModifyTaxBasis;
(function (CatalogDiscountModifyTaxBasis) {
    CatalogDiscountModifyTaxBasis["MODIFYTAXBASIS"] = "MODIFY_TAX_BASIS";
    CatalogDiscountModifyTaxBasis["DONOTMODIFYTAXBASIS"] = "DO_NOT_MODIFY_TAX_BASIS";
})(CatalogDiscountModifyTaxBasis = exports.CatalogDiscountModifyTaxBasis || (exports.CatalogDiscountModifyTaxBasis = {}));
/**
 * How to apply a CatalogDiscount to a CatalogItem.
 * @export
 * @enum {string}
 */
var CatalogDiscountType;
(function (CatalogDiscountType) {
    CatalogDiscountType["FIXEDPERCENTAGE"] = "FIXED_PERCENTAGE";
    CatalogDiscountType["FIXEDAMOUNT"] = "FIXED_AMOUNT";
    CatalogDiscountType["VARIABLEPERCENTAGE"] = "VARIABLE_PERCENTAGE";
    CatalogDiscountType["VARIABLEAMOUNT"] = "VARIABLE_AMOUNT";
})(CatalogDiscountType = exports.CatalogDiscountType || (exports.CatalogDiscountType = {}));
/**
 * The type of a CatalogItem. Connect V2 only allows the creation of `REGULAR` or `APPOINTMENTS_SERVICE` items.
 * @export
 * @enum {string}
 */
var CatalogItemProductType;
(function (CatalogItemProductType) {
    CatalogItemProductType["REGULAR"] = "REGULAR";
    CatalogItemProductType["GIFTCARD"] = "GIFT_CARD";
    CatalogItemProductType["APPOINTMENTSSERVICE"] = "APPOINTMENTS_SERVICE";
})(CatalogItemProductType = exports.CatalogItemProductType || (exports.CatalogItemProductType = {}));
/**
 * Indicates whether a CatalogModifierList supports multiple selections.
 * @export
 * @enum {string}
 */
var CatalogModifierListSelectionType;
(function (CatalogModifierListSelectionType) {
    CatalogModifierListSelectionType["SINGLE"] = "SINGLE";
    CatalogModifierListSelectionType["MULTIPLE"] = "MULTIPLE";
})(CatalogModifierListSelectionType = exports.CatalogModifierListSelectionType || (exports.CatalogModifierListSelectionType = {}));
/**
 * Possible types of CatalogObjects returned from the Catalog, each containing type-specific properties in the `*_data` field corresponding to the object type.
 * @export
 * @enum {string}
 */
var CatalogObjectType;
(function (CatalogObjectType) {
    CatalogObjectType["ITEM"] = "ITEM";
    CatalogObjectType["IMAGE"] = "IMAGE";
    CatalogObjectType["CATEGORY"] = "CATEGORY";
    CatalogObjectType["ITEMVARIATION"] = "ITEM_VARIATION";
    CatalogObjectType["TAX"] = "TAX";
    CatalogObjectType["DISCOUNT"] = "DISCOUNT";
    CatalogObjectType["MODIFIERLIST"] = "MODIFIER_LIST";
    CatalogObjectType["MODIFIER"] = "MODIFIER";
    CatalogObjectType["PRICINGRULE"] = "PRICING_RULE";
    CatalogObjectType["PRODUCTSET"] = "PRODUCT_SET";
    CatalogObjectType["TIMEPERIOD"] = "TIME_PERIOD";
    CatalogObjectType["MEASUREMENTUNIT"] = "MEASUREMENT_UNIT";
    CatalogObjectType["SUBSCRIPTIONPLAN"] = "SUBSCRIPTION_PLAN";
    CatalogObjectType["ITEMOPTION"] = "ITEM_OPTION";
    CatalogObjectType["ITEMOPTIONVAL"] = "ITEM_OPTION_VAL";
    CatalogObjectType["CUSTOMATTRIBUTEDEFINITION"] = "CUSTOM_ATTRIBUTE_DEFINITION";
    CatalogObjectType["QUICKAMOUNTSSETTINGS"] = "QUICK_AMOUNTS_SETTINGS";
})(CatalogObjectType = exports.CatalogObjectType || (exports.CatalogObjectType = {}));
/**
 * Indicates whether the price of a CatalogItemVariation should be entered manually at the time of sale.
 * @export
 * @enum {string}
 */
var CatalogPricingType;
(function (CatalogPricingType) {
    CatalogPricingType["FIXEDPRICING"] = "FIXED_PRICING";
    CatalogPricingType["VARIABLEPRICING"] = "VARIABLE_PRICING";
})(CatalogPricingType = exports.CatalogPricingType || (exports.CatalogPricingType = {}));
/**
 * Determines the type of a specific Quick Amount.
 * @export
 * @enum {string}
 */
var CatalogQuickAmountType;
(function (CatalogQuickAmountType) {
    CatalogQuickAmountType["MANUAL"] = "QUICK_AMOUNT_TYPE_MANUAL";
    CatalogQuickAmountType["AUTO"] = "QUICK_AMOUNT_TYPE_AUTO";
})(CatalogQuickAmountType = exports.CatalogQuickAmountType || (exports.CatalogQuickAmountType = {}));
/**
 * Determines a seller\'s option on Quick Amounts feature.
 * @export
 * @enum {string}
 */
var CatalogQuickAmountsSettingsOption;
(function (CatalogQuickAmountsSettingsOption) {
    CatalogQuickAmountsSettingsOption["DISABLED"] = "DISABLED";
    CatalogQuickAmountsSettingsOption["MANUAL"] = "MANUAL";
    CatalogQuickAmountsSettingsOption["AUTO"] = "AUTO";
})(CatalogQuickAmountsSettingsOption = exports.CatalogQuickAmountsSettingsOption || (exports.CatalogQuickAmountsSettingsOption = {}));
/**
 * Indicates the country associated with another entity, such as a business. Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
 * @export
 * @enum {string}
 */
var Country;
(function (Country) {
    Country["ZZ"] = "ZZ";
    Country["AD"] = "AD";
    Country["AE"] = "AE";
    Country["AF"] = "AF";
    Country["AG"] = "AG";
    Country["AI"] = "AI";
    Country["AL"] = "AL";
    Country["AM"] = "AM";
    Country["AO"] = "AO";
    Country["AQ"] = "AQ";
    Country["AR"] = "AR";
    Country["AS"] = "AS";
    Country["AT"] = "AT";
    Country["AU"] = "AU";
    Country["AW"] = "AW";
    Country["AX"] = "AX";
    Country["AZ"] = "AZ";
    Country["BA"] = "BA";
    Country["BB"] = "BB";
    Country["BD"] = "BD";
    Country["BE"] = "BE";
    Country["BF"] = "BF";
    Country["BG"] = "BG";
    Country["BH"] = "BH";
    Country["BI"] = "BI";
    Country["BJ"] = "BJ";
    Country["BL"] = "BL";
    Country["BM"] = "BM";
    Country["BN"] = "BN";
    Country["BO"] = "BO";
    Country["BQ"] = "BQ";
    Country["BR"] = "BR";
    Country["BS"] = "BS";
    Country["BT"] = "BT";
    Country["BV"] = "BV";
    Country["BW"] = "BW";
    Country["BY"] = "BY";
    Country["BZ"] = "BZ";
    Country["CA"] = "CA";
    Country["CC"] = "CC";
    Country["CD"] = "CD";
    Country["CF"] = "CF";
    Country["CG"] = "CG";
    Country["CH"] = "CH";
    Country["CI"] = "CI";
    Country["CK"] = "CK";
    Country["CL"] = "CL";
    Country["CM"] = "CM";
    Country["CN"] = "CN";
    Country["CO"] = "CO";
    Country["CR"] = "CR";
    Country["CU"] = "CU";
    Country["CV"] = "CV";
    Country["CW"] = "CW";
    Country["CX"] = "CX";
    Country["CY"] = "CY";
    Country["CZ"] = "CZ";
    Country["DE"] = "DE";
    Country["DJ"] = "DJ";
    Country["DK"] = "DK";
    Country["DM"] = "DM";
    Country["DO"] = "DO";
    Country["DZ"] = "DZ";
    Country["EC"] = "EC";
    Country["EE"] = "EE";
    Country["EG"] = "EG";
    Country["EH"] = "EH";
    Country["ER"] = "ER";
    Country["ES"] = "ES";
    Country["ET"] = "ET";
    Country["FI"] = "FI";
    Country["FJ"] = "FJ";
    Country["FK"] = "FK";
    Country["FM"] = "FM";
    Country["FO"] = "FO";
    Country["FR"] = "FR";
    Country["GA"] = "GA";
    Country["GB"] = "GB";
    Country["GD"] = "GD";
    Country["GE"] = "GE";
    Country["GF"] = "GF";
    Country["GG"] = "GG";
    Country["GH"] = "GH";
    Country["GI"] = "GI";
    Country["GL"] = "GL";
    Country["GM"] = "GM";
    Country["GN"] = "GN";
    Country["GP"] = "GP";
    Country["GQ"] = "GQ";
    Country["GR"] = "GR";
    Country["GS"] = "GS";
    Country["GT"] = "GT";
    Country["GU"] = "GU";
    Country["GW"] = "GW";
    Country["GY"] = "GY";
    Country["HK"] = "HK";
    Country["HM"] = "HM";
    Country["HN"] = "HN";
    Country["HR"] = "HR";
    Country["HT"] = "HT";
    Country["HU"] = "HU";
    Country["ID"] = "ID";
    Country["IE"] = "IE";
    Country["IL"] = "IL";
    Country["IM"] = "IM";
    Country["IN"] = "IN";
    Country["IO"] = "IO";
    Country["IQ"] = "IQ";
    Country["IR"] = "IR";
    Country["IS"] = "IS";
    Country["IT"] = "IT";
    Country["JE"] = "JE";
    Country["JM"] = "JM";
    Country["JO"] = "JO";
    Country["JP"] = "JP";
    Country["KE"] = "KE";
    Country["KG"] = "KG";
    Country["KH"] = "KH";
    Country["KI"] = "KI";
    Country["KM"] = "KM";
    Country["KN"] = "KN";
    Country["KP"] = "KP";
    Country["KR"] = "KR";
    Country["KW"] = "KW";
    Country["KY"] = "KY";
    Country["KZ"] = "KZ";
    Country["LA"] = "LA";
    Country["LB"] = "LB";
    Country["LC"] = "LC";
    Country["LI"] = "LI";
    Country["LK"] = "LK";
    Country["LR"] = "LR";
    Country["LS"] = "LS";
    Country["LT"] = "LT";
    Country["LU"] = "LU";
    Country["LV"] = "LV";
    Country["LY"] = "LY";
    Country["MA"] = "MA";
    Country["MC"] = "MC";
    Country["MD"] = "MD";
    Country["ME"] = "ME";
    Country["MF"] = "MF";
    Country["MG"] = "MG";
    Country["MH"] = "MH";
    Country["MK"] = "MK";
    Country["ML"] = "ML";
    Country["MM"] = "MM";
    Country["MN"] = "MN";
    Country["MO"] = "MO";
    Country["MP"] = "MP";
    Country["MQ"] = "MQ";
    Country["MR"] = "MR";
    Country["MS"] = "MS";
    Country["MT"] = "MT";
    Country["MU"] = "MU";
    Country["MV"] = "MV";
    Country["MW"] = "MW";
    Country["MX"] = "MX";
    Country["MY"] = "MY";
    Country["MZ"] = "MZ";
    Country["NA"] = "NA";
    Country["NC"] = "NC";
    Country["NE"] = "NE";
    Country["NF"] = "NF";
    Country["NG"] = "NG";
    Country["NI"] = "NI";
    Country["NL"] = "NL";
    Country["NO"] = "NO";
    Country["NP"] = "NP";
    Country["NR"] = "NR";
    Country["NU"] = "NU";
    Country["NZ"] = "NZ";
    Country["OM"] = "OM";
    Country["PA"] = "PA";
    Country["PE"] = "PE";
    Country["PF"] = "PF";
    Country["PG"] = "PG";
    Country["PH"] = "PH";
    Country["PK"] = "PK";
    Country["PL"] = "PL";
    Country["PM"] = "PM";
    Country["PN"] = "PN";
    Country["PR"] = "PR";
    Country["PS"] = "PS";
    Country["PT"] = "PT";
    Country["PW"] = "PW";
    Country["PY"] = "PY";
    Country["QA"] = "QA";
    Country["RE"] = "RE";
    Country["RO"] = "RO";
    Country["RS"] = "RS";
    Country["RU"] = "RU";
    Country["RW"] = "RW";
    Country["SA"] = "SA";
    Country["SB"] = "SB";
    Country["SC"] = "SC";
    Country["SD"] = "SD";
    Country["SE"] = "SE";
    Country["SG"] = "SG";
    Country["SH"] = "SH";
    Country["SI"] = "SI";
    Country["SJ"] = "SJ";
    Country["SK"] = "SK";
    Country["SL"] = "SL";
    Country["SM"] = "SM";
    Country["SN"] = "SN";
    Country["SO"] = "SO";
    Country["SR"] = "SR";
    Country["SS"] = "SS";
    Country["ST"] = "ST";
    Country["SV"] = "SV";
    Country["SX"] = "SX";
    Country["SY"] = "SY";
    Country["SZ"] = "SZ";
    Country["TC"] = "TC";
    Country["TD"] = "TD";
    Country["TF"] = "TF";
    Country["TG"] = "TG";
    Country["TH"] = "TH";
    Country["TJ"] = "TJ";
    Country["TK"] = "TK";
    Country["TL"] = "TL";
    Country["TM"] = "TM";
    Country["TN"] = "TN";
    Country["TO"] = "TO";
    Country["TR"] = "TR";
    Country["TT"] = "TT";
    Country["TV"] = "TV";
    Country["TW"] = "TW";
    Country["TZ"] = "TZ";
    Country["UA"] = "UA";
    Country["UG"] = "UG";
    Country["UM"] = "UM";
    Country["US"] = "US";
    Country["UY"] = "UY";
    Country["UZ"] = "UZ";
    Country["VA"] = "VA";
    Country["VC"] = "VC";
    Country["VE"] = "VE";
    Country["VG"] = "VG";
    Country["VI"] = "VI";
    Country["VN"] = "VN";
    Country["VU"] = "VU";
    Country["WF"] = "WF";
    Country["WS"] = "WS";
    Country["YE"] = "YE";
    Country["YT"] = "YT";
    Country["ZA"] = "ZA";
    Country["ZM"] = "ZM";
    Country["ZW"] = "ZW";
})(Country = exports.Country || (exports.Country = {}));
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
 * @export
 * @enum {string}
 */
var Currency;
(function (Currency) {
    Currency["UNKNOWNCURRENCY"] = "UNKNOWN_CURRENCY";
    Currency["AED"] = "AED";
    Currency["AFN"] = "AFN";
    Currency["ALL"] = "ALL";
    Currency["AMD"] = "AMD";
    Currency["ANG"] = "ANG";
    Currency["AOA"] = "AOA";
    Currency["ARS"] = "ARS";
    Currency["AUD"] = "AUD";
    Currency["AWG"] = "AWG";
    Currency["AZN"] = "AZN";
    Currency["BAM"] = "BAM";
    Currency["BBD"] = "BBD";
    Currency["BDT"] = "BDT";
    Currency["BGN"] = "BGN";
    Currency["BHD"] = "BHD";
    Currency["BIF"] = "BIF";
    Currency["BMD"] = "BMD";
    Currency["BND"] = "BND";
    Currency["BOB"] = "BOB";
    Currency["BOV"] = "BOV";
    Currency["BRL"] = "BRL";
    Currency["BSD"] = "BSD";
    Currency["BTN"] = "BTN";
    Currency["BWP"] = "BWP";
    Currency["BYR"] = "BYR";
    Currency["BZD"] = "BZD";
    Currency["CAD"] = "CAD";
    Currency["CDF"] = "CDF";
    Currency["CHE"] = "CHE";
    Currency["CHF"] = "CHF";
    Currency["CHW"] = "CHW";
    Currency["CLF"] = "CLF";
    Currency["CLP"] = "CLP";
    Currency["CNY"] = "CNY";
    Currency["COP"] = "COP";
    Currency["COU"] = "COU";
    Currency["CRC"] = "CRC";
    Currency["CUC"] = "CUC";
    Currency["CUP"] = "CUP";
    Currency["CVE"] = "CVE";
    Currency["CZK"] = "CZK";
    Currency["DJF"] = "DJF";
    Currency["DKK"] = "DKK";
    Currency["DOP"] = "DOP";
    Currency["DZD"] = "DZD";
    Currency["EGP"] = "EGP";
    Currency["ERN"] = "ERN";
    Currency["ETB"] = "ETB";
    Currency["EUR"] = "EUR";
    Currency["FJD"] = "FJD";
    Currency["FKP"] = "FKP";
    Currency["GBP"] = "GBP";
    Currency["GEL"] = "GEL";
    Currency["GHS"] = "GHS";
    Currency["GIP"] = "GIP";
    Currency["GMD"] = "GMD";
    Currency["GNF"] = "GNF";
    Currency["GTQ"] = "GTQ";
    Currency["GYD"] = "GYD";
    Currency["HKD"] = "HKD";
    Currency["HNL"] = "HNL";
    Currency["HRK"] = "HRK";
    Currency["HTG"] = "HTG";
    Currency["HUF"] = "HUF";
    Currency["IDR"] = "IDR";
    Currency["ILS"] = "ILS";
    Currency["INR"] = "INR";
    Currency["IQD"] = "IQD";
    Currency["IRR"] = "IRR";
    Currency["ISK"] = "ISK";
    Currency["JMD"] = "JMD";
    Currency["JOD"] = "JOD";
    Currency["JPY"] = "JPY";
    Currency["KES"] = "KES";
    Currency["KGS"] = "KGS";
    Currency["KHR"] = "KHR";
    Currency["KMF"] = "KMF";
    Currency["KPW"] = "KPW";
    Currency["KRW"] = "KRW";
    Currency["KWD"] = "KWD";
    Currency["KYD"] = "KYD";
    Currency["KZT"] = "KZT";
    Currency["LAK"] = "LAK";
    Currency["LBP"] = "LBP";
    Currency["LKR"] = "LKR";
    Currency["LRD"] = "LRD";
    Currency["LSL"] = "LSL";
    Currency["LTL"] = "LTL";
    Currency["LVL"] = "LVL";
    Currency["LYD"] = "LYD";
    Currency["MAD"] = "MAD";
    Currency["MDL"] = "MDL";
    Currency["MGA"] = "MGA";
    Currency["MKD"] = "MKD";
    Currency["MMK"] = "MMK";
    Currency["MNT"] = "MNT";
    Currency["MOP"] = "MOP";
    Currency["MRO"] = "MRO";
    Currency["MUR"] = "MUR";
    Currency["MVR"] = "MVR";
    Currency["MWK"] = "MWK";
    Currency["MXN"] = "MXN";
    Currency["MXV"] = "MXV";
    Currency["MYR"] = "MYR";
    Currency["MZN"] = "MZN";
    Currency["NAD"] = "NAD";
    Currency["NGN"] = "NGN";
    Currency["NIO"] = "NIO";
    Currency["NOK"] = "NOK";
    Currency["NPR"] = "NPR";
    Currency["NZD"] = "NZD";
    Currency["OMR"] = "OMR";
    Currency["PAB"] = "PAB";
    Currency["PEN"] = "PEN";
    Currency["PGK"] = "PGK";
    Currency["PHP"] = "PHP";
    Currency["PKR"] = "PKR";
    Currency["PLN"] = "PLN";
    Currency["PYG"] = "PYG";
    Currency["QAR"] = "QAR";
    Currency["RON"] = "RON";
    Currency["RSD"] = "RSD";
    Currency["RUB"] = "RUB";
    Currency["RWF"] = "RWF";
    Currency["SAR"] = "SAR";
    Currency["SBD"] = "SBD";
    Currency["SCR"] = "SCR";
    Currency["SDG"] = "SDG";
    Currency["SEK"] = "SEK";
    Currency["SGD"] = "SGD";
    Currency["SHP"] = "SHP";
    Currency["SLL"] = "SLL";
    Currency["SOS"] = "SOS";
    Currency["SRD"] = "SRD";
    Currency["SSP"] = "SSP";
    Currency["STD"] = "STD";
    Currency["SVC"] = "SVC";
    Currency["SYP"] = "SYP";
    Currency["SZL"] = "SZL";
    Currency["THB"] = "THB";
    Currency["TJS"] = "TJS";
    Currency["TMT"] = "TMT";
    Currency["TND"] = "TND";
    Currency["TOP"] = "TOP";
    Currency["TRY"] = "TRY";
    Currency["TTD"] = "TTD";
    Currency["TWD"] = "TWD";
    Currency["TZS"] = "TZS";
    Currency["UAH"] = "UAH";
    Currency["UGX"] = "UGX";
    Currency["USD"] = "USD";
    Currency["USN"] = "USN";
    Currency["USS"] = "USS";
    Currency["UYI"] = "UYI";
    Currency["UYU"] = "UYU";
    Currency["UZS"] = "UZS";
    Currency["VEF"] = "VEF";
    Currency["VND"] = "VND";
    Currency["VUV"] = "VUV";
    Currency["WST"] = "WST";
    Currency["XAF"] = "XAF";
    Currency["XAG"] = "XAG";
    Currency["XAU"] = "XAU";
    Currency["XBA"] = "XBA";
    Currency["XBB"] = "XBB";
    Currency["XBC"] = "XBC";
    Currency["XBD"] = "XBD";
    Currency["XCD"] = "XCD";
    Currency["XDR"] = "XDR";
    Currency["XOF"] = "XOF";
    Currency["XPD"] = "XPD";
    Currency["XPF"] = "XPF";
    Currency["XPT"] = "XPT";
    Currency["XTS"] = "XTS";
    Currency["XXX"] = "XXX";
    Currency["YER"] = "YER";
    Currency["ZAR"] = "ZAR";
    Currency["ZMK"] = "ZMK";
    Currency["ZMW"] = "ZMW";
    Currency["BTC"] = "BTC";
})(Currency = exports.Currency || (exports.Currency = {}));
/**
 * Indicates the method used to create the customer profile.
 * @export
 * @enum {string}
 */
var CustomerCreationSource;
(function (CustomerCreationSource) {
    CustomerCreationSource["OTHER"] = "OTHER";
    CustomerCreationSource["APPOINTMENTS"] = "APPOINTMENTS";
    CustomerCreationSource["COUPON"] = "COUPON";
    CustomerCreationSource["DELETIONRECOVERY"] = "DELETION_RECOVERY";
    CustomerCreationSource["DIRECTORY"] = "DIRECTORY";
    CustomerCreationSource["EGIFTING"] = "EGIFTING";
    CustomerCreationSource["EMAILCOLLECTION"] = "EMAIL_COLLECTION";
    CustomerCreationSource["FEEDBACK"] = "FEEDBACK";
    CustomerCreationSource["IMPORT"] = "IMPORT";
    CustomerCreationSource["INVOICES"] = "INVOICES";
    CustomerCreationSource["LOYALTY"] = "LOYALTY";
    CustomerCreationSource["MARKETING"] = "MARKETING";
    CustomerCreationSource["MERGE"] = "MERGE";
    CustomerCreationSource["ONLINESTORE"] = "ONLINE_STORE";
    CustomerCreationSource["INSTANTPROFILE"] = "INSTANT_PROFILE";
    CustomerCreationSource["TERMINAL"] = "TERMINAL";
    CustomerCreationSource["THIRDPARTY"] = "THIRD_PARTY";
    CustomerCreationSource["THIRDPARTYIMPORT"] = "THIRD_PARTY_IMPORT";
    CustomerCreationSource["UNMERGERECOVERY"] = "UNMERGE_RECOVERY";
})(CustomerCreationSource = exports.CustomerCreationSource || (exports.CustomerCreationSource = {}));
/**
 * Indicates whether customers should be included in, or excluded from, the result set when they match the filtering criteria.
 * @export
 * @enum {string}
 */
var CustomerInclusionExclusion;
(function (CustomerInclusionExclusion) {
    CustomerInclusionExclusion["INCLUDE"] = "INCLUDE";
    CustomerInclusionExclusion["EXCLUDE"] = "EXCLUDE";
})(CustomerInclusionExclusion = exports.CustomerInclusionExclusion || (exports.CustomerInclusionExclusion = {}));
/**
 * Specifies customer attributes as the sort key to customer profiles returned from a search.
 * @export
 * @enum {string}
 */
var CustomerSortField;
(function (CustomerSortField) {
    CustomerSortField["DEFAULT"] = "DEFAULT";
    CustomerSortField["CREATEDAT"] = "CREATED_AT";
})(CustomerSortField = exports.CustomerSortField || (exports.CustomerSortField = {}));
/**
 * Indicates the specific day  of the week.
 * @export
 * @enum {string}
 */
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["SUN"] = "SUN";
    DayOfWeek["MON"] = "MON";
    DayOfWeek["TUE"] = "TUE";
    DayOfWeek["WED"] = "WED";
    DayOfWeek["THU"] = "THU";
    DayOfWeek["FRI"] = "FRI";
    DayOfWeek["SAT"] = "SAT";
})(DayOfWeek = exports.DayOfWeek || (exports.DayOfWeek = {}));
/**
 * DeviceCode.Status enum.
 * @export
 * @enum {string}
 */
var DeviceCodeStatus;
(function (DeviceCodeStatus) {
    DeviceCodeStatus["UNKNOWN"] = "UNKNOWN";
    DeviceCodeStatus["UNPAIRED"] = "UNPAIRED";
    DeviceCodeStatus["PAIRED"] = "PAIRED";
    DeviceCodeStatus["EXPIRED"] = "EXPIRED";
})(DeviceCodeStatus = exports.DeviceCodeStatus || (exports.DeviceCodeStatus = {}));
/**
 * Type of the dispute evidence.
 * @export
 * @enum {string}
 */
var DisputeEvidenceType;
(function (DisputeEvidenceType) {
    DisputeEvidenceType["GENERICEVIDENCE"] = "GENERIC_EVIDENCE";
    DisputeEvidenceType["ONLINEORAPPACCESSLOG"] = "ONLINE_OR_APP_ACCESS_LOG";
    DisputeEvidenceType["AUTHORIZATIONDOCUMENTATION"] = "AUTHORIZATION_DOCUMENTATION";
    DisputeEvidenceType["CANCELLATIONORREFUNDDOCUMENTATION"] = "CANCELLATION_OR_REFUND_DOCUMENTATION";
    DisputeEvidenceType["CARDHOLDERCOMMUNICATION"] = "CARDHOLDER_COMMUNICATION";
    DisputeEvidenceType["CARDHOLDERINFORMATION"] = "CARDHOLDER_INFORMATION";
    DisputeEvidenceType["PURCHASEACKNOWLEDGEMENT"] = "PURCHASE_ACKNOWLEDGEMENT";
    DisputeEvidenceType["DUPLICATECHARGEDOCUMENTATION"] = "DUPLICATE_CHARGE_DOCUMENTATION";
    DisputeEvidenceType["PRODUCTORSERVICEDESCRIPTION"] = "PRODUCT_OR_SERVICE_DESCRIPTION";
    DisputeEvidenceType["RECEIPT"] = "RECEIPT";
    DisputeEvidenceType["SERVICERECEIVEDDOCUMENTATION"] = "SERVICE_RECEIVED_DOCUMENTATION";
    DisputeEvidenceType["PROOFOFDELIVERYDOCUMENTATION"] = "PROOF_OF_DELIVERY_DOCUMENTATION";
    DisputeEvidenceType["RELATEDTRANSACTIONDOCUMENTATION"] = "RELATED_TRANSACTION_DOCUMENTATION";
    DisputeEvidenceType["REBUTTALEXPLANATION"] = "REBUTTAL_EXPLANATION";
    DisputeEvidenceType["TRACKINGNUMBER"] = "TRACKING_NUMBER";
})(DisputeEvidenceType = exports.DisputeEvidenceType || (exports.DisputeEvidenceType = {}));
/**
 * List of possible reasons why a cardholder might initiate a dispute with their bank.
 * @export
 * @enum {string}
 */
var DisputeReason;
(function (DisputeReason) {
    DisputeReason["AMOUNTDIFFERS"] = "AMOUNT_DIFFERS";
    DisputeReason["CANCELLED"] = "CANCELLED";
    DisputeReason["DUPLICATE"] = "DUPLICATE";
    DisputeReason["NOKNOWLEDGE"] = "NO_KNOWLEDGE";
    DisputeReason["NOTASDESCRIBED"] = "NOT_AS_DESCRIBED";
    DisputeReason["NOTRECEIVED"] = "NOT_RECEIVED";
    DisputeReason["PAIDBYOTHERMEANS"] = "PAID_BY_OTHER_MEANS";
    DisputeReason["CUSTOMERREQUESTSCREDIT"] = "CUSTOMER_REQUESTS_CREDIT";
    DisputeReason["EMVLIABILITYSHIFT"] = "EMV_LIABILITY_SHIFT";
})(DisputeReason = exports.DisputeReason || (exports.DisputeReason = {}));
/**
 * List of possible dispute states.
 * @export
 * @enum {string}
 */
var DisputeState;
(function (DisputeState) {
    DisputeState["UNKNOWNSTATE"] = "UNKNOWN_STATE";
    DisputeState["INQUIRYEVIDENCEREQUIRED"] = "INQUIRY_EVIDENCE_REQUIRED";
    DisputeState["INQUIRYPROCESSING"] = "INQUIRY_PROCESSING";
    DisputeState["INQUIRYCLOSED"] = "INQUIRY_CLOSED";
    DisputeState["EVIDENCEREQUIRED"] = "EVIDENCE_REQUIRED";
    DisputeState["PROCESSING"] = "PROCESSING";
    DisputeState["WON"] = "WON";
    DisputeState["LOST"] = "LOST";
    DisputeState["ACCEPTED"] = "ACCEPTED";
    DisputeState["WAITINGTHIRDPARTY"] = "WAITING_THIRD_PARTY";
})(DisputeState = exports.DisputeState || (exports.DisputeState = {}));
/**
 * Determines item visibility in Ecom (Online Store) and Online Checkout.
 * @export
 * @enum {string}
 */
var EcomVisibility;
(function (EcomVisibility) {
    EcomVisibility["UNINDEXED"] = "UNINDEXED";
    EcomVisibility["UNAVAILABLE"] = "UNAVAILABLE";
    EcomVisibility["HIDDEN"] = "HIDDEN";
    EcomVisibility["VISIBLE"] = "VISIBLE";
})(EcomVisibility = exports.EcomVisibility || (exports.EcomVisibility = {}));
/**
 * The status of the Employee being retrieved.
 * @export
 * @enum {string}
 */
var EmployeeStatus;
(function (EmployeeStatus) {
    EmployeeStatus["ACTIVE"] = "ACTIVE";
    EmployeeStatus["INACTIVE"] = "INACTIVE";
})(EmployeeStatus = exports.EmployeeStatus || (exports.EmployeeStatus = {}));
/**
 * Indicates which high-level category of error has occurred during a request to the Connect API.
 * @export
 * @enum {string}
 */
var ErrorCategory;
(function (ErrorCategory) {
    ErrorCategory["APIERROR"] = "API_ERROR";
    ErrorCategory["AUTHENTICATIONERROR"] = "AUTHENTICATION_ERROR";
    ErrorCategory["INVALIDREQUESTERROR"] = "INVALID_REQUEST_ERROR";
    ErrorCategory["RATELIMITERROR"] = "RATE_LIMIT_ERROR";
    ErrorCategory["PAYMENTMETHODERROR"] = "PAYMENT_METHOD_ERROR";
    ErrorCategory["REFUNDERROR"] = "REFUND_ERROR";
})(ErrorCategory = exports.ErrorCategory || (exports.ErrorCategory = {}));
/**
 * Indicates the specific error that occurred during a request to a Square API.
 * @export
 * @enum {string}
 */
var ErrorCode;
(function (ErrorCode) {
    ErrorCode["INTERNALSERVERERROR"] = "INTERNAL_SERVER_ERROR";
    ErrorCode["UNAUTHORIZED"] = "UNAUTHORIZED";
    ErrorCode["ACCESSTOKENEXPIRED"] = "ACCESS_TOKEN_EXPIRED";
    ErrorCode["ACCESSTOKENREVOKED"] = "ACCESS_TOKEN_REVOKED";
    ErrorCode["CLIENTDISABLED"] = "CLIENT_DISABLED";
    ErrorCode["FORBIDDEN"] = "FORBIDDEN";
    ErrorCode["INSUFFICIENTSCOPES"] = "INSUFFICIENT_SCOPES";
    ErrorCode["APPLICATIONDISABLED"] = "APPLICATION_DISABLED";
    ErrorCode["V1APPLICATION"] = "V1_APPLICATION";
    ErrorCode["V1ACCESSTOKEN"] = "V1_ACCESS_TOKEN";
    ErrorCode["CARDPROCESSINGNOTENABLED"] = "CARD_PROCESSING_NOT_ENABLED";
    ErrorCode["BADREQUEST"] = "BAD_REQUEST";
    ErrorCode["MISSINGREQUIREDPARAMETER"] = "MISSING_REQUIRED_PARAMETER";
    ErrorCode["INCORRECTTYPE"] = "INCORRECT_TYPE";
    ErrorCode["INVALIDTIME"] = "INVALID_TIME";
    ErrorCode["INVALIDTIMERANGE"] = "INVALID_TIME_RANGE";
    ErrorCode["INVALIDVALUE"] = "INVALID_VALUE";
    ErrorCode["INVALIDCURSOR"] = "INVALID_CURSOR";
    ErrorCode["UNKNOWNQUERYPARAMETER"] = "UNKNOWN_QUERY_PARAMETER";
    ErrorCode["CONFLICTINGPARAMETERS"] = "CONFLICTING_PARAMETERS";
    ErrorCode["EXPECTEDJSONBODY"] = "EXPECTED_JSON_BODY";
    ErrorCode["INVALIDSORTORDER"] = "INVALID_SORT_ORDER";
    ErrorCode["VALUEREGEXMISMATCH"] = "VALUE_REGEX_MISMATCH";
    ErrorCode["VALUETOOSHORT"] = "VALUE_TOO_SHORT";
    ErrorCode["VALUETOOLONG"] = "VALUE_TOO_LONG";
    ErrorCode["VALUETOOLOW"] = "VALUE_TOO_LOW";
    ErrorCode["VALUETOOHIGH"] = "VALUE_TOO_HIGH";
    ErrorCode["VALUEEMPTY"] = "VALUE_EMPTY";
    ErrorCode["ARRAYLENGTHTOOLONG"] = "ARRAY_LENGTH_TOO_LONG";
    ErrorCode["ARRAYLENGTHTOOSHORT"] = "ARRAY_LENGTH_TOO_SHORT";
    ErrorCode["ARRAYEMPTY"] = "ARRAY_EMPTY";
    ErrorCode["EXPECTEDBOOLEAN"] = "EXPECTED_BOOLEAN";
    ErrorCode["EXPECTEDINTEGER"] = "EXPECTED_INTEGER";
    ErrorCode["EXPECTEDFLOAT"] = "EXPECTED_FLOAT";
    ErrorCode["EXPECTEDSTRING"] = "EXPECTED_STRING";
    ErrorCode["EXPECTEDOBJECT"] = "EXPECTED_OBJECT";
    ErrorCode["EXPECTEDARRAY"] = "EXPECTED_ARRAY";
    ErrorCode["EXPECTEDMAP"] = "EXPECTED_MAP";
    ErrorCode["EXPECTEDBASE64ENCODEDBYTEARRAY"] = "EXPECTED_BASE64_ENCODED_BYTE_ARRAY";
    ErrorCode["INVALIDARRAYVALUE"] = "INVALID_ARRAY_VALUE";
    ErrorCode["INVALIDENUMVALUE"] = "INVALID_ENUM_VALUE";
    ErrorCode["INVALIDCONTENTTYPE"] = "INVALID_CONTENT_TYPE";
    ErrorCode["INVALIDFORMVALUE"] = "INVALID_FORM_VALUE";
    ErrorCode["CUSTOMERNOTFOUND"] = "CUSTOMER_NOT_FOUND";
    ErrorCode["ONEINSTRUMENTEXPECTED"] = "ONE_INSTRUMENT_EXPECTED";
    ErrorCode["NOFIELDSSET"] = "NO_FIELDS_SET";
    ErrorCode["TOOMANYMAPENTRIES"] = "TOO_MANY_MAP_ENTRIES";
    ErrorCode["MAPKEYLENGTHTOOSHORT"] = "MAP_KEY_LENGTH_TOO_SHORT";
    ErrorCode["MAPKEYLENGTHTOOLONG"] = "MAP_KEY_LENGTH_TOO_LONG";
    ErrorCode["CARDEXPIRED"] = "CARD_EXPIRED";
    ErrorCode["INVALIDEXPIRATION"] = "INVALID_EXPIRATION";
    ErrorCode["INVALIDEXPIRATIONYEAR"] = "INVALID_EXPIRATION_YEAR";
    ErrorCode["INVALIDEXPIRATIONDATE"] = "INVALID_EXPIRATION_DATE";
    ErrorCode["UNSUPPORTEDCARDBRAND"] = "UNSUPPORTED_CARD_BRAND";
    ErrorCode["UNSUPPORTEDENTRYMETHOD"] = "UNSUPPORTED_ENTRY_METHOD";
    ErrorCode["INVALIDENCRYPTEDCARD"] = "INVALID_ENCRYPTED_CARD";
    ErrorCode["INVALIDCARD"] = "INVALID_CARD";
    ErrorCode["GENERICDECLINE"] = "GENERIC_DECLINE";
    ErrorCode["CVVFAILURE"] = "CVV_FAILURE";
    ErrorCode["ADDRESSVERIFICATIONFAILURE"] = "ADDRESS_VERIFICATION_FAILURE";
    ErrorCode["INVALIDACCOUNT"] = "INVALID_ACCOUNT";
    ErrorCode["CURRENCYMISMATCH"] = "CURRENCY_MISMATCH";
    ErrorCode["INSUFFICIENTFUNDS"] = "INSUFFICIENT_FUNDS";
    ErrorCode["INSUFFICIENTPERMISSIONS"] = "INSUFFICIENT_PERMISSIONS";
    ErrorCode["CARDHOLDERINSUFFICIENTPERMISSIONS"] = "CARDHOLDER_INSUFFICIENT_PERMISSIONS";
    ErrorCode["INVALIDLOCATION"] = "INVALID_LOCATION";
    ErrorCode["TRANSACTIONLIMIT"] = "TRANSACTION_LIMIT";
    ErrorCode["VOICEFAILURE"] = "VOICE_FAILURE";
    ErrorCode["PANFAILURE"] = "PAN_FAILURE";
    ErrorCode["EXPIRATIONFAILURE"] = "EXPIRATION_FAILURE";
    ErrorCode["CARDNOTSUPPORTED"] = "CARD_NOT_SUPPORTED";
    ErrorCode["INVALIDPIN"] = "INVALID_PIN";
    ErrorCode["INVALIDPOSTALCODE"] = "INVALID_POSTAL_CODE";
    ErrorCode["INVALIDFEES"] = "INVALID_FEES";
    ErrorCode["MANUALLYENTEREDPAYMENTNOTSUPPORTED"] = "MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED";
    ErrorCode["PAYMENTLIMITEXCEEDED"] = "PAYMENT_LIMIT_EXCEEDED";
    ErrorCode["GIFTCARDAVAILABLEAMOUNT"] = "GIFT_CARD_AVAILABLE_AMOUNT";
    ErrorCode["DELAYEDTRANSACTIONEXPIRED"] = "DELAYED_TRANSACTION_EXPIRED";
    ErrorCode["DELAYEDTRANSACTIONCANCELED"] = "DELAYED_TRANSACTION_CANCELED";
    ErrorCode["DELAYEDTRANSACTIONCAPTURED"] = "DELAYED_TRANSACTION_CAPTURED";
    ErrorCode["DELAYEDTRANSACTIONFAILED"] = "DELAYED_TRANSACTION_FAILED";
    ErrorCode["CARDTOKENEXPIRED"] = "CARD_TOKEN_EXPIRED";
    ErrorCode["CARDTOKENUSED"] = "CARD_TOKEN_USED";
    ErrorCode["AMOUNTTOOHIGH"] = "AMOUNT_TOO_HIGH";
    ErrorCode["UNSUPPORTEDINSTRUMENTTYPE"] = "UNSUPPORTED_INSTRUMENT_TYPE";
    ErrorCode["REFUNDAMOUNTINVALID"] = "REFUND_AMOUNT_INVALID";
    ErrorCode["REFUNDALREADYPENDING"] = "REFUND_ALREADY_PENDING";
    ErrorCode["PAYMENTNOTREFUNDABLE"] = "PAYMENT_NOT_REFUNDABLE";
    ErrorCode["REFUNDDECLINED"] = "REFUND_DECLINED";
    ErrorCode["INVALIDCARDDATA"] = "INVALID_CARD_DATA";
    ErrorCode["SOURCEUSED"] = "SOURCE_USED";
    ErrorCode["SOURCEEXPIRED"] = "SOURCE_EXPIRED";
    ErrorCode["LOCATIONMISMATCH"] = "LOCATION_MISMATCH";
    ErrorCode["IDEMPOTENCYKEYREUSED"] = "IDEMPOTENCY_KEY_REUSED";
    ErrorCode["UNEXPECTEDVALUE"] = "UNEXPECTED_VALUE";
    ErrorCode["SANDBOXNOTSUPPORTED"] = "SANDBOX_NOT_SUPPORTED";
    ErrorCode["INVALIDEMAILADDRESS"] = "INVALID_EMAIL_ADDRESS";
    ErrorCode["INVALIDPHONENUMBER"] = "INVALID_PHONE_NUMBER";
    ErrorCode["CHECKOUTEXPIRED"] = "CHECKOUT_EXPIRED";
    ErrorCode["BADCERTIFICATE"] = "BAD_CERTIFICATE";
    ErrorCode["INVALIDSQUAREVERSIONFORMAT"] = "INVALID_SQUARE_VERSION_FORMAT";
    ErrorCode["APIVERSIONINCOMPATIBLE"] = "API_VERSION_INCOMPATIBLE";
    ErrorCode["CARDDECLINED"] = "CARD_DECLINED";
    ErrorCode["VERIFYCVVFAILURE"] = "VERIFY_CVV_FAILURE";
    ErrorCode["VERIFYAVSFAILURE"] = "VERIFY_AVS_FAILURE";
    ErrorCode["CARDDECLINEDCALLISSUER"] = "CARD_DECLINED_CALL_ISSUER";
    ErrorCode["CARDDECLINEDVERIFICATIONREQUIRED"] = "CARD_DECLINED_VERIFICATION_REQUIRED";
    ErrorCode["BADEXPIRATION"] = "BAD_EXPIRATION";
    ErrorCode["CHIPINSERTIONREQUIRED"] = "CHIP_INSERTION_REQUIRED";
    ErrorCode["ALLOWABLEPINTRIESEXCEEDED"] = "ALLOWABLE_PIN_TRIES_EXCEEDED";
    ErrorCode["RESERVATIONDECLINED"] = "RESERVATION_DECLINED";
    ErrorCode["NOTFOUND"] = "NOT_FOUND";
    ErrorCode["APPLEPAYMENTPROCESSINGCERTIFICATEHASHNOTFOUND"] = "APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND";
    ErrorCode["METHODNOTALLOWED"] = "METHOD_NOT_ALLOWED";
    ErrorCode["NOTACCEPTABLE"] = "NOT_ACCEPTABLE";
    ErrorCode["REQUESTTIMEOUT"] = "REQUEST_TIMEOUT";
    ErrorCode["CONFLICT"] = "CONFLICT";
    ErrorCode["GONE"] = "GONE";
    ErrorCode["REQUESTENTITYTOOLARGE"] = "REQUEST_ENTITY_TOO_LARGE";
    ErrorCode["UNSUPPORTEDMEDIATYPE"] = "UNSUPPORTED_MEDIA_TYPE";
    ErrorCode["UNPROCESSABLEENTITY"] = "UNPROCESSABLE_ENTITY";
    ErrorCode["RATELIMITED"] = "RATE_LIMITED";
    ErrorCode["NOTIMPLEMENTED"] = "NOT_IMPLEMENTED";
    ErrorCode["BADGATEWAY"] = "BAD_GATEWAY";
    ErrorCode["SERVICEUNAVAILABLE"] = "SERVICE_UNAVAILABLE";
    ErrorCode["TEMPORARYERROR"] = "TEMPORARY_ERROR";
    ErrorCode["GATEWAYTIMEOUT"] = "GATEWAY_TIMEOUT";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
/**
 * Indicates which products matched by a CatalogPricingRule will be excluded if the pricing rule uses an exclude set.
 * @export
 * @enum {string}
 */
var ExcludeStrategy;
(function (ExcludeStrategy) {
    ExcludeStrategy["LEASTEXPENSIVE"] = "LEAST_EXPENSIVE";
    ExcludeStrategy["MOSTEXPENSIVE"] = "MOST_EXPENSIVE";
})(ExcludeStrategy = exports.ExcludeStrategy || (exports.ExcludeStrategy = {}));
/**
 * Object types to inline under their respective parent object in certain connect v2 responses
 * @export
 * @enum {string}
 */
var InlineTypes;
(function (InlineTypes) {
    InlineTypes["NONE"] = "INLINE_NONE";
    InlineTypes["VARIATIONS"] = "INLINE_VARIATIONS";
    InlineTypes["ALL"] = "INLINE_ALL";
})(InlineTypes = exports.InlineTypes || (exports.InlineTypes = {}));
/**
 * Indicates whether Square should alert the merchant when the inventory quantity of a CatalogItemVariation is low.
 * @export
 * @enum {string}
 */
var InventoryAlertType;
(function (InventoryAlertType) {
    InventoryAlertType["NONE"] = "NONE";
    InventoryAlertType["LOWQUANTITY"] = "LOW_QUANTITY";
})(InventoryAlertType = exports.InventoryAlertType || (exports.InventoryAlertType = {}));
/**
 * Indicates how the inventory change was applied to a tracked quantity of items.
 * @export
 * @enum {string}
 */
var InventoryChangeType;
(function (InventoryChangeType) {
    InventoryChangeType["PHYSICALCOUNT"] = "PHYSICAL_COUNT";
    InventoryChangeType["ADJUSTMENT"] = "ADJUSTMENT";
    InventoryChangeType["TRANSFER"] = "TRANSFER";
})(InventoryChangeType = exports.InventoryChangeType || (exports.InventoryChangeType = {}));
/**
 * Indicates the state of a tracked item quantity in the lifecycle of goods.
 * @export
 * @enum {string}
 */
var InventoryState;
(function (InventoryState) {
    InventoryState["CUSTOM"] = "CUSTOM";
    InventoryState["INSTOCK"] = "IN_STOCK";
    InventoryState["SOLD"] = "SOLD";
    InventoryState["RETURNEDBYCUSTOMER"] = "RETURNED_BY_CUSTOMER";
    InventoryState["RESERVEDFORSALE"] = "RESERVED_FOR_SALE";
    InventoryState["SOLDONLINE"] = "SOLD_ONLINE";
    InventoryState["ORDEREDFROMVENDOR"] = "ORDERED_FROM_VENDOR";
    InventoryState["RECEIVEDFROMVENDOR"] = "RECEIVED_FROM_VENDOR";
    InventoryState["INTRANSITTO"] = "IN_TRANSIT_TO";
    InventoryState["NONE"] = "NONE";
    InventoryState["WASTE"] = "WASTE";
    InventoryState["UNLINKEDRETURN"] = "UNLINKED_RETURN";
})(InventoryState = exports.InventoryState || (exports.InventoryState = {}));
/**
 * The status of a payment request reminder.
 * @export
 * @enum {string}
 */
var InvoicePaymentReminderStatus;
(function (InvoicePaymentReminderStatus) {
    InvoicePaymentReminderStatus["PENDING"] = "PENDING";
    InvoicePaymentReminderStatus["NOTAPPLICABLE"] = "NOT_APPLICABLE";
    InvoicePaymentReminderStatus["SENT"] = "SENT";
})(InvoicePaymentReminderStatus = exports.InvoicePaymentReminderStatus || (exports.InvoicePaymentReminderStatus = {}));
/**
 * Specifies the action for Square to take for processing the invoice. For example,  email the invoice, charge a customer\'s card on file, or do nothing.
 * @export
 * @enum {string}
 */
var InvoiceRequestMethod;
(function (InvoiceRequestMethod) {
    InvoiceRequestMethod["EMAIL"] = "EMAIL";
    InvoiceRequestMethod["CHARGECARDONFILE"] = "CHARGE_CARD_ON_FILE";
    InvoiceRequestMethod["SHAREMANUALLY"] = "SHARE_MANUALLY";
})(InvoiceRequestMethod = exports.InvoiceRequestMethod || (exports.InvoiceRequestMethod = {}));
/**
 * Indicates the type of the payment request. An invoice supports the following payment request combinations: - 1 balance - 1 deposit with 1 balance - 2 - 12 installments - 1 deposit with 2 - 12 installments  For more information,  see [Payment requests](https://developer.squareup.com/docs/docs/invoices-api/overview#payment-requests).
 * @export
 * @enum {string}
 */
var InvoiceRequestType;
(function (InvoiceRequestType) {
    InvoiceRequestType["BALANCE"] = "BALANCE";
    InvoiceRequestType["DEPOSIT"] = "DEPOSIT";
    InvoiceRequestType["INSTALLMENT"] = "INSTALLMENT";
})(InvoiceRequestType = exports.InvoiceRequestType || (exports.InvoiceRequestType = {}));
/**
 * Field to use for sorting.
 * @export
 * @enum {string}
 */
var InvoiceSortField;
(function (InvoiceSortField) {
    InvoiceSortField["INVOICESORTDATE"] = "INVOICE_SORT_DATE";
})(InvoiceSortField = exports.InvoiceSortField || (exports.InvoiceSortField = {}));
/**
 * Indicates the status of an invoice.
 * @export
 * @enum {string}
 */
var InvoiceStatus;
(function (InvoiceStatus) {
    InvoiceStatus["DRAFT"] = "DRAFT";
    InvoiceStatus["UNPAID"] = "UNPAID";
    InvoiceStatus["SCHEDULED"] = "SCHEDULED";
    InvoiceStatus["PARTIALLYPAID"] = "PARTIALLY_PAID";
    InvoiceStatus["PAID"] = "PAID";
    InvoiceStatus["PARTIALLYREFUNDED"] = "PARTIALLY_REFUNDED";
    InvoiceStatus["REFUNDED"] = "REFUNDED";
    InvoiceStatus["CANCELED"] = "CANCELED";
    InvoiceStatus["FAILED"] = "FAILED";
    InvoiceStatus["PAYMENTPENDING"] = "PAYMENT_PENDING";
})(InvoiceStatus = exports.InvoiceStatus || (exports.InvoiceStatus = {}));
/**
 * Enumerates the possible pay types that a job can be assigned.
 * @export
 * @enum {string}
 */
var JobAssignmentPayType;
(function (JobAssignmentPayType) {
    JobAssignmentPayType["NONE"] = "NONE";
    JobAssignmentPayType["HOURLY"] = "HOURLY";
    JobAssignmentPayType["SALARY"] = "SALARY";
})(JobAssignmentPayType = exports.JobAssignmentPayType || (exports.JobAssignmentPayType = {}));
/**
 * The capabilities a location may have.
 * @export
 * @enum {string}
 */
var LocationCapability;
(function (LocationCapability) {
    LocationCapability["CREDITCARDPROCESSING"] = "CREDIT_CARD_PROCESSING";
})(LocationCapability = exports.LocationCapability || (exports.LocationCapability = {}));
/**
 * The status of the location, whether a location is active or inactive.
 * @export
 * @enum {string}
 */
var LocationStatus;
(function (LocationStatus) {
    LocationStatus["ACTIVE"] = "ACTIVE";
    LocationStatus["INACTIVE"] = "INACTIVE";
})(LocationStatus = exports.LocationStatus || (exports.LocationStatus = {}));
/**
 * A location\'s physical or mobile type.
 * @export
 * @enum {string}
 */
var LocationType;
(function (LocationType) {
    LocationType["PHYSICAL"] = "PHYSICAL";
    LocationType["MOBILE"] = "MOBILE";
})(LocationType = exports.LocationType || (exports.LocationType = {}));
/**
 * The type of mapping.
 * @export
 * @enum {string}
 */
var LoyaltyAccountMappingType;
(function (LoyaltyAccountMappingType) {
    LoyaltyAccountMappingType["PHONE"] = "PHONE";
})(LoyaltyAccountMappingType = exports.LoyaltyAccountMappingType || (exports.LoyaltyAccountMappingType = {}));
/**
 * Defines whether the event was generated by the Square Point of Sale.
 * @export
 * @enum {string}
 */
var LoyaltyEventSource;
(function (LoyaltyEventSource) {
    LoyaltyEventSource["SQUARE"] = "SQUARE";
    LoyaltyEventSource["LOYALTYAPI"] = "LOYALTY_API";
})(LoyaltyEventSource = exports.LoyaltyEventSource || (exports.LoyaltyEventSource = {}));
/**
 * The type of the loyalty event.
 * @export
 * @enum {string}
 */
var LoyaltyEventType;
(function (LoyaltyEventType) {
    LoyaltyEventType["ACCUMULATEPOINTS"] = "ACCUMULATE_POINTS";
    LoyaltyEventType["CREATEREWARD"] = "CREATE_REWARD";
    LoyaltyEventType["REDEEMREWARD"] = "REDEEM_REWARD";
    LoyaltyEventType["DELETEREWARD"] = "DELETE_REWARD";
    LoyaltyEventType["ADJUSTPOINTS"] = "ADJUST_POINTS";
    LoyaltyEventType["EXPIREPOINTS"] = "EXPIRE_POINTS";
    LoyaltyEventType["OTHER"] = "OTHER";
})(LoyaltyEventType = exports.LoyaltyEventType || (exports.LoyaltyEventType = {}));
/**
 * The type of the accrual rule that defines how buyers can earn points.
 * @export
 * @enum {string}
 */
var LoyaltyProgramAccrualRuleType;
(function (LoyaltyProgramAccrualRuleType) {
    LoyaltyProgramAccrualRuleType["VISIT"] = "VISIT";
    LoyaltyProgramAccrualRuleType["SPEND"] = "SPEND";
    LoyaltyProgramAccrualRuleType["ITEMVARIATION"] = "ITEM_VARIATION";
    LoyaltyProgramAccrualRuleType["CATEGORY"] = "CATEGORY";
})(LoyaltyProgramAccrualRuleType = exports.LoyaltyProgramAccrualRuleType || (exports.LoyaltyProgramAccrualRuleType = {}));
/**
 * Indicates the scope of the reward tier.
 * @export
 * @enum {string}
 */
var LoyaltyProgramRewardDefinitionScope;
(function (LoyaltyProgramRewardDefinitionScope) {
    LoyaltyProgramRewardDefinitionScope["ORDER"] = "ORDER";
    LoyaltyProgramRewardDefinitionScope["ITEMVARIATION"] = "ITEM_VARIATION";
    LoyaltyProgramRewardDefinitionScope["CATEGORY"] = "CATEGORY";
})(LoyaltyProgramRewardDefinitionScope = exports.LoyaltyProgramRewardDefinitionScope || (exports.LoyaltyProgramRewardDefinitionScope = {}));
/**
 * The type of discount the reward tier offers.
 * @export
 * @enum {string}
 */
var LoyaltyProgramRewardDefinitionType;
(function (LoyaltyProgramRewardDefinitionType) {
    LoyaltyProgramRewardDefinitionType["AMOUNT"] = "FIXED_AMOUNT";
    LoyaltyProgramRewardDefinitionType["PERCENTAGE"] = "FIXED_PERCENTAGE";
})(LoyaltyProgramRewardDefinitionType = exports.LoyaltyProgramRewardDefinitionType || (exports.LoyaltyProgramRewardDefinitionType = {}));
/**
 * Whether the program is currently active.
 * @export
 * @enum {string}
 */
var LoyaltyProgramStatus;
(function (LoyaltyProgramStatus) {
    LoyaltyProgramStatus["INACTIVE"] = "INACTIVE";
    LoyaltyProgramStatus["ACTIVE"] = "ACTIVE";
})(LoyaltyProgramStatus = exports.LoyaltyProgramStatus || (exports.LoyaltyProgramStatus = {}));
/**
 * The status of the loyalty reward.
 * @export
 * @enum {string}
 */
var LoyaltyRewardStatus;
(function (LoyaltyRewardStatus) {
    LoyaltyRewardStatus["ISSUED"] = "ISSUED";
    LoyaltyRewardStatus["REDEEMED"] = "REDEEMED";
    LoyaltyRewardStatus["DELETED"] = "DELETED";
})(LoyaltyRewardStatus = exports.LoyaltyRewardStatus || (exports.LoyaltyRewardStatus = {}));
/**
 * Unit of area used to measure a quantity.
 * @export
 * @enum {string}
 */
var MeasurementUnitArea;
(function (MeasurementUnitArea) {
    MeasurementUnitArea["IMPERIALACRE"] = "IMPERIAL_ACRE";
    MeasurementUnitArea["IMPERIALSQUAREINCH"] = "IMPERIAL_SQUARE_INCH";
    MeasurementUnitArea["IMPERIALSQUAREFOOT"] = "IMPERIAL_SQUARE_FOOT";
    MeasurementUnitArea["IMPERIALSQUAREYARD"] = "IMPERIAL_SQUARE_YARD";
    MeasurementUnitArea["IMPERIALSQUAREMILE"] = "IMPERIAL_SQUARE_MILE";
    MeasurementUnitArea["METRICSQUARECENTIMETER"] = "METRIC_SQUARE_CENTIMETER";
    MeasurementUnitArea["METRICSQUAREMETER"] = "METRIC_SQUARE_METER";
    MeasurementUnitArea["METRICSQUAREKILOMETER"] = "METRIC_SQUARE_KILOMETER";
})(MeasurementUnitArea = exports.MeasurementUnitArea || (exports.MeasurementUnitArea = {}));
/**
 *
 * @export
 * @enum {string}
 */
var MeasurementUnitGeneric;
(function (MeasurementUnitGeneric) {
    MeasurementUnitGeneric["UNIT"] = "UNIT";
})(MeasurementUnitGeneric = exports.MeasurementUnitGeneric || (exports.MeasurementUnitGeneric = {}));
/**
 * The unit of length used to measure a quantity.
 * @export
 * @enum {string}
 */
var MeasurementUnitLength;
(function (MeasurementUnitLength) {
    MeasurementUnitLength["IMPERIALINCH"] = "IMPERIAL_INCH";
    MeasurementUnitLength["IMPERIALFOOT"] = "IMPERIAL_FOOT";
    MeasurementUnitLength["IMPERIALYARD"] = "IMPERIAL_YARD";
    MeasurementUnitLength["IMPERIALMILE"] = "IMPERIAL_MILE";
    MeasurementUnitLength["METRICMILLIMETER"] = "METRIC_MILLIMETER";
    MeasurementUnitLength["METRICCENTIMETER"] = "METRIC_CENTIMETER";
    MeasurementUnitLength["METRICMETER"] = "METRIC_METER";
    MeasurementUnitLength["METRICKILOMETER"] = "METRIC_KILOMETER";
})(MeasurementUnitLength = exports.MeasurementUnitLength || (exports.MeasurementUnitLength = {}));
/**
 * Unit of time used to measure a quantity (a duration).
 * @export
 * @enum {string}
 */
var MeasurementUnitTime;
(function (MeasurementUnitTime) {
    MeasurementUnitTime["MILLISECOND"] = "GENERIC_MILLISECOND";
    MeasurementUnitTime["SECOND"] = "GENERIC_SECOND";
    MeasurementUnitTime["MINUTE"] = "GENERIC_MINUTE";
    MeasurementUnitTime["HOUR"] = "GENERIC_HOUR";
    MeasurementUnitTime["DAY"] = "GENERIC_DAY";
})(MeasurementUnitTime = exports.MeasurementUnitTime || (exports.MeasurementUnitTime = {}));
/**
 * Describes the type of this unit and indicates which field contains the unit information. This is an ‘open’ enum.
 * @export
 * @enum {string}
 */
var MeasurementUnitUnitType;
(function (MeasurementUnitUnitType) {
    MeasurementUnitUnitType["CUSTOM"] = "TYPE_CUSTOM";
    MeasurementUnitUnitType["AREA"] = "TYPE_AREA";
    MeasurementUnitUnitType["LENGTH"] = "TYPE_LENGTH";
    MeasurementUnitUnitType["VOLUME"] = "TYPE_VOLUME";
    MeasurementUnitUnitType["WEIGHT"] = "TYPE_WEIGHT";
    MeasurementUnitUnitType["GENERIC"] = "TYPE_GENERIC";
})(MeasurementUnitUnitType = exports.MeasurementUnitUnitType || (exports.MeasurementUnitUnitType = {}));
/**
 * The unit of volume used to measure a quantity.
 * @export
 * @enum {string}
 */
var MeasurementUnitVolume;
(function (MeasurementUnitVolume) {
    MeasurementUnitVolume["GENERICFLUIDOUNCE"] = "GENERIC_FLUID_OUNCE";
    MeasurementUnitVolume["GENERICSHOT"] = "GENERIC_SHOT";
    MeasurementUnitVolume["GENERICCUP"] = "GENERIC_CUP";
    MeasurementUnitVolume["GENERICPINT"] = "GENERIC_PINT";
    MeasurementUnitVolume["GENERICQUART"] = "GENERIC_QUART";
    MeasurementUnitVolume["GENERICGALLON"] = "GENERIC_GALLON";
    MeasurementUnitVolume["IMPERIALCUBICINCH"] = "IMPERIAL_CUBIC_INCH";
    MeasurementUnitVolume["IMPERIALCUBICFOOT"] = "IMPERIAL_CUBIC_FOOT";
    MeasurementUnitVolume["IMPERIALCUBICYARD"] = "IMPERIAL_CUBIC_YARD";
    MeasurementUnitVolume["METRICMILLILITER"] = "METRIC_MILLILITER";
    MeasurementUnitVolume["METRICLITER"] = "METRIC_LITER";
})(MeasurementUnitVolume = exports.MeasurementUnitVolume || (exports.MeasurementUnitVolume = {}));
/**
 * Unit of weight used to measure a quantity.
 * @export
 * @enum {string}
 */
var MeasurementUnitWeight;
(function (MeasurementUnitWeight) {
    MeasurementUnitWeight["IMPERIALWEIGHTOUNCE"] = "IMPERIAL_WEIGHT_OUNCE";
    MeasurementUnitWeight["IMPERIALPOUND"] = "IMPERIAL_POUND";
    MeasurementUnitWeight["IMPERIALSTONE"] = "IMPERIAL_STONE";
    MeasurementUnitWeight["METRICMILLIGRAM"] = "METRIC_MILLIGRAM";
    MeasurementUnitWeight["METRICGRAM"] = "METRIC_GRAM";
    MeasurementUnitWeight["METRICKILOGRAM"] = "METRIC_KILOGRAM";
})(MeasurementUnitWeight = exports.MeasurementUnitWeight || (exports.MeasurementUnitWeight = {}));
/**
 *
 * @export
 * @enum {string}
 */
var MerchantStatus;
(function (MerchantStatus) {
    MerchantStatus["ACTIVE"] = "ACTIVE";
    MerchantStatus["INACTIVE"] = "INACTIVE";
})(MerchantStatus = exports.MerchantStatus || (exports.MerchantStatus = {}));
/**
 * The schedule type of the pickup fulfillment.
 * @export
 * @enum {string}
 */
var OrderFulfillmentPickupDetailsScheduleType;
(function (OrderFulfillmentPickupDetailsScheduleType) {
    OrderFulfillmentPickupDetailsScheduleType["SCHEDULED"] = "SCHEDULED";
    OrderFulfillmentPickupDetailsScheduleType["ASAP"] = "ASAP";
})(OrderFulfillmentPickupDetailsScheduleType = exports.OrderFulfillmentPickupDetailsScheduleType || (exports.OrderFulfillmentPickupDetailsScheduleType = {}));
/**
 * The current state of this fulfillment.
 * @export
 * @enum {string}
 */
var OrderFulfillmentState;
(function (OrderFulfillmentState) {
    OrderFulfillmentState["PROPOSED"] = "PROPOSED";
    OrderFulfillmentState["RESERVED"] = "RESERVED";
    OrderFulfillmentState["PREPARED"] = "PREPARED";
    OrderFulfillmentState["COMPLETED"] = "COMPLETED";
    OrderFulfillmentState["CANCELED"] = "CANCELED";
    OrderFulfillmentState["FAILED"] = "FAILED";
})(OrderFulfillmentState = exports.OrderFulfillmentState || (exports.OrderFulfillmentState = {}));
/**
 * The type of fulfillment.
 * @export
 * @enum {string}
 */
var OrderFulfillmentType;
(function (OrderFulfillmentType) {
    OrderFulfillmentType["PICKUP"] = "PICKUP";
    OrderFulfillmentType["SHIPMENT"] = "SHIPMENT";
})(OrderFulfillmentType = exports.OrderFulfillmentType || (exports.OrderFulfillmentType = {}));
/**
 * Indicates whether this is a line item or order level discount.
 * @export
 * @enum {string}
 */
var OrderLineItemDiscountScope;
(function (OrderLineItemDiscountScope) {
    OrderLineItemDiscountScope["OTHERDISCOUNTSCOPE"] = "OTHER_DISCOUNT_SCOPE";
    OrderLineItemDiscountScope["LINEITEM"] = "LINE_ITEM";
    OrderLineItemDiscountScope["ORDER"] = "ORDER";
})(OrderLineItemDiscountScope = exports.OrderLineItemDiscountScope || (exports.OrderLineItemDiscountScope = {}));
/**
 * Indicates how the discount is applied to the associated line item or order.
 * @export
 * @enum {string}
 */
var OrderLineItemDiscountType;
(function (OrderLineItemDiscountType) {
    OrderLineItemDiscountType["UNKNOWNDISCOUNT"] = "UNKNOWN_DISCOUNT";
    OrderLineItemDiscountType["FIXEDPERCENTAGE"] = "FIXED_PERCENTAGE";
    OrderLineItemDiscountType["FIXEDAMOUNT"] = "FIXED_AMOUNT";
    OrderLineItemDiscountType["VARIABLEPERCENTAGE"] = "VARIABLE_PERCENTAGE";
    OrderLineItemDiscountType["VARIABLEAMOUNT"] = "VARIABLE_AMOUNT";
})(OrderLineItemDiscountType = exports.OrderLineItemDiscountType || (exports.OrderLineItemDiscountType = {}));
/**
 * Indicates whether this is a line item or order level tax.
 * @export
 * @enum {string}
 */
var OrderLineItemTaxScope;
(function (OrderLineItemTaxScope) {
    OrderLineItemTaxScope["OTHERTAXSCOPE"] = "OTHER_TAX_SCOPE";
    OrderLineItemTaxScope["LINEITEM"] = "LINE_ITEM";
    OrderLineItemTaxScope["ORDER"] = "ORDER";
})(OrderLineItemTaxScope = exports.OrderLineItemTaxScope || (exports.OrderLineItemTaxScope = {}));
/**
 * Indicates how the tax is applied to the associated line item or order.
 * @export
 * @enum {string}
 */
var OrderLineItemTaxType;
(function (OrderLineItemTaxType) {
    OrderLineItemTaxType["UNKNOWNTAX"] = "UNKNOWN_TAX";
    OrderLineItemTaxType["ADDITIVE"] = "ADDITIVE";
    OrderLineItemTaxType["INCLUSIVE"] = "INCLUSIVE";
})(OrderLineItemTaxType = exports.OrderLineItemTaxType || (exports.OrderLineItemTaxType = {}));
/**
 * Represents a phase in the process of calculating order totals. Service charges are applied __after__ the indicated phase.  [Read more about how order totals are calculated.](https://developer.squareup.com/docs/docs/orders-api/how-it-works#how-totals-are-calculated)
 * @export
 * @enum {string}
 */
var OrderServiceChargeCalculationPhase;
(function (OrderServiceChargeCalculationPhase) {
    OrderServiceChargeCalculationPhase["SUBTOTALPHASE"] = "SUBTOTAL_PHASE";
    OrderServiceChargeCalculationPhase["TOTALPHASE"] = "TOTAL_PHASE";
})(OrderServiceChargeCalculationPhase = exports.OrderServiceChargeCalculationPhase || (exports.OrderServiceChargeCalculationPhase = {}));
/**
 * The state of the order.
 * @export
 * @enum {string}
 */
var OrderState;
(function (OrderState) {
    OrderState["OPEN"] = "OPEN";
    OrderState["COMPLETED"] = "COMPLETED";
    OrderState["CANCELED"] = "CANCELED";
})(OrderState = exports.OrderState || (exports.OrderState = {}));
/**
 * Indicates the Square product used to generate an inventory change.
 * @export
 * @enum {string}
 */
var Product;
(function (Product) {
    Product["SQUAREPOS"] = "SQUARE_POS";
    Product["EXTERNALAPI"] = "EXTERNAL_API";
    Product["BILLING"] = "BILLING";
    Product["APPOINTMENTS"] = "APPOINTMENTS";
    Product["INVOICES"] = "INVOICES";
    Product["ONLINESTORE"] = "ONLINE_STORE";
    Product["PAYROLL"] = "PAYROLL";
    Product["DASHBOARD"] = "DASHBOARD";
    Product["ITEMLIBRARYIMPORT"] = "ITEM_LIBRARY_IMPORT";
    Product["OTHER"] = "OTHER";
})(Product = exports.Product || (exports.Product = {}));
/**
 *
 * @export
 * @enum {string}
 */
var ProductType;
(function (ProductType) {
    ProductType["TERMINALAPI"] = "TERMINAL_API";
})(ProductType = exports.ProductType || (exports.ProductType = {}));
/**
 * Indicates a refund\'s current status.
 * @export
 * @enum {string}
 */
var RefundStatus;
(function (RefundStatus) {
    RefundStatus["PENDING"] = "PENDING";
    RefundStatus["APPROVED"] = "APPROVED";
    RefundStatus["REJECTED"] = "REJECTED";
    RefundStatus["FAILED"] = "FAILED";
})(RefundStatus = exports.RefundStatus || (exports.RefundStatus = {}));
/**
 * The status of domain registration.
 * @export
 * @enum {string}
 */
var RegisterDomainResponseStatus;
(function (RegisterDomainResponseStatus) {
    RegisterDomainResponseStatus["PENDING"] = "PENDING";
    RegisterDomainResponseStatus["VERIFIED"] = "VERIFIED";
})(RegisterDomainResponseStatus = exports.RegisterDomainResponseStatus || (exports.RegisterDomainResponseStatus = {}));
/**
 * Defines supported stock levels of the item inventory.
 * @export
 * @enum {string}
 */
var SearchCatalogItemsRequestStockLevel;
(function (SearchCatalogItemsRequestStockLevel) {
    SearchCatalogItemsRequestStockLevel["OUT"] = "OUT";
    SearchCatalogItemsRequestStockLevel["LOW"] = "LOW";
})(SearchCatalogItemsRequestStockLevel = exports.SearchCatalogItemsRequestStockLevel || (exports.SearchCatalogItemsRequestStockLevel = {}));
/**
 * Specifies which timestamp to use to sort SearchOrder results.
 * @export
 * @enum {string}
 */
var SearchOrdersSortField;
(function (SearchOrdersSortField) {
    SearchOrdersSortField["CREATEDAT"] = "CREATED_AT";
    SearchOrdersSortField["UPDATEDAT"] = "UPDATED_AT";
    SearchOrdersSortField["CLOSEDAT"] = "CLOSED_AT";
})(SearchOrdersSortField = exports.SearchOrdersSortField || (exports.SearchOrdersSortField = {}));
/**
 * Specifies the `status` of `Shift` records to be returned.
 * @export
 * @enum {string}
 */
var ShiftFilterStatus;
(function (ShiftFilterStatus) {
    ShiftFilterStatus["OPEN"] = "OPEN";
    ShiftFilterStatus["CLOSED"] = "CLOSED";
})(ShiftFilterStatus = exports.ShiftFilterStatus || (exports.ShiftFilterStatus = {}));
/**
 * Enumerates the `Shift` fields to sort on.
 * @export
 * @enum {string}
 */
var ShiftSortField;
(function (ShiftSortField) {
    ShiftSortField["STARTAT"] = "START_AT";
    ShiftSortField["ENDAT"] = "END_AT";
    ShiftSortField["CREATEDAT"] = "CREATED_AT";
    ShiftSortField["UPDATEDAT"] = "UPDATED_AT";
})(ShiftSortField = exports.ShiftSortField || (exports.ShiftSortField = {}));
/**
 * Enumerates the possible status of a `Shift`
 * @export
 * @enum {string}
 */
var ShiftStatus;
(function (ShiftStatus) {
    ShiftStatus["OPEN"] = "OPEN";
    ShiftStatus["CLOSED"] = "CLOSED";
})(ShiftStatus = exports.ShiftStatus || (exports.ShiftStatus = {}));
/**
 * Defines the logic used to apply a workday filter.
 * @export
 * @enum {string}
 */
var ShiftWorkdayMatcher;
(function (ShiftWorkdayMatcher) {
    ShiftWorkdayMatcher["STARTAT"] = "START_AT";
    ShiftWorkdayMatcher["ENDAT"] = "END_AT";
    ShiftWorkdayMatcher["INTERSECTION"] = "INTERSECTION";
})(ShiftWorkdayMatcher = exports.ShiftWorkdayMatcher || (exports.ShiftWorkdayMatcher = {}));
/**
 * The order (e.g., chronological or alphabetical) in which results from a request are returned.
 * @export
 * @enum {string}
 */
var SortOrder;
(function (SortOrder) {
    SortOrder["DESC"] = "DESC";
    SortOrder["ASC"] = "ASC";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));
/**
 * Determines the billing cadence of a `Subscription`
 * @export
 * @enum {string}
 */
var SubscriptionCadence;
(function (SubscriptionCadence) {
    SubscriptionCadence["DAILY"] = "DAILY";
    SubscriptionCadence["WEEKLY"] = "WEEKLY";
    SubscriptionCadence["EVERYTWOWEEKS"] = "EVERY_TWO_WEEKS";
    SubscriptionCadence["THIRTYDAYS"] = "THIRTY_DAYS";
    SubscriptionCadence["SIXTYDAYS"] = "SIXTY_DAYS";
    SubscriptionCadence["NINETYDAYS"] = "NINETY_DAYS";
    SubscriptionCadence["MONTHLY"] = "MONTHLY";
    SubscriptionCadence["EVERYTWOMONTHS"] = "EVERY_TWO_MONTHS";
    SubscriptionCadence["QUARTERLY"] = "QUARTERLY";
    SubscriptionCadence["EVERYFOURMONTHS"] = "EVERY_FOUR_MONTHS";
    SubscriptionCadence["EVERYSIXMONTHS"] = "EVERY_SIX_MONTHS";
    SubscriptionCadence["ANNUAL"] = "ANNUAL";
    SubscriptionCadence["EVERYTWOYEARS"] = "EVERY_TWO_YEARS";
})(SubscriptionCadence = exports.SubscriptionCadence || (exports.SubscriptionCadence = {}));
/**
 * The possible subscription event types.
 * @export
 * @enum {string}
 */
var SubscriptionEventSubscriptionEventType;
(function (SubscriptionEventSubscriptionEventType) {
    SubscriptionEventSubscriptionEventType["STARTSUBSCRIPTION"] = "START_SUBSCRIPTION";
    SubscriptionEventSubscriptionEventType["PLANCHANGE"] = "PLAN_CHANGE";
    SubscriptionEventSubscriptionEventType["STOPSUBSCRIPTION"] = "STOP_SUBSCRIPTION";
})(SubscriptionEventSubscriptionEventType = exports.SubscriptionEventSubscriptionEventType || (exports.SubscriptionEventSubscriptionEventType = {}));
/**
 * Possible subscription status values.
 * @export
 * @enum {string}
 */
var SubscriptionStatus;
(function (SubscriptionStatus) {
    SubscriptionStatus["DEFAULTSUBSCRIPTIONSTATUSDONOTUSE"] = "DEFAULT_SUBSCRIPTION_STATUS_DO_NOT_USE";
    SubscriptionStatus["PENDING"] = "PENDING";
    SubscriptionStatus["ACTIVE"] = "ACTIVE";
    SubscriptionStatus["CANCELED"] = "CANCELED";
})(SubscriptionStatus = exports.SubscriptionStatus || (exports.SubscriptionStatus = {}));
/**
 * When to calculate the taxes due on a cart.
 * @export
 * @enum {string}
 */
var TaxCalculationPhase;
(function (TaxCalculationPhase) {
    TaxCalculationPhase["SUBTOTALPHASE"] = "TAX_SUBTOTAL_PHASE";
    TaxCalculationPhase["TOTALPHASE"] = "TAX_TOTAL_PHASE";
})(TaxCalculationPhase = exports.TaxCalculationPhase || (exports.TaxCalculationPhase = {}));
/**
 * Whether to the tax amount should be additional to or included in the CatalogItem price.
 * @export
 * @enum {string}
 */
var TaxInclusionType;
(function (TaxInclusionType) {
    TaxInclusionType["ADDITIVE"] = "ADDITIVE";
    TaxInclusionType["INCLUSIVE"] = "INCLUSIVE";
})(TaxInclusionType = exports.TaxInclusionType || (exports.TaxInclusionType = {}));
/**
 * Enumerates the possible assignment types the team member can have
 * @export
 * @enum {string}
 */
var TeamMemberAssignedLocationsAssignmentType;
(function (TeamMemberAssignedLocationsAssignmentType) {
    TeamMemberAssignedLocationsAssignmentType["ALLCURRENTANDFUTURELOCATIONS"] = "ALL_CURRENT_AND_FUTURE_LOCATIONS";
    TeamMemberAssignedLocationsAssignmentType["EXPLICITLOCATIONS"] = "EXPLICIT_LOCATIONS";
})(TeamMemberAssignedLocationsAssignmentType = exports.TeamMemberAssignedLocationsAssignmentType || (exports.TeamMemberAssignedLocationsAssignmentType = {}));
/**
 * Enumerates the possible statuses the team member can have within a business.
 * @export
 * @enum {string}
 */
var TeamMemberStatus;
(function (TeamMemberStatus) {
    TeamMemberStatus["ACTIVE"] = "ACTIVE";
    TeamMemberStatus["INACTIVE"] = "INACTIVE";
})(TeamMemberStatus = exports.TeamMemberStatus || (exports.TeamMemberStatus = {}));
/**
 * Indicates the method used to enter the card\'s details.
 * @export
 * @enum {string}
 */
var TenderCardDetailsEntryMethod;
(function (TenderCardDetailsEntryMethod) {
    TenderCardDetailsEntryMethod["SWIPED"] = "SWIPED";
    TenderCardDetailsEntryMethod["KEYED"] = "KEYED";
    TenderCardDetailsEntryMethod["EMV"] = "EMV";
    TenderCardDetailsEntryMethod["ONFILE"] = "ON_FILE";
    TenderCardDetailsEntryMethod["CONTACTLESS"] = "CONTACTLESS";
})(TenderCardDetailsEntryMethod = exports.TenderCardDetailsEntryMethod || (exports.TenderCardDetailsEntryMethod = {}));
/**
 * Indicates the card transaction\'s current status.
 * @export
 * @enum {string}
 */
var TenderCardDetailsStatus;
(function (TenderCardDetailsStatus) {
    TenderCardDetailsStatus["AUTHORIZED"] = "AUTHORIZED";
    TenderCardDetailsStatus["CAPTURED"] = "CAPTURED";
    TenderCardDetailsStatus["VOIDED"] = "VOIDED";
    TenderCardDetailsStatus["FAILED"] = "FAILED";
})(TenderCardDetailsStatus = exports.TenderCardDetailsStatus || (exports.TenderCardDetailsStatus = {}));
/**
 * Indicates a tender\'s type.
 * @export
 * @enum {string}
 */
var TenderType;
(function (TenderType) {
    TenderType["CARD"] = "CARD";
    TenderType["CASH"] = "CASH";
    TenderType["THIRDPARTYCARD"] = "THIRD_PARTY_CARD";
    TenderType["SQUAREGIFTCARD"] = "SQUARE_GIFT_CARD";
    TenderType["NOSALE"] = "NO_SALE";
    TenderType["WALLET"] = "WALLET";
    TenderType["OTHER"] = "OTHER";
})(TenderType = exports.TenderType || (exports.TenderType = {}));
/**
 * Indicates the Square product used to process a transaction.
 * @export
 * @enum {string}
 */
var TransactionProduct;
(function (TransactionProduct) {
    TransactionProduct["REGISTER"] = "REGISTER";
    TransactionProduct["EXTERNALAPI"] = "EXTERNAL_API";
    TransactionProduct["BILLING"] = "BILLING";
    TransactionProduct["APPOINTMENTS"] = "APPOINTMENTS";
    TransactionProduct["INVOICES"] = "INVOICES";
    TransactionProduct["ONLINESTORE"] = "ONLINE_STORE";
    TransactionProduct["PAYROLL"] = "PAYROLL";
    TransactionProduct["OTHER"] = "OTHER";
})(TransactionProduct = exports.TransactionProduct || (exports.TransactionProduct = {}));
/**
 * Transaction type used in the disputed payment.
 * @export
 * @enum {string}
 */
var TransactionType;
(function (TransactionType) {
    TransactionType["DEBIT"] = "DEBIT";
    TransactionType["CREDIT"] = "CREDIT";
})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1AdjustInventoryRequestAdjustmentType;
(function (V1AdjustInventoryRequestAdjustmentType) {
    V1AdjustInventoryRequestAdjustmentType["SALE"] = "SALE";
    V1AdjustInventoryRequestAdjustmentType["RECEIVESTOCK"] = "RECEIVE_STOCK";
    V1AdjustInventoryRequestAdjustmentType["MANUALADJUST"] = "MANUAL_ADJUST";
})(V1AdjustInventoryRequestAdjustmentType = exports.V1AdjustInventoryRequestAdjustmentType || (exports.V1AdjustInventoryRequestAdjustmentType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1BankAccountType;
(function (V1BankAccountType) {
    V1BankAccountType["BUSINESSCHECKING"] = "BUSINESS_CHECKING";
    V1BankAccountType["CHECKING"] = "CHECKING";
    V1BankAccountType["INVESTMENT"] = "INVESTMENT";
    V1BankAccountType["LOAN"] = "LOAN";
    V1BankAccountType["SAVINGS"] = "SAVINGS";
    V1BankAccountType["OTHER"] = "OTHER";
})(V1BankAccountType = exports.V1BankAccountType || (exports.V1BankAccountType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1CashDrawerEventEventType;
(function (V1CashDrawerEventEventType) {
    V1CashDrawerEventEventType["NOSALE"] = "NO_SALE";
    V1CashDrawerEventEventType["CASHTENDERPAYMENT"] = "CASH_TENDER_PAYMENT";
    V1CashDrawerEventEventType["OTHERTENDERPAYMENT"] = "OTHER_TENDER_PAYMENT";
    V1CashDrawerEventEventType["CASHTENDERCANCELEDPAYMENT"] = "CASH_TENDER_CANCELED_PAYMENT";
    V1CashDrawerEventEventType["OTHERTENDERCANCELEDPAYMENT"] = "OTHER_TENDER_CANCELED_PAYMENT";
    V1CashDrawerEventEventType["CASHTENDERREFUND"] = "CASH_TENDER_REFUND";
    V1CashDrawerEventEventType["OTHERTENDERREFUND"] = "OTHER_TENDER_REFUND";
    V1CashDrawerEventEventType["PAIDIN"] = "PAID_IN";
    V1CashDrawerEventEventType["PAIDOUT"] = "PAID_OUT";
})(V1CashDrawerEventEventType = exports.V1CashDrawerEventEventType || (exports.V1CashDrawerEventEventType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1CashDrawerShiftEventType;
(function (V1CashDrawerShiftEventType) {
    V1CashDrawerShiftEventType["OPEN"] = "OPEN";
    V1CashDrawerShiftEventType["ENDED"] = "ENDED";
    V1CashDrawerShiftEventType["CLOSED"] = "CLOSED";
})(V1CashDrawerShiftEventType = exports.V1CashDrawerShiftEventType || (exports.V1CashDrawerShiftEventType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1CreateRefundRequestType;
(function (V1CreateRefundRequestType) {
    V1CreateRefundRequestType["FULL"] = "FULL";
    V1CreateRefundRequestType["PARTIAL"] = "PARTIAL";
})(V1CreateRefundRequestType = exports.V1CreateRefundRequestType || (exports.V1CreateRefundRequestType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1DiscountColor;
(function (V1DiscountColor) {
    V1DiscountColor["_9da2a6"] = "9da2a6";
    V1DiscountColor["_4ab200"] = "4ab200";
    V1DiscountColor["_0b8000"] = "0b8000";
    V1DiscountColor["_2952cc"] = "2952cc";
    V1DiscountColor["A82ee5"] = "a82ee5";
    V1DiscountColor["E5457a"] = "e5457a";
    V1DiscountColor["B21212"] = "b21212";
    V1DiscountColor["_593c00"] = "593c00";
    V1DiscountColor["E5BF00"] = "e5BF00";
})(V1DiscountColor = exports.V1DiscountColor || (exports.V1DiscountColor = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1DiscountDiscountType;
(function (V1DiscountDiscountType) {
    V1DiscountDiscountType["FIXED"] = "FIXED";
    V1DiscountDiscountType["VARIABLEPERCENTAGE"] = "VARIABLE_PERCENTAGE";
    V1DiscountDiscountType["VARIABLEAMOUNT"] = "VARIABLE_AMOUNT";
})(V1DiscountDiscountType = exports.V1DiscountDiscountType || (exports.V1DiscountDiscountType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1EmployeeRolePermissions;
(function (V1EmployeeRolePermissions) {
    V1EmployeeRolePermissions["ACCESSSALESHISTORY"] = "REGISTER_ACCESS_SALES_HISTORY";
    V1EmployeeRolePermissions["APPLYRESTRICTEDDISCOUNTS"] = "REGISTER_APPLY_RESTRICTED_DISCOUNTS";
    V1EmployeeRolePermissions["CHANGESETTINGS"] = "REGISTER_CHANGE_SETTINGS";
    V1EmployeeRolePermissions["EDITITEM"] = "REGISTER_EDIT_ITEM";
    V1EmployeeRolePermissions["ISSUEREFUNDS"] = "REGISTER_ISSUE_REFUNDS";
    V1EmployeeRolePermissions["OPENCASHDRAWEROUTSIDESALE"] = "REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE";
    V1EmployeeRolePermissions["VIEWSUMMARYREPORTS"] = "REGISTER_VIEW_SUMMARY_REPORTS";
})(V1EmployeeRolePermissions = exports.V1EmployeeRolePermissions || (exports.V1EmployeeRolePermissions = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1EmployeeStatus;
(function (V1EmployeeStatus) {
    V1EmployeeStatus["ACTIVE"] = "ACTIVE";
    V1EmployeeStatus["INACTIVE"] = "INACTIVE";
})(V1EmployeeStatus = exports.V1EmployeeStatus || (exports.V1EmployeeStatus = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1FeeAdjustmentType;
(function (V1FeeAdjustmentType) {
    V1FeeAdjustmentType["TAX"] = "TAX";
})(V1FeeAdjustmentType = exports.V1FeeAdjustmentType || (exports.V1FeeAdjustmentType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1FeeCalculationPhase;
(function (V1FeeCalculationPhase) {
    V1FeeCalculationPhase["FEESUBTOTALPHASE"] = "FEE_SUBTOTAL_PHASE";
    V1FeeCalculationPhase["OTHER"] = "OTHER";
    V1FeeCalculationPhase["FEETOTALPHASE"] = "FEE_TOTAL_PHASE";
})(V1FeeCalculationPhase = exports.V1FeeCalculationPhase || (exports.V1FeeCalculationPhase = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1FeeInclusionType;
(function (V1FeeInclusionType) {
    V1FeeInclusionType["ADDITIVE"] = "ADDITIVE";
    V1FeeInclusionType["INCLUSIVE"] = "INCLUSIVE";
})(V1FeeInclusionType = exports.V1FeeInclusionType || (exports.V1FeeInclusionType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1FeeType;
(function (V1FeeType) {
    V1FeeType["CAGST"] = "CA_GST";
    V1FeeType["CAHST"] = "CA_HST";
    V1FeeType["CAPST"] = "CA_PST";
    V1FeeType["CAQST"] = "CA_QST";
    V1FeeType["JPCONSUMPTIONTAX"] = "JP_CONSUMPTION_TAX";
    V1FeeType["CAPEIPST"] = "CA_PEI_PST";
    V1FeeType["USSALESTAX"] = "US_SALES_TAX";
    V1FeeType["OTHER"] = "OTHER";
})(V1FeeType = exports.V1FeeType || (exports.V1FeeType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1ItemColor;
(function (V1ItemColor) {
    V1ItemColor["_9da2a6"] = "9da2a6";
    V1ItemColor["_4ab200"] = "4ab200";
    V1ItemColor["_0b8000"] = "0b8000";
    V1ItemColor["_2952cc"] = "2952cc";
    V1ItemColor["A82ee5"] = "a82ee5";
    V1ItemColor["E5457a"] = "e5457a";
    V1ItemColor["B21212"] = "b21212";
    V1ItemColor["_593c00"] = "593c00";
    V1ItemColor["E5BF00"] = "e5BF00";
})(V1ItemColor = exports.V1ItemColor || (exports.V1ItemColor = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1ItemType;
(function (V1ItemType) {
    V1ItemType["NORMAL"] = "NORMAL";
    V1ItemType["GIFTCARD"] = "GIFT_CARD";
    V1ItemType["OTHER"] = "OTHER";
})(V1ItemType = exports.V1ItemType || (exports.V1ItemType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1ItemVisibility;
(function (V1ItemVisibility) {
    V1ItemVisibility["PUBLIC"] = "PUBLIC";
    V1ItemVisibility["PRIVATE"] = "PRIVATE";
})(V1ItemVisibility = exports.V1ItemVisibility || (exports.V1ItemVisibility = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1ListEmployeesRequestStatus;
(function (V1ListEmployeesRequestStatus) {
    V1ListEmployeesRequestStatus["ACTIVE"] = "ACTIVE";
    V1ListEmployeesRequestStatus["INACTIVE"] = "INACTIVE";
})(V1ListEmployeesRequestStatus = exports.V1ListEmployeesRequestStatus || (exports.V1ListEmployeesRequestStatus = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1ListSettlementsRequestStatus;
(function (V1ListSettlementsRequestStatus) {
    V1ListSettlementsRequestStatus["SENT"] = "SENT";
    V1ListSettlementsRequestStatus["FAILED"] = "FAILED";
})(V1ListSettlementsRequestStatus = exports.V1ListSettlementsRequestStatus || (exports.V1ListSettlementsRequestStatus = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1MerchantAccountType;
(function (V1MerchantAccountType) {
    V1MerchantAccountType["LOCATION"] = "LOCATION";
    V1MerchantAccountType["BUSINESS"] = "BUSINESS";
})(V1MerchantAccountType = exports.V1MerchantAccountType || (exports.V1MerchantAccountType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1MerchantBusinessType;
(function (V1MerchantBusinessType) {
    V1MerchantBusinessType["ACCOUNTING"] = "ACCOUNTING";
    V1MerchantBusinessType["APPARELANDACCESSORYSHOPS"] = "APPAREL_AND_ACCESSORY_SHOPS";
    V1MerchantBusinessType["ARTDEALERSGALLERIES"] = "ART_DEALERS_GALLERIES";
    V1MerchantBusinessType["ARTDESIGNANDPHOTOGRAPHY"] = "ART_DESIGN_AND_PHOTOGRAPHY";
    V1MerchantBusinessType["BARCLUBLOUNGE"] = "BAR_CLUB_LOUNGE";
    V1MerchantBusinessType["BEAUTYANDBARBERSHOPS"] = "BEAUTY_AND_BARBER_SHOPS";
    V1MerchantBusinessType["BOOKSTORES"] = "BOOK_STORES";
    V1MerchantBusinessType["BUSINESSSERVICES"] = "BUSINESS_SERVICES";
    V1MerchantBusinessType["CATERING"] = "CATERING";
    V1MerchantBusinessType["CHARITABLESOCIALSERVICEORGANIZATIONS"] = "CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS";
    V1MerchantBusinessType["CHARITIBLEORGS"] = "CHARITIBLE_ORGS";
    V1MerchantBusinessType["CLEANINGSERVICES"] = "CLEANING_SERVICES";
    V1MerchantBusinessType["COMPUTEREQUIPMENTSOFTWAREMAINTENANCEREPAIRSERVICES"] = "COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES";
    V1MerchantBusinessType["CONSULTANT"] = "CONSULTANT";
    V1MerchantBusinessType["CONTRACTORS"] = "CONTRACTORS";
    V1MerchantBusinessType["DELIVERYSERVICES"] = "DELIVERY_SERVICES";
    V1MerchantBusinessType["DENTISTRY"] = "DENTISTRY";
    V1MerchantBusinessType["EDUCATION"] = "EDUCATION";
    V1MerchantBusinessType["FOODSTORESCONVENIENCESTORESANDSPECIALTYMARKETS"] = "FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS";
    V1MerchantBusinessType["FOODTRUCKCART"] = "FOOD_TRUCK_CART";
    V1MerchantBusinessType["FURNITUREHOMEANDOFFICEEQUIPMENT"] = "FURNITURE_HOME_AND_OFFICE_EQUIPMENT";
    V1MerchantBusinessType["FURNITUREHOMEGOODS"] = "FURNITURE_HOME_GOODS";
    V1MerchantBusinessType["HOTELSANDLODGING"] = "HOTELS_AND_LODGING";
    V1MerchantBusinessType["INDIVIDUALUSE"] = "INDIVIDUAL_USE";
    V1MerchantBusinessType["JEWELRYANDWATCHES"] = "JEWELRY_AND_WATCHES";
    V1MerchantBusinessType["LANDSCAPINGANDHORTICULTURALSERVICES"] = "LANDSCAPING_AND_HORTICULTURAL_SERVICES";
    V1MerchantBusinessType["LANGUAGESCHOOLS"] = "LANGUAGE_SCHOOLS";
    V1MerchantBusinessType["LEGALSERVICES"] = "LEGAL_SERVICES";
    V1MerchantBusinessType["MEDICALPRACTITIONERS"] = "MEDICAL_PRACTITIONERS";
    V1MerchantBusinessType["MEDICALSERVICESANDHEALTHPRACTITIONERS"] = "MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS";
    V1MerchantBusinessType["MEMBERSHIPORGANIZATIONS"] = "MEMBERSHIP_ORGANIZATIONS";
    V1MerchantBusinessType["MUSICANDENTERTAINMENT"] = "MUSIC_AND_ENTERTAINMENT";
    V1MerchantBusinessType["OTHER"] = "OTHER";
    V1MerchantBusinessType["OUTDOORMARKETS"] = "OUTDOOR_MARKETS";
    V1MerchantBusinessType["PERSONALSERVICES"] = "PERSONAL_SERVICES";
    V1MerchantBusinessType["POLITICALORGANIZATIONS"] = "POLITICAL_ORGANIZATIONS";
    V1MerchantBusinessType["PROFESSIONALSERVICES"] = "PROFESSIONAL_SERVICES";
    V1MerchantBusinessType["REALESTATE"] = "REAL_ESTATE";
    V1MerchantBusinessType["RECREATIONSERVICES"] = "RECREATION_SERVICES";
    V1MerchantBusinessType["REPAIRSHOPSANDRELATEDSERVICES"] = "REPAIR_SHOPS_AND_RELATED_SERVICES";
    V1MerchantBusinessType["RESTAURANTS"] = "RESTAURANTS";
    V1MerchantBusinessType["RETAILSHOPS"] = "RETAIL_SHOPS";
    V1MerchantBusinessType["SCHOOLSANDEDUCATIONALSERVICES"] = "SCHOOLS_AND_EDUCATIONAL_SERVICES";
    V1MerchantBusinessType["SPORTINGGOODS"] = "SPORTING_GOODS";
    V1MerchantBusinessType["TAXICABSANDLIMOUSINES"] = "TAXICABS_AND_LIMOUSINES";
    V1MerchantBusinessType["TICKETSALES"] = "TICKET_SALES";
    V1MerchantBusinessType["TOURISM"] = "TOURISM";
    V1MerchantBusinessType["TRAVELTOURISM"] = "TRAVEL_TOURISM";
    V1MerchantBusinessType["VETERINARYSERVICES"] = "VETERINARY_SERVICES";
    V1MerchantBusinessType["WEBDEVDESIGN"] = "WEB_DEV_DESIGN";
})(V1MerchantBusinessType = exports.V1MerchantBusinessType || (exports.V1MerchantBusinessType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1ModifierListSelectionType;
(function (V1ModifierListSelectionType) {
    V1ModifierListSelectionType["SINGLE"] = "SINGLE";
    V1ModifierListSelectionType["MULTIPLE"] = "MULTIPLE";
})(V1ModifierListSelectionType = exports.V1ModifierListSelectionType || (exports.V1ModifierListSelectionType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1OrderHistoryEntryAction;
(function (V1OrderHistoryEntryAction) {
    V1OrderHistoryEntryAction["ORDERPLACED"] = "ORDER_PLACED";
    V1OrderHistoryEntryAction["DECLINED"] = "DECLINED";
    V1OrderHistoryEntryAction["PAYMENTRECEIVED"] = "PAYMENT_RECEIVED";
    V1OrderHistoryEntryAction["CANCELED"] = "CANCELED";
    V1OrderHistoryEntryAction["COMPLETED"] = "COMPLETED";
    V1OrderHistoryEntryAction["REFUNDED"] = "REFUNDED";
    V1OrderHistoryEntryAction["EXPIRED"] = "EXPIRED";
})(V1OrderHistoryEntryAction = exports.V1OrderHistoryEntryAction || (exports.V1OrderHistoryEntryAction = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1OrderState;
(function (V1OrderState) {
    V1OrderState["PENDING"] = "PENDING";
    V1OrderState["OPEN"] = "OPEN";
    V1OrderState["COMPLETED"] = "COMPLETED";
    V1OrderState["CANCELED"] = "CANCELED";
    V1OrderState["REFUNDED"] = "REFUNDED";
    V1OrderState["REJECTED"] = "REJECTED";
})(V1OrderState = exports.V1OrderState || (exports.V1OrderState = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1PageCellObjectType;
(function (V1PageCellObjectType) {
    V1PageCellObjectType["ITEM"] = "ITEM";
    V1PageCellObjectType["DISCOUNT"] = "DISCOUNT";
    V1PageCellObjectType["CATEGORY"] = "CATEGORY";
    V1PageCellObjectType["PLACEHOLDER"] = "PLACEHOLDER";
})(V1PageCellObjectType = exports.V1PageCellObjectType || (exports.V1PageCellObjectType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1PageCellPlaceholderType;
(function (V1PageCellPlaceholderType) {
    V1PageCellPlaceholderType["ALLITEMS"] = "ALL_ITEMS";
    V1PageCellPlaceholderType["DISCOUNTSCATEGORY"] = "DISCOUNTS_CATEGORY";
    V1PageCellPlaceholderType["REWARDSFINDER"] = "REWARDS_FINDER";
})(V1PageCellPlaceholderType = exports.V1PageCellPlaceholderType || (exports.V1PageCellPlaceholderType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1PaymentItemizationItemizationType;
(function (V1PaymentItemizationItemizationType) {
    V1PaymentItemizationItemizationType["ITEM"] = "ITEM";
    V1PaymentItemizationItemizationType["CUSTOMAMOUNT"] = "CUSTOM_AMOUNT";
    V1PaymentItemizationItemizationType["GIFTCARDACTIVATION"] = "GIFT_CARD_ACTIVATION";
    V1PaymentItemizationItemizationType["GIFTCARDRELOAD"] = "GIFT_CARD_RELOAD";
    V1PaymentItemizationItemizationType["GIFTCARDUNKNOWN"] = "GIFT_CARD_UNKNOWN";
    V1PaymentItemizationItemizationType["OTHER"] = "OTHER";
})(V1PaymentItemizationItemizationType = exports.V1PaymentItemizationItemizationType || (exports.V1PaymentItemizationItemizationType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1PaymentSurchargeType;
(function (V1PaymentSurchargeType) {
    V1PaymentSurchargeType["UNKNOWN"] = "UNKNOWN";
    V1PaymentSurchargeType["AUTOGRATUITY"] = "AUTO_GRATUITY";
    V1PaymentSurchargeType["CUSTOM"] = "CUSTOM";
})(V1PaymentSurchargeType = exports.V1PaymentSurchargeType || (exports.V1PaymentSurchargeType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1PaymentTaxInclusionType;
(function (V1PaymentTaxInclusionType) {
    V1PaymentTaxInclusionType["ADDITIVE"] = "ADDITIVE";
    V1PaymentTaxInclusionType["INCLUSIVE"] = "INCLUSIVE";
})(V1PaymentTaxInclusionType = exports.V1PaymentTaxInclusionType || (exports.V1PaymentTaxInclusionType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1RefundType;
(function (V1RefundType) {
    V1RefundType["FULL"] = "FULL";
    V1RefundType["PARTIAL"] = "PARTIAL";
})(V1RefundType = exports.V1RefundType || (exports.V1RefundType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1SettlementEntryType;
(function (V1SettlementEntryType) {
    V1SettlementEntryType["ADJUSTMENT"] = "ADJUSTMENT";
    V1SettlementEntryType["BALANCECHARGE"] = "BALANCE_CHARGE";
    V1SettlementEntryType["CHARGE"] = "CHARGE";
    V1SettlementEntryType["FREEPROCESSING"] = "FREE_PROCESSING";
    V1SettlementEntryType["HOLDADJUSTMENT"] = "HOLD_ADJUSTMENT";
    V1SettlementEntryType["PAIDSERVICEFEE"] = "PAID_SERVICE_FEE";
    V1SettlementEntryType["PAIDSERVICEFEEREFUND"] = "PAID_SERVICE_FEE_REFUND";
    V1SettlementEntryType["REDEMPTIONCODE"] = "REDEMPTION_CODE";
    V1SettlementEntryType["REFUND"] = "REFUND";
    V1SettlementEntryType["RETURNEDPAYOUT"] = "RETURNED_PAYOUT";
    V1SettlementEntryType["SQUARECAPITALADVANCE"] = "SQUARE_CAPITAL_ADVANCE";
    V1SettlementEntryType["SQUARECAPITALPAYMENT"] = "SQUARE_CAPITAL_PAYMENT";
    V1SettlementEntryType["SQUARECAPITALREVERSEDPAYMENT"] = "SQUARE_CAPITAL_REVERSED_PAYMENT";
    V1SettlementEntryType["SUBSCRIPTIONFEE"] = "SUBSCRIPTION_FEE";
    V1SettlementEntryType["SUBSCRIPTIONFEEREFUND"] = "SUBSCRIPTION_FEE_REFUND";
    V1SettlementEntryType["OTHER"] = "OTHER";
    V1SettlementEntryType["INCENTEDPAYMENT"] = "INCENTED_PAYMENT";
    V1SettlementEntryType["RETURNEDACHENTRY"] = "RETURNED_ACH_ENTRY";
    V1SettlementEntryType["RETURNEDSQUARE275"] = "RETURNED_SQUARE_275";
    V1SettlementEntryType["SQUARE275"] = "SQUARE_275";
    V1SettlementEntryType["SQUARECARD"] = "SQUARE_CARD";
})(V1SettlementEntryType = exports.V1SettlementEntryType || (exports.V1SettlementEntryType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1SettlementStatus;
(function (V1SettlementStatus) {
    V1SettlementStatus["FAILED"] = "FAILED";
    V1SettlementStatus["SENT"] = "SENT";
})(V1SettlementStatus = exports.V1SettlementStatus || (exports.V1SettlementStatus = {}));
/**
 * The brand of a credit card.
 * @export
 * @enum {string}
 */
var V1TenderCardBrand;
(function (V1TenderCardBrand) {
    V1TenderCardBrand["OTHERBRAND"] = "OTHER_BRAND";
    V1TenderCardBrand["VISA"] = "VISA";
    V1TenderCardBrand["MASTERCARD"] = "MASTER_CARD";
    V1TenderCardBrand["AMERICANEXPRESS"] = "AMERICAN_EXPRESS";
    V1TenderCardBrand["DISCOVER"] = "DISCOVER";
    V1TenderCardBrand["DISCOVERDINERS"] = "DISCOVER_DINERS";
    V1TenderCardBrand["JCB"] = "JCB";
    V1TenderCardBrand["CHINAUNIONPAY"] = "CHINA_UNIONPAY";
    V1TenderCardBrand["SQUAREGIFTCARD"] = "SQUARE_GIFT_CARD";
})(V1TenderCardBrand = exports.V1TenderCardBrand || (exports.V1TenderCardBrand = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1TenderEntryMethod;
(function (V1TenderEntryMethod) {
    V1TenderEntryMethod["MANUAL"] = "MANUAL";
    V1TenderEntryMethod["SCANNED"] = "SCANNED";
    V1TenderEntryMethod["SQUARECASH"] = "SQUARE_CASH";
    V1TenderEntryMethod["SQUAREWALLET"] = "SQUARE_WALLET";
    V1TenderEntryMethod["SWIPED"] = "SWIPED";
    V1TenderEntryMethod["WEBFORM"] = "WEB_FORM";
    V1TenderEntryMethod["OTHER"] = "OTHER";
})(V1TenderEntryMethod = exports.V1TenderEntryMethod || (exports.V1TenderEntryMethod = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1TenderType;
(function (V1TenderType) {
    V1TenderType["CREDITCARD"] = "CREDIT_CARD";
    V1TenderType["CASH"] = "CASH";
    V1TenderType["THIRDPARTYCARD"] = "THIRD_PARTY_CARD";
    V1TenderType["NOSALE"] = "NO_SALE";
    V1TenderType["SQUAREWALLET"] = "SQUARE_WALLET";
    V1TenderType["SQUAREGIFTCARD"] = "SQUARE_GIFT_CARD";
    V1TenderType["UNKNOWN"] = "UNKNOWN";
    V1TenderType["OTHER"] = "OTHER";
})(V1TenderType = exports.V1TenderType || (exports.V1TenderType = {}));
/**
 * Actions that resulted in a change to a timecard. All timecard events created with the Connect API have an event type that begins with `API`.
 * @export
 * @enum {string}
 */
var V1TimecardEventEventType;
(function (V1TimecardEventEventType) {
    V1TimecardEventEventType["APICREATE"] = "API_CREATE";
    V1TimecardEventEventType["APIEDIT"] = "API_EDIT";
    V1TimecardEventEventType["APIDELETE"] = "API_DELETE";
    V1TimecardEventEventType["REGISTERCLOCKIN"] = "REGISTER_CLOCKIN";
    V1TimecardEventEventType["REGISTERCLOCKOUT"] = "REGISTER_CLOCKOUT";
    V1TimecardEventEventType["DASHBOARDSUPERVISORCLOSE"] = "DASHBOARD_SUPERVISOR_CLOSE";
    V1TimecardEventEventType["DASHBOARDEDIT"] = "DASHBOARD_EDIT";
    V1TimecardEventEventType["DASHBOARDDELETE"] = "DASHBOARD_DELETE";
})(V1TimecardEventEventType = exports.V1TimecardEventEventType || (exports.V1TimecardEventEventType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1UpdateModifierListRequestSelectionType;
(function (V1UpdateModifierListRequestSelectionType) {
    V1UpdateModifierListRequestSelectionType["SINGLE"] = "SINGLE";
    V1UpdateModifierListRequestSelectionType["MULTIPLE"] = "MULTIPLE";
})(V1UpdateModifierListRequestSelectionType = exports.V1UpdateModifierListRequestSelectionType || (exports.V1UpdateModifierListRequestSelectionType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1UpdateOrderRequestAction;
(function (V1UpdateOrderRequestAction) {
    V1UpdateOrderRequestAction["COMPLETE"] = "COMPLETE";
    V1UpdateOrderRequestAction["CANCEL"] = "CANCEL";
    V1UpdateOrderRequestAction["REFUND"] = "REFUND";
})(V1UpdateOrderRequestAction = exports.V1UpdateOrderRequestAction || (exports.V1UpdateOrderRequestAction = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1VariationInventoryAlertType;
(function (V1VariationInventoryAlertType) {
    V1VariationInventoryAlertType["LOWQUANTITY"] = "LOW_QUANTITY";
    V1VariationInventoryAlertType["NONE"] = "NONE";
    V1VariationInventoryAlertType["INVESTMENT"] = "INVESTMENT";
    V1VariationInventoryAlertType["LOAN"] = "LOAN";
    V1VariationInventoryAlertType["SAVINGS"] = "SAVINGS";
    V1VariationInventoryAlertType["OTHER"] = "OTHER";
})(V1VariationInventoryAlertType = exports.V1VariationInventoryAlertType || (exports.V1VariationInventoryAlertType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var V1VariationPricingType;
(function (V1VariationPricingType) {
    V1VariationPricingType["FIXEDPRICING"] = "FIXED_PRICING";
    V1VariationPricingType["VARIABLEPRICING"] = "VARIABLE_PRICING";
})(V1VariationPricingType = exports.V1VariationPricingType || (exports.V1VariationPricingType = {}));
/**
 * The days of the week.
 * @export
 * @enum {string}
 */
var Weekday;
(function (Weekday) {
    Weekday["MON"] = "MON";
    Weekday["TUE"] = "TUE";
    Weekday["WED"] = "WED";
    Weekday["THU"] = "THU";
    Weekday["FRI"] = "FRI";
    Weekday["SAT"] = "SAT";
    Weekday["SUN"] = "SUN";
})(Weekday = exports.Weekday || (exports.Weekday = {}));
/**
 * ApplePayApi - axios parameter creator
 * @export
 */
exports.ApplePayApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Square Payment Form Walkthrough](/docs/payment-form/payment-form-walkthrough).
         * @summary RegisterDomain
         * @param {RegisterDomainRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDomain: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling registerDomain.');
                    }
                    localVarPath = "/v2/apple-pay/domains";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", [])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ApplePayApi - functional programming interface
 * @export
 */
exports.ApplePayApiFp = function (configuration) {
    return {
        /**
         * Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Square Payment Form Walkthrough](/docs/payment-form/payment-form-walkthrough).
         * @summary RegisterDomain
         * @param {RegisterDomainRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDomain: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.ApplePayApiAxiosParamCreator(configuration).registerDomain(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ApplePayApi - factory interface
 * @export
 */
exports.ApplePayApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Square Payment Form Walkthrough](/docs/payment-form/payment-form-walkthrough).
         * @summary RegisterDomain
         * @param {RegisterDomainRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDomain: function (body, options) {
            return exports.ApplePayApiFp(configuration).registerDomain(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ApplePayApi - object-oriented interface
 * @export
 * @class ApplePayApi
 * @extends {BaseAPI}
 */
var ApplePayApi = /** @class */ (function (_super) {
    __extends(ApplePayApi, _super);
    function ApplePayApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Square Payment Form Walkthrough](/docs/payment-form/payment-form-walkthrough).
     * @summary RegisterDomain
     * @param {RegisterDomainRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplePayApi
     */
    ApplePayApi.prototype.registerDomain = function (body, options) {
        var _this = this;
        return exports.ApplePayApiFp(this.configuration).registerDomain(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ApplePayApi;
}(base_1.BaseAPI));
exports.ApplePayApi = ApplePayApi;
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
exports.BankAccountsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns details of a [BankAccount](#type-bankaccount)  linked to a Square account.
         * @summary GetBankAccount
         * @param {string} bankAccountId Square-issued ID of the desired &#x60;BankAccount&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount: function (bankAccountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    if (bankAccountId === null || bankAccountId === undefined) {
                        throw new base_1.RequiredError('bankAccountId', 'Required parameter bankAccountId was null or undefined when calling getBankAccount.');
                    }
                    localVarPath = "/v2/bank-accounts/{bank_account_id}"
                        .replace("{" + "bank_account_id" + "}", encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["BANK_ACCOUNTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns details of a [BankAccount](#type-bankaccount) identified by V1 bank account ID.
         * @summary GetBankAccountByV1Id
         * @param {string} v1BankAccountId Connect V1 ID of the desired &#x60;BankAccount&#x60;. For more information, see  [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https://developer.squareup.com/docs/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-v1-bank-accounts-api).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccountByV1Id: function (v1BankAccountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'v1BankAccountId' is not null or undefined
                    if (v1BankAccountId === null || v1BankAccountId === undefined) {
                        throw new base_1.RequiredError('v1BankAccountId', 'Required parameter v1BankAccountId was null or undefined when calling getBankAccountByV1Id.');
                    }
                    localVarPath = "/v2/bank-accounts/by-v1-id/{v1_bank_account_id}"
                        .replace("{" + "v1_bank_account_id" + "}", encodeURIComponent(String(v1BankAccountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["BANK_ACCOUNTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a list of [BankAccount](#type-bankaccount) objects linked to a Square account.
         * @summary ListBankAccounts
         * @param {string} [cursor] The pagination cursor returned by a previous call to this endpoint. Use it in the next &#x60;ListBankAccounts&#x60; request to retrieve the next set  of results.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
         * @param {number} [limit] Upper limit on the number of bank accounts to return in the response.  Currently, 1000 is the largest supported limit. You can specify a limit  of up to 1000 bank accounts. This is also the default limit.
         * @param {string} [locationId] Location ID. You can specify this optional filter  to retrieve only the linked bank accounts belonging to a specific location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: function (cursor, limit, locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/bank-accounts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["BANK_ACCOUNTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * BankAccountsApi - functional programming interface
 * @export
 */
exports.BankAccountsApiFp = function (configuration) {
    return {
        /**
         * Returns details of a [BankAccount](#type-bankaccount)  linked to a Square account.
         * @summary GetBankAccount
         * @param {string} bankAccountId Square-issued ID of the desired &#x60;BankAccount&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount: function (bankAccountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.BankAccountsApiAxiosParamCreator(configuration).getBankAccount(bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns details of a [BankAccount](#type-bankaccount) identified by V1 bank account ID.
         * @summary GetBankAccountByV1Id
         * @param {string} v1BankAccountId Connect V1 ID of the desired &#x60;BankAccount&#x60;. For more information, see  [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https://developer.squareup.com/docs/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-v1-bank-accounts-api).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccountByV1Id: function (v1BankAccountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.BankAccountsApiAxiosParamCreator(configuration).getBankAccountByV1Id(v1BankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of [BankAccount](#type-bankaccount) objects linked to a Square account.
         * @summary ListBankAccounts
         * @param {string} [cursor] The pagination cursor returned by a previous call to this endpoint. Use it in the next &#x60;ListBankAccounts&#x60; request to retrieve the next set  of results.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
         * @param {number} [limit] Upper limit on the number of bank accounts to return in the response.  Currently, 1000 is the largest supported limit. You can specify a limit  of up to 1000 bank accounts. This is also the default limit.
         * @param {string} [locationId] Location ID. You can specify this optional filter  to retrieve only the linked bank accounts belonging to a specific location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: function (cursor, limit, locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.BankAccountsApiAxiosParamCreator(configuration).listBankAccounts(cursor, limit, locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * BankAccountsApi - factory interface
 * @export
 */
exports.BankAccountsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Returns details of a [BankAccount](#type-bankaccount)  linked to a Square account.
         * @summary GetBankAccount
         * @param {string} bankAccountId Square-issued ID of the desired &#x60;BankAccount&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount: function (bankAccountId, options) {
            return exports.BankAccountsApiFp(configuration).getBankAccount(bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns details of a [BankAccount](#type-bankaccount) identified by V1 bank account ID.
         * @summary GetBankAccountByV1Id
         * @param {string} v1BankAccountId Connect V1 ID of the desired &#x60;BankAccount&#x60;. For more information, see  [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https://developer.squareup.com/docs/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-v1-bank-accounts-api).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccountByV1Id: function (v1BankAccountId, options) {
            return exports.BankAccountsApiFp(configuration).getBankAccountByV1Id(v1BankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of [BankAccount](#type-bankaccount) objects linked to a Square account.
         * @summary ListBankAccounts
         * @param {string} [cursor] The pagination cursor returned by a previous call to this endpoint. Use it in the next &#x60;ListBankAccounts&#x60; request to retrieve the next set  of results.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
         * @param {number} [limit] Upper limit on the number of bank accounts to return in the response.  Currently, 1000 is the largest supported limit. You can specify a limit  of up to 1000 bank accounts. This is also the default limit.
         * @param {string} [locationId] Location ID. You can specify this optional filter  to retrieve only the linked bank accounts belonging to a specific location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: function (cursor, limit, locationId, options) {
            return exports.BankAccountsApiFp(configuration).listBankAccounts(cursor, limit, locationId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * BankAccountsApi - object-oriented interface
 * @export
 * @class BankAccountsApi
 * @extends {BaseAPI}
 */
var BankAccountsApi = /** @class */ (function (_super) {
    __extends(BankAccountsApi, _super);
    function BankAccountsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns details of a [BankAccount](#type-bankaccount)  linked to a Square account.
     * @summary GetBankAccount
     * @param {string} bankAccountId Square-issued ID of the desired &#x60;BankAccount&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.getBankAccount = function (bankAccountId, options) {
        var _this = this;
        return exports.BankAccountsApiFp(this.configuration).getBankAccount(bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns details of a [BankAccount](#type-bankaccount) identified by V1 bank account ID.
     * @summary GetBankAccountByV1Id
     * @param {string} v1BankAccountId Connect V1 ID of the desired &#x60;BankAccount&#x60;. For more information, see  [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https://developer.squareup.com/docs/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-v1-bank-accounts-api).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.getBankAccountByV1Id = function (v1BankAccountId, options) {
        var _this = this;
        return exports.BankAccountsApiFp(this.configuration).getBankAccountByV1Id(v1BankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of [BankAccount](#type-bankaccount) objects linked to a Square account.
     * @summary ListBankAccounts
     * @param {string} [cursor] The pagination cursor returned by a previous call to this endpoint. Use it in the next &#x60;ListBankAccounts&#x60; request to retrieve the next set  of results.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {number} [limit] Upper limit on the number of bank accounts to return in the response.  Currently, 1000 is the largest supported limit. You can specify a limit  of up to 1000 bank accounts. This is also the default limit.
     * @param {string} [locationId] Location ID. You can specify this optional filter  to retrieve only the linked bank accounts belonging to a specific location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.listBankAccounts = function (cursor, limit, locationId, options) {
        var _this = this;
        return exports.BankAccountsApiFp(this.configuration).listBankAccounts(cursor, limit, locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankAccountsApi;
}(base_1.BaseAPI));
exports.BankAccountsApi = BankAccountsApi;
/**
 * CashDrawersApi - axios parameter creator
 * @export
 */
exports.CashDrawersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Provides a paginated list of events for a single cash drawer shift.
         * @summary ListCashDrawerShiftEvents
         * @param {string} locationId The ID of the location to list cash drawer shifts for.
         * @param {string} shiftId The shift ID.
         * @param {number} [limit] Number of resources to be returned in a page of results (200 by default, 1000 max).
         * @param {string} [cursor] Opaque cursor for fetching the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashDrawerShiftEvents: function (locationId, shiftId, limit, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listCashDrawerShiftEvents.');
                    }
                    // verify required parameter 'shiftId' is not null or undefined
                    if (shiftId === null || shiftId === undefined) {
                        throw new base_1.RequiredError('shiftId', 'Required parameter shiftId was null or undefined when calling listCashDrawerShiftEvents.');
                    }
                    localVarPath = "/v2/cash-drawers/shifts/{shift_id}/events"
                        .replace("{" + "shift_id" + "}", encodeURIComponent(String(shiftId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CASH_DRAWER_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for all of the cash drawer shifts for a location in a date range.
         * @summary ListCashDrawerShifts
         * @param {string} locationId The ID of the location to query for a list of cash drawer shifts.
         * @param {string} [sortOrder] The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC
         * @param {string} [beginTime] The inclusive start time of the query on opened_at, in ISO 8601 format.
         * @param {string} [endTime] The exclusive end date of the query on opened_at, in ISO 8601 format.
         * @param {number} [limit] Number of cash drawer shift events in a page of results (200 by default, 1000 max).
         * @param {string} [cursor] Opaque cursor for fetching the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashDrawerShifts: function (locationId, sortOrder, beginTime, endTime, limit, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listCashDrawerShifts.');
                    }
                    localVarPath = "/v2/cash-drawers/shifts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CASH_DRAWER_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    if (sortOrder !== undefined) {
                        localVarQueryParameter['sort_order'] = sortOrder;
                    }
                    if (beginTime !== undefined) {
                        localVarQueryParameter['begin_time'] = beginTime;
                    }
                    if (endTime !== undefined) {
                        localVarQueryParameter['end_time'] = endTime;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the summary details for a single cash drawer shift. See RetrieveCashDrawerShiftEvents for a list of cash drawer shift events.
         * @summary RetrieveCashDrawerShift
         * @param {string} locationId The ID of the location to retrieve cash drawer shifts from.
         * @param {string} shiftId The shift ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCashDrawerShift: function (locationId, shiftId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveCashDrawerShift.');
                    }
                    // verify required parameter 'shiftId' is not null or undefined
                    if (shiftId === null || shiftId === undefined) {
                        throw new base_1.RequiredError('shiftId', 'Required parameter shiftId was null or undefined when calling retrieveCashDrawerShift.');
                    }
                    localVarPath = "/v2/cash-drawers/shifts/{shift_id}"
                        .replace("{" + "shift_id" + "}", encodeURIComponent(String(shiftId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CASH_DRAWER_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * CashDrawersApi - functional programming interface
 * @export
 */
exports.CashDrawersApiFp = function (configuration) {
    return {
        /**
         * Provides a paginated list of events for a single cash drawer shift.
         * @summary ListCashDrawerShiftEvents
         * @param {string} locationId The ID of the location to list cash drawer shifts for.
         * @param {string} shiftId The shift ID.
         * @param {number} [limit] Number of resources to be returned in a page of results (200 by default, 1000 max).
         * @param {string} [cursor] Opaque cursor for fetching the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashDrawerShiftEvents: function (locationId, shiftId, limit, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CashDrawersApiAxiosParamCreator(configuration).listCashDrawerShiftEvents(locationId, shiftId, limit, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for all of the cash drawer shifts for a location in a date range.
         * @summary ListCashDrawerShifts
         * @param {string} locationId The ID of the location to query for a list of cash drawer shifts.
         * @param {string} [sortOrder] The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC
         * @param {string} [beginTime] The inclusive start time of the query on opened_at, in ISO 8601 format.
         * @param {string} [endTime] The exclusive end date of the query on opened_at, in ISO 8601 format.
         * @param {number} [limit] Number of cash drawer shift events in a page of results (200 by default, 1000 max).
         * @param {string} [cursor] Opaque cursor for fetching the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashDrawerShifts: function (locationId, sortOrder, beginTime, endTime, limit, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CashDrawersApiAxiosParamCreator(configuration).listCashDrawerShifts(locationId, sortOrder, beginTime, endTime, limit, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the summary details for a single cash drawer shift. See RetrieveCashDrawerShiftEvents for a list of cash drawer shift events.
         * @summary RetrieveCashDrawerShift
         * @param {string} locationId The ID of the location to retrieve cash drawer shifts from.
         * @param {string} shiftId The shift ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCashDrawerShift: function (locationId, shiftId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CashDrawersApiAxiosParamCreator(configuration).retrieveCashDrawerShift(locationId, shiftId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CashDrawersApi - factory interface
 * @export
 */
exports.CashDrawersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Provides a paginated list of events for a single cash drawer shift.
         * @summary ListCashDrawerShiftEvents
         * @param {string} locationId The ID of the location to list cash drawer shifts for.
         * @param {string} shiftId The shift ID.
         * @param {number} [limit] Number of resources to be returned in a page of results (200 by default, 1000 max).
         * @param {string} [cursor] Opaque cursor for fetching the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashDrawerShiftEvents: function (locationId, shiftId, limit, cursor, options) {
            return exports.CashDrawersApiFp(configuration).listCashDrawerShiftEvents(locationId, shiftId, limit, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for all of the cash drawer shifts for a location in a date range.
         * @summary ListCashDrawerShifts
         * @param {string} locationId The ID of the location to query for a list of cash drawer shifts.
         * @param {string} [sortOrder] The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC
         * @param {string} [beginTime] The inclusive start time of the query on opened_at, in ISO 8601 format.
         * @param {string} [endTime] The exclusive end date of the query on opened_at, in ISO 8601 format.
         * @param {number} [limit] Number of cash drawer shift events in a page of results (200 by default, 1000 max).
         * @param {string} [cursor] Opaque cursor for fetching the next page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashDrawerShifts: function (locationId, sortOrder, beginTime, endTime, limit, cursor, options) {
            return exports.CashDrawersApiFp(configuration).listCashDrawerShifts(locationId, sortOrder, beginTime, endTime, limit, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the summary details for a single cash drawer shift. See RetrieveCashDrawerShiftEvents for a list of cash drawer shift events.
         * @summary RetrieveCashDrawerShift
         * @param {string} locationId The ID of the location to retrieve cash drawer shifts from.
         * @param {string} shiftId The shift ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCashDrawerShift: function (locationId, shiftId, options) {
            return exports.CashDrawersApiFp(configuration).retrieveCashDrawerShift(locationId, shiftId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CashDrawersApi - object-oriented interface
 * @export
 * @class CashDrawersApi
 * @extends {BaseAPI}
 */
var CashDrawersApi = /** @class */ (function (_super) {
    __extends(CashDrawersApi, _super);
    function CashDrawersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Provides a paginated list of events for a single cash drawer shift.
     * @summary ListCashDrawerShiftEvents
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift ID.
     * @param {number} [limit] Number of resources to be returned in a page of results (200 by default, 1000 max).
     * @param {string} [cursor] Opaque cursor for fetching the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashDrawersApi
     */
    CashDrawersApi.prototype.listCashDrawerShiftEvents = function (locationId, shiftId, limit, cursor, options) {
        var _this = this;
        return exports.CashDrawersApiFp(this.configuration).listCashDrawerShiftEvents(locationId, shiftId, limit, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for all of the cash drawer shifts for a location in a date range.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to query for a list of cash drawer shifts.
     * @param {string} [sortOrder] The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC
     * @param {string} [beginTime] The inclusive start time of the query on opened_at, in ISO 8601 format.
     * @param {string} [endTime] The exclusive end date of the query on opened_at, in ISO 8601 format.
     * @param {number} [limit] Number of cash drawer shift events in a page of results (200 by default, 1000 max).
     * @param {string} [cursor] Opaque cursor for fetching the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashDrawersApi
     */
    CashDrawersApi.prototype.listCashDrawerShifts = function (locationId, sortOrder, beginTime, endTime, limit, cursor, options) {
        var _this = this;
        return exports.CashDrawersApiFp(this.configuration).listCashDrawerShifts(locationId, sortOrder, beginTime, endTime, limit, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the summary details for a single cash drawer shift. See RetrieveCashDrawerShiftEvents for a list of cash drawer shift events.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to retrieve cash drawer shifts from.
     * @param {string} shiftId The shift ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashDrawersApi
     */
    CashDrawersApi.prototype.retrieveCashDrawerShift = function (locationId, shiftId, options) {
        var _this = this;
        return exports.CashDrawersApiFp(this.configuration).retrieveCashDrawerShift(locationId, shiftId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CashDrawersApi;
}(base_1.BaseAPI));
exports.CashDrawersApi = CashDrawersApi;
/**
 * CatalogApi - axios parameter creator
 * @export
 */
exports.CatalogApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
         * @summary BatchDeleteCatalogObjects
         * @param {BatchDeleteCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchDeleteCatalogObjects: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling batchDeleteCatalogObjects.');
                    }
                    localVarPath = "/v2/catalog/batch-delete";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
         * @summary BatchRetrieveCatalogObjects
         * @param {BatchRetrieveCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveCatalogObjects: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling batchRetrieveCatalogObjects.');
                    }
                    localVarPath = "/v2/catalog/batch-retrieve";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
         * @summary BatchUpsertCatalogObjects
         * @param {BatchUpsertCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUpsertCatalogObjects: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling batchUpsertCatalogObjects.');
                    }
                    localVarPath = "/v2/catalog/batch-upsert";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves information about the Square Catalog API, such as batch size limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
         * @summary CatalogInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInfo: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/catalog/info";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
         * @summary DeleteCatalogObject
         * @param {string} objectId The ID of the catalog object to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a catalog item will delete its catalog item variations).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalogObject: function (objectId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'objectId' is not null or undefined
                    if (objectId === null || objectId === undefined) {
                        throw new base_1.RequiredError('objectId', 'Required parameter objectId was null or undefined when calling deleteCatalogObject.');
                    }
                    localVarPath = "/v2/catalog/object/{object_id}"
                        .replace("{" + "object_id" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The `types` parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set `include_deleted_objects` to `true`.
         * @summary ListCatalog
         * @param {string} [cursor] The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
         * @param {string} [types] An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the CatalogObjectType enum: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalog: function (cursor, types, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/catalog/list";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
         * @summary RetrieveCatalogObject
         * @param {string} objectId The object ID of any type of catalog objects to be retrieved.
         * @param {boolean} [includeRelatedObjects] If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItem&#x60;, its associated &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogImage&#x60; and &#x60;CatalogModifierList&#x60; objects will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItemVariation&#x60;, its parent &#x60;CatalogItem&#x60; will be returned in the &#x60;related_objects&#x60; field of the response.  Default value: &#x60;false&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCatalogObject: function (objectId, includeRelatedObjects, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'objectId' is not null or undefined
                    if (objectId === null || objectId === undefined) {
                        throw new base_1.RequiredError('objectId', 'Required parameter objectId was null or undefined when calling retrieveCatalogObject.');
                    }
                    localVarPath = "/v2/catalog/object/{object_id}"
                        .replace("{" + "object_id" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (includeRelatedObjects !== undefined) {
                        localVarQueryParameter['include_related_objects'] = includeRelatedObjects;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Searches for catalog items or item variations by matching supported search attribute values, including custom attribute values, against one or more of the specified query expressions,  This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints use different call conventions, including the query filter formats.
         * @summary SearchCatalogItems
         * @param {SearchCatalogItemsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCatalogItems: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchCatalogItems.');
                    }
                    localVarPath = "/v2/catalog/search-catalog-items";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Searches for [CatalogObject](#type-CatalogObject) of any types against supported search attribute values, excluding custom attribute values on items or item variations, against one or more of the specified query expressions,  This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints have different call conventions, including the query filter formats.
         * @summary SearchCatalogObjects
         * @param {SearchCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCatalogObjects: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchCatalogObjects.');
                    }
                    localVarPath = "/v2/catalog/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
         * @summary UpdateItemModifierLists
         * @param {UpdateItemModifierListsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemModifierLists: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateItemModifierLists.');
                    }
                    localVarPath = "/v2/catalog/update-item-modifier-lists";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
         * @summary UpdateItemTaxes
         * @param {UpdateItemTaxesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemTaxes: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateItemTaxes.');
                    }
                    localVarPath = "/v2/catalog/update-item-taxes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates or updates the target [CatalogObject](#type-catalogobject).
         * @summary UpsertCatalogObject
         * @param {UpsertCatalogObjectRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertCatalogObject: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling upsertCatalogObject.');
                    }
                    localVarPath = "/v2/catalog/object";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * CatalogApi - functional programming interface
 * @export
 */
exports.CatalogApiFp = function (configuration) {
    return {
        /**
         * Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
         * @summary BatchDeleteCatalogObjects
         * @param {BatchDeleteCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchDeleteCatalogObjects: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).batchDeleteCatalogObjects(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
         * @summary BatchRetrieveCatalogObjects
         * @param {BatchRetrieveCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveCatalogObjects: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).batchRetrieveCatalogObjects(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
         * @summary BatchUpsertCatalogObjects
         * @param {BatchUpsertCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUpsertCatalogObjects: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).batchUpsertCatalogObjects(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves information about the Square Catalog API, such as batch size limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
         * @summary CatalogInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInfo: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).catalogInfo(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
         * @summary DeleteCatalogObject
         * @param {string} objectId The ID of the catalog object to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a catalog item will delete its catalog item variations).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalogObject: function (objectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).deleteCatalogObject(objectId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The `types` parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set `include_deleted_objects` to `true`.
         * @summary ListCatalog
         * @param {string} [cursor] The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
         * @param {string} [types] An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the CatalogObjectType enum: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalog: function (cursor, types, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).listCatalog(cursor, types, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
         * @summary RetrieveCatalogObject
         * @param {string} objectId The object ID of any type of catalog objects to be retrieved.
         * @param {boolean} [includeRelatedObjects] If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItem&#x60;, its associated &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogImage&#x60; and &#x60;CatalogModifierList&#x60; objects will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItemVariation&#x60;, its parent &#x60;CatalogItem&#x60; will be returned in the &#x60;related_objects&#x60; field of the response.  Default value: &#x60;false&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCatalogObject: function (objectId, includeRelatedObjects, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).retrieveCatalogObject(objectId, includeRelatedObjects, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Searches for catalog items or item variations by matching supported search attribute values, including custom attribute values, against one or more of the specified query expressions,  This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints use different call conventions, including the query filter formats.
         * @summary SearchCatalogItems
         * @param {SearchCatalogItemsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCatalogItems: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).searchCatalogItems(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Searches for [CatalogObject](#type-CatalogObject) of any types against supported search attribute values, excluding custom attribute values on items or item variations, against one or more of the specified query expressions,  This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints have different call conventions, including the query filter formats.
         * @summary SearchCatalogObjects
         * @param {SearchCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCatalogObjects: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).searchCatalogObjects(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
         * @summary UpdateItemModifierLists
         * @param {UpdateItemModifierListsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemModifierLists: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).updateItemModifierLists(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
         * @summary UpdateItemTaxes
         * @param {UpdateItemTaxesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemTaxes: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).updateItemTaxes(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates or updates the target [CatalogObject](#type-catalogobject).
         * @summary UpsertCatalogObject
         * @param {UpsertCatalogObjectRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertCatalogObject: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CatalogApiAxiosParamCreator(configuration).upsertCatalogObject(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CatalogApi - factory interface
 * @export
 */
exports.CatalogApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
         * @summary BatchDeleteCatalogObjects
         * @param {BatchDeleteCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchDeleteCatalogObjects: function (body, options) {
            return exports.CatalogApiFp(configuration).batchDeleteCatalogObjects(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
         * @summary BatchRetrieveCatalogObjects
         * @param {BatchRetrieveCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveCatalogObjects: function (body, options) {
            return exports.CatalogApiFp(configuration).batchRetrieveCatalogObjects(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
         * @summary BatchUpsertCatalogObjects
         * @param {BatchUpsertCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUpsertCatalogObjects: function (body, options) {
            return exports.CatalogApiFp(configuration).batchUpsertCatalogObjects(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves information about the Square Catalog API, such as batch size limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
         * @summary CatalogInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInfo: function (options) {
            return exports.CatalogApiFp(configuration).catalogInfo(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
         * @summary DeleteCatalogObject
         * @param {string} objectId The ID of the catalog object to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a catalog item will delete its catalog item variations).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalogObject: function (objectId, options) {
            return exports.CatalogApiFp(configuration).deleteCatalogObject(objectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The `types` parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set `include_deleted_objects` to `true`.
         * @summary ListCatalog
         * @param {string} [cursor] The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
         * @param {string} [types] An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the CatalogObjectType enum: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalog: function (cursor, types, options) {
            return exports.CatalogApiFp(configuration).listCatalog(cursor, types, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
         * @summary RetrieveCatalogObject
         * @param {string} objectId The object ID of any type of catalog objects to be retrieved.
         * @param {boolean} [includeRelatedObjects] If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItem&#x60;, its associated &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogImage&#x60; and &#x60;CatalogModifierList&#x60; objects will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItemVariation&#x60;, its parent &#x60;CatalogItem&#x60; will be returned in the &#x60;related_objects&#x60; field of the response.  Default value: &#x60;false&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCatalogObject: function (objectId, includeRelatedObjects, options) {
            return exports.CatalogApiFp(configuration).retrieveCatalogObject(objectId, includeRelatedObjects, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Searches for catalog items or item variations by matching supported search attribute values, including custom attribute values, against one or more of the specified query expressions,  This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints use different call conventions, including the query filter formats.
         * @summary SearchCatalogItems
         * @param {SearchCatalogItemsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCatalogItems: function (body, options) {
            return exports.CatalogApiFp(configuration).searchCatalogItems(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Searches for [CatalogObject](#type-CatalogObject) of any types against supported search attribute values, excluding custom attribute values on items or item variations, against one or more of the specified query expressions,  This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints have different call conventions, including the query filter formats.
         * @summary SearchCatalogObjects
         * @param {SearchCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCatalogObjects: function (body, options) {
            return exports.CatalogApiFp(configuration).searchCatalogObjects(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
         * @summary UpdateItemModifierLists
         * @param {UpdateItemModifierListsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemModifierLists: function (body, options) {
            return exports.CatalogApiFp(configuration).updateItemModifierLists(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
         * @summary UpdateItemTaxes
         * @param {UpdateItemTaxesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemTaxes: function (body, options) {
            return exports.CatalogApiFp(configuration).updateItemTaxes(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates or updates the target [CatalogObject](#type-catalogobject).
         * @summary UpsertCatalogObject
         * @param {UpsertCatalogObjectRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertCatalogObject: function (body, options) {
            return exports.CatalogApiFp(configuration).upsertCatalogObject(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
var CatalogApi = /** @class */ (function (_super) {
    __extends(CatalogApi, _super);
    function CatalogApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
     * @summary BatchDeleteCatalogObjects
     * @param {BatchDeleteCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.batchDeleteCatalogObjects = function (body, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).batchDeleteCatalogObjects(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     * @summary BatchRetrieveCatalogObjects
     * @param {BatchRetrieveCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.batchRetrieveCatalogObjects = function (body, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).batchRetrieveCatalogObjects(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
     * @summary BatchUpsertCatalogObjects
     * @param {BatchUpsertCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.batchUpsertCatalogObjects = function (body, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).batchUpsertCatalogObjects(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves information about the Square Catalog API, such as batch size limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
     * @summary CatalogInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.catalogInfo = function (options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).catalogInfo(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
     * @summary DeleteCatalogObject
     * @param {string} objectId The ID of the catalog object to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a catalog item will delete its catalog item variations).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.deleteCatalogObject = function (objectId, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).deleteCatalogObject(objectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The `types` parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set `include_deleted_objects` to `true`.
     * @summary ListCatalog
     * @param {string} [cursor] The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {string} [types] An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the CatalogObjectType enum: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.listCatalog = function (cursor, types, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).listCatalog(cursor, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     * @summary RetrieveCatalogObject
     * @param {string} objectId The object ID of any type of catalog objects to be retrieved.
     * @param {boolean} [includeRelatedObjects] If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItem&#x60;, its associated &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogImage&#x60; and &#x60;CatalogModifierList&#x60; objects will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItemVariation&#x60;, its parent &#x60;CatalogItem&#x60; will be returned in the &#x60;related_objects&#x60; field of the response.  Default value: &#x60;false&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.retrieveCatalogObject = function (objectId, includeRelatedObjects, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).retrieveCatalogObject(objectId, includeRelatedObjects, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Searches for catalog items or item variations by matching supported search attribute values, including custom attribute values, against one or more of the specified query expressions,  This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints use different call conventions, including the query filter formats.
     * @summary SearchCatalogItems
     * @param {SearchCatalogItemsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.searchCatalogItems = function (body, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).searchCatalogItems(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Searches for [CatalogObject](#type-CatalogObject) of any types against supported search attribute values, excluding custom attribute values on items or item variations, against one or more of the specified query expressions,  This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints have different call conventions, including the query filter formats.
     * @summary SearchCatalogObjects
     * @param {SearchCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.searchCatalogObjects = function (body, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).searchCatalogObjects(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     * @summary UpdateItemModifierLists
     * @param {UpdateItemModifierListsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.updateItemModifierLists = function (body, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).updateItemModifierLists(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     * @summary UpdateItemTaxes
     * @param {UpdateItemTaxesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.updateItemTaxes = function (body, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).updateItemTaxes(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates or updates the target [CatalogObject](#type-catalogobject).
     * @summary UpsertCatalogObject
     * @param {UpsertCatalogObjectRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    CatalogApi.prototype.upsertCatalogObject = function (body, options) {
        var _this = this;
        return exports.CatalogApiFp(this.configuration).upsertCatalogObject(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CatalogApi;
}(base_1.BaseAPI));
exports.CatalogApi = CatalogApi;
/**
 * CheckoutApi - axios parameter creator
 * @export
 */
exports.CheckoutApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Links a `checkoutId` to a `checkout_page_url` that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
         * @summary CreateCheckout
         * @param {string} locationId The ID of the business location to associate the checkout with.
         * @param {CreateCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckout: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createCheckout.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createCheckout.');
                    }
                    localVarPath = "/v2/locations/{location_id}/checkouts"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE", "ORDERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * CheckoutApi - functional programming interface
 * @export
 */
exports.CheckoutApiFp = function (configuration) {
    return {
        /**
         * Links a `checkoutId` to a `checkout_page_url` that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
         * @summary CreateCheckout
         * @param {string} locationId The ID of the business location to associate the checkout with.
         * @param {CreateCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckout: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CheckoutApiAxiosParamCreator(configuration).createCheckout(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CheckoutApi - factory interface
 * @export
 */
exports.CheckoutApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Links a `checkoutId` to a `checkout_page_url` that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
         * @summary CreateCheckout
         * @param {string} locationId The ID of the business location to associate the checkout with.
         * @param {CreateCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckout: function (locationId, body, options) {
            return exports.CheckoutApiFp(configuration).createCheckout(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
var CheckoutApi = /** @class */ (function (_super) {
    __extends(CheckoutApi, _super);
    function CheckoutApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Links a `checkoutId` to a `checkout_page_url` that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
     * @summary CreateCheckout
     * @param {string} locationId The ID of the business location to associate the checkout with.
     * @param {CreateCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.createCheckout = function (locationId, body, options) {
        var _this = this;
        return exports.CheckoutApiFp(this.configuration).createCheckout(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CheckoutApi;
}(base_1.BaseAPI));
exports.CheckoutApi = CheckoutApi;
/**
 * CustomerGroupsApi - axios parameter creator
 * @export
 */
exports.CustomerGroupsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new customer group for a business.   The request must include the `name` value of the group.
         * @summary CreateCustomerGroup
         * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerGroup: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createCustomerGroup.');
                    }
                    localVarPath = "/v2/customers/groups";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes a customer group as identified by the `group_id` value.
         * @summary DeleteCustomerGroup
         * @param {string} groupId The ID of the customer group to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerGroup: function (groupId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'groupId' is not null or undefined
                    if (groupId === null || groupId === undefined) {
                        throw new base_1.RequiredError('groupId', 'Required parameter groupId was null or undefined when calling deleteCustomerGroup.');
                    }
                    localVarPath = "/v2/customers/groups/{group_id}"
                        .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves the list of customer groups of a business.
         * @summary ListCustomerGroups
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerGroups: function (cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/customers/groups";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a specific customer group as identified by the `group_id` value.
         * @summary RetrieveCustomerGroup
         * @param {string} groupId The ID of the customer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomerGroup: function (groupId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'groupId' is not null or undefined
                    if (groupId === null || groupId === undefined) {
                        throw new base_1.RequiredError('groupId', 'Required parameter groupId was null or undefined when calling retrieveCustomerGroup.');
                    }
                    localVarPath = "/v2/customers/groups/{group_id}"
                        .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates a customer group as identified by the `group_id` value.
         * @summary UpdateCustomerGroup
         * @param {string} groupId The ID of the customer group to update.
         * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerGroup: function (groupId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'groupId' is not null or undefined
                    if (groupId === null || groupId === undefined) {
                        throw new base_1.RequiredError('groupId', 'Required parameter groupId was null or undefined when calling updateCustomerGroup.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateCustomerGroup.');
                    }
                    localVarPath = "/v2/customers/groups/{group_id}"
                        .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_WRITE", "CUSTOMERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * CustomerGroupsApi - functional programming interface
 * @export
 */
exports.CustomerGroupsApiFp = function (configuration) {
    return {
        /**
         * Creates a new customer group for a business.   The request must include the `name` value of the group.
         * @summary CreateCustomerGroup
         * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerGroup: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomerGroupsApiAxiosParamCreator(configuration).createCustomerGroup(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a customer group as identified by the `group_id` value.
         * @summary DeleteCustomerGroup
         * @param {string} groupId The ID of the customer group to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerGroup: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomerGroupsApiAxiosParamCreator(configuration).deleteCustomerGroup(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the list of customer groups of a business.
         * @summary ListCustomerGroups
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerGroups: function (cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomerGroupsApiAxiosParamCreator(configuration).listCustomerGroups(cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a specific customer group as identified by the `group_id` value.
         * @summary RetrieveCustomerGroup
         * @param {string} groupId The ID of the customer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomerGroup: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomerGroupsApiAxiosParamCreator(configuration).retrieveCustomerGroup(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates a customer group as identified by the `group_id` value.
         * @summary UpdateCustomerGroup
         * @param {string} groupId The ID of the customer group to update.
         * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerGroup: function (groupId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomerGroupsApiAxiosParamCreator(configuration).updateCustomerGroup(groupId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CustomerGroupsApi - factory interface
 * @export
 */
exports.CustomerGroupsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Creates a new customer group for a business.   The request must include the `name` value of the group.
         * @summary CreateCustomerGroup
         * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerGroup: function (body, options) {
            return exports.CustomerGroupsApiFp(configuration).createCustomerGroup(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a customer group as identified by the `group_id` value.
         * @summary DeleteCustomerGroup
         * @param {string} groupId The ID of the customer group to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerGroup: function (groupId, options) {
            return exports.CustomerGroupsApiFp(configuration).deleteCustomerGroup(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the list of customer groups of a business.
         * @summary ListCustomerGroups
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerGroups: function (cursor, options) {
            return exports.CustomerGroupsApiFp(configuration).listCustomerGroups(cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a specific customer group as identified by the `group_id` value.
         * @summary RetrieveCustomerGroup
         * @param {string} groupId The ID of the customer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomerGroup: function (groupId, options) {
            return exports.CustomerGroupsApiFp(configuration).retrieveCustomerGroup(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a customer group as identified by the `group_id` value.
         * @summary UpdateCustomerGroup
         * @param {string} groupId The ID of the customer group to update.
         * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerGroup: function (groupId, body, options) {
            return exports.CustomerGroupsApiFp(configuration).updateCustomerGroup(groupId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CustomerGroupsApi - object-oriented interface
 * @export
 * @class CustomerGroupsApi
 * @extends {BaseAPI}
 */
var CustomerGroupsApi = /** @class */ (function (_super) {
    __extends(CustomerGroupsApi, _super);
    function CustomerGroupsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new customer group for a business.   The request must include the `name` value of the group.
     * @summary CreateCustomerGroup
     * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    CustomerGroupsApi.prototype.createCustomerGroup = function (body, options) {
        var _this = this;
        return exports.CustomerGroupsApiFp(this.configuration).createCustomerGroup(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a customer group as identified by the `group_id` value.
     * @summary DeleteCustomerGroup
     * @param {string} groupId The ID of the customer group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    CustomerGroupsApi.prototype.deleteCustomerGroup = function (groupId, options) {
        var _this = this;
        return exports.CustomerGroupsApiFp(this.configuration).deleteCustomerGroup(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the list of customer groups of a business.
     * @summary ListCustomerGroups
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    CustomerGroupsApi.prototype.listCustomerGroups = function (cursor, options) {
        var _this = this;
        return exports.CustomerGroupsApiFp(this.configuration).listCustomerGroups(cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a specific customer group as identified by the `group_id` value.
     * @summary RetrieveCustomerGroup
     * @param {string} groupId The ID of the customer group to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    CustomerGroupsApi.prototype.retrieveCustomerGroup = function (groupId, options) {
        var _this = this;
        return exports.CustomerGroupsApiFp(this.configuration).retrieveCustomerGroup(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a customer group as identified by the `group_id` value.
     * @summary UpdateCustomerGroup
     * @param {string} groupId The ID of the customer group to update.
     * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    CustomerGroupsApi.prototype.updateCustomerGroup = function (groupId, body, options) {
        var _this = this;
        return exports.CustomerGroupsApiFp(this.configuration).updateCustomerGroup(groupId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CustomerGroupsApi;
}(base_1.BaseAPI));
exports.CustomerGroupsApi = CustomerGroupsApi;
/**
 * CustomerSegmentsApi - axios parameter creator
 * @export
 */
exports.CustomerSegmentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieves the list of customer segments of a business.
         * @summary ListCustomerSegments
         * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerSegments: function (cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/customers/segments";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a specific customer segment as identified by the `segment_id` value.
         * @summary RetrieveCustomerSegment
         * @param {string} segmentId The Square-issued ID of the customer segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomerSegment: function (segmentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'segmentId' is not null or undefined
                    if (segmentId === null || segmentId === undefined) {
                        throw new base_1.RequiredError('segmentId', 'Required parameter segmentId was null or undefined when calling retrieveCustomerSegment.');
                    }
                    localVarPath = "/v2/customers/segments/{segment_id}"
                        .replace("{" + "segment_id" + "}", encodeURIComponent(String(segmentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * CustomerSegmentsApi - functional programming interface
 * @export
 */
exports.CustomerSegmentsApiFp = function (configuration) {
    return {
        /**
         * Retrieves the list of customer segments of a business.
         * @summary ListCustomerSegments
         * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerSegments: function (cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomerSegmentsApiAxiosParamCreator(configuration).listCustomerSegments(cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a specific customer segment as identified by the `segment_id` value.
         * @summary RetrieveCustomerSegment
         * @param {string} segmentId The Square-issued ID of the customer segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomerSegment: function (segmentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomerSegmentsApiAxiosParamCreator(configuration).retrieveCustomerSegment(segmentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CustomerSegmentsApi - factory interface
 * @export
 */
exports.CustomerSegmentsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Retrieves the list of customer segments of a business.
         * @summary ListCustomerSegments
         * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerSegments: function (cursor, options) {
            return exports.CustomerSegmentsApiFp(configuration).listCustomerSegments(cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a specific customer segment as identified by the `segment_id` value.
         * @summary RetrieveCustomerSegment
         * @param {string} segmentId The Square-issued ID of the customer segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomerSegment: function (segmentId, options) {
            return exports.CustomerSegmentsApiFp(configuration).retrieveCustomerSegment(segmentId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CustomerSegmentsApi - object-oriented interface
 * @export
 * @class CustomerSegmentsApi
 * @extends {BaseAPI}
 */
var CustomerSegmentsApi = /** @class */ (function (_super) {
    __extends(CustomerSegmentsApi, _super);
    function CustomerSegmentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves the list of customer segments of a business.
     * @summary ListCustomerSegments
     * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSegmentsApi
     */
    CustomerSegmentsApi.prototype.listCustomerSegments = function (cursor, options) {
        var _this = this;
        return exports.CustomerSegmentsApiFp(this.configuration).listCustomerSegments(cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a specific customer segment as identified by the `segment_id` value.
     * @summary RetrieveCustomerSegment
     * @param {string} segmentId The Square-issued ID of the customer segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSegmentsApi
     */
    CustomerSegmentsApi.prototype.retrieveCustomerSegment = function (segmentId, options) {
        var _this = this;
        return exports.CustomerSegmentsApiFp(this.configuration).retrieveCustomerSegment(segmentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CustomerSegmentsApi;
}(base_1.BaseAPI));
exports.CustomerSegmentsApi = CustomerSegmentsApi;
/**
 * CustomersApi - axios parameter creator
 * @export
 */
exports.CustomersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds a group membership to a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
         * @summary AddGroupToCustomer
         * @param {string} customerId The ID of the customer to add to a group.
         * @param {string} groupId The ID of the customer group to add the customer to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroupToCustomer: function (customerId, groupId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'customerId' is not null or undefined
                    if (customerId === null || customerId === undefined) {
                        throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addGroupToCustomer.');
                    }
                    // verify required parameter 'groupId' is not null or undefined
                    if (groupId === null || groupId === undefined) {
                        throw new base_1.RequiredError('groupId', 'Required parameter groupId was null or undefined when calling addGroupToCustomer.');
                    }
                    localVarPath = "/v2/customers/{customer_id}/groups/{group_id}"
                        .replace("{" + "customer_id" + "}", encodeURIComponent(String(customerId)))
                        .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`
         * @summary CreateCustomer
         * @param {CreateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createCustomer.');
                    }
                    localVarPath = "/v2/customers";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Adds a card on file to an existing customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
         * @summary CreateCustomerCard
         * @param {string} customerId The Square ID of the customer profile the card is linked to.
         * @param {CreateCustomerCardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerCard: function (customerId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'customerId' is not null or undefined
                    if (customerId === null || customerId === undefined) {
                        throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling createCustomerCard.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createCustomerCard.');
                    }
                    localVarPath = "/v2/customers/{customer_id}/cards"
                        .replace("{" + "customer_id" + "}", encodeURIComponent(String(customerId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to delete merged profiles.
         * @summary DeleteCustomer
         * @param {string} customerId The ID of the customer to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'customerId' is not null or undefined
                    if (customerId === null || customerId === undefined) {
                        throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling deleteCustomer.');
                    }
                    localVarPath = "/v2/customers/{customer_id}"
                        .replace("{" + "customer_id" + "}", encodeURIComponent(String(customerId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Removes a card on file from a customer.
         * @summary DeleteCustomerCard
         * @param {string} customerId The ID of the customer that the card on file belongs to.
         * @param {string} cardId The ID of the card on file to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerCard: function (customerId, cardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'customerId' is not null or undefined
                    if (customerId === null || customerId === undefined) {
                        throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling deleteCustomerCard.');
                    }
                    // verify required parameter 'cardId' is not null or undefined
                    if (cardId === null || cardId === undefined) {
                        throw new base_1.RequiredError('cardId', 'Required parameter cardId was null or undefined when calling deleteCustomerCard.');
                    }
                    localVarPath = "/v2/customers/{customer_id}/cards/{card_id}"
                        .replace("{" + "customer_id" + "}", encodeURIComponent(String(customerId)))
                        .replace("{" + "card_id" + "}", encodeURIComponent(String(cardId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists customer profiles associated with a Square account.  Under normal operating conditions, newly created or updated customer profiles become available for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
         * @summary ListCustomers
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
         * @param {string} [sortField] Indicates how Customers should be sorted.  Default: &#x60;DEFAULT&#x60;.
         * @param {string} [sortOrder] Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order.  Default: &#x60;ASC&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers: function (cursor, sortField, sortOrder, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/customers";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    if (sortField !== undefined) {
                        localVarQueryParameter['sort_field'] = sortField;
                    }
                    if (sortOrder !== undefined) {
                        localVarQueryParameter['sort_order'] = sortOrder;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Removes a group membership from a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
         * @summary RemoveGroupFromCustomer
         * @param {string} customerId The ID of the customer to remove from the group.
         * @param {string} groupId The ID of the customer group to remove the customer from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGroupFromCustomer: function (customerId, groupId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'customerId' is not null or undefined
                    if (customerId === null || customerId === undefined) {
                        throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeGroupFromCustomer.');
                    }
                    // verify required parameter 'groupId' is not null or undefined
                    if (groupId === null || groupId === undefined) {
                        throw new base_1.RequiredError('groupId', 'Required parameter groupId was null or undefined when calling removeGroupFromCustomer.');
                    }
                    localVarPath = "/v2/customers/{customer_id}/groups/{group_id}"
                        .replace("{" + "customer_id" + "}", encodeURIComponent(String(customerId)))
                        .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns details for a single customer.
         * @summary RetrieveCustomer
         * @param {string} customerId The ID of the customer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomer: function (customerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'customerId' is not null or undefined
                    if (customerId === null || customerId === undefined) {
                        throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling retrieveCustomer.');
                    }
                    localVarPath = "/v2/customers/{customer_id}"
                        .replace("{" + "customer_id" + "}", encodeURIComponent(String(customerId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Searches the customer profiles associated with a Square account using a supported query filter.  Calling `SearchCustomers` without any explicit query filter returns all customer profiles ordered alphabetically based on `given_name` and `family_name`.  Under normal operating conditions, newly created or updated customer profiles become available for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
         * @summary SearchCustomers
         * @param {SearchCustomersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCustomers: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchCustomers.');
                    }
                    localVarPath = "/v2/customers/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to update merged profiles.  You cannot edit a customer\'s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-Customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-Customers-createcustomercard) endpoint.
         * @summary UpdateCustomer
         * @param {string} customerId The ID of the customer to update.
         * @param {UpdateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (customerId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'customerId' is not null or undefined
                    if (customerId === null || customerId === undefined) {
                        throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateCustomer.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateCustomer.');
                    }
                    localVarPath = "/v2/customers/{customer_id}"
                        .replace("{" + "customer_id" + "}", encodeURIComponent(String(customerId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * CustomersApi - functional programming interface
 * @export
 */
exports.CustomersApiFp = function (configuration) {
    return {
        /**
         * Adds a group membership to a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
         * @summary AddGroupToCustomer
         * @param {string} customerId The ID of the customer to add to a group.
         * @param {string} groupId The ID of the customer group to add the customer to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroupToCustomer: function (customerId, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomersApiAxiosParamCreator(configuration).addGroupToCustomer(customerId, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`
         * @summary CreateCustomer
         * @param {CreateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomersApiAxiosParamCreator(configuration).createCustomer(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Adds a card on file to an existing customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
         * @summary CreateCustomerCard
         * @param {string} customerId The Square ID of the customer profile the card is linked to.
         * @param {CreateCustomerCardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerCard: function (customerId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomersApiAxiosParamCreator(configuration).createCustomerCard(customerId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to delete merged profiles.
         * @summary DeleteCustomer
         * @param {string} customerId The ID of the customer to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomersApiAxiosParamCreator(configuration).deleteCustomer(customerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Removes a card on file from a customer.
         * @summary DeleteCustomerCard
         * @param {string} customerId The ID of the customer that the card on file belongs to.
         * @param {string} cardId The ID of the card on file to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerCard: function (customerId, cardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomersApiAxiosParamCreator(configuration).deleteCustomerCard(customerId, cardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists customer profiles associated with a Square account.  Under normal operating conditions, newly created or updated customer profiles become available for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
         * @summary ListCustomers
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
         * @param {string} [sortField] Indicates how Customers should be sorted.  Default: &#x60;DEFAULT&#x60;.
         * @param {string} [sortOrder] Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order.  Default: &#x60;ASC&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers: function (cursor, sortField, sortOrder, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomersApiAxiosParamCreator(configuration).listCustomers(cursor, sortField, sortOrder, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Removes a group membership from a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
         * @summary RemoveGroupFromCustomer
         * @param {string} customerId The ID of the customer to remove from the group.
         * @param {string} groupId The ID of the customer group to remove the customer from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGroupFromCustomer: function (customerId, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomersApiAxiosParamCreator(configuration).removeGroupFromCustomer(customerId, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns details for a single customer.
         * @summary RetrieveCustomer
         * @param {string} customerId The ID of the customer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomer: function (customerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomersApiAxiosParamCreator(configuration).retrieveCustomer(customerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Searches the customer profiles associated with a Square account using a supported query filter.  Calling `SearchCustomers` without any explicit query filter returns all customer profiles ordered alphabetically based on `given_name` and `family_name`.  Under normal operating conditions, newly created or updated customer profiles become available for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
         * @summary SearchCustomers
         * @param {SearchCustomersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCustomers: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomersApiAxiosParamCreator(configuration).searchCustomers(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to update merged profiles.  You cannot edit a customer\'s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-Customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-Customers-createcustomercard) endpoint.
         * @summary UpdateCustomer
         * @param {string} customerId The ID of the customer to update.
         * @param {UpdateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (customerId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CustomersApiAxiosParamCreator(configuration).updateCustomer(customerId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CustomersApi - factory interface
 * @export
 */
exports.CustomersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Adds a group membership to a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
         * @summary AddGroupToCustomer
         * @param {string} customerId The ID of the customer to add to a group.
         * @param {string} groupId The ID of the customer group to add the customer to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroupToCustomer: function (customerId, groupId, options) {
            return exports.CustomersApiFp(configuration).addGroupToCustomer(customerId, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`
         * @summary CreateCustomer
         * @param {CreateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: function (body, options) {
            return exports.CustomersApiFp(configuration).createCustomer(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Adds a card on file to an existing customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
         * @summary CreateCustomerCard
         * @param {string} customerId The Square ID of the customer profile the card is linked to.
         * @param {CreateCustomerCardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerCard: function (customerId, body, options) {
            return exports.CustomersApiFp(configuration).createCustomerCard(customerId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to delete merged profiles.
         * @summary DeleteCustomer
         * @param {string} customerId The ID of the customer to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customerId, options) {
            return exports.CustomersApiFp(configuration).deleteCustomer(customerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes a card on file from a customer.
         * @summary DeleteCustomerCard
         * @param {string} customerId The ID of the customer that the card on file belongs to.
         * @param {string} cardId The ID of the card on file to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerCard: function (customerId, cardId, options) {
            return exports.CustomersApiFp(configuration).deleteCustomerCard(customerId, cardId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists customer profiles associated with a Square account.  Under normal operating conditions, newly created or updated customer profiles become available for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
         * @summary ListCustomers
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
         * @param {string} [sortField] Indicates how Customers should be sorted.  Default: &#x60;DEFAULT&#x60;.
         * @param {string} [sortOrder] Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order.  Default: &#x60;ASC&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers: function (cursor, sortField, sortOrder, options) {
            return exports.CustomersApiFp(configuration).listCustomers(cursor, sortField, sortOrder, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes a group membership from a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
         * @summary RemoveGroupFromCustomer
         * @param {string} customerId The ID of the customer to remove from the group.
         * @param {string} groupId The ID of the customer group to remove the customer from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGroupFromCustomer: function (customerId, groupId, options) {
            return exports.CustomersApiFp(configuration).removeGroupFromCustomer(customerId, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns details for a single customer.
         * @summary RetrieveCustomer
         * @param {string} customerId The ID of the customer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCustomer: function (customerId, options) {
            return exports.CustomersApiFp(configuration).retrieveCustomer(customerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Searches the customer profiles associated with a Square account using a supported query filter.  Calling `SearchCustomers` without any explicit query filter returns all customer profiles ordered alphabetically based on `given_name` and `family_name`.  Under normal operating conditions, newly created or updated customer profiles become available for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
         * @summary SearchCustomers
         * @param {SearchCustomersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCustomers: function (body, options) {
            return exports.CustomersApiFp(configuration).searchCustomers(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to update merged profiles.  You cannot edit a customer\'s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-Customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-Customers-createcustomercard) endpoint.
         * @summary UpdateCustomer
         * @param {string} customerId The ID of the customer to update.
         * @param {UpdateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (customerId, body, options) {
            return exports.CustomersApiFp(configuration).updateCustomer(customerId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
var CustomersApi = /** @class */ (function (_super) {
    __extends(CustomersApi, _super);
    function CustomersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a group membership to a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
     * @summary AddGroupToCustomer
     * @param {string} customerId The ID of the customer to add to a group.
     * @param {string} groupId The ID of the customer group to add the customer to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.addGroupToCustomer = function (customerId, groupId, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).addGroupToCustomer(customerId, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`
     * @summary CreateCustomer
     * @param {CreateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.createCustomer = function (body, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).createCustomer(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Adds a card on file to an existing customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
     * @summary CreateCustomerCard
     * @param {string} customerId The Square ID of the customer profile the card is linked to.
     * @param {CreateCustomerCardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.createCustomerCard = function (customerId, body, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).createCustomerCard(customerId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to delete merged profiles.
     * @summary DeleteCustomer
     * @param {string} customerId The ID of the customer to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.deleteCustomer = function (customerId, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).deleteCustomer(customerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes a card on file from a customer.
     * @summary DeleteCustomerCard
     * @param {string} customerId The ID of the customer that the card on file belongs to.
     * @param {string} cardId The ID of the card on file to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.deleteCustomerCard = function (customerId, cardId, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).deleteCustomerCard(customerId, cardId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists customer profiles associated with a Square account.  Under normal operating conditions, newly created or updated customer profiles become available for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @summary ListCustomers
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {string} [sortField] Indicates how Customers should be sorted.  Default: &#x60;DEFAULT&#x60;.
     * @param {string} [sortOrder] Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order.  Default: &#x60;ASC&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.listCustomers = function (cursor, sortField, sortOrder, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).listCustomers(cursor, sortField, sortOrder, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes a group membership from a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
     * @summary RemoveGroupFromCustomer
     * @param {string} customerId The ID of the customer to remove from the group.
     * @param {string} groupId The ID of the customer group to remove the customer from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.removeGroupFromCustomer = function (customerId, groupId, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).removeGroupFromCustomer(customerId, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns details for a single customer.
     * @summary RetrieveCustomer
     * @param {string} customerId The ID of the customer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.retrieveCustomer = function (customerId, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).retrieveCustomer(customerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Searches the customer profiles associated with a Square account using a supported query filter.  Calling `SearchCustomers` without any explicit query filter returns all customer profiles ordered alphabetically based on `given_name` and `family_name`.  Under normal operating conditions, newly created or updated customer profiles become available for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @summary SearchCustomers
     * @param {SearchCustomersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.searchCustomers = function (body, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).searchCustomers(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to update merged profiles.  You cannot edit a customer\'s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-Customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-Customers-createcustomercard) endpoint.
     * @summary UpdateCustomer
     * @param {string} customerId The ID of the customer to update.
     * @param {UpdateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.updateCustomer = function (customerId, body, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).updateCustomer(customerId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CustomersApi;
}(base_1.BaseAPI));
exports.CustomersApi = CustomersApi;
/**
 * DevicesApi - axios parameter creator
 * @export
 */
exports.DevicesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
         * @summary CreateDeviceCode
         * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceCode: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createDeviceCode.');
                    }
                    localVarPath = "/v2/devices/codes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["DEVICE_CREDENTIAL_MANAGEMENT"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves DeviceCode with the associated ID.
         * @summary GetDeviceCode
         * @param {string} id The unique identifier for the device code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCode: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getDeviceCode.');
                    }
                    localVarPath = "/v2/devices/codes/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["DEVICE_CREDENTIAL_MANAGEMENT"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all DeviceCodes associated with the merchant.
         * @summary ListDeviceCodes
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
         * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
         * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeviceCodes: function (cursor, locationId, productType, status, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/devices/codes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["DEVICE_CREDENTIAL_MANAGEMENT"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    if (productType !== undefined) {
                        localVarQueryParameter['product_type'] = productType;
                    }
                    if (status !== undefined) {
                        localVarQueryParameter['status'] = status;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * DevicesApi - functional programming interface
 * @export
 */
exports.DevicesApiFp = function (configuration) {
    return {
        /**
         * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
         * @summary CreateDeviceCode
         * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceCode: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DevicesApiAxiosParamCreator(configuration).createDeviceCode(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves DeviceCode with the associated ID.
         * @summary GetDeviceCode
         * @param {string} id The unique identifier for the device code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCode: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DevicesApiAxiosParamCreator(configuration).getDeviceCode(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all DeviceCodes associated with the merchant.
         * @summary ListDeviceCodes
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
         * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
         * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeviceCodes: function (cursor, locationId, productType, status, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DevicesApiAxiosParamCreator(configuration).listDeviceCodes(cursor, locationId, productType, status, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * DevicesApi - factory interface
 * @export
 */
exports.DevicesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
         * @summary CreateDeviceCode
         * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceCode: function (body, options) {
            return exports.DevicesApiFp(configuration).createDeviceCode(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves DeviceCode with the associated ID.
         * @summary GetDeviceCode
         * @param {string} id The unique identifier for the device code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCode: function (id, options) {
            return exports.DevicesApiFp(configuration).getDeviceCode(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all DeviceCodes associated with the merchant.
         * @summary ListDeviceCodes
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
         * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
         * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeviceCodes: function (cursor, locationId, productType, status, options) {
            return exports.DevicesApiFp(configuration).listDeviceCodes(cursor, locationId, productType, status, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
var DevicesApi = /** @class */ (function (_super) {
    __extends(DevicesApi, _super);
    function DevicesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
     * @summary CreateDeviceCode
     * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.createDeviceCode = function (body, options) {
        var _this = this;
        return exports.DevicesApiFp(this.configuration).createDeviceCode(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves DeviceCode with the associated ID.
     * @summary GetDeviceCode
     * @param {string} id The unique identifier for the device code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.getDeviceCode = function (id, options) {
        var _this = this;
        return exports.DevicesApiFp(this.configuration).getDeviceCode(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all DeviceCodes associated with the merchant.
     * @summary ListDeviceCodes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
     * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
     * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.listDeviceCodes = function (cursor, locationId, productType, status, options) {
        var _this = this;
        return exports.DevicesApiFp(this.configuration).listDeviceCodes(cursor, locationId, productType, status, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DevicesApi;
}(base_1.BaseAPI));
exports.DevicesApi = DevicesApi;
/**
 * DisputesApi - axios parameter creator
 * @export
 */
exports.DisputesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
         * @summary AcceptDispute
         * @param {string} disputeId ID of the dispute you want to accept.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptDispute: function (disputeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'disputeId' is not null or undefined
                    if (disputeId === null || disputeId === undefined) {
                        throw new base_1.RequiredError('disputeId', 'Required parameter disputeId was null or undefined when calling acceptDispute.');
                    }
                    localVarPath = "/v2/disputes/{dispute_id}/accept"
                        .replace("{" + "dispute_id" + "}", encodeURIComponent(String(disputeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Uploads text to use as evidence for a dispute challenge.
         * @summary CreateDisputeEvidenceText
         * @param {string} disputeId The ID of the dispute you want to upload evidence for.
         * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDisputeEvidenceText: function (disputeId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'disputeId' is not null or undefined
                    if (disputeId === null || disputeId === undefined) {
                        throw new base_1.RequiredError('disputeId', 'Required parameter disputeId was null or undefined when calling createDisputeEvidenceText.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createDisputeEvidenceText.');
                    }
                    localVarPath = "/v2/disputes/{dispute_id}/evidence_text"
                        .replace("{" + "dispute_id" + "}", encodeURIComponent(String(disputeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a list of evidence associated with a dispute.
         * @summary ListDisputeEvidence
         * @param {string} disputeId The ID of the dispute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDisputeEvidence: function (disputeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'disputeId' is not null or undefined
                    if (disputeId === null || disputeId === undefined) {
                        throw new base_1.RequiredError('disputeId', 'Required parameter disputeId was null or undefined when calling listDisputeEvidence.');
                    }
                    localVarPath = "/v2/disputes/{dispute_id}/evidence"
                        .replace("{" + "dispute_id" + "}", encodeURIComponent(String(disputeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a list of disputes associated with a particular account.
         * @summary ListDisputes
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
         * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
         * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDisputes: function (cursor, states, locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/disputes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    if (states !== undefined) {
                        localVarQueryParameter['states'] = states;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
         * @summary RemoveDisputeEvidence
         * @param {string} disputeId The ID of the dispute you want to remove evidence from.
         * @param {string} evidenceId The ID of the evidence you want to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDisputeEvidence: function (disputeId, evidenceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'disputeId' is not null or undefined
                    if (disputeId === null || disputeId === undefined) {
                        throw new base_1.RequiredError('disputeId', 'Required parameter disputeId was null or undefined when calling removeDisputeEvidence.');
                    }
                    // verify required parameter 'evidenceId' is not null or undefined
                    if (evidenceId === null || evidenceId === undefined) {
                        throw new base_1.RequiredError('evidenceId', 'Required parameter evidenceId was null or undefined when calling removeDisputeEvidence.');
                    }
                    localVarPath = "/v2/disputes/{dispute_id}/evidence/{evidence_id}"
                        .replace("{" + "dispute_id" + "}", encodeURIComponent(String(disputeId)))
                        .replace("{" + "evidence_id" + "}", encodeURIComponent(String(evidenceId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns details of a specific dispute.
         * @summary RetrieveDispute
         * @param {string} disputeId The ID of the dispute you want more details about.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDispute: function (disputeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'disputeId' is not null or undefined
                    if (disputeId === null || disputeId === undefined) {
                        throw new base_1.RequiredError('disputeId', 'Required parameter disputeId was null or undefined when calling retrieveDispute.');
                    }
                    localVarPath = "/v2/disputes/{dispute_id}"
                        .replace("{" + "dispute_id" + "}", encodeURIComponent(String(disputeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
         * @summary RetrieveDisputeEvidence
         * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
         * @param {string} evidenceId The ID of the evidence to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDisputeEvidence: function (disputeId, evidenceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'disputeId' is not null or undefined
                    if (disputeId === null || disputeId === undefined) {
                        throw new base_1.RequiredError('disputeId', 'Required parameter disputeId was null or undefined when calling retrieveDisputeEvidence.');
                    }
                    // verify required parameter 'evidenceId' is not null or undefined
                    if (evidenceId === null || evidenceId === undefined) {
                        throw new base_1.RequiredError('evidenceId', 'Required parameter evidenceId was null or undefined when calling retrieveDisputeEvidence.');
                    }
                    localVarPath = "/v2/disputes/{dispute_id}/evidence/{evidence_id}"
                        .replace("{" + "dispute_id" + "}", encodeURIComponent(String(disputeId)))
                        .replace("{" + "evidence_id" + "}", encodeURIComponent(String(evidenceId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
         * @summary SubmitEvidence
         * @param {string} disputeId The ID of the dispute you want to submit evidence for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEvidence: function (disputeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'disputeId' is not null or undefined
                    if (disputeId === null || disputeId === undefined) {
                        throw new base_1.RequiredError('disputeId', 'Required parameter disputeId was null or undefined when calling submitEvidence.');
                    }
                    localVarPath = "/v2/disputes/{dispute_id}/submit-evidence"
                        .replace("{" + "dispute_id" + "}", encodeURIComponent(String(disputeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * DisputesApi - functional programming interface
 * @export
 */
exports.DisputesApiFp = function (configuration) {
    return {
        /**
         * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
         * @summary AcceptDispute
         * @param {string} disputeId ID of the dispute you want to accept.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptDispute: function (disputeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DisputesApiAxiosParamCreator(configuration).acceptDispute(disputeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Uploads text to use as evidence for a dispute challenge.
         * @summary CreateDisputeEvidenceText
         * @param {string} disputeId The ID of the dispute you want to upload evidence for.
         * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDisputeEvidenceText: function (disputeId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DisputesApiAxiosParamCreator(configuration).createDisputeEvidenceText(disputeId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of evidence associated with a dispute.
         * @summary ListDisputeEvidence
         * @param {string} disputeId The ID of the dispute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDisputeEvidence: function (disputeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DisputesApiAxiosParamCreator(configuration).listDisputeEvidence(disputeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of disputes associated with a particular account.
         * @summary ListDisputes
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
         * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
         * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDisputes: function (cursor, states, locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DisputesApiAxiosParamCreator(configuration).listDisputes(cursor, states, locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
         * @summary RemoveDisputeEvidence
         * @param {string} disputeId The ID of the dispute you want to remove evidence from.
         * @param {string} evidenceId The ID of the evidence you want to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDisputeEvidence: function (disputeId, evidenceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DisputesApiAxiosParamCreator(configuration).removeDisputeEvidence(disputeId, evidenceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns details of a specific dispute.
         * @summary RetrieveDispute
         * @param {string} disputeId The ID of the dispute you want more details about.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDispute: function (disputeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DisputesApiAxiosParamCreator(configuration).retrieveDispute(disputeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
         * @summary RetrieveDisputeEvidence
         * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
         * @param {string} evidenceId The ID of the evidence to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDisputeEvidence: function (disputeId, evidenceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DisputesApiAxiosParamCreator(configuration).retrieveDisputeEvidence(disputeId, evidenceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
         * @summary SubmitEvidence
         * @param {string} disputeId The ID of the dispute you want to submit evidence for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEvidence: function (disputeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DisputesApiAxiosParamCreator(configuration).submitEvidence(disputeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * DisputesApi - factory interface
 * @export
 */
exports.DisputesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
         * @summary AcceptDispute
         * @param {string} disputeId ID of the dispute you want to accept.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptDispute: function (disputeId, options) {
            return exports.DisputesApiFp(configuration).acceptDispute(disputeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Uploads text to use as evidence for a dispute challenge.
         * @summary CreateDisputeEvidenceText
         * @param {string} disputeId The ID of the dispute you want to upload evidence for.
         * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDisputeEvidenceText: function (disputeId, body, options) {
            return exports.DisputesApiFp(configuration).createDisputeEvidenceText(disputeId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of evidence associated with a dispute.
         * @summary ListDisputeEvidence
         * @param {string} disputeId The ID of the dispute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDisputeEvidence: function (disputeId, options) {
            return exports.DisputesApiFp(configuration).listDisputeEvidence(disputeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of disputes associated with a particular account.
         * @summary ListDisputes
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
         * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
         * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDisputes: function (cursor, states, locationId, options) {
            return exports.DisputesApiFp(configuration).listDisputes(cursor, states, locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
         * @summary RemoveDisputeEvidence
         * @param {string} disputeId The ID of the dispute you want to remove evidence from.
         * @param {string} evidenceId The ID of the evidence you want to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDisputeEvidence: function (disputeId, evidenceId, options) {
            return exports.DisputesApiFp(configuration).removeDisputeEvidence(disputeId, evidenceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns details of a specific dispute.
         * @summary RetrieveDispute
         * @param {string} disputeId The ID of the dispute you want more details about.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDispute: function (disputeId, options) {
            return exports.DisputesApiFp(configuration).retrieveDispute(disputeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
         * @summary RetrieveDisputeEvidence
         * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
         * @param {string} evidenceId The ID of the evidence to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDisputeEvidence: function (disputeId, evidenceId, options) {
            return exports.DisputesApiFp(configuration).retrieveDisputeEvidence(disputeId, evidenceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
         * @summary SubmitEvidence
         * @param {string} disputeId The ID of the dispute you want to submit evidence for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEvidence: function (disputeId, options) {
            return exports.DisputesApiFp(configuration).submitEvidence(disputeId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * DisputesApi - object-oriented interface
 * @export
 * @class DisputesApi
 * @extends {BaseAPI}
 */
var DisputesApi = /** @class */ (function (_super) {
    __extends(DisputesApi, _super);
    function DisputesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
     * @summary AcceptDispute
     * @param {string} disputeId ID of the dispute you want to accept.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    DisputesApi.prototype.acceptDispute = function (disputeId, options) {
        var _this = this;
        return exports.DisputesApiFp(this.configuration).acceptDispute(disputeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Uploads text to use as evidence for a dispute challenge.
     * @summary CreateDisputeEvidenceText
     * @param {string} disputeId The ID of the dispute you want to upload evidence for.
     * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    DisputesApi.prototype.createDisputeEvidenceText = function (disputeId, body, options) {
        var _this = this;
        return exports.DisputesApiFp(this.configuration).createDisputeEvidenceText(disputeId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of evidence associated with a dispute.
     * @summary ListDisputeEvidence
     * @param {string} disputeId The ID of the dispute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    DisputesApi.prototype.listDisputeEvidence = function (disputeId, options) {
        var _this = this;
        return exports.DisputesApiFp(this.configuration).listDisputeEvidence(disputeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of disputes associated with a particular account.
     * @summary ListDisputes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
     * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    DisputesApi.prototype.listDisputes = function (cursor, states, locationId, options) {
        var _this = this;
        return exports.DisputesApiFp(this.configuration).listDisputes(cursor, states, locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
     * @summary RemoveDisputeEvidence
     * @param {string} disputeId The ID of the dispute you want to remove evidence from.
     * @param {string} evidenceId The ID of the evidence you want to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    DisputesApi.prototype.removeDisputeEvidence = function (disputeId, evidenceId, options) {
        var _this = this;
        return exports.DisputesApiFp(this.configuration).removeDisputeEvidence(disputeId, evidenceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns details of a specific dispute.
     * @summary RetrieveDispute
     * @param {string} disputeId The ID of the dispute you want more details about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    DisputesApi.prototype.retrieveDispute = function (disputeId, options) {
        var _this = this;
        return exports.DisputesApiFp(this.configuration).retrieveDispute(disputeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @summary RetrieveDisputeEvidence
     * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
     * @param {string} evidenceId The ID of the evidence to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    DisputesApi.prototype.retrieveDisputeEvidence = function (disputeId, evidenceId, options) {
        var _this = this;
        return exports.DisputesApiFp(this.configuration).retrieveDisputeEvidence(disputeId, evidenceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
     * @summary SubmitEvidence
     * @param {string} disputeId The ID of the dispute you want to submit evidence for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    DisputesApi.prototype.submitEvidence = function (disputeId, options) {
        var _this = this;
        return exports.DisputesApiFp(this.configuration).submitEvidence(disputeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DisputesApi;
}(base_1.BaseAPI));
exports.DisputesApi = DisputesApi;
/**
 * EmployeesApi - axios parameter creator
 * @export
 */
exports.EmployeesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary ListEmployees
         * @param {string} [locationId]
         * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
         * @param {number} [limit] The number of employees to be returned on each page.
         * @param {string} [cursor] The token required to retrieve the specified page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees: function (locationId, status, limit, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/employees";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    if (status !== undefined) {
                        localVarQueryParameter['status'] = status;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary RetrieveEmployee
         * @param {string} id UUID for the employee that was requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployee: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling retrieveEmployee.');
                    }
                    localVarPath = "/v2/employees/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * EmployeesApi - functional programming interface
 * @export
 */
exports.EmployeesApiFp = function (configuration) {
    return {
        /**
         *
         * @summary ListEmployees
         * @param {string} [locationId]
         * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
         * @param {number} [limit] The number of employees to be returned on each page.
         * @param {string} [cursor] The token required to retrieve the specified page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees: function (locationId, status, limit, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EmployeesApiAxiosParamCreator(configuration).listEmployees(locationId, status, limit, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary RetrieveEmployee
         * @param {string} id UUID for the employee that was requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployee: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EmployeesApiAxiosParamCreator(configuration).retrieveEmployee(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EmployeesApi - factory interface
 * @export
 */
exports.EmployeesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary ListEmployees
         * @param {string} [locationId]
         * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
         * @param {number} [limit] The number of employees to be returned on each page.
         * @param {string} [cursor] The token required to retrieve the specified page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees: function (locationId, status, limit, cursor, options) {
            return exports.EmployeesApiFp(configuration).listEmployees(locationId, status, limit, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary RetrieveEmployee
         * @param {string} id UUID for the employee that was requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployee: function (id, options) {
            return exports.EmployeesApiFp(configuration).retrieveEmployee(id, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EmployeesApi - object-oriented interface
 * @export
 * @class EmployeesApi
 * @extends {BaseAPI}
 */
var EmployeesApi = /** @class */ (function (_super) {
    __extends(EmployeesApi, _super);
    function EmployeesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary ListEmployees
     * @param {string} [locationId]
     * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {number} [limit] The number of employees to be returned on each page.
     * @param {string} [cursor] The token required to retrieve the specified page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    EmployeesApi.prototype.listEmployees = function (locationId, status, limit, cursor, options) {
        var _this = this;
        return exports.EmployeesApiFp(this.configuration).listEmployees(locationId, status, limit, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary RetrieveEmployee
     * @param {string} id UUID for the employee that was requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    EmployeesApi.prototype.retrieveEmployee = function (id, options) {
        var _this = this;
        return exports.EmployeesApiFp(this.configuration).retrieveEmployee(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EmployeesApi;
}(base_1.BaseAPI));
exports.EmployeesApi = EmployeesApi;
/**
 * InventoryApi - axios parameter creator
 * @export
 */
exports.InventoryApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
         * @summary BatchChangeInventory
         * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchChangeInventory: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling batchChangeInventory.');
                    }
                    localVarPath = "/v2/inventory/batch-change";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["INVENTORY_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
         * @summary BatchRetrieveInventoryChanges
         * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveInventoryChanges: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling batchRetrieveInventoryChanges.');
                    }
                    localVarPath = "/v2/inventory/batch-retrieve-changes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["INVENTORY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
         * @summary BatchRetrieveInventoryCounts
         * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveInventoryCounts: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling batchRetrieveInventoryCounts.');
                    }
                    localVarPath = "/v2/inventory/batch-retrieve-counts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["INVENTORY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
         * @summary RetrieveInventoryAdjustment
         * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryAdjustment: function (adjustmentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'adjustmentId' is not null or undefined
                    if (adjustmentId === null || adjustmentId === undefined) {
                        throw new base_1.RequiredError('adjustmentId', 'Required parameter adjustmentId was null or undefined when calling retrieveInventoryAdjustment.');
                    }
                    localVarPath = "/v2/inventory/adjustment/{adjustment_id}"
                        .replace("{" + "adjustment_id" + "}", encodeURIComponent(String(adjustmentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["INVENTORY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryChanges
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryChanges: function (catalogObjectId, locationIds, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'catalogObjectId' is not null or undefined
                    if (catalogObjectId === null || catalogObjectId === undefined) {
                        throw new base_1.RequiredError('catalogObjectId', 'Required parameter catalogObjectId was null or undefined when calling retrieveInventoryChanges.');
                    }
                    localVarPath = "/v2/inventory/{catalog_object_id}/changes"
                        .replace("{" + "catalog_object_id" + "}", encodeURIComponent(String(catalogObjectId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["INVENTORY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (locationIds !== undefined) {
                        localVarQueryParameter['location_ids'] = locationIds;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryCount
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryCount: function (catalogObjectId, locationIds, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'catalogObjectId' is not null or undefined
                    if (catalogObjectId === null || catalogObjectId === undefined) {
                        throw new base_1.RequiredError('catalogObjectId', 'Required parameter catalogObjectId was null or undefined when calling retrieveInventoryCount.');
                    }
                    localVarPath = "/v2/inventory/{catalog_object_id}"
                        .replace("{" + "catalog_object_id" + "}", encodeURIComponent(String(catalogObjectId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["INVENTORY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (locationIds !== undefined) {
                        localVarQueryParameter['location_ids'] = locationIds;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
         * @summary RetrieveInventoryPhysicalCount
         * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryPhysicalCount: function (physicalCountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'physicalCountId' is not null or undefined
                    if (physicalCountId === null || physicalCountId === undefined) {
                        throw new base_1.RequiredError('physicalCountId', 'Required parameter physicalCountId was null or undefined when calling retrieveInventoryPhysicalCount.');
                    }
                    localVarPath = "/v2/inventory/physical-count/{physical_count_id}"
                        .replace("{" + "physical_count_id" + "}", encodeURIComponent(String(physicalCountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["INVENTORY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * InventoryApi - functional programming interface
 * @export
 */
exports.InventoryApiFp = function (configuration) {
    return {
        /**
         * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
         * @summary BatchChangeInventory
         * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchChangeInventory: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InventoryApiAxiosParamCreator(configuration).batchChangeInventory(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
         * @summary BatchRetrieveInventoryChanges
         * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveInventoryChanges: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InventoryApiAxiosParamCreator(configuration).batchRetrieveInventoryChanges(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
         * @summary BatchRetrieveInventoryCounts
         * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveInventoryCounts: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InventoryApiAxiosParamCreator(configuration).batchRetrieveInventoryCounts(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
         * @summary RetrieveInventoryAdjustment
         * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryAdjustment: function (adjustmentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InventoryApiAxiosParamCreator(configuration).retrieveInventoryAdjustment(adjustmentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryChanges
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryChanges: function (catalogObjectId, locationIds, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InventoryApiAxiosParamCreator(configuration).retrieveInventoryChanges(catalogObjectId, locationIds, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryCount
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryCount: function (catalogObjectId, locationIds, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InventoryApiAxiosParamCreator(configuration).retrieveInventoryCount(catalogObjectId, locationIds, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
         * @summary RetrieveInventoryPhysicalCount
         * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryPhysicalCount: function (physicalCountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InventoryApiAxiosParamCreator(configuration).retrieveInventoryPhysicalCount(physicalCountId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * InventoryApi - factory interface
 * @export
 */
exports.InventoryApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
         * @summary BatchChangeInventory
         * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchChangeInventory: function (body, options) {
            return exports.InventoryApiFp(configuration).batchChangeInventory(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
         * @summary BatchRetrieveInventoryChanges
         * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveInventoryChanges: function (body, options) {
            return exports.InventoryApiFp(configuration).batchRetrieveInventoryChanges(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
         * @summary BatchRetrieveInventoryCounts
         * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveInventoryCounts: function (body, options) {
            return exports.InventoryApiFp(configuration).batchRetrieveInventoryCounts(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
         * @summary RetrieveInventoryAdjustment
         * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryAdjustment: function (adjustmentId, options) {
            return exports.InventoryApiFp(configuration).retrieveInventoryAdjustment(adjustmentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryChanges
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryChanges: function (catalogObjectId, locationIds, cursor, options) {
            return exports.InventoryApiFp(configuration).retrieveInventoryChanges(catalogObjectId, locationIds, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
         * @summary RetrieveInventoryCount
         * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
         * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryCount: function (catalogObjectId, locationIds, cursor, options) {
            return exports.InventoryApiFp(configuration).retrieveInventoryCount(catalogObjectId, locationIds, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
         * @summary RetrieveInventoryPhysicalCount
         * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInventoryPhysicalCount: function (physicalCountId, options) {
            return exports.InventoryApiFp(configuration).retrieveInventoryPhysicalCount(physicalCountId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
var InventoryApi = /** @class */ (function (_super) {
    __extends(InventoryApi, _super);
    function InventoryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
     * @summary BatchChangeInventory
     * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.batchChangeInventory = function (body, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration).batchChangeInventory(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
     * @summary BatchRetrieveInventoryChanges
     * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.batchRetrieveInventoryChanges = function (body, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration).batchRetrieveInventoryChanges(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
     * @summary BatchRetrieveInventoryCounts
     * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.batchRetrieveInventoryCounts = function (body, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration).batchRetrieveInventoryCounts(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
     * @summary RetrieveInventoryAdjustment
     * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.retrieveInventoryAdjustment = function (adjustmentId, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration).retrieveInventoryAdjustment(adjustmentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryChanges
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.retrieveInventoryChanges = function (catalogObjectId, locationIds, cursor, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration).retrieveInventoryChanges(catalogObjectId, locationIds, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryCount
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.retrieveInventoryCount = function (catalogObjectId, locationIds, cursor, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration).retrieveInventoryCount(catalogObjectId, locationIds, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
     * @summary RetrieveInventoryPhysicalCount
     * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.retrieveInventoryPhysicalCount = function (physicalCountId, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration).retrieveInventoryPhysicalCount(physicalCountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return InventoryApi;
}(base_1.BaseAPI));
exports.InventoryApi = InventoryApi;
/**
 * InvoicesApi - axios parameter creator
 * @export
 */
exports.InvoicesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
         * @summary CancelInvoice
         * @param {string} invoiceId The ID of the &#x60;invoice&#x60; to cancel.
         * @param {CancelInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInvoice: function (invoiceId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'invoiceId' is not null or undefined
                    if (invoiceId === null || invoiceId === undefined) {
                        throw new base_1.RequiredError('invoiceId', 'Required parameter invoiceId was null or undefined when calling cancelInvoice.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling cancelInvoice.');
                    }
                    localVarPath = "/v2/invoices/{invoice_id}/cancel"
                        .replace("{" + "invoice_id" + "}", encodeURIComponent(String(invoiceId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_WRITE", "INVOICES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a draft [invoice](#type-invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer\'s email address or charge the customer’s card on file).
         * @summary CreateInvoice
         * @param {CreateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoice: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createInvoice.');
                    }
                    localVarPath = "/v2/invoices";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_WRITE", "INVOICES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes the specified invoice. When an invoice is deleted, the  associated Order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete an invoice scheduled for publication, or a  published invoice).
         * @summary DeleteInvoice
         * @param {string} invoiceId The ID of the invoice to delete.
         * @param {number} [version] The version of the &#x60;invoice&#x60; to delete. If you do not know the version, you can call &#x60;GetInvoice&#x60; or  &#x60;ListInvoices&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvoice: function (invoiceId, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'invoiceId' is not null or undefined
                    if (invoiceId === null || invoiceId === undefined) {
                        throw new base_1.RequiredError('invoiceId', 'Required parameter invoiceId was null or undefined when calling deleteInvoice.');
                    }
                    localVarPath = "/v2/invoices/{invoice_id}"
                        .replace("{" + "invoice_id" + "}", encodeURIComponent(String(invoiceId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_WRITE", "INVOICES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (version !== undefined) {
                        localVarQueryParameter['version'] = version;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves an invoice by invoice ID.
         * @summary GetInvoice
         * @param {string} invoiceId The id of the invoice to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice: function (invoiceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'invoiceId' is not null or undefined
                    if (invoiceId === null || invoiceId === undefined) {
                        throw new base_1.RequiredError('invoiceId', 'Required parameter invoiceId was null or undefined when calling getInvoice.');
                    }
                    localVarPath = "/v2/invoices/{invoice_id}"
                        .replace("{" + "invoice_id" + "}", encodeURIComponent(String(invoiceId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["INVOICES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a `cursor` that you     use in a subsequent request to fetch the next set of invoices.
         * @summary ListInvoices
         * @param {string} locationId The ID of the location for which to list invoices.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
         * @param {number} [limit] The maximum number of invoices to return (200 is the maximum &#x60;limit&#x60;).  If not provided, the server  uses a default limit of 100 invoices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInvoices: function (locationId, cursor, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listInvoices.');
                    }
                    localVarPath = "/v2/invoices";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["INVOICES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer\'s email address, charges the customer\'s card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice `status` also changes from `DRAFT` to a status  based on the invoice configuration. For example, the status changes to `UNPAID` if  Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the  invoice amount).
         * @summary PublishInvoice
         * @param {string} invoiceId The id of the invoice to publish.
         * @param {PublishInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishInvoice: function (invoiceId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'invoiceId' is not null or undefined
                    if (invoiceId === null || invoiceId === undefined) {
                        throw new base_1.RequiredError('invoiceId', 'Required parameter invoiceId was null or undefined when calling publishInvoice.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling publishInvoice.');
                    }
                    localVarPath = "/v2/invoices/{invoice_id}/publish"
                        .replace("{" + "invoice_id" + "}", encodeURIComponent(String(invoiceId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_WRITE", "INVOICES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a `cursor`  that you use in a subsequent request to fetch the next set of invoices.
         * @summary SearchInvoices
         * @param {SearchInvoicesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInvoices: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchInvoices.');
                    }
                    localVarPath = "/v2/invoices/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["INVOICES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates an invoice by modifying field values, clearing field values, or both  as specified in the request.  There are no restrictions to updating an invoice in a draft state.  However, there are guidelines for updating a published invoice.
         * @summary UpdateInvoice
         * @param {string} invoiceId The id of the invoice to update.
         * @param {UpdateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvoice: function (invoiceId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'invoiceId' is not null or undefined
                    if (invoiceId === null || invoiceId === undefined) {
                        throw new base_1.RequiredError('invoiceId', 'Required parameter invoiceId was null or undefined when calling updateInvoice.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateInvoice.');
                    }
                    localVarPath = "/v2/invoices/{invoice_id}"
                        .replace("{" + "invoice_id" + "}", encodeURIComponent(String(invoiceId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_WRITE", "INVOICES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * InvoicesApi - functional programming interface
 * @export
 */
exports.InvoicesApiFp = function (configuration) {
    return {
        /**
         * Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
         * @summary CancelInvoice
         * @param {string} invoiceId The ID of the &#x60;invoice&#x60; to cancel.
         * @param {CancelInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInvoice: function (invoiceId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InvoicesApiAxiosParamCreator(configuration).cancelInvoice(invoiceId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a draft [invoice](#type-invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer\'s email address or charge the customer’s card on file).
         * @summary CreateInvoice
         * @param {CreateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoice: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InvoicesApiAxiosParamCreator(configuration).createInvoice(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the specified invoice. When an invoice is deleted, the  associated Order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete an invoice scheduled for publication, or a  published invoice).
         * @summary DeleteInvoice
         * @param {string} invoiceId The ID of the invoice to delete.
         * @param {number} [version] The version of the &#x60;invoice&#x60; to delete. If you do not know the version, you can call &#x60;GetInvoice&#x60; or  &#x60;ListInvoices&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvoice: function (invoiceId, version, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InvoicesApiAxiosParamCreator(configuration).deleteInvoice(invoiceId, version, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves an invoice by invoice ID.
         * @summary GetInvoice
         * @param {string} invoiceId The id of the invoice to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice: function (invoiceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InvoicesApiAxiosParamCreator(configuration).getInvoice(invoiceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a `cursor` that you     use in a subsequent request to fetch the next set of invoices.
         * @summary ListInvoices
         * @param {string} locationId The ID of the location for which to list invoices.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
         * @param {number} [limit] The maximum number of invoices to return (200 is the maximum &#x60;limit&#x60;).  If not provided, the server  uses a default limit of 100 invoices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInvoices: function (locationId, cursor, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InvoicesApiAxiosParamCreator(configuration).listInvoices(locationId, cursor, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer\'s email address, charges the customer\'s card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice `status` also changes from `DRAFT` to a status  based on the invoice configuration. For example, the status changes to `UNPAID` if  Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the  invoice amount).
         * @summary PublishInvoice
         * @param {string} invoiceId The id of the invoice to publish.
         * @param {PublishInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishInvoice: function (invoiceId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InvoicesApiAxiosParamCreator(configuration).publishInvoice(invoiceId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a `cursor`  that you use in a subsequent request to fetch the next set of invoices.
         * @summary SearchInvoices
         * @param {SearchInvoicesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInvoices: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InvoicesApiAxiosParamCreator(configuration).searchInvoices(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates an invoice by modifying field values, clearing field values, or both  as specified in the request.  There are no restrictions to updating an invoice in a draft state.  However, there are guidelines for updating a published invoice.
         * @summary UpdateInvoice
         * @param {string} invoiceId The id of the invoice to update.
         * @param {UpdateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvoice: function (invoiceId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.InvoicesApiAxiosParamCreator(configuration).updateInvoice(invoiceId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * InvoicesApi - factory interface
 * @export
 */
exports.InvoicesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
         * @summary CancelInvoice
         * @param {string} invoiceId The ID of the &#x60;invoice&#x60; to cancel.
         * @param {CancelInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInvoice: function (invoiceId, body, options) {
            return exports.InvoicesApiFp(configuration).cancelInvoice(invoiceId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a draft [invoice](#type-invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer\'s email address or charge the customer’s card on file).
         * @summary CreateInvoice
         * @param {CreateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoice: function (body, options) {
            return exports.InvoicesApiFp(configuration).createInvoice(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the specified invoice. When an invoice is deleted, the  associated Order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete an invoice scheduled for publication, or a  published invoice).
         * @summary DeleteInvoice
         * @param {string} invoiceId The ID of the invoice to delete.
         * @param {number} [version] The version of the &#x60;invoice&#x60; to delete. If you do not know the version, you can call &#x60;GetInvoice&#x60; or  &#x60;ListInvoices&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvoice: function (invoiceId, version, options) {
            return exports.InvoicesApiFp(configuration).deleteInvoice(invoiceId, version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves an invoice by invoice ID.
         * @summary GetInvoice
         * @param {string} invoiceId The id of the invoice to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice: function (invoiceId, options) {
            return exports.InvoicesApiFp(configuration).getInvoice(invoiceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a `cursor` that you     use in a subsequent request to fetch the next set of invoices.
         * @summary ListInvoices
         * @param {string} locationId The ID of the location for which to list invoices.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
         * @param {number} [limit] The maximum number of invoices to return (200 is the maximum &#x60;limit&#x60;).  If not provided, the server  uses a default limit of 100 invoices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInvoices: function (locationId, cursor, limit, options) {
            return exports.InvoicesApiFp(configuration).listInvoices(locationId, cursor, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer\'s email address, charges the customer\'s card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice `status` also changes from `DRAFT` to a status  based on the invoice configuration. For example, the status changes to `UNPAID` if  Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the  invoice amount).
         * @summary PublishInvoice
         * @param {string} invoiceId The id of the invoice to publish.
         * @param {PublishInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishInvoice: function (invoiceId, body, options) {
            return exports.InvoicesApiFp(configuration).publishInvoice(invoiceId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a `cursor`  that you use in a subsequent request to fetch the next set of invoices.
         * @summary SearchInvoices
         * @param {SearchInvoicesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInvoices: function (body, options) {
            return exports.InvoicesApiFp(configuration).searchInvoices(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates an invoice by modifying field values, clearing field values, or both  as specified in the request.  There are no restrictions to updating an invoice in a draft state.  However, there are guidelines for updating a published invoice.
         * @summary UpdateInvoice
         * @param {string} invoiceId The id of the invoice to update.
         * @param {UpdateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvoice: function (invoiceId, body, options) {
            return exports.InvoicesApiFp(configuration).updateInvoice(invoiceId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * InvoicesApi - object-oriented interface
 * @export
 * @class InvoicesApi
 * @extends {BaseAPI}
 */
var InvoicesApi = /** @class */ (function (_super) {
    __extends(InvoicesApi, _super);
    function InvoicesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
     * @summary CancelInvoice
     * @param {string} invoiceId The ID of the &#x60;invoice&#x60; to cancel.
     * @param {CancelInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    InvoicesApi.prototype.cancelInvoice = function (invoiceId, body, options) {
        var _this = this;
        return exports.InvoicesApiFp(this.configuration).cancelInvoice(invoiceId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a draft [invoice](#type-invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer\'s email address or charge the customer’s card on file).
     * @summary CreateInvoice
     * @param {CreateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    InvoicesApi.prototype.createInvoice = function (body, options) {
        var _this = this;
        return exports.InvoicesApiFp(this.configuration).createInvoice(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the specified invoice. When an invoice is deleted, the  associated Order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete an invoice scheduled for publication, or a  published invoice).
     * @summary DeleteInvoice
     * @param {string} invoiceId The ID of the invoice to delete.
     * @param {number} [version] The version of the &#x60;invoice&#x60; to delete. If you do not know the version, you can call &#x60;GetInvoice&#x60; or  &#x60;ListInvoices&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    InvoicesApi.prototype.deleteInvoice = function (invoiceId, version, options) {
        var _this = this;
        return exports.InvoicesApiFp(this.configuration).deleteInvoice(invoiceId, version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves an invoice by invoice ID.
     * @summary GetInvoice
     * @param {string} invoiceId The id of the invoice to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    InvoicesApi.prototype.getInvoice = function (invoiceId, options) {
        var _this = this;
        return exports.InvoicesApiFp(this.configuration).getInvoice(invoiceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a `cursor` that you     use in a subsequent request to fetch the next set of invoices.
     * @summary ListInvoices
     * @param {string} locationId The ID of the location for which to list invoices.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {number} [limit] The maximum number of invoices to return (200 is the maximum &#x60;limit&#x60;).  If not provided, the server  uses a default limit of 100 invoices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    InvoicesApi.prototype.listInvoices = function (locationId, cursor, limit, options) {
        var _this = this;
        return exports.InvoicesApiFp(this.configuration).listInvoices(locationId, cursor, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer\'s email address, charges the customer\'s card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice `status` also changes from `DRAFT` to a status  based on the invoice configuration. For example, the status changes to `UNPAID` if  Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the  invoice amount).
     * @summary PublishInvoice
     * @param {string} invoiceId The id of the invoice to publish.
     * @param {PublishInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    InvoicesApi.prototype.publishInvoice = function (invoiceId, body, options) {
        var _this = this;
        return exports.InvoicesApiFp(this.configuration).publishInvoice(invoiceId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a `cursor`  that you use in a subsequent request to fetch the next set of invoices.
     * @summary SearchInvoices
     * @param {SearchInvoicesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    InvoicesApi.prototype.searchInvoices = function (body, options) {
        var _this = this;
        return exports.InvoicesApiFp(this.configuration).searchInvoices(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates an invoice by modifying field values, clearing field values, or both  as specified in the request.  There are no restrictions to updating an invoice in a draft state.  However, there are guidelines for updating a published invoice.
     * @summary UpdateInvoice
     * @param {string} invoiceId The id of the invoice to update.
     * @param {UpdateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    InvoicesApi.prototype.updateInvoice = function (invoiceId, body, options) {
        var _this = this;
        return exports.InvoicesApiFp(this.configuration).updateInvoice(invoiceId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return InvoicesApi;
}(base_1.BaseAPI));
exports.InvoicesApi = InvoicesApi;
/**
 * LaborApi - axios parameter creator
 * @export
 */
exports.LaborApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
         * @summary CreateBreakType
         * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBreakType: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createBreakType.');
                    }
                    localVarPath = "/v2/labor/break-types";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_SETTINGS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
         * @summary CreateShift
         * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShift: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createShift.');
                    }
                    localVarPath = "/v2/labor/shifts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
         * @summary DeleteBreakType
         * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBreakType: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deleteBreakType.');
                    }
                    localVarPath = "/v2/labor/break-types/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_SETTINGS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes a `Shift`.
         * @summary DeleteShift
         * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShift: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling deleteShift.');
                    }
                    localVarPath = "/v2/labor/shifts/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a single `BreakType` specified by id.
         * @summary GetBreakType
         * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreakType: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getBreakType.');
                    }
                    localVarPath = "/v2/labor/break-types/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_SETTINGS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a single `EmployeeWage` specified by id.
         * @summary GetEmployeeWage
         * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeWage: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getEmployeeWage.');
                    }
                    localVarPath = "/v2/labor/employee-wages/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a single `Shift` specified by id.
         * @summary GetShift
         * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShift: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getShift.');
                    }
                    localVarPath = "/v2/labor/shifts/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a single `TeamMemberWage` specified by id.
         * @summary GetTeamMemberWage
         * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMemberWage: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getTeamMemberWage.');
                    }
                    localVarPath = "/v2/labor/team-member-wages/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a paginated list of `BreakType` instances for a business.
         * @summary ListBreakTypes
         * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
         * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
         * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBreakTypes: function (locationId, limit, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/labor/break-types";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_SETTINGS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a paginated list of `EmployeeWage` instances for a business.
         * @summary ListEmployeeWages
         * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
         * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
         * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeWages: function (employeeId, limit, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/labor/employee-wages";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (employeeId !== undefined) {
                        localVarQueryParameter['employee_id'] = employeeId;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a paginated list of `TeamMemberWage` instances for a business.
         * @summary ListTeamMemberWages
         * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
         * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
         * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamMemberWages: function (teamMemberId, limit, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/labor/team-member-wages";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (teamMemberId !== undefined) {
                        localVarQueryParameter['team_member_id'] = teamMemberId;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a list of `WorkweekConfig` instances for a business.
         * @summary ListWorkweekConfigs
         * @param {number} [limit] Maximum number of Workweek Configs to return per page.
         * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkweekConfigs: function (limit, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/labor/workweek-configs";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_SETTINGS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
         * @summary SearchShifts
         * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchShifts: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchShifts.');
                    }
                    localVarPath = "/v2/labor/shifts/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates an existing `BreakType`.
         * @summary UpdateBreakType
         * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
         * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBreakType: function (id, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updateBreakType.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateBreakType.');
                    }
                    localVarPath = "/v2/labor/break-types/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_SETTINGS_WRITE", "TIMECARDS_SETTINGS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
         * @summary UpdateShift
         * @param {string} id ID of the object being updated.
         * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShift: function (id, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updateShift.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateShift.');
                    }
                    localVarPath = "/v2/labor/shifts/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_WRITE", "TIMECARDS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates a `WorkweekConfig`.
         * @summary UpdateWorkweekConfig
         * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
         * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkweekConfig: function (id, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling updateWorkweekConfig.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateWorkweekConfig.');
                    }
                    localVarPath = "/v2/labor/workweek-configs/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_SETTINGS_WRITE", "TIMECARDS_SETTINGS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * LaborApi - functional programming interface
 * @export
 */
exports.LaborApiFp = function (configuration) {
    return {
        /**
         * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
         * @summary CreateBreakType
         * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBreakType: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).createBreakType(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
         * @summary CreateShift
         * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShift: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).createShift(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
         * @summary DeleteBreakType
         * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBreakType: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).deleteBreakType(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a `Shift`.
         * @summary DeleteShift
         * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShift: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).deleteShift(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a single `BreakType` specified by id.
         * @summary GetBreakType
         * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreakType: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).getBreakType(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a single `EmployeeWage` specified by id.
         * @summary GetEmployeeWage
         * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeWage: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).getEmployeeWage(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a single `Shift` specified by id.
         * @summary GetShift
         * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShift: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).getShift(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a single `TeamMemberWage` specified by id.
         * @summary GetTeamMemberWage
         * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMemberWage: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).getTeamMemberWage(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a paginated list of `BreakType` instances for a business.
         * @summary ListBreakTypes
         * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
         * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
         * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBreakTypes: function (locationId, limit, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).listBreakTypes(locationId, limit, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a paginated list of `EmployeeWage` instances for a business.
         * @summary ListEmployeeWages
         * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
         * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
         * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeWages: function (employeeId, limit, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).listEmployeeWages(employeeId, limit, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a paginated list of `TeamMemberWage` instances for a business.
         * @summary ListTeamMemberWages
         * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
         * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
         * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamMemberWages: function (teamMemberId, limit, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).listTeamMemberWages(teamMemberId, limit, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of `WorkweekConfig` instances for a business.
         * @summary ListWorkweekConfigs
         * @param {number} [limit] Maximum number of Workweek Configs to return per page.
         * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkweekConfigs: function (limit, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).listWorkweekConfigs(limit, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
         * @summary SearchShifts
         * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchShifts: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).searchShifts(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates an existing `BreakType`.
         * @summary UpdateBreakType
         * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
         * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBreakType: function (id, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).updateBreakType(id, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
         * @summary UpdateShift
         * @param {string} id ID of the object being updated.
         * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShift: function (id, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).updateShift(id, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates a `WorkweekConfig`.
         * @summary UpdateWorkweekConfig
         * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
         * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkweekConfig: function (id, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LaborApiAxiosParamCreator(configuration).updateWorkweekConfig(id, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * LaborApi - factory interface
 * @export
 */
exports.LaborApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
         * @summary CreateBreakType
         * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBreakType: function (body, options) {
            return exports.LaborApiFp(configuration).createBreakType(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
         * @summary CreateShift
         * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShift: function (body, options) {
            return exports.LaborApiFp(configuration).createShift(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
         * @summary DeleteBreakType
         * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBreakType: function (id, options) {
            return exports.LaborApiFp(configuration).deleteBreakType(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a `Shift`.
         * @summary DeleteShift
         * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShift: function (id, options) {
            return exports.LaborApiFp(configuration).deleteShift(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a single `BreakType` specified by id.
         * @summary GetBreakType
         * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreakType: function (id, options) {
            return exports.LaborApiFp(configuration).getBreakType(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a single `EmployeeWage` specified by id.
         * @summary GetEmployeeWage
         * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeWage: function (id, options) {
            return exports.LaborApiFp(configuration).getEmployeeWage(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a single `Shift` specified by id.
         * @summary GetShift
         * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShift: function (id, options) {
            return exports.LaborApiFp(configuration).getShift(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a single `TeamMemberWage` specified by id.
         * @summary GetTeamMemberWage
         * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMemberWage: function (id, options) {
            return exports.LaborApiFp(configuration).getTeamMemberWage(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a paginated list of `BreakType` instances for a business.
         * @summary ListBreakTypes
         * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
         * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
         * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBreakTypes: function (locationId, limit, cursor, options) {
            return exports.LaborApiFp(configuration).listBreakTypes(locationId, limit, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a paginated list of `EmployeeWage` instances for a business.
         * @summary ListEmployeeWages
         * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
         * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
         * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeWages: function (employeeId, limit, cursor, options) {
            return exports.LaborApiFp(configuration).listEmployeeWages(employeeId, limit, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a paginated list of `TeamMemberWage` instances for a business.
         * @summary ListTeamMemberWages
         * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
         * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
         * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamMemberWages: function (teamMemberId, limit, cursor, options) {
            return exports.LaborApiFp(configuration).listTeamMemberWages(teamMemberId, limit, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of `WorkweekConfig` instances for a business.
         * @summary ListWorkweekConfigs
         * @param {number} [limit] Maximum number of Workweek Configs to return per page.
         * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkweekConfigs: function (limit, cursor, options) {
            return exports.LaborApiFp(configuration).listWorkweekConfigs(limit, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
         * @summary SearchShifts
         * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchShifts: function (body, options) {
            return exports.LaborApiFp(configuration).searchShifts(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates an existing `BreakType`.
         * @summary UpdateBreakType
         * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
         * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBreakType: function (id, body, options) {
            return exports.LaborApiFp(configuration).updateBreakType(id, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
         * @summary UpdateShift
         * @param {string} id ID of the object being updated.
         * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShift: function (id, body, options) {
            return exports.LaborApiFp(configuration).updateShift(id, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a `WorkweekConfig`.
         * @summary UpdateWorkweekConfig
         * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
         * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkweekConfig: function (id, body, options) {
            return exports.LaborApiFp(configuration).updateWorkweekConfig(id, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * LaborApi - object-oriented interface
 * @export
 * @class LaborApi
 * @extends {BaseAPI}
 */
var LaborApi = /** @class */ (function (_super) {
    __extends(LaborApi, _super);
    function LaborApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     * @summary CreateBreakType
     * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.createBreakType = function (body, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).createBreakType(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
     * @summary CreateShift
     * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.createShift = function (body, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).createShift(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * @summary DeleteBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.deleteBreakType = function (id, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).deleteBreakType(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a `Shift`.
     * @summary DeleteShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.deleteShift = function (id, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).deleteShift(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a single `BreakType` specified by id.
     * @summary GetBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.getBreakType = function (id, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).getBreakType(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a single `EmployeeWage` specified by id.
     * @summary GetEmployeeWage
     * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.getEmployeeWage = function (id, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).getEmployeeWage(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a single `Shift` specified by id.
     * @summary GetShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.getShift = function (id, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).getShift(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a single `TeamMemberWage` specified by id.
     * @summary GetTeamMemberWage
     * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.getTeamMemberWage = function (id, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).getTeamMemberWage(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a paginated list of `BreakType` instances for a business.
     * @summary ListBreakTypes
     * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
     * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.listBreakTypes = function (locationId, limit, cursor, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).listBreakTypes(locationId, limit, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * @summary ListEmployeeWages
     * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
     * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.listEmployeeWages = function (employeeId, limit, cursor, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).listEmployeeWages(employeeId, limit, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * @summary ListTeamMemberWages
     * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
     * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.listTeamMemberWages = function (teamMemberId, limit, cursor, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).listTeamMemberWages(teamMemberId, limit, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of `WorkweekConfig` instances for a business.
     * @summary ListWorkweekConfigs
     * @param {number} [limit] Maximum number of Workweek Configs to return per page.
     * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.listWorkweekConfigs = function (limit, cursor, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).listWorkweekConfigs(limit, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
     * @summary SearchShifts
     * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.searchShifts = function (body, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).searchShifts(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates an existing `BreakType`.
     * @summary UpdateBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
     * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.updateBreakType = function (id, body, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).updateBreakType(id, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
     * @summary UpdateShift
     * @param {string} id ID of the object being updated.
     * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.updateShift = function (id, body, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).updateShift(id, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a `WorkweekConfig`.
     * @summary UpdateWorkweekConfig
     * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
     * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    LaborApi.prototype.updateWorkweekConfig = function (id, body, options) {
        var _this = this;
        return exports.LaborApiFp(this.configuration).updateWorkweekConfig(id, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LaborApi;
}(base_1.BaseAPI));
exports.LaborApi = LaborApi;
/**
 * LocationsApi - axios parameter creator
 * @export
 */
exports.LocationsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a location.
         * @summary CreateLocation
         * @param {CreateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocation: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createLocation.');
                    }
                    localVarPath = "/v2/locations";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["MERCHANT_PROFILE_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides information of all locations of a business.  Many Square API endpoints require a `location_id` parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
         * @summary ListLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/locations";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["MERCHANT_PROFILE_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves details of a location. You can specify \"main\"  as the location ID to retrieve details of the  main location.
         * @summary RetrieveLocation
         * @param {string} locationId The ID of the location to retrieve. If you specify the string \&quot;main\&quot;, then the endpoint returns the main location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLocation: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveLocation.');
                    }
                    localVarPath = "/v2/locations/{location_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["MERCHANT_PROFILE_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates a location.
         * @summary UpdateLocation
         * @param {string} locationId The ID of the location to update.
         * @param {UpdateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateLocation.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateLocation.');
                    }
                    localVarPath = "/v2/locations/{location_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["MERCHANT_PROFILE_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * LocationsApi - functional programming interface
 * @export
 */
exports.LocationsApiFp = function (configuration) {
    return {
        /**
         * Creates a location.
         * @summary CreateLocation
         * @param {CreateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocation: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LocationsApiAxiosParamCreator(configuration).createLocation(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides information of all locations of a business.  Many Square API endpoints require a `location_id` parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
         * @summary ListLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LocationsApiAxiosParamCreator(configuration).listLocations(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves details of a location. You can specify \"main\"  as the location ID to retrieve details of the  main location.
         * @summary RetrieveLocation
         * @param {string} locationId The ID of the location to retrieve. If you specify the string \&quot;main\&quot;, then the endpoint returns the main location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLocation: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LocationsApiAxiosParamCreator(configuration).retrieveLocation(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates a location.
         * @summary UpdateLocation
         * @param {string} locationId The ID of the location to update.
         * @param {UpdateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LocationsApiAxiosParamCreator(configuration).updateLocation(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * LocationsApi - factory interface
 * @export
 */
exports.LocationsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Creates a location.
         * @summary CreateLocation
         * @param {CreateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocation: function (body, options) {
            return exports.LocationsApiFp(configuration).createLocation(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides information of all locations of a business.  Many Square API endpoints require a `location_id` parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
         * @summary ListLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations: function (options) {
            return exports.LocationsApiFp(configuration).listLocations(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves details of a location. You can specify \"main\"  as the location ID to retrieve details of the  main location.
         * @summary RetrieveLocation
         * @param {string} locationId The ID of the location to retrieve. If you specify the string \&quot;main\&quot;, then the endpoint returns the main location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLocation: function (locationId, options) {
            return exports.LocationsApiFp(configuration).retrieveLocation(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a location.
         * @summary UpdateLocation
         * @param {string} locationId The ID of the location to update.
         * @param {UpdateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: function (locationId, body, options) {
            return exports.LocationsApiFp(configuration).updateLocation(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
var LocationsApi = /** @class */ (function (_super) {
    __extends(LocationsApi, _super);
    function LocationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a location.
     * @summary CreateLocation
     * @param {CreateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.createLocation = function (body, options) {
        var _this = this;
        return exports.LocationsApiFp(this.configuration).createLocation(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides information of all locations of a business.  Many Square API endpoints require a `location_id` parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
     * @summary ListLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.listLocations = function (options) {
        var _this = this;
        return exports.LocationsApiFp(this.configuration).listLocations(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves details of a location. You can specify \"main\"  as the location ID to retrieve details of the  main location.
     * @summary RetrieveLocation
     * @param {string} locationId The ID of the location to retrieve. If you specify the string \&quot;main\&quot;, then the endpoint returns the main location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.retrieveLocation = function (locationId, options) {
        var _this = this;
        return exports.LocationsApiFp(this.configuration).retrieveLocation(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a location.
     * @summary UpdateLocation
     * @param {string} locationId The ID of the location to update.
     * @param {UpdateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.updateLocation = function (locationId, body, options) {
        var _this = this;
        return exports.LocationsApiFp(this.configuration).updateLocation(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LocationsApi;
}(base_1.BaseAPI));
exports.LocationsApi = LocationsApi;
/**
 * LoyaltyApi - axios parameter creator
 * @export
 */
exports.LoyaltyApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
         * @summary AccumulateLoyaltyPoints
         * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
         * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accumulateLoyaltyPoints: function (accountId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'accountId' is not null or undefined
                    if (accountId === null || accountId === undefined) {
                        throw new base_1.RequiredError('accountId', 'Required parameter accountId was null or undefined when calling accumulateLoyaltyPoints.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling accumulateLoyaltyPoints.');
                    }
                    localVarPath = "/v2/loyalty/accounts/{account_id}/accumulate"
                        .replace("{" + "account_id" + "}", encodeURIComponent(String(accountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
         * @summary AdjustLoyaltyPoints
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
         * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustLoyaltyPoints: function (accountId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'accountId' is not null or undefined
                    if (accountId === null || accountId === undefined) {
                        throw new base_1.RequiredError('accountId', 'Required parameter accountId was null or undefined when calling adjustLoyaltyPoints.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling adjustLoyaltyPoints.');
                    }
                    localVarPath = "/v2/loyalty/accounts/{account_id}/adjust"
                        .replace("{" + "account_id" + "}", encodeURIComponent(String(accountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
         * @summary CalculateLoyaltyPoints
         * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
         * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateLoyaltyPoints: function (programId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'programId' is not null or undefined
                    if (programId === null || programId === undefined) {
                        throw new base_1.RequiredError('programId', 'Required parameter programId was null or undefined when calling calculateLoyaltyPoints.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling calculateLoyaltyPoints.');
                    }
                    localVarPath = "/v2/loyalty/programs/{program_id}/calculate"
                        .replace("{" + "program_id" + "}", encodeURIComponent(String(programId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a loyalty account.
         * @summary CreateLoyaltyAccount
         * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoyaltyAccount: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createLoyaltyAccount.');
                    }
                    localVarPath = "/v2/loyalty/accounts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
         * @summary CreateLoyaltyReward
         * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoyaltyReward: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createLoyaltyReward.');
                    }
                    localVarPath = "/v2/loyalty/rewards";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
         * @summary DeleteLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoyaltyReward: function (rewardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'rewardId' is not null or undefined
                    if (rewardId === null || rewardId === undefined) {
                        throw new base_1.RequiredError('rewardId', 'Required parameter rewardId was null or undefined when calling deleteLoyaltyReward.');
                    }
                    localVarPath = "/v2/loyalty/rewards/{reward_id}"
                        .replace("{" + "reward_id" + "}", encodeURIComponent(String(rewardId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
         * @summary ListLoyaltyPrograms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoyaltyPrograms: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/loyalty/programs";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
         * @summary RedeemLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
         * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemLoyaltyReward: function (rewardId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'rewardId' is not null or undefined
                    if (rewardId === null || rewardId === undefined) {
                        throw new base_1.RequiredError('rewardId', 'Required parameter rewardId was null or undefined when calling redeemLoyaltyReward.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling redeemLoyaltyReward.');
                    }
                    localVarPath = "/v2/loyalty/rewards/{reward_id}/redeem"
                        .replace("{" + "reward_id" + "}", encodeURIComponent(String(rewardId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a loyalty account.
         * @summary RetrieveLoyaltyAccount
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLoyaltyAccount: function (accountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'accountId' is not null or undefined
                    if (accountId === null || accountId === undefined) {
                        throw new base_1.RequiredError('accountId', 'Required parameter accountId was null or undefined when calling retrieveLoyaltyAccount.');
                    }
                    localVarPath = "/v2/loyalty/accounts/{account_id}"
                        .replace("{" + "account_id" + "}", encodeURIComponent(String(accountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a loyalty reward.
         * @summary RetrieveLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLoyaltyReward: function (rewardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'rewardId' is not null or undefined
                    if (rewardId === null || rewardId === undefined) {
                        throw new base_1.RequiredError('rewardId', 'Required parameter rewardId was null or undefined when calling retrieveLoyaltyReward.');
                    }
                    localVarPath = "/v2/loyalty/rewards/{reward_id}"
                        .replace("{" + "reward_id" + "}", encodeURIComponent(String(rewardId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
         * @summary SearchLoyaltyAccounts
         * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyAccounts: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchLoyaltyAccounts.');
                    }
                    localVarPath = "/v2/loyalty/accounts/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
         * @summary SearchLoyaltyEvents
         * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyEvents: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchLoyaltyEvents.');
                    }
                    localVarPath = "/v2/loyalty/events/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
         * @summary SearchLoyaltyRewards
         * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyRewards: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchLoyaltyRewards.');
                    }
                    localVarPath = "/v2/loyalty/rewards/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["LOYALTY_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * LoyaltyApi - functional programming interface
 * @export
 */
exports.LoyaltyApiFp = function (configuration) {
    return {
        /**
         * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
         * @summary AccumulateLoyaltyPoints
         * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
         * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accumulateLoyaltyPoints: function (accountId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).accumulateLoyaltyPoints(accountId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
         * @summary AdjustLoyaltyPoints
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
         * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustLoyaltyPoints: function (accountId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).adjustLoyaltyPoints(accountId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
         * @summary CalculateLoyaltyPoints
         * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
         * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateLoyaltyPoints: function (programId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).calculateLoyaltyPoints(programId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a loyalty account.
         * @summary CreateLoyaltyAccount
         * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoyaltyAccount: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).createLoyaltyAccount(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
         * @summary CreateLoyaltyReward
         * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoyaltyReward: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).createLoyaltyReward(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
         * @summary DeleteLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoyaltyReward: function (rewardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).deleteLoyaltyReward(rewardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
         * @summary ListLoyaltyPrograms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoyaltyPrograms: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).listLoyaltyPrograms(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
         * @summary RedeemLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
         * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemLoyaltyReward: function (rewardId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).redeemLoyaltyReward(rewardId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a loyalty account.
         * @summary RetrieveLoyaltyAccount
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLoyaltyAccount: function (accountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).retrieveLoyaltyAccount(accountId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a loyalty reward.
         * @summary RetrieveLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLoyaltyReward: function (rewardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).retrieveLoyaltyReward(rewardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
         * @summary SearchLoyaltyAccounts
         * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyAccounts: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).searchLoyaltyAccounts(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
         * @summary SearchLoyaltyEvents
         * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyEvents: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).searchLoyaltyEvents(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
         * @summary SearchLoyaltyRewards
         * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyRewards: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoyaltyApiAxiosParamCreator(configuration).searchLoyaltyRewards(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * LoyaltyApi - factory interface
 * @export
 */
exports.LoyaltyApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
         * @summary AccumulateLoyaltyPoints
         * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
         * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accumulateLoyaltyPoints: function (accountId, body, options) {
            return exports.LoyaltyApiFp(configuration).accumulateLoyaltyPoints(accountId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
         * @summary AdjustLoyaltyPoints
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
         * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustLoyaltyPoints: function (accountId, body, options) {
            return exports.LoyaltyApiFp(configuration).adjustLoyaltyPoints(accountId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
         * @summary CalculateLoyaltyPoints
         * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
         * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateLoyaltyPoints: function (programId, body, options) {
            return exports.LoyaltyApiFp(configuration).calculateLoyaltyPoints(programId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a loyalty account.
         * @summary CreateLoyaltyAccount
         * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoyaltyAccount: function (body, options) {
            return exports.LoyaltyApiFp(configuration).createLoyaltyAccount(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
         * @summary CreateLoyaltyReward
         * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoyaltyReward: function (body, options) {
            return exports.LoyaltyApiFp(configuration).createLoyaltyReward(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
         * @summary DeleteLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoyaltyReward: function (rewardId, options) {
            return exports.LoyaltyApiFp(configuration).deleteLoyaltyReward(rewardId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
         * @summary ListLoyaltyPrograms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLoyaltyPrograms: function (options) {
            return exports.LoyaltyApiFp(configuration).listLoyaltyPrograms(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
         * @summary RedeemLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
         * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemLoyaltyReward: function (rewardId, body, options) {
            return exports.LoyaltyApiFp(configuration).redeemLoyaltyReward(rewardId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a loyalty account.
         * @summary RetrieveLoyaltyAccount
         * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLoyaltyAccount: function (accountId, options) {
            return exports.LoyaltyApiFp(configuration).retrieveLoyaltyAccount(accountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a loyalty reward.
         * @summary RetrieveLoyaltyReward
         * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveLoyaltyReward: function (rewardId, options) {
            return exports.LoyaltyApiFp(configuration).retrieveLoyaltyReward(rewardId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
         * @summary SearchLoyaltyAccounts
         * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyAccounts: function (body, options) {
            return exports.LoyaltyApiFp(configuration).searchLoyaltyAccounts(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
         * @summary SearchLoyaltyEvents
         * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyEvents: function (body, options) {
            return exports.LoyaltyApiFp(configuration).searchLoyaltyEvents(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
         * @summary SearchLoyaltyRewards
         * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLoyaltyRewards: function (body, options) {
            return exports.LoyaltyApiFp(configuration).searchLoyaltyRewards(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * LoyaltyApi - object-oriented interface
 * @export
 * @class LoyaltyApi
 * @extends {BaseAPI}
 */
var LoyaltyApi = /** @class */ (function (_super) {
    __extends(LoyaltyApi, _super);
    function LoyaltyApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
     * @summary AccumulateLoyaltyPoints
     * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
     * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.accumulateLoyaltyPoints = function (accountId, body, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).accumulateLoyaltyPoints(accountId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
     * @summary AdjustLoyaltyPoints
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
     * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.adjustLoyaltyPoints = function (accountId, body, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).adjustLoyaltyPoints(accountId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
     * @summary CalculateLoyaltyPoints
     * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
     * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.calculateLoyaltyPoints = function (programId, body, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).calculateLoyaltyPoints(programId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a loyalty account.
     * @summary CreateLoyaltyAccount
     * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.createLoyaltyAccount = function (body, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).createLoyaltyAccount(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @summary CreateLoyaltyReward
     * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.createLoyaltyReward = function (body, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).createLoyaltyReward(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @summary DeleteLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.deleteLoyaltyReward = function (rewardId, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).deleteLoyaltyReward(rewardId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
     * @summary ListLoyaltyPrograms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.listLoyaltyPrograms = function (options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).listLoyaltyPrograms(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @summary RedeemLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
     * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.redeemLoyaltyReward = function (rewardId, body, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).redeemLoyaltyReward(rewardId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a loyalty account.
     * @summary RetrieveLoyaltyAccount
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.retrieveLoyaltyAccount = function (accountId, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).retrieveLoyaltyAccount(accountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a loyalty reward.
     * @summary RetrieveLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.retrieveLoyaltyReward = function (rewardId, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).retrieveLoyaltyReward(rewardId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @summary SearchLoyaltyAccounts
     * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.searchLoyaltyAccounts = function (body, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).searchLoyaltyAccounts(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * @summary SearchLoyaltyEvents
     * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.searchLoyaltyEvents = function (body, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).searchLoyaltyEvents(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
     * @summary SearchLoyaltyRewards
     * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    LoyaltyApi.prototype.searchLoyaltyRewards = function (body, options) {
        var _this = this;
        return exports.LoyaltyApiFp(this.configuration).searchLoyaltyRewards(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LoyaltyApi;
}(base_1.BaseAPI));
exports.LoyaltyApi = LoyaltyApi;
/**
 * MerchantsApi - axios parameter creator
 * @export
 */
exports.MerchantsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns `Merchant` information for a given access token.  If you don\'t know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token. You can specify your personal access token to get your own merchant information or specify an OAuth token to get the information for the  merchant that granted you access.  If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-retrievemerchant) endpoint to get the merchant information.
         * @summary ListMerchants
         * @param {number} [cursor] The cursor generated by the previous response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMerchants: function (cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/merchants";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["MERCHANT_PROFILE_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve a `Merchant` object for the given `merchant_id`.
         * @summary RetrieveMerchant
         * @param {string} merchantId The ID of the merchant to retrieve. If the string \&quot;me\&quot; is supplied as the ID, then retrieve the merchant that is currently accessible to this call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMerchant: function (merchantId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'merchantId' is not null or undefined
                    if (merchantId === null || merchantId === undefined) {
                        throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling retrieveMerchant.');
                    }
                    localVarPath = "/v2/merchants/{merchant_id}"
                        .replace("{" + "merchant_id" + "}", encodeURIComponent(String(merchantId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["MERCHANT_PROFILE_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * MerchantsApi - functional programming interface
 * @export
 */
exports.MerchantsApiFp = function (configuration) {
    return {
        /**
         * Returns `Merchant` information for a given access token.  If you don\'t know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token. You can specify your personal access token to get your own merchant information or specify an OAuth token to get the information for the  merchant that granted you access.  If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-retrievemerchant) endpoint to get the merchant information.
         * @summary ListMerchants
         * @param {number} [cursor] The cursor generated by the previous response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMerchants: function (cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.MerchantsApiAxiosParamCreator(configuration).listMerchants(cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve a `Merchant` object for the given `merchant_id`.
         * @summary RetrieveMerchant
         * @param {string} merchantId The ID of the merchant to retrieve. If the string \&quot;me\&quot; is supplied as the ID, then retrieve the merchant that is currently accessible to this call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMerchant: function (merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.MerchantsApiAxiosParamCreator(configuration).retrieveMerchant(merchantId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * MerchantsApi - factory interface
 * @export
 */
exports.MerchantsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Returns `Merchant` information for a given access token.  If you don\'t know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token. You can specify your personal access token to get your own merchant information or specify an OAuth token to get the information for the  merchant that granted you access.  If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-retrievemerchant) endpoint to get the merchant information.
         * @summary ListMerchants
         * @param {number} [cursor] The cursor generated by the previous response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMerchants: function (cursor, options) {
            return exports.MerchantsApiFp(configuration).listMerchants(cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a `Merchant` object for the given `merchant_id`.
         * @summary RetrieveMerchant
         * @param {string} merchantId The ID of the merchant to retrieve. If the string \&quot;me\&quot; is supplied as the ID, then retrieve the merchant that is currently accessible to this call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMerchant: function (merchantId, options) {
            return exports.MerchantsApiFp(configuration).retrieveMerchant(merchantId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * MerchantsApi - object-oriented interface
 * @export
 * @class MerchantsApi
 * @extends {BaseAPI}
 */
var MerchantsApi = /** @class */ (function (_super) {
    __extends(MerchantsApi, _super);
    function MerchantsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns `Merchant` information for a given access token.  If you don\'t know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token. You can specify your personal access token to get your own merchant information or specify an OAuth token to get the information for the  merchant that granted you access.  If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-retrievemerchant) endpoint to get the merchant information.
     * @summary ListMerchants
     * @param {number} [cursor] The cursor generated by the previous response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.listMerchants = function (cursor, options) {
        var _this = this;
        return exports.MerchantsApiFp(this.configuration).listMerchants(cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a `Merchant` object for the given `merchant_id`.
     * @summary RetrieveMerchant
     * @param {string} merchantId The ID of the merchant to retrieve. If the string \&quot;me\&quot; is supplied as the ID, then retrieve the merchant that is currently accessible to this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.retrieveMerchant = function (merchantId, options) {
        var _this = this;
        return exports.MerchantsApiFp(this.configuration).retrieveMerchant(merchantId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MerchantsApi;
}(base_1.BaseAPI));
exports.MerchantsApi = MerchantsApi;
/**
 * MobileAuthorizationApi - axios parameter creator
 * @export
 */
exports.MobileAuthorizationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The `Authorization` header you provide to this endpoint must have the following format:  ``` Authorization: Bearer ACCESS_TOKEN ```  Replace `ACCESS_TOKEN` with a [valid production authorization credential](/docs/build-basics/access-tokens).
         * @summary CreateMobileAuthorizationCode
         * @param {CreateMobileAuthorizationCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMobileAuthorizationCode: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createMobileAuthorizationCode.');
                    }
                    localVarPath = "/mobile/authorization-code";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE_IN_PERSON"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * MobileAuthorizationApi - functional programming interface
 * @export
 */
exports.MobileAuthorizationApiFp = function (configuration) {
    return {
        /**
         * Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The `Authorization` header you provide to this endpoint must have the following format:  ``` Authorization: Bearer ACCESS_TOKEN ```  Replace `ACCESS_TOKEN` with a [valid production authorization credential](/docs/build-basics/access-tokens).
         * @summary CreateMobileAuthorizationCode
         * @param {CreateMobileAuthorizationCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMobileAuthorizationCode: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.MobileAuthorizationApiAxiosParamCreator(configuration).createMobileAuthorizationCode(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * MobileAuthorizationApi - factory interface
 * @export
 */
exports.MobileAuthorizationApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The `Authorization` header you provide to this endpoint must have the following format:  ``` Authorization: Bearer ACCESS_TOKEN ```  Replace `ACCESS_TOKEN` with a [valid production authorization credential](/docs/build-basics/access-tokens).
         * @summary CreateMobileAuthorizationCode
         * @param {CreateMobileAuthorizationCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMobileAuthorizationCode: function (body, options) {
            return exports.MobileAuthorizationApiFp(configuration).createMobileAuthorizationCode(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * MobileAuthorizationApi - object-oriented interface
 * @export
 * @class MobileAuthorizationApi
 * @extends {BaseAPI}
 */
var MobileAuthorizationApi = /** @class */ (function (_super) {
    __extends(MobileAuthorizationApi, _super);
    function MobileAuthorizationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The `Authorization` header you provide to this endpoint must have the following format:  ``` Authorization: Bearer ACCESS_TOKEN ```  Replace `ACCESS_TOKEN` with a [valid production authorization credential](/docs/build-basics/access-tokens).
     * @summary CreateMobileAuthorizationCode
     * @param {CreateMobileAuthorizationCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobileAuthorizationApi
     */
    MobileAuthorizationApi.prototype.createMobileAuthorizationCode = function (body, options) {
        var _this = this;
        return exports.MobileAuthorizationApiFp(this.configuration).createMobileAuthorizationCode(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MobileAuthorizationApi;
}(base_1.BaseAPI));
exports.MobileAuthorizationApi = MobileAuthorizationApi;
/**
 * OAuthApi - axios parameter creator
 * @export
 */
exports.OAuthApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns an OAuth access token.  The endpoint supports distinct methods of obtaining OAuth access tokens. Applications specify a method by adding the `grant_type` parameter in the request and also provide relevant information. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).  __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and a refresh token in the response.  __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
         * @summary ObtainToken
         * @param {ObtainTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainToken: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling obtainToken.');
                    }
                    localVarPath = "/oauth2/token";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application\'s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
         * @summary RenewToken
         * @param {string} clientId Your application ID, available from the [application dashboard](https://connect.squareup.com/apps).
         * @param {RenewTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewToken: function (clientId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'clientId' is not null or undefined
                            if (clientId === null || clientId === undefined) {
                                throw new base_1.RequiredError('clientId', 'Required parameter clientId was null or undefined when calling renewToken.');
                            }
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling renewToken.');
                            }
                            localVarPath = "/oauth2/clients/{client_id}/access-token/renew"
                                .replace("{" + "client_id" + "}", encodeURIComponent(String(clientId)));
                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                            delete localVarUrlObj.search;
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: globalImportUrl.format(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
         * @summary RevokeToken
         * @param {RevokeTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeToken: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling revokeToken.');
                            }
                            localVarPath = "/oauth2/revoke";
                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                            delete localVarUrlObj.search;
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: globalImportUrl.format(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * OAuthApi - functional programming interface
 * @export
 */
exports.OAuthApiFp = function (configuration) {
    return {
        /**
         * Returns an OAuth access token.  The endpoint supports distinct methods of obtaining OAuth access tokens. Applications specify a method by adding the `grant_type` parameter in the request and also provide relevant information. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).  __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and a refresh token in the response.  __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
         * @summary ObtainToken
         * @param {ObtainTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainToken: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OAuthApiAxiosParamCreator(configuration).obtainToken(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application\'s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
         * @summary RenewToken
         * @param {string} clientId Your application ID, available from the [application dashboard](https://connect.squareup.com/apps).
         * @param {RenewTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewToken: function (clientId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OAuthApiAxiosParamCreator(configuration).renewToken(clientId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
         * @summary RevokeToken
         * @param {RevokeTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeToken: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OAuthApiAxiosParamCreator(configuration).revokeToken(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * OAuthApi - factory interface
 * @export
 */
exports.OAuthApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Returns an OAuth access token.  The endpoint supports distinct methods of obtaining OAuth access tokens. Applications specify a method by adding the `grant_type` parameter in the request and also provide relevant information. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).  __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and a refresh token in the response.  __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
         * @summary ObtainToken
         * @param {ObtainTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainToken: function (body, options) {
            return exports.OAuthApiFp(configuration).obtainToken(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application\'s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
         * @summary RenewToken
         * @param {string} clientId Your application ID, available from the [application dashboard](https://connect.squareup.com/apps).
         * @param {RenewTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewToken: function (clientId, body, options) {
            return exports.OAuthApiFp(configuration).renewToken(clientId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
         * @summary RevokeToken
         * @param {RevokeTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeToken: function (body, options) {
            return exports.OAuthApiFp(configuration).revokeToken(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * OAuthApi - object-oriented interface
 * @export
 * @class OAuthApi
 * @extends {BaseAPI}
 */
var OAuthApi = /** @class */ (function (_super) {
    __extends(OAuthApi, _super);
    function OAuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns an OAuth access token.  The endpoint supports distinct methods of obtaining OAuth access tokens. Applications specify a method by adding the `grant_type` parameter in the request and also provide relevant information. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).  __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and a refresh token in the response.  __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
     * @summary ObtainToken
     * @param {ObtainTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    OAuthApi.prototype.obtainToken = function (body, options) {
        var _this = this;
        return exports.OAuthApiFp(this.configuration).obtainToken(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application\'s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
     * @summary RenewToken
     * @param {string} clientId Your application ID, available from the [application dashboard](https://connect.squareup.com/apps).
     * @param {RenewTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    OAuthApi.prototype.renewToken = function (clientId, body, options) {
        var _this = this;
        return exports.OAuthApiFp(this.configuration).renewToken(clientId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
     * @summary RevokeToken
     * @param {RevokeTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    OAuthApi.prototype.revokeToken = function (body, options) {
        var _this = this;
        return exports.OAuthApiFp(this.configuration).revokeToken(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OAuthApi;
}(base_1.BaseAPI));
exports.OAuthApi = OAuthApi;
/**
 * OrdersApi - axios parameter creator
 * @export
 */
exports.OrdersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
         * @summary BatchRetrieveOrders
         * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveOrders: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling batchRetrieveOrders.');
                    }
                    localVarPath = "/v2/orders/batch-retrieve";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Calculates an [Order](#type-order).
         * @summary CalculateOrder
         * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateOrder: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling calculateOrder.');
                    }
                    localVarPath = "/v2/orders/calculate";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", [])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
         * @summary CreateOrder
         * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createOrder.');
                    }
                    localVarPath = "/v2/orders";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
         * @summary PayOrder
         * @param {string} orderId The ID of the order being paid.
         * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payOrder: function (orderId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'orderId' is not null or undefined
                    if (orderId === null || orderId === undefined) {
                        throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling payOrder.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling payOrder.');
                    }
                    localVarPath = "/v2/orders/{order_id}/pay"
                        .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE", "ORDERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves an [Order](#type-order) by ID.
         * @summary RetrieveOrder
         * @param {string} orderId The ID of the order to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrder: function (orderId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'orderId' is not null or undefined
                    if (orderId === null || orderId === undefined) {
                        throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling retrieveOrder.');
                    }
                    localVarPath = "/v2/orders/{order_id}"
                        .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
         * @summary SearchOrders
         * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOrders: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchOrders.');
                    }
                    localVarPath = "/v2/orders/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
         * @summary UpdateOrder
         * @param {string} orderId The ID of the order to update.
         * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (orderId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'orderId' is not null or undefined
                    if (orderId === null || orderId === undefined) {
                        throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling updateOrder.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateOrder.');
                    }
                    localVarPath = "/v2/orders/{order_id}"
                        .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
exports.OrdersApiFp = function (configuration) {
    return {
        /**
         * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
         * @summary BatchRetrieveOrders
         * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveOrders: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrdersApiAxiosParamCreator(configuration).batchRetrieveOrders(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Calculates an [Order](#type-order).
         * @summary CalculateOrder
         * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateOrder: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrdersApiAxiosParamCreator(configuration).calculateOrder(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
         * @summary CreateOrder
         * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrdersApiAxiosParamCreator(configuration).createOrder(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
         * @summary PayOrder
         * @param {string} orderId The ID of the order being paid.
         * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payOrder: function (orderId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrdersApiAxiosParamCreator(configuration).payOrder(orderId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves an [Order](#type-order) by ID.
         * @summary RetrieveOrder
         * @param {string} orderId The ID of the order to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrder: function (orderId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrdersApiAxiosParamCreator(configuration).retrieveOrder(orderId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
         * @summary SearchOrders
         * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOrders: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrdersApiAxiosParamCreator(configuration).searchOrders(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
         * @summary UpdateOrder
         * @param {string} orderId The ID of the order to update.
         * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (orderId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrdersApiAxiosParamCreator(configuration).updateOrder(orderId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * OrdersApi - factory interface
 * @export
 */
exports.OrdersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
         * @summary BatchRetrieveOrders
         * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieveOrders: function (body, options) {
            return exports.OrdersApiFp(configuration).batchRetrieveOrders(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Calculates an [Order](#type-order).
         * @summary CalculateOrder
         * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateOrder: function (body, options) {
            return exports.OrdersApiFp(configuration).calculateOrder(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
         * @summary CreateOrder
         * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: function (body, options) {
            return exports.OrdersApiFp(configuration).createOrder(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
         * @summary PayOrder
         * @param {string} orderId The ID of the order being paid.
         * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payOrder: function (orderId, body, options) {
            return exports.OrdersApiFp(configuration).payOrder(orderId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves an [Order](#type-order) by ID.
         * @summary RetrieveOrder
         * @param {string} orderId The ID of the order to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrder: function (orderId, options) {
            return exports.OrdersApiFp(configuration).retrieveOrder(orderId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
         * @summary SearchOrders
         * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOrders: function (body, options) {
            return exports.OrdersApiFp(configuration).searchOrders(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
         * @summary UpdateOrder
         * @param {string} orderId The ID of the order to update.
         * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (orderId, body, options) {
            return exports.OrdersApiFp(configuration).updateOrder(orderId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
var OrdersApi = /** @class */ (function (_super) {
    __extends(OrdersApi, _super);
    function OrdersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
     * @summary BatchRetrieveOrders
     * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.batchRetrieveOrders = function (body, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).batchRetrieveOrders(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Calculates an [Order](#type-order).
     * @summary CalculateOrder
     * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.calculateOrder = function (body, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).calculateOrder(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
     * @summary CreateOrder
     * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.createOrder = function (body, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).createOrder(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
     * @summary PayOrder
     * @param {string} orderId The ID of the order being paid.
     * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.payOrder = function (orderId, body, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).payOrder(orderId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves an [Order](#type-order) by ID.
     * @summary RetrieveOrder
     * @param {string} orderId The ID of the order to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.retrieveOrder = function (orderId, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).retrieveOrder(orderId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @summary SearchOrders
     * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.searchOrders = function (body, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).searchOrders(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
     * @summary UpdateOrder
     * @param {string} orderId The ID of the order to update.
     * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.updateOrder = function (orderId, body, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).updateOrder(orderId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OrdersApi;
}(base_1.BaseAPI));
exports.OrdersApi = OrdersApi;
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
exports.PaymentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Cancels (voids) a payment. If you set `autocomplete` to `false` when creating a payment,  you can cancel the payment using this endpoint.
         * @summary CancelPayment
         * @param {string} paymentId The &#x60;payment_id&#x60; identifying the payment to be canceled.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment: function (paymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'paymentId' is not null or undefined
                    if (paymentId === null || paymentId === undefined) {
                        throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling cancelPayment.');
                    }
                    localVarPath = "/v2/payments/{payment_id}/cancel"
                        .replace("{" + "payment_id" + "}", encodeURIComponent(String(paymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Cancels (voids) a payment identified by the idempotency key that is specified in the request.  Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your `CreatePayment` request that you want to cancel. After canceling the payment, you can submit your `CreatePayment` request again.  Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint  returns successfully.
         * @summary CancelPaymentByIdempotencyKey
         * @param {CancelPaymentByIdempotencyKeyRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPaymentByIdempotencyKey: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling cancelPaymentByIdempotencyKey.');
                    }
                    localVarPath = "/v2/payments/cancel";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set `autocomplete` to `false` when creating a payment, you can complete (capture)  the payment using this endpoint.
         * @summary CompletePayment
         * @param {string} paymentId The unique ID identifying the payment to be completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completePayment: function (paymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'paymentId' is not null or undefined
                    if (paymentId === null || paymentId === undefined) {
                        throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling completePayment.');
                    }
                    localVarPath = "/v2/payments/{payment_id}/complete"
                        .replace("{" + "payment_id" + "}", encodeURIComponent(String(paymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Charges a payment source (for example, a card  represented by customer\'s card on file or a card nonce). In addition  to the payment source, the request must include the  amount to accept for the payment.  There are several optional parameters that you can include in the request  (for example, tip money, whether to autocomplete the payment, or a reference ID  to correlate this payment with another system).   The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.
         * @summary CreatePayment
         * @param {CreatePaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createPayment.');
                    }
                    localVarPath = "/v2/payments";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves details for a specific payment.
         * @summary GetPayment
         * @param {string} paymentId A unique ID for the desired payment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment: function (paymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'paymentId' is not null or undefined
                    if (paymentId === null || paymentId === undefined) {
                        throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling getPayment.');
                    }
                    localVarPath = "/v2/payments/{payment_id}"
                        .replace("{" + "payment_id" + "}", encodeURIComponent(String(paymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a list of payments taken by the account making the request.  The maximum results per page is 100.
         * @summary ListPayments
         * @param {string} [beginTime] The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
         * @param {string} [endTime] The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.
         * @param {string} [sortOrder] The order in which results are listed: - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default).
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
         * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.
         * @param {number} [total] The exact amount in the &#x60;total_money&#x60; for a payment.
         * @param {string} [last4] The last four digits of a payment card.
         * @param {string} [cardBrand] The brand of the payment card (for example, VISA).
         * @param {number} [limit] The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: &#x60;100&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: function (beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/payments";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (beginTime !== undefined) {
                        localVarQueryParameter['begin_time'] = beginTime;
                    }
                    if (endTime !== undefined) {
                        localVarQueryParameter['end_time'] = endTime;
                    }
                    if (sortOrder !== undefined) {
                        localVarQueryParameter['sort_order'] = sortOrder;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    if (total !== undefined) {
                        localVarQueryParameter['total'] = total;
                    }
                    if (last4 !== undefined) {
                        localVarQueryParameter['last_4'] = last4;
                    }
                    if (cardBrand !== undefined) {
                        localVarQueryParameter['card_brand'] = cardBrand;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * PaymentsApi - functional programming interface
 * @export
 */
exports.PaymentsApiFp = function (configuration) {
    return {
        /**
         * Cancels (voids) a payment. If you set `autocomplete` to `false` when creating a payment,  you can cancel the payment using this endpoint.
         * @summary CancelPayment
         * @param {string} paymentId The &#x60;payment_id&#x60; identifying the payment to be canceled.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment: function (paymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.PaymentsApiAxiosParamCreator(configuration).cancelPayment(paymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Cancels (voids) a payment identified by the idempotency key that is specified in the request.  Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your `CreatePayment` request that you want to cancel. After canceling the payment, you can submit your `CreatePayment` request again.  Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint  returns successfully.
         * @summary CancelPaymentByIdempotencyKey
         * @param {CancelPaymentByIdempotencyKeyRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPaymentByIdempotencyKey: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.PaymentsApiAxiosParamCreator(configuration).cancelPaymentByIdempotencyKey(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set `autocomplete` to `false` when creating a payment, you can complete (capture)  the payment using this endpoint.
         * @summary CompletePayment
         * @param {string} paymentId The unique ID identifying the payment to be completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completePayment: function (paymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.PaymentsApiAxiosParamCreator(configuration).completePayment(paymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Charges a payment source (for example, a card  represented by customer\'s card on file or a card nonce). In addition  to the payment source, the request must include the  amount to accept for the payment.  There are several optional parameters that you can include in the request  (for example, tip money, whether to autocomplete the payment, or a reference ID  to correlate this payment with another system).   The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.
         * @summary CreatePayment
         * @param {CreatePaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.PaymentsApiAxiosParamCreator(configuration).createPayment(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves details for a specific payment.
         * @summary GetPayment
         * @param {string} paymentId A unique ID for the desired payment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment: function (paymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.PaymentsApiAxiosParamCreator(configuration).getPayment(paymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a list of payments taken by the account making the request.  The maximum results per page is 100.
         * @summary ListPayments
         * @param {string} [beginTime] The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
         * @param {string} [endTime] The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.
         * @param {string} [sortOrder] The order in which results are listed: - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default).
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
         * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.
         * @param {number} [total] The exact amount in the &#x60;total_money&#x60; for a payment.
         * @param {string} [last4] The last four digits of a payment card.
         * @param {string} [cardBrand] The brand of the payment card (for example, VISA).
         * @param {number} [limit] The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: &#x60;100&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: function (beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.PaymentsApiAxiosParamCreator(configuration).listPayments(beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * PaymentsApi - factory interface
 * @export
 */
exports.PaymentsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Cancels (voids) a payment. If you set `autocomplete` to `false` when creating a payment,  you can cancel the payment using this endpoint.
         * @summary CancelPayment
         * @param {string} paymentId The &#x60;payment_id&#x60; identifying the payment to be canceled.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment: function (paymentId, options) {
            return exports.PaymentsApiFp(configuration).cancelPayment(paymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Cancels (voids) a payment identified by the idempotency key that is specified in the request.  Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your `CreatePayment` request that you want to cancel. After canceling the payment, you can submit your `CreatePayment` request again.  Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint  returns successfully.
         * @summary CancelPaymentByIdempotencyKey
         * @param {CancelPaymentByIdempotencyKeyRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPaymentByIdempotencyKey: function (body, options) {
            return exports.PaymentsApiFp(configuration).cancelPaymentByIdempotencyKey(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set `autocomplete` to `false` when creating a payment, you can complete (capture)  the payment using this endpoint.
         * @summary CompletePayment
         * @param {string} paymentId The unique ID identifying the payment to be completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completePayment: function (paymentId, options) {
            return exports.PaymentsApiFp(configuration).completePayment(paymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Charges a payment source (for example, a card  represented by customer\'s card on file or a card nonce). In addition  to the payment source, the request must include the  amount to accept for the payment.  There are several optional parameters that you can include in the request  (for example, tip money, whether to autocomplete the payment, or a reference ID  to correlate this payment with another system).   The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.
         * @summary CreatePayment
         * @param {CreatePaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: function (body, options) {
            return exports.PaymentsApiFp(configuration).createPayment(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves details for a specific payment.
         * @summary GetPayment
         * @param {string} paymentId A unique ID for the desired payment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment: function (paymentId, options) {
            return exports.PaymentsApiFp(configuration).getPayment(paymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a list of payments taken by the account making the request.  The maximum results per page is 100.
         * @summary ListPayments
         * @param {string} [beginTime] The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
         * @param {string} [endTime] The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.
         * @param {string} [sortOrder] The order in which results are listed: - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default).
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
         * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.
         * @param {number} [total] The exact amount in the &#x60;total_money&#x60; for a payment.
         * @param {string} [last4] The last four digits of a payment card.
         * @param {string} [cardBrand] The brand of the payment card (for example, VISA).
         * @param {number} [limit] The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: &#x60;100&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: function (beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand, limit, options) {
            return exports.PaymentsApiFp(configuration).listPayments(beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand, limit, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
var PaymentsApi = /** @class */ (function (_super) {
    __extends(PaymentsApi, _super);
    function PaymentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Cancels (voids) a payment. If you set `autocomplete` to `false` when creating a payment,  you can cancel the payment using this endpoint.
     * @summary CancelPayment
     * @param {string} paymentId The &#x60;payment_id&#x60; identifying the payment to be canceled.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.cancelPayment = function (paymentId, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).cancelPayment(paymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Cancels (voids) a payment identified by the idempotency key that is specified in the request.  Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your `CreatePayment` request that you want to cancel. After canceling the payment, you can submit your `CreatePayment` request again.  Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint  returns successfully.
     * @summary CancelPaymentByIdempotencyKey
     * @param {CancelPaymentByIdempotencyKeyRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.cancelPaymentByIdempotencyKey = function (body, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).cancelPaymentByIdempotencyKey(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set `autocomplete` to `false` when creating a payment, you can complete (capture)  the payment using this endpoint.
     * @summary CompletePayment
     * @param {string} paymentId The unique ID identifying the payment to be completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.completePayment = function (paymentId, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).completePayment(paymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Charges a payment source (for example, a card  represented by customer\'s card on file or a card nonce). In addition  to the payment source, the request must include the  amount to accept for the payment.  There are several optional parameters that you can include in the request  (for example, tip money, whether to autocomplete the payment, or a reference ID  to correlate this payment with another system).   The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.
     * @summary CreatePayment
     * @param {CreatePaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.createPayment = function (body, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).createPayment(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves details for a specific payment.
     * @summary GetPayment
     * @param {string} paymentId A unique ID for the desired payment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.getPayment = function (paymentId, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).getPayment(paymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a list of payments taken by the account making the request.  The maximum results per page is 100.
     * @summary ListPayments
     * @param {string} [beginTime] The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
     * @param {string} [endTime] The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.
     * @param {string} [sortOrder] The order in which results are listed: - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default).
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.
     * @param {number} [total] The exact amount in the &#x60;total_money&#x60; for a payment.
     * @param {string} [last4] The last four digits of a payment card.
     * @param {string} [cardBrand] The brand of the payment card (for example, VISA).
     * @param {number} [limit] The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: &#x60;100&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.listPayments = function (beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand, limit, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).listPayments(beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PaymentsApi;
}(base_1.BaseAPI));
exports.PaymentsApi = PaymentsApi;
/**
 * RefundsApi - axios parameter creator
 * @export
 */
exports.RefundsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieves a specific refund using the `refund_id`.
         * @summary GetPaymentRefund
         * @param {string} refundId Unique ID for the desired &#x60;PaymentRefund&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentRefund: function (refundId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'refundId' is not null or undefined
                    if (refundId === null || refundId === undefined) {
                        throw new base_1.RequiredError('refundId', 'Required parameter refundId was null or undefined when calling getPaymentRefund.');
                    }
                    localVarPath = "/v2/refunds/{refund_id}"
                        .replace("{" + "refund_id" + "}", encodeURIComponent(String(refundId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a list of refunds for the account making the request.  The maximum results per page is 100.
         * @summary ListPaymentRefunds
         * @param {string} [beginTime] Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.
         * @param {string} [endTime] Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
         * @param {string} [sortOrder] The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default).
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
         * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for all locations associated with the merchant.
         * @param {string} [status] If provided, only refunds with the given status are returned. For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status.
         * @param {string} [sourceType] If provided, only refunds with the given source type are returned. - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment source.  Default: If omitted refunds are returned regardless of source type.
         * @param {number} [limit] Maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, at most 100 results will be returned.  Default: &#x60;100&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentRefunds: function (beginTime, endTime, sortOrder, cursor, locationId, status, sourceType, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/refunds";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (beginTime !== undefined) {
                        localVarQueryParameter['begin_time'] = beginTime;
                    }
                    if (endTime !== undefined) {
                        localVarQueryParameter['end_time'] = endTime;
                    }
                    if (sortOrder !== undefined) {
                        localVarQueryParameter['sort_order'] = sortOrder;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    if (status !== undefined) {
                        localVarQueryParameter['status'] = status;
                    }
                    if (sourceType !== undefined) {
                        localVarQueryParameter['source_type'] = sourceType;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Refunds a payment. You can refund the entire payment amount or a  portion of it.
         * @summary RefundPayment
         * @param {RefundPaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundPayment: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling refundPayment.');
                    }
                    localVarPath = "/v2/refunds";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * RefundsApi - functional programming interface
 * @export
 */
exports.RefundsApiFp = function (configuration) {
    return {
        /**
         * Retrieves a specific refund using the `refund_id`.
         * @summary GetPaymentRefund
         * @param {string} refundId Unique ID for the desired &#x60;PaymentRefund&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentRefund: function (refundId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.RefundsApiAxiosParamCreator(configuration).getPaymentRefund(refundId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a list of refunds for the account making the request.  The maximum results per page is 100.
         * @summary ListPaymentRefunds
         * @param {string} [beginTime] Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.
         * @param {string} [endTime] Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
         * @param {string} [sortOrder] The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default).
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
         * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for all locations associated with the merchant.
         * @param {string} [status] If provided, only refunds with the given status are returned. For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status.
         * @param {string} [sourceType] If provided, only refunds with the given source type are returned. - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment source.  Default: If omitted refunds are returned regardless of source type.
         * @param {number} [limit] Maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, at most 100 results will be returned.  Default: &#x60;100&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentRefunds: function (beginTime, endTime, sortOrder, cursor, locationId, status, sourceType, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.RefundsApiAxiosParamCreator(configuration).listPaymentRefunds(beginTime, endTime, sortOrder, cursor, locationId, status, sourceType, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Refunds a payment. You can refund the entire payment amount or a  portion of it.
         * @summary RefundPayment
         * @param {RefundPaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundPayment: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.RefundsApiAxiosParamCreator(configuration).refundPayment(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * RefundsApi - factory interface
 * @export
 */
exports.RefundsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Retrieves a specific refund using the `refund_id`.
         * @summary GetPaymentRefund
         * @param {string} refundId Unique ID for the desired &#x60;PaymentRefund&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentRefund: function (refundId, options) {
            return exports.RefundsApiFp(configuration).getPaymentRefund(refundId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a list of refunds for the account making the request.  The maximum results per page is 100.
         * @summary ListPaymentRefunds
         * @param {string} [beginTime] Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.
         * @param {string} [endTime] Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
         * @param {string} [sortOrder] The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default).
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
         * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for all locations associated with the merchant.
         * @param {string} [status] If provided, only refunds with the given status are returned. For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status.
         * @param {string} [sourceType] If provided, only refunds with the given source type are returned. - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment source.  Default: If omitted refunds are returned regardless of source type.
         * @param {number} [limit] Maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, at most 100 results will be returned.  Default: &#x60;100&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentRefunds: function (beginTime, endTime, sortOrder, cursor, locationId, status, sourceType, limit, options) {
            return exports.RefundsApiFp(configuration).listPaymentRefunds(beginTime, endTime, sortOrder, cursor, locationId, status, sourceType, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Refunds a payment. You can refund the entire payment amount or a  portion of it.
         * @summary RefundPayment
         * @param {RefundPaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundPayment: function (body, options) {
            return exports.RefundsApiFp(configuration).refundPayment(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * RefundsApi - object-oriented interface
 * @export
 * @class RefundsApi
 * @extends {BaseAPI}
 */
var RefundsApi = /** @class */ (function (_super) {
    __extends(RefundsApi, _super);
    function RefundsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a specific refund using the `refund_id`.
     * @summary GetPaymentRefund
     * @param {string} refundId Unique ID for the desired &#x60;PaymentRefund&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    RefundsApi.prototype.getPaymentRefund = function (refundId, options) {
        var _this = this;
        return exports.RefundsApiFp(this.configuration).getPaymentRefund(refundId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a list of refunds for the account making the request.  The maximum results per page is 100.
     * @summary ListPaymentRefunds
     * @param {string} [beginTime] Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.
     * @param {string} [endTime] Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
     * @param {string} [sortOrder] The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default).
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for all locations associated with the merchant.
     * @param {string} [status] If provided, only refunds with the given status are returned. For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status.
     * @param {string} [sourceType] If provided, only refunds with the given source type are returned. - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment source.  Default: If omitted refunds are returned regardless of source type.
     * @param {number} [limit] Maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, at most 100 results will be returned.  Default: &#x60;100&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    RefundsApi.prototype.listPaymentRefunds = function (beginTime, endTime, sortOrder, cursor, locationId, status, sourceType, limit, options) {
        var _this = this;
        return exports.RefundsApiFp(this.configuration).listPaymentRefunds(beginTime, endTime, sortOrder, cursor, locationId, status, sourceType, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Refunds a payment. You can refund the entire payment amount or a  portion of it.
     * @summary RefundPayment
     * @param {RefundPaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    RefundsApi.prototype.refundPayment = function (body, options) {
        var _this = this;
        return exports.RefundsApiFp(this.configuration).refundPayment(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RefundsApi;
}(base_1.BaseAPI));
exports.RefundsApi = RefundsApi;
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
exports.SubscriptionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Sets the `canceled_date` field to the end of the active billing period. After this date, the status changes from ACTIVE to CANCELED.
         * @summary CancelSubscription
         * @param {string} subscriptionId The ID of the subscription to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription: function (subscriptionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'subscriptionId' is not null or undefined
                    if (subscriptionId === null || subscriptionId === undefined) {
                        throw new base_1.RequiredError('subscriptionId', 'Required parameter subscriptionId was null or undefined when calling cancelSubscription.');
                    }
                    localVarPath = "/v2/subscriptions/{subscription_id}/cancel"
                        .replace("{" + "subscription_id" + "}", encodeURIComponent(String(subscriptionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["SUBSCRIPTIONS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a subscription for a customer to a subscription plan.  If you provide a card on file in the request, Square charges the card for  the subscription. Otherwise, Square bills an invoice to the customer\'s email  address. The subscription starts immediately, unless the request includes  the optional `start_date`. Each individual subscription is associated with a particular location.
         * @summary CreateSubscription
         * @param {CreateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createSubscription.');
                    }
                    localVarPath = "/v2/subscriptions";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_READ", "PAYMENTS_WRITE", "SUBSCRIPTIONS_WRITE", "ITEMS_READ", "ORDERS_WRITE", "INVOICES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all events for a specific subscription. In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
         * @summary ListSubscriptionEvents
         * @param {string} subscriptionId The ID of the subscription to retrieve the events for.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
         * @param {number} [limit] The upper limit on the number of subscription events to return  in the response.   Default: &#x60;200&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionEvents: function (subscriptionId, cursor, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'subscriptionId' is not null or undefined
                    if (subscriptionId === null || subscriptionId === undefined) {
                        throw new base_1.RequiredError('subscriptionId', 'Required parameter subscriptionId was null or undefined when calling listSubscriptionEvents.');
                    }
                    localVarPath = "/v2/subscriptions/{subscription_id}/events"
                        .replace("{" + "subscription_id" + "}", encodeURIComponent(String(subscriptionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["SUBSCRIPTIONS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a subscription.
         * @summary RetrieveSubscription
         * @param {string} subscriptionId The ID of the subscription to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSubscription: function (subscriptionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'subscriptionId' is not null or undefined
                    if (subscriptionId === null || subscriptionId === undefined) {
                        throw new base_1.RequiredError('subscriptionId', 'Required parameter subscriptionId was null or undefined when calling retrieveSubscription.');
                    }
                    localVarPath = "/v2/subscriptions/{subscription_id}"
                        .replace("{" + "subscription_id" + "}", encodeURIComponent(String(subscriptionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["SUBSCRIPTIONS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Searches for subscriptions.  Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID,  the endpoint orders the result  by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify `customer_ids` to search by customer.  If left unset, all customers  associated with the specified locations are returned.  If the request specifies customer IDs, the endpoint orders results  first by location, within location by customer ID, and within  customer by subscription creation date.  For more information, see  [Retrieve subscriptions](/docs/subscriptions-api/overview#retrieve-subscriptions).
         * @summary SearchSubscriptions
         * @param {SearchSubscriptionsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubscriptions: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchSubscriptions.');
                    }
                    localVarPath = "/v2/subscriptions/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["SUBSCRIPTIONS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates a subscription. You can set, modify, and clear the  `subscription` field values.
         * @summary UpdateSubscription
         * @param {string} subscriptionId The ID for the subscription to update.
         * @param {UpdateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: function (subscriptionId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'subscriptionId' is not null or undefined
                    if (subscriptionId === null || subscriptionId === undefined) {
                        throw new base_1.RequiredError('subscriptionId', 'Required parameter subscriptionId was null or undefined when calling updateSubscription.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateSubscription.');
                    }
                    localVarPath = "/v2/subscriptions/{subscription_id}"
                        .replace("{" + "subscription_id" + "}", encodeURIComponent(String(subscriptionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["CUSTOMERS_READ", "PAYMENTS_WRITE", "SUBSCRIPTIONS_WRITE", "ITEMS_READ", "ORDERS_WRITE", "INVOICES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
exports.SubscriptionsApiFp = function (configuration) {
    return {
        /**
         * Sets the `canceled_date` field to the end of the active billing period. After this date, the status changes from ACTIVE to CANCELED.
         * @summary CancelSubscription
         * @param {string} subscriptionId The ID of the subscription to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription: function (subscriptionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.SubscriptionsApiAxiosParamCreator(configuration).cancelSubscription(subscriptionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a subscription for a customer to a subscription plan.  If you provide a card on file in the request, Square charges the card for  the subscription. Otherwise, Square bills an invoice to the customer\'s email  address. The subscription starts immediately, unless the request includes  the optional `start_date`. Each individual subscription is associated with a particular location.
         * @summary CreateSubscription
         * @param {CreateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.SubscriptionsApiAxiosParamCreator(configuration).createSubscription(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all events for a specific subscription. In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
         * @summary ListSubscriptionEvents
         * @param {string} subscriptionId The ID of the subscription to retrieve the events for.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
         * @param {number} [limit] The upper limit on the number of subscription events to return  in the response.   Default: &#x60;200&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionEvents: function (subscriptionId, cursor, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.SubscriptionsApiAxiosParamCreator(configuration).listSubscriptionEvents(subscriptionId, cursor, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a subscription.
         * @summary RetrieveSubscription
         * @param {string} subscriptionId The ID of the subscription to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSubscription: function (subscriptionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.SubscriptionsApiAxiosParamCreator(configuration).retrieveSubscription(subscriptionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Searches for subscriptions.  Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID,  the endpoint orders the result  by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify `customer_ids` to search by customer.  If left unset, all customers  associated with the specified locations are returned.  If the request specifies customer IDs, the endpoint orders results  first by location, within location by customer ID, and within  customer by subscription creation date.  For more information, see  [Retrieve subscriptions](/docs/subscriptions-api/overview#retrieve-subscriptions).
         * @summary SearchSubscriptions
         * @param {SearchSubscriptionsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubscriptions: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.SubscriptionsApiAxiosParamCreator(configuration).searchSubscriptions(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates a subscription. You can set, modify, and clear the  `subscription` field values.
         * @summary UpdateSubscription
         * @param {string} subscriptionId The ID for the subscription to update.
         * @param {UpdateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: function (subscriptionId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.SubscriptionsApiAxiosParamCreator(configuration).updateSubscription(subscriptionId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SubscriptionsApi - factory interface
 * @export
 */
exports.SubscriptionsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sets the `canceled_date` field to the end of the active billing period. After this date, the status changes from ACTIVE to CANCELED.
         * @summary CancelSubscription
         * @param {string} subscriptionId The ID of the subscription to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription: function (subscriptionId, options) {
            return exports.SubscriptionsApiFp(configuration).cancelSubscription(subscriptionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a subscription for a customer to a subscription plan.  If you provide a card on file in the request, Square charges the card for  the subscription. Otherwise, Square bills an invoice to the customer\'s email  address. The subscription starts immediately, unless the request includes  the optional `start_date`. Each individual subscription is associated with a particular location.
         * @summary CreateSubscription
         * @param {CreateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: function (body, options) {
            return exports.SubscriptionsApiFp(configuration).createSubscription(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all events for a specific subscription. In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
         * @summary ListSubscriptionEvents
         * @param {string} subscriptionId The ID of the subscription to retrieve the events for.
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
         * @param {number} [limit] The upper limit on the number of subscription events to return  in the response.   Default: &#x60;200&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionEvents: function (subscriptionId, cursor, limit, options) {
            return exports.SubscriptionsApiFp(configuration).listSubscriptionEvents(subscriptionId, cursor, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a subscription.
         * @summary RetrieveSubscription
         * @param {string} subscriptionId The ID of the subscription to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSubscription: function (subscriptionId, options) {
            return exports.SubscriptionsApiFp(configuration).retrieveSubscription(subscriptionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Searches for subscriptions.  Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID,  the endpoint orders the result  by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify `customer_ids` to search by customer.  If left unset, all customers  associated with the specified locations are returned.  If the request specifies customer IDs, the endpoint orders results  first by location, within location by customer ID, and within  customer by subscription creation date.  For more information, see  [Retrieve subscriptions](/docs/subscriptions-api/overview#retrieve-subscriptions).
         * @summary SearchSubscriptions
         * @param {SearchSubscriptionsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubscriptions: function (body, options) {
            return exports.SubscriptionsApiFp(configuration).searchSubscriptions(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a subscription. You can set, modify, and clear the  `subscription` field values.
         * @summary UpdateSubscription
         * @param {string} subscriptionId The ID for the subscription to update.
         * @param {UpdateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: function (subscriptionId, body, options) {
            return exports.SubscriptionsApiFp(configuration).updateSubscription(subscriptionId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
var SubscriptionsApi = /** @class */ (function (_super) {
    __extends(SubscriptionsApi, _super);
    function SubscriptionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sets the `canceled_date` field to the end of the active billing period. After this date, the status changes from ACTIVE to CANCELED.
     * @summary CancelSubscription
     * @param {string} subscriptionId The ID of the subscription to cancel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    SubscriptionsApi.prototype.cancelSubscription = function (subscriptionId, options) {
        var _this = this;
        return exports.SubscriptionsApiFp(this.configuration).cancelSubscription(subscriptionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a subscription for a customer to a subscription plan.  If you provide a card on file in the request, Square charges the card for  the subscription. Otherwise, Square bills an invoice to the customer\'s email  address. The subscription starts immediately, unless the request includes  the optional `start_date`. Each individual subscription is associated with a particular location.
     * @summary CreateSubscription
     * @param {CreateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    SubscriptionsApi.prototype.createSubscription = function (body, options) {
        var _this = this;
        return exports.SubscriptionsApiFp(this.configuration).createSubscription(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all events for a specific subscription. In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
     * @summary ListSubscriptionEvents
     * @param {string} subscriptionId The ID of the subscription to retrieve the events for.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {number} [limit] The upper limit on the number of subscription events to return  in the response.   Default: &#x60;200&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    SubscriptionsApi.prototype.listSubscriptionEvents = function (subscriptionId, cursor, limit, options) {
        var _this = this;
        return exports.SubscriptionsApiFp(this.configuration).listSubscriptionEvents(subscriptionId, cursor, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a subscription.
     * @summary RetrieveSubscription
     * @param {string} subscriptionId The ID of the subscription to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    SubscriptionsApi.prototype.retrieveSubscription = function (subscriptionId, options) {
        var _this = this;
        return exports.SubscriptionsApiFp(this.configuration).retrieveSubscription(subscriptionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Searches for subscriptions.  Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID,  the endpoint orders the result  by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify `customer_ids` to search by customer.  If left unset, all customers  associated with the specified locations are returned.  If the request specifies customer IDs, the endpoint orders results  first by location, within location by customer ID, and within  customer by subscription creation date.  For more information, see  [Retrieve subscriptions](/docs/subscriptions-api/overview#retrieve-subscriptions).
     * @summary SearchSubscriptions
     * @param {SearchSubscriptionsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    SubscriptionsApi.prototype.searchSubscriptions = function (body, options) {
        var _this = this;
        return exports.SubscriptionsApiFp(this.configuration).searchSubscriptions(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a subscription. You can set, modify, and clear the  `subscription` field values.
     * @summary UpdateSubscription
     * @param {string} subscriptionId The ID for the subscription to update.
     * @param {UpdateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    SubscriptionsApi.prototype.updateSubscription = function (subscriptionId, body, options) {
        var _this = this;
        return exports.SubscriptionsApiFp(this.configuration).updateSubscription(subscriptionId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SubscriptionsApi;
}(base_1.BaseAPI));
exports.SubscriptionsApi = SubscriptionsApi;
/**
 * TeamApi - axios parameter creator
 * @export
 */
exports.TeamApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates multiple `TeamMember` objects. The created `TeamMember` objects will be returned on successful creates. This process is non-transactional and will process as much of the request as is possible. If one of the creates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular create.  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkcreateteammembers).
         * @summary BulkCreateTeamMembers
         * @param {BulkCreateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTeamMembers: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling bulkCreateTeamMembers.');
                    }
                    localVarPath = "/v2/team-members/bulk-create";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates multiple `TeamMember` objects. The updated `TeamMember` objects will be returned on successful updates. This process is non-transactional and will process as much of the request as is possible. If one of the updates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkupdateteammembers).
         * @summary BulkUpdateTeamMembers
         * @param {BulkUpdateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateTeamMembers: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling bulkUpdateTeamMembers.');
                    }
                    localVarPath = "/v2/team-members/bulk-update";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a single `TeamMember` object. The `TeamMember` will be returned on successful creates. You must provide the following values in your request to this endpoint: - `given_name` - `family_name`  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#createteammember).
         * @summary CreateTeamMember
         * @param {CreateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamMember: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createTeamMember.');
                    }
                    localVarPath = "/v2/team-members";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve a `TeamMember` object for the given `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrieveteammember).
         * @summary RetrieveTeamMember
         * @param {string} teamMemberId The ID of the team member to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTeamMember: function (teamMemberId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'teamMemberId' is not null or undefined
                    if (teamMemberId === null || teamMemberId === undefined) {
                        throw new base_1.RequiredError('teamMemberId', 'Required parameter teamMemberId was null or undefined when calling retrieveTeamMember.');
                    }
                    localVarPath = "/v2/team-members/{team_member_id}"
                        .replace("{" + "team_member_id" + "}", encodeURIComponent(String(teamMemberId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve a `WageSetting` object for a team member specified by `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrievewagesetting).
         * @summary RetrieveWageSetting
         * @param {string} teamMemberId The ID of the team member to retrieve wage setting for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveWageSetting: function (teamMemberId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'teamMemberId' is not null or undefined
                    if (teamMemberId === null || teamMemberId === undefined) {
                        throw new base_1.RequiredError('teamMemberId', 'Required parameter teamMemberId was null or undefined when calling retrieveWageSetting.');
                    }
                    localVarPath = "/v2/team-members/{team_member_id}/wage-setting"
                        .replace("{" + "team_member_id" + "}", encodeURIComponent(String(teamMemberId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns a paginated list of `TeamMember` objects for a business. The list to be returned can be filtered by: - location IDs **and** - `status`
         * @summary SearchTeamMembers
         * @param {SearchTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTeamMembers: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchTeamMembers.');
                    }
                    localVarPath = "/v2/team-members/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates a single `TeamMember` object. The `TeamMember` will be returned on successful updates. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updateteammember).
         * @summary UpdateTeamMember
         * @param {string} teamMemberId The ID of the team member to update.
         * @param {UpdateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamMember: function (teamMemberId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'teamMemberId' is not null or undefined
                    if (teamMemberId === null || teamMemberId === undefined) {
                        throw new base_1.RequiredError('teamMemberId', 'Required parameter teamMemberId was null or undefined when calling updateTeamMember.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateTeamMember.');
                    }
                    localVarPath = "/v2/team-members/{team_member_id}"
                        .replace("{" + "team_member_id" + "}", encodeURIComponent(String(teamMemberId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates or updates a `WageSetting` object. The object is created if a `WageSetting` with the specified `team_member_id` does not exist. Otherwise, it fully replaces the `WageSetting` object for the team member. The `WageSetting` will be returned upon successful update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updatewagesetting).
         * @summary UpdateWageSetting
         * @param {string} teamMemberId The ID of the team member to update the &#x60;WageSetting&#x60; object for.
         * @param {UpdateWageSettingRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWageSetting: function (teamMemberId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'teamMemberId' is not null or undefined
                    if (teamMemberId === null || teamMemberId === undefined) {
                        throw new base_1.RequiredError('teamMemberId', 'Required parameter teamMemberId was null or undefined when calling updateWageSetting.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateWageSetting.');
                    }
                    localVarPath = "/v2/team-members/{team_member_id}/wage-setting"
                        .replace("{" + "team_member_id" + "}", encodeURIComponent(String(teamMemberId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * TeamApi - functional programming interface
 * @export
 */
exports.TeamApiFp = function (configuration) {
    return {
        /**
         * Creates multiple `TeamMember` objects. The created `TeamMember` objects will be returned on successful creates. This process is non-transactional and will process as much of the request as is possible. If one of the creates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular create.  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkcreateteammembers).
         * @summary BulkCreateTeamMembers
         * @param {BulkCreateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTeamMembers: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TeamApiAxiosParamCreator(configuration).bulkCreateTeamMembers(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates multiple `TeamMember` objects. The updated `TeamMember` objects will be returned on successful updates. This process is non-transactional and will process as much of the request as is possible. If one of the updates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkupdateteammembers).
         * @summary BulkUpdateTeamMembers
         * @param {BulkUpdateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateTeamMembers: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TeamApiAxiosParamCreator(configuration).bulkUpdateTeamMembers(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a single `TeamMember` object. The `TeamMember` will be returned on successful creates. You must provide the following values in your request to this endpoint: - `given_name` - `family_name`  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#createteammember).
         * @summary CreateTeamMember
         * @param {CreateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamMember: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TeamApiAxiosParamCreator(configuration).createTeamMember(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve a `TeamMember` object for the given `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrieveteammember).
         * @summary RetrieveTeamMember
         * @param {string} teamMemberId The ID of the team member to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTeamMember: function (teamMemberId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TeamApiAxiosParamCreator(configuration).retrieveTeamMember(teamMemberId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve a `WageSetting` object for a team member specified by `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrievewagesetting).
         * @summary RetrieveWageSetting
         * @param {string} teamMemberId The ID of the team member to retrieve wage setting for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveWageSetting: function (teamMemberId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TeamApiAxiosParamCreator(configuration).retrieveWageSetting(teamMemberId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a paginated list of `TeamMember` objects for a business. The list to be returned can be filtered by: - location IDs **and** - `status`
         * @summary SearchTeamMembers
         * @param {SearchTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTeamMembers: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TeamApiAxiosParamCreator(configuration).searchTeamMembers(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates a single `TeamMember` object. The `TeamMember` will be returned on successful updates. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updateteammember).
         * @summary UpdateTeamMember
         * @param {string} teamMemberId The ID of the team member to update.
         * @param {UpdateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamMember: function (teamMemberId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TeamApiAxiosParamCreator(configuration).updateTeamMember(teamMemberId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates or updates a `WageSetting` object. The object is created if a `WageSetting` with the specified `team_member_id` does not exist. Otherwise, it fully replaces the `WageSetting` object for the team member. The `WageSetting` will be returned upon successful update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updatewagesetting).
         * @summary UpdateWageSetting
         * @param {string} teamMemberId The ID of the team member to update the &#x60;WageSetting&#x60; object for.
         * @param {UpdateWageSettingRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWageSetting: function (teamMemberId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TeamApiAxiosParamCreator(configuration).updateWageSetting(teamMemberId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * TeamApi - factory interface
 * @export
 */
exports.TeamApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Creates multiple `TeamMember` objects. The created `TeamMember` objects will be returned on successful creates. This process is non-transactional and will process as much of the request as is possible. If one of the creates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular create.  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkcreateteammembers).
         * @summary BulkCreateTeamMembers
         * @param {BulkCreateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTeamMembers: function (body, options) {
            return exports.TeamApiFp(configuration).bulkCreateTeamMembers(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates multiple `TeamMember` objects. The updated `TeamMember` objects will be returned on successful updates. This process is non-transactional and will process as much of the request as is possible. If one of the updates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkupdateteammembers).
         * @summary BulkUpdateTeamMembers
         * @param {BulkUpdateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateTeamMembers: function (body, options) {
            return exports.TeamApiFp(configuration).bulkUpdateTeamMembers(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a single `TeamMember` object. The `TeamMember` will be returned on successful creates. You must provide the following values in your request to this endpoint: - `given_name` - `family_name`  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#createteammember).
         * @summary CreateTeamMember
         * @param {CreateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamMember: function (body, options) {
            return exports.TeamApiFp(configuration).createTeamMember(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a `TeamMember` object for the given `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrieveteammember).
         * @summary RetrieveTeamMember
         * @param {string} teamMemberId The ID of the team member to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTeamMember: function (teamMemberId, options) {
            return exports.TeamApiFp(configuration).retrieveTeamMember(teamMemberId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a `WageSetting` object for a team member specified by `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrievewagesetting).
         * @summary RetrieveWageSetting
         * @param {string} teamMemberId The ID of the team member to retrieve wage setting for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveWageSetting: function (teamMemberId, options) {
            return exports.TeamApiFp(configuration).retrieveWageSetting(teamMemberId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a paginated list of `TeamMember` objects for a business. The list to be returned can be filtered by: - location IDs **and** - `status`
         * @summary SearchTeamMembers
         * @param {SearchTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTeamMembers: function (body, options) {
            return exports.TeamApiFp(configuration).searchTeamMembers(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a single `TeamMember` object. The `TeamMember` will be returned on successful updates. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updateteammember).
         * @summary UpdateTeamMember
         * @param {string} teamMemberId The ID of the team member to update.
         * @param {UpdateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamMember: function (teamMemberId, body, options) {
            return exports.TeamApiFp(configuration).updateTeamMember(teamMemberId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates or updates a `WageSetting` object. The object is created if a `WageSetting` with the specified `team_member_id` does not exist. Otherwise, it fully replaces the `WageSetting` object for the team member. The `WageSetting` will be returned upon successful update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updatewagesetting).
         * @summary UpdateWageSetting
         * @param {string} teamMemberId The ID of the team member to update the &#x60;WageSetting&#x60; object for.
         * @param {UpdateWageSettingRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWageSetting: function (teamMemberId, body, options) {
            return exports.TeamApiFp(configuration).updateWageSetting(teamMemberId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
var TeamApi = /** @class */ (function (_super) {
    __extends(TeamApi, _super);
    function TeamApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates multiple `TeamMember` objects. The created `TeamMember` objects will be returned on successful creates. This process is non-transactional and will process as much of the request as is possible. If one of the creates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular create.  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkcreateteammembers).
     * @summary BulkCreateTeamMembers
     * @param {BulkCreateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    TeamApi.prototype.bulkCreateTeamMembers = function (body, options) {
        var _this = this;
        return exports.TeamApiFp(this.configuration).bulkCreateTeamMembers(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates multiple `TeamMember` objects. The updated `TeamMember` objects will be returned on successful updates. This process is non-transactional and will process as much of the request as is possible. If one of the updates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkupdateteammembers).
     * @summary BulkUpdateTeamMembers
     * @param {BulkUpdateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    TeamApi.prototype.bulkUpdateTeamMembers = function (body, options) {
        var _this = this;
        return exports.TeamApiFp(this.configuration).bulkUpdateTeamMembers(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a single `TeamMember` object. The `TeamMember` will be returned on successful creates. You must provide the following values in your request to this endpoint: - `given_name` - `family_name`  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#createteammember).
     * @summary CreateTeamMember
     * @param {CreateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    TeamApi.prototype.createTeamMember = function (body, options) {
        var _this = this;
        return exports.TeamApiFp(this.configuration).createTeamMember(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a `TeamMember` object for the given `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrieveteammember).
     * @summary RetrieveTeamMember
     * @param {string} teamMemberId The ID of the team member to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    TeamApi.prototype.retrieveTeamMember = function (teamMemberId, options) {
        var _this = this;
        return exports.TeamApiFp(this.configuration).retrieveTeamMember(teamMemberId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a `WageSetting` object for a team member specified by `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrievewagesetting).
     * @summary RetrieveWageSetting
     * @param {string} teamMemberId The ID of the team member to retrieve wage setting for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    TeamApi.prototype.retrieveWageSetting = function (teamMemberId, options) {
        var _this = this;
        return exports.TeamApiFp(this.configuration).retrieveWageSetting(teamMemberId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a paginated list of `TeamMember` objects for a business. The list to be returned can be filtered by: - location IDs **and** - `status`
     * @summary SearchTeamMembers
     * @param {SearchTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    TeamApi.prototype.searchTeamMembers = function (body, options) {
        var _this = this;
        return exports.TeamApiFp(this.configuration).searchTeamMembers(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a single `TeamMember` object. The `TeamMember` will be returned on successful updates. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updateteammember).
     * @summary UpdateTeamMember
     * @param {string} teamMemberId The ID of the team member to update.
     * @param {UpdateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    TeamApi.prototype.updateTeamMember = function (teamMemberId, body, options) {
        var _this = this;
        return exports.TeamApiFp(this.configuration).updateTeamMember(teamMemberId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates or updates a `WageSetting` object. The object is created if a `WageSetting` with the specified `team_member_id` does not exist. Otherwise, it fully replaces the `WageSetting` object for the team member. The `WageSetting` will be returned upon successful update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updatewagesetting).
     * @summary UpdateWageSetting
     * @param {string} teamMemberId The ID of the team member to update the &#x60;WageSetting&#x60; object for.
     * @param {UpdateWageSettingRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    TeamApi.prototype.updateWageSetting = function (teamMemberId, body, options) {
        var _this = this;
        return exports.TeamApiFp(this.configuration).updateWageSetting(teamMemberId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TeamApi;
}(base_1.BaseAPI));
exports.TeamApi = TeamApi;
/**
 * TerminalApi - axios parameter creator
 * @export
 */
exports.TerminalApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Cancels a Terminal checkout request if the status of the request permits it.
         * @summary CancelTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTerminalCheckout: function (checkoutId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'checkoutId' is not null or undefined
                    if (checkoutId === null || checkoutId === undefined) {
                        throw new base_1.RequiredError('checkoutId', 'Required parameter checkoutId was null or undefined when calling cancelTerminalCheckout.');
                    }
                    localVarPath = "/v2/terminals/checkouts/{checkout_id}/cancel"
                        .replace("{" + "checkout_id" + "}", encodeURIComponent(String(checkoutId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
         * @summary CancelTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTerminalRefund: function (terminalRefundId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'terminalRefundId' is not null or undefined
                    if (terminalRefundId === null || terminalRefundId === undefined) {
                        throw new base_1.RequiredError('terminalRefundId', 'Required parameter terminalRefundId was null or undefined when calling cancelTerminalRefund.');
                    }
                    localVarPath = "/v2/terminals/refunds/{terminal_refund_id}/cancel"
                        .replace("{" + "terminal_refund_id" + "}", encodeURIComponent(String(terminalRefundId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
         * @summary CreateTerminalCheckout
         * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminalCheckout: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createTerminalCheckout.');
                    }
                    localVarPath = "/v2/terminals/checkouts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a request to refund an Interac payment completed on a Square Terminal.
         * @summary CreateTerminalRefund
         * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminalRefund: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createTerminalRefund.');
                    }
                    localVarPath = "/v2/terminals/refunds";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a Terminal checkout request by checkout_id.
         * @summary GetTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminalCheckout: function (checkoutId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'checkoutId' is not null or undefined
                    if (checkoutId === null || checkoutId === undefined) {
                        throw new base_1.RequiredError('checkoutId', 'Required parameter checkoutId was null or undefined when calling getTerminalCheckout.');
                    }
                    localVarPath = "/v2/terminals/checkouts/{checkout_id}"
                        .replace("{" + "checkout_id" + "}", encodeURIComponent(String(checkoutId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves an Interac terminal refund object by ID.
         * @summary GetTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminalRefund: function (terminalRefundId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'terminalRefundId' is not null or undefined
                    if (terminalRefundId === null || terminalRefundId === undefined) {
                        throw new base_1.RequiredError('terminalRefundId', 'Required parameter terminalRefundId was null or undefined when calling getTerminalRefund.');
                    }
                    localVarPath = "/v2/terminals/refunds/{terminal_refund_id}"
                        .replace("{" + "terminal_refund_id" + "}", encodeURIComponent(String(terminalRefundId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
         * @summary SearchTerminalCheckouts
         * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTerminalCheckouts: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchTerminalCheckouts.');
                    }
                    localVarPath = "/v2/terminals/checkouts/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
         * @summary SearchTerminalRefunds
         * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTerminalRefunds: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling searchTerminalRefunds.');
                    }
                    localVarPath = "/v2/terminals/refunds/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * TerminalApi - functional programming interface
 * @export
 */
exports.TerminalApiFp = function (configuration) {
    return {
        /**
         * Cancels a Terminal checkout request if the status of the request permits it.
         * @summary CancelTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTerminalCheckout: function (checkoutId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TerminalApiAxiosParamCreator(configuration).cancelTerminalCheckout(checkoutId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
         * @summary CancelTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTerminalRefund: function (terminalRefundId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TerminalApiAxiosParamCreator(configuration).cancelTerminalRefund(terminalRefundId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
         * @summary CreateTerminalCheckout
         * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminalCheckout: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TerminalApiAxiosParamCreator(configuration).createTerminalCheckout(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a request to refund an Interac payment completed on a Square Terminal.
         * @summary CreateTerminalRefund
         * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminalRefund: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TerminalApiAxiosParamCreator(configuration).createTerminalRefund(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a Terminal checkout request by checkout_id.
         * @summary GetTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminalCheckout: function (checkoutId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TerminalApiAxiosParamCreator(configuration).getTerminalCheckout(checkoutId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves an Interac terminal refund object by ID.
         * @summary GetTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminalRefund: function (terminalRefundId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TerminalApiAxiosParamCreator(configuration).getTerminalRefund(terminalRefundId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
         * @summary SearchTerminalCheckouts
         * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTerminalCheckouts: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TerminalApiAxiosParamCreator(configuration).searchTerminalCheckouts(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
         * @summary SearchTerminalRefunds
         * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTerminalRefunds: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TerminalApiAxiosParamCreator(configuration).searchTerminalRefunds(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * TerminalApi - factory interface
 * @export
 */
exports.TerminalApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Cancels a Terminal checkout request if the status of the request permits it.
         * @summary CancelTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTerminalCheckout: function (checkoutId, options) {
            return exports.TerminalApiFp(configuration).cancelTerminalCheckout(checkoutId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
         * @summary CancelTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTerminalRefund: function (terminalRefundId, options) {
            return exports.TerminalApiFp(configuration).cancelTerminalRefund(terminalRefundId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
         * @summary CreateTerminalCheckout
         * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminalCheckout: function (body, options) {
            return exports.TerminalApiFp(configuration).createTerminalCheckout(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a request to refund an Interac payment completed on a Square Terminal.
         * @summary CreateTerminalRefund
         * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminalRefund: function (body, options) {
            return exports.TerminalApiFp(configuration).createTerminalRefund(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a Terminal checkout request by checkout_id.
         * @summary GetTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminalCheckout: function (checkoutId, options) {
            return exports.TerminalApiFp(configuration).getTerminalCheckout(checkoutId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves an Interac terminal refund object by ID.
         * @summary GetTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminalRefund: function (terminalRefundId, options) {
            return exports.TerminalApiFp(configuration).getTerminalRefund(terminalRefundId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
         * @summary SearchTerminalCheckouts
         * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTerminalCheckouts: function (body, options) {
            return exports.TerminalApiFp(configuration).searchTerminalCheckouts(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
         * @summary SearchTerminalRefunds
         * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTerminalRefunds: function (body, options) {
            return exports.TerminalApiFp(configuration).searchTerminalRefunds(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TerminalApi - object-oriented interface
 * @export
 * @class TerminalApi
 * @extends {BaseAPI}
 */
var TerminalApi = /** @class */ (function (_super) {
    __extends(TerminalApi, _super);
    function TerminalApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @summary CancelTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    TerminalApi.prototype.cancelTerminalCheckout = function (checkoutId, options) {
        var _this = this;
        return exports.TerminalApiFp(this.configuration).cancelTerminalCheckout(checkoutId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
     * @summary CancelTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    TerminalApi.prototype.cancelTerminalRefund = function (terminalRefundId, options) {
        var _this = this;
        return exports.TerminalApiFp(this.configuration).cancelTerminalRefund(terminalRefundId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @summary CreateTerminalCheckout
     * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    TerminalApi.prototype.createTerminalCheckout = function (body, options) {
        var _this = this;
        return exports.TerminalApiFp(this.configuration).createTerminalCheckout(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @summary CreateTerminalRefund
     * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    TerminalApi.prototype.createTerminalRefund = function (body, options) {
        var _this = this;
        return exports.TerminalApiFp(this.configuration).createTerminalRefund(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a Terminal checkout request by checkout_id.
     * @summary GetTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    TerminalApi.prototype.getTerminalCheckout = function (checkoutId, options) {
        var _this = this;
        return exports.TerminalApiFp(this.configuration).getTerminalCheckout(checkoutId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves an Interac terminal refund object by ID.
     * @summary GetTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    TerminalApi.prototype.getTerminalRefund = function (terminalRefundId, options) {
        var _this = this;
        return exports.TerminalApiFp(this.configuration).getTerminalRefund(terminalRefundId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @summary SearchTerminalCheckouts
     * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    TerminalApi.prototype.searchTerminalCheckouts = function (body, options) {
        var _this = this;
        return exports.TerminalApiFp(this.configuration).searchTerminalCheckouts(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
     * @summary SearchTerminalRefunds
     * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    TerminalApi.prototype.searchTerminalRefunds = function (body, options) {
        var _this = this;
        return exports.TerminalApiFp(this.configuration).searchTerminalRefunds(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TerminalApi;
}(base_1.BaseAPI));
exports.TerminalApi = TerminalApi;
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
exports.TransactionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
         * @summary CaptureTransaction
         * @param {string} locationId
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captureTransaction: function (locationId, transactionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling captureTransaction.');
                    }
                    // verify required parameter 'transactionId' is not null or undefined
                    if (transactionId === null || transactionId === undefined) {
                        throw new base_1.RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling captureTransaction.');
                    }
                    localVarPath = "/v2/locations/{location_id}/transactions/{transaction_id}/capture"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "transaction_id" + "}", encodeURIComponent(String(transactionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
         * @summary Charge
         * @param {string} locationId The ID of the location to associate the created transaction with.
         * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        charge: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling charge.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling charge.');
                    }
                    localVarPath = "/v2/locations/{location_id}/transactions"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
         * @summary CreateRefund
         * @param {string} locationId The ID of the original transaction\&#39;s associated location.
         * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
         * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: function (locationId, transactionId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createRefund.');
                    }
                    // verify required parameter 'transactionId' is not null or undefined
                    if (transactionId === null || transactionId === undefined) {
                        throw new base_1.RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling createRefund.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createRefund.');
                    }
                    localVarPath = "/v2/locations/{location_id}/transactions/{transaction_id}/refund"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "transaction_id" + "}", encodeURIComponent(String(transactionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
         * @summary ListRefunds
         * @param {string} locationId The ID of the location to list refunds for.
         * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
         * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds: function (locationId, beginTime, endTime, sortOrder, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listRefunds.');
                    }
                    localVarPath = "/v2/locations/{location_id}/refunds"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (beginTime !== undefined) {
                        localVarQueryParameter['begin_time'] = beginTime;
                    }
                    if (endTime !== undefined) {
                        localVarQueryParameter['end_time'] = endTime;
                    }
                    if (sortOrder !== undefined) {
                        localVarQueryParameter['sort_order'] = sortOrder;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
         * @summary ListTransactions
         * @param {string} locationId The ID of the location to list transactions for.
         * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
         * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactions: function (locationId, beginTime, endTime, sortOrder, cursor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listTransactions.');
                    }
                    localVarPath = "/v2/locations/{location_id}/transactions"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (beginTime !== undefined) {
                        localVarQueryParameter['begin_time'] = beginTime;
                    }
                    if (endTime !== undefined) {
                        localVarQueryParameter['end_time'] = endTime;
                    }
                    if (sortOrder !== undefined) {
                        localVarQueryParameter['sort_order'] = sortOrder;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves details for a single transaction.
         * @summary RetrieveTransaction
         * @param {string} locationId The ID of the transaction\&#39;s associated location.
         * @param {string} transactionId The ID of the transaction to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTransaction: function (locationId, transactionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveTransaction.');
                    }
                    // verify required parameter 'transactionId' is not null or undefined
                    if (transactionId === null || transactionId === undefined) {
                        throw new base_1.RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling retrieveTransaction.');
                    }
                    localVarPath = "/v2/locations/{location_id}/transactions/{transaction_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "transaction_id" + "}", encodeURIComponent(String(transactionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
         * @summary VoidTransaction
         * @param {string} locationId
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voidTransaction: function (locationId, transactionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling voidTransaction.');
                    }
                    // verify required parameter 'transactionId' is not null or undefined
                    if (transactionId === null || transactionId === undefined) {
                        throw new base_1.RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling voidTransaction.');
                    }
                    localVarPath = "/v2/locations/{location_id}/transactions/{transaction_id}/void"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "transaction_id" + "}", encodeURIComponent(String(transactionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
exports.TransactionsApiFp = function (configuration) {
    return {
        /**
         * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
         * @summary CaptureTransaction
         * @param {string} locationId
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captureTransaction: function (locationId, transactionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TransactionsApiAxiosParamCreator(configuration).captureTransaction(locationId, transactionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
         * @summary Charge
         * @param {string} locationId The ID of the location to associate the created transaction with.
         * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        charge: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TransactionsApiAxiosParamCreator(configuration).charge(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
         * @summary CreateRefund
         * @param {string} locationId The ID of the original transaction\&#39;s associated location.
         * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
         * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: function (locationId, transactionId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TransactionsApiAxiosParamCreator(configuration).createRefund(locationId, transactionId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
         * @summary ListRefunds
         * @param {string} locationId The ID of the location to list refunds for.
         * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
         * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds: function (locationId, beginTime, endTime, sortOrder, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TransactionsApiAxiosParamCreator(configuration).listRefunds(locationId, beginTime, endTime, sortOrder, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
         * @summary ListTransactions
         * @param {string} locationId The ID of the location to list transactions for.
         * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
         * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactions: function (locationId, beginTime, endTime, sortOrder, cursor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TransactionsApiAxiosParamCreator(configuration).listTransactions(locationId, beginTime, endTime, sortOrder, cursor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves details for a single transaction.
         * @summary RetrieveTransaction
         * @param {string} locationId The ID of the transaction\&#39;s associated location.
         * @param {string} transactionId The ID of the transaction to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTransaction: function (locationId, transactionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TransactionsApiAxiosParamCreator(configuration).retrieveTransaction(locationId, transactionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
         * @summary VoidTransaction
         * @param {string} locationId
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voidTransaction: function (locationId, transactionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.TransactionsApiAxiosParamCreator(configuration).voidTransaction(locationId, transactionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * TransactionsApi - factory interface
 * @export
 */
exports.TransactionsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
         * @summary CaptureTransaction
         * @param {string} locationId
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captureTransaction: function (locationId, transactionId, options) {
            return exports.TransactionsApiFp(configuration).captureTransaction(locationId, transactionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
         * @summary Charge
         * @param {string} locationId The ID of the location to associate the created transaction with.
         * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        charge: function (locationId, body, options) {
            return exports.TransactionsApiFp(configuration).charge(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
         * @summary CreateRefund
         * @param {string} locationId The ID of the original transaction\&#39;s associated location.
         * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
         * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: function (locationId, transactionId, body, options) {
            return exports.TransactionsApiFp(configuration).createRefund(locationId, transactionId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
         * @summary ListRefunds
         * @param {string} locationId The ID of the location to list refunds for.
         * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
         * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds: function (locationId, beginTime, endTime, sortOrder, cursor, options) {
            return exports.TransactionsApiFp(configuration).listRefunds(locationId, beginTime, endTime, sortOrder, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
         * @summary ListTransactions
         * @param {string} locationId The ID of the location to list transactions for.
         * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
         * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactions: function (locationId, beginTime, endTime, sortOrder, cursor, options) {
            return exports.TransactionsApiFp(configuration).listTransactions(locationId, beginTime, endTime, sortOrder, cursor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves details for a single transaction.
         * @summary RetrieveTransaction
         * @param {string} locationId The ID of the transaction\&#39;s associated location.
         * @param {string} transactionId The ID of the transaction to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTransaction: function (locationId, transactionId, options) {
            return exports.TransactionsApiFp(configuration).retrieveTransaction(locationId, transactionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
         * @summary VoidTransaction
         * @param {string} locationId
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voidTransaction: function (locationId, transactionId, options) {
            return exports.TransactionsApiFp(configuration).voidTransaction(locationId, transactionId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
var TransactionsApi = /** @class */ (function (_super) {
    __extends(TransactionsApi, _super);
    function TransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary CaptureTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.captureTransaction = function (locationId, transactionId, options) {
        var _this = this;
        return exports.TransactionsApiFp(this.configuration).captureTransaction(locationId, transactionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
     * @summary Charge
     * @param {string} locationId The ID of the location to associate the created transaction with.
     * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.charge = function (locationId, body, options) {
        var _this = this;
        return exports.TransactionsApiFp(this.configuration).charge(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     * @summary CreateRefund
     * @param {string} locationId The ID of the original transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
     * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.createRefund = function (locationId, transactionId, body, options) {
        var _this = this;
        return exports.TransactionsApiFp(this.configuration).createRefund(locationId, transactionId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.listRefunds = function (locationId, beginTime, endTime, sortOrder, cursor, options) {
        var _this = this;
        return exports.TransactionsApiFp(this.configuration).listRefunds(locationId, beginTime, endTime, sortOrder, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
     * @summary ListTransactions
     * @param {string} locationId The ID of the location to list transactions for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.listTransactions = function (locationId, beginTime, endTime, sortOrder, cursor, options) {
        var _this = this;
        return exports.TransactionsApiFp(this.configuration).listTransactions(locationId, beginTime, endTime, sortOrder, cursor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves details for a single transaction.
     * @summary RetrieveTransaction
     * @param {string} locationId The ID of the transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.retrieveTransaction = function (locationId, transactionId, options) {
        var _this = this;
        return exports.TransactionsApiFp(this.configuration).retrieveTransaction(locationId, transactionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary VoidTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.voidTransaction = function (locationId, transactionId, options) {
        var _this = this;
        return exports.TransactionsApiFp(this.configuration).voidTransaction(locationId, transactionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TransactionsApi;
}(base_1.BaseAPI));
exports.TransactionsApi = TransactionsApi;
/**
 * V1EmployeesApi - axios parameter creator
 * @export
 */
exports.V1EmployeesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
         * @summary CreateEmployee
         * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createEmployee.');
                    }
                    localVarPath = "/v1/me/employees";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
         * @summary CreateEmployeeRole
         * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeRole: function (employeeRole, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'employeeRole' is not null or undefined
                    if (employeeRole === null || employeeRole === undefined) {
                        throw new base_1.RequiredError('employeeRole', 'Required parameter employeeRole was null or undefined when calling createEmployeeRole.');
                    }
                    localVarPath = "/v1/me/roles";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof employeeRole !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(employeeRole !== undefined ? employeeRole : {}) : (employeeRole || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
         * @summary CreateTimecard
         * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimecard: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createTimecard.');
                    }
                    localVarPath = "/v1/me/timecards";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
         * @summary DeleteTimecard
         * @param {string} timecardId The ID of the timecard to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimecard: function (timecardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'timecardId' is not null or undefined
                    if (timecardId === null || timecardId === undefined) {
                        throw new base_1.RequiredError('timecardId', 'Required parameter timecardId was null or undefined when calling deleteTimecard.');
                    }
                    localVarPath = "/v1/me/timecards/{timecard_id}"
                        .replace("{" + "timecard_id" + "}", encodeURIComponent(String(timecardId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
         * @summary ListCashDrawerShifts
         * @param {string} locationId The ID of the location to list cash drawer shifts for.
         * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
         * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashDrawerShifts: function (locationId, order, beginTime, endTime, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listCashDrawerShifts.');
                    }
                    localVarPath = "/v1/{location_id}/cash-drawer-shifts"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (order !== undefined) {
                        localVarQueryParameter['order'] = order;
                    }
                    if (beginTime !== undefined) {
                        localVarQueryParameter['begin_time'] = beginTime;
                    }
                    if (endTime !== undefined) {
                        localVarQueryParameter['end_time'] = endTime;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides summary information for all of a business\'s employee roles.
         * @summary ListEmployeeRoles
         * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
         * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeRoles: function (order, limit, batchToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v1/me/roles";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (order !== undefined) {
                        localVarQueryParameter['order'] = order;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides summary information for all of a business\'s employees.
         * @summary ListEmployees
         * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
         * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
         * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
         * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
         * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees: function (order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit, batchToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v1/me/employees";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (order !== undefined) {
                        localVarQueryParameter['order'] = order;
                    }
                    if (beginUpdatedAt !== undefined) {
                        localVarQueryParameter['begin_updated_at'] = beginUpdatedAt;
                    }
                    if (endUpdatedAt !== undefined) {
                        localVarQueryParameter['end_updated_at'] = endUpdatedAt;
                    }
                    if (beginCreatedAt !== undefined) {
                        localVarQueryParameter['begin_created_at'] = beginCreatedAt;
                    }
                    if (endCreatedAt !== undefined) {
                        localVarQueryParameter['end_created_at'] = endCreatedAt;
                    }
                    if (status !== undefined) {
                        localVarQueryParameter['status'] = status;
                    }
                    if (externalId !== undefined) {
                        localVarQueryParameter['external_id'] = externalId;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
         * @summary ListTimecardEvents
         * @param {string} timecardId The ID of the timecard to list events for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimecardEvents: function (timecardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'timecardId' is not null or undefined
                    if (timecardId === null || timecardId === undefined) {
                        throw new base_1.RequiredError('timecardId', 'Required parameter timecardId was null or undefined when calling listTimecardEvents.');
                    }
                    localVarPath = "/v1/me/timecards/{timecard_id}/events"
                        .replace("{" + "timecard_id" + "}", encodeURIComponent(String(timecardId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides summary information for all of a business\'s employee timecards.
         * @summary ListTimecards
         * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
         * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
         * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
         * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
         * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimecards: function (order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, batchToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v1/me/timecards";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (order !== undefined) {
                        localVarQueryParameter['order'] = order;
                    }
                    if (employeeId !== undefined) {
                        localVarQueryParameter['employee_id'] = employeeId;
                    }
                    if (beginClockinTime !== undefined) {
                        localVarQueryParameter['begin_clockin_time'] = beginClockinTime;
                    }
                    if (endClockinTime !== undefined) {
                        localVarQueryParameter['end_clockin_time'] = endClockinTime;
                    }
                    if (beginClockoutTime !== undefined) {
                        localVarQueryParameter['begin_clockout_time'] = beginClockoutTime;
                    }
                    if (endClockoutTime !== undefined) {
                        localVarQueryParameter['end_clockout_time'] = endClockoutTime;
                    }
                    if (beginUpdatedAt !== undefined) {
                        localVarQueryParameter['begin_updated_at'] = beginUpdatedAt;
                    }
                    if (endUpdatedAt !== undefined) {
                        localVarQueryParameter['end_updated_at'] = endUpdatedAt;
                    }
                    if (deleted !== undefined) {
                        localVarQueryParameter['deleted'] = deleted;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
         * @summary RetrieveCashDrawerShift
         * @param {string} locationId The ID of the location to list cash drawer shifts for.
         * @param {string} shiftId The shift\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCashDrawerShift: function (locationId, shiftId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveCashDrawerShift.');
                    }
                    // verify required parameter 'shiftId' is not null or undefined
                    if (shiftId === null || shiftId === undefined) {
                        throw new base_1.RequiredError('shiftId', 'Required parameter shiftId was null or undefined when calling retrieveCashDrawerShift.');
                    }
                    localVarPath = "/v1/{location_id}/cash-drawer-shifts/{shift_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "shift_id" + "}", encodeURIComponent(String(shiftId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for a single employee.
         * @summary RetrieveEmployee
         * @param {string} employeeId The employee\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployee: function (employeeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'employeeId' is not null or undefined
                    if (employeeId === null || employeeId === undefined) {
                        throw new base_1.RequiredError('employeeId', 'Required parameter employeeId was null or undefined when calling retrieveEmployee.');
                    }
                    localVarPath = "/v1/me/employees/{employee_id}"
                        .replace("{" + "employee_id" + "}", encodeURIComponent(String(employeeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for a single employee role.
         * @summary RetrieveEmployeeRole
         * @param {string} roleId The role\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployeeRole: function (roleId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'roleId' is not null or undefined
                    if (roleId === null || roleId === undefined) {
                        throw new base_1.RequiredError('roleId', 'Required parameter roleId was null or undefined when calling retrieveEmployeeRole.');
                    }
                    localVarPath = "/v1/me/roles/{role_id}"
                        .replace("{" + "role_id" + "}", encodeURIComponent(String(roleId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
         * @summary RetrieveTimecard
         * @param {string} timecardId The timecard\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTimecard: function (timecardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'timecardId' is not null or undefined
                    if (timecardId === null || timecardId === undefined) {
                        throw new base_1.RequiredError('timecardId', 'Required parameter timecardId was null or undefined when calling retrieveTimecard.');
                    }
                    localVarPath = "/v1/me/timecards/{timecard_id}"
                        .replace("{" + "timecard_id" + "}", encodeURIComponent(String(timecardId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary UpdateEmployee
         * @param {string} employeeId The ID of the role to modify.
         * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: function (employeeId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'employeeId' is not null or undefined
                    if (employeeId === null || employeeId === undefined) {
                        throw new base_1.RequiredError('employeeId', 'Required parameter employeeId was null or undefined when calling updateEmployee.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateEmployee.');
                    }
                    localVarPath = "/v1/me/employees/{employee_id}"
                        .replace("{" + "employee_id" + "}", encodeURIComponent(String(employeeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an employee role.
         * @summary UpdateEmployeeRole
         * @param {string} roleId The ID of the role to modify.
         * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeRole: function (roleId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'roleId' is not null or undefined
                    if (roleId === null || roleId === undefined) {
                        throw new base_1.RequiredError('roleId', 'Required parameter roleId was null or undefined when calling updateEmployeeRole.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateEmployeeRole.');
                    }
                    localVarPath = "/v1/me/roles/{role_id}"
                        .replace("{" + "role_id" + "}", encodeURIComponent(String(roleId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["EMPLOYEES_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
         * @summary UpdateTimecard
         * @param {string} timecardId TThe ID of the timecard to modify.
         * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimecard: function (timecardId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'timecardId' is not null or undefined
                    if (timecardId === null || timecardId === undefined) {
                        throw new base_1.RequiredError('timecardId', 'Required parameter timecardId was null or undefined when calling updateTimecard.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateTimecard.');
                    }
                    localVarPath = "/v1/me/timecards/{timecard_id}"
                        .replace("{" + "timecard_id" + "}", encodeURIComponent(String(timecardId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["TIMECARDS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * V1EmployeesApi - functional programming interface
 * @export
 */
exports.V1EmployeesApiFp = function (configuration) {
    return {
        /**
         *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
         * @summary CreateEmployee
         * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).createEmployee(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
         * @summary CreateEmployeeRole
         * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeRole: function (employeeRole, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).createEmployeeRole(employeeRole, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
         * @summary CreateTimecard
         * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimecard: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).createTimecard(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
         * @summary DeleteTimecard
         * @param {string} timecardId The ID of the timecard to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimecard: function (timecardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).deleteTimecard(timecardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
         * @summary ListCashDrawerShifts
         * @param {string} locationId The ID of the location to list cash drawer shifts for.
         * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
         * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashDrawerShifts: function (locationId, order, beginTime, endTime, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).listCashDrawerShifts(locationId, order, beginTime, endTime, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides summary information for all of a business\'s employee roles.
         * @summary ListEmployeeRoles
         * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
         * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeRoles: function (order, limit, batchToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).listEmployeeRoles(order, limit, batchToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides summary information for all of a business\'s employees.
         * @summary ListEmployees
         * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
         * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
         * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
         * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
         * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees: function (order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit, batchToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).listEmployees(order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit, batchToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
         * @summary ListTimecardEvents
         * @param {string} timecardId The ID of the timecard to list events for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimecardEvents: function (timecardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).listTimecardEvents(timecardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides summary information for all of a business\'s employee timecards.
         * @summary ListTimecards
         * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
         * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
         * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
         * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
         * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimecards: function (order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, batchToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).listTimecards(order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, batchToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
         * @summary RetrieveCashDrawerShift
         * @param {string} locationId The ID of the location to list cash drawer shifts for.
         * @param {string} shiftId The shift\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCashDrawerShift: function (locationId, shiftId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).retrieveCashDrawerShift(locationId, shiftId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for a single employee.
         * @summary RetrieveEmployee
         * @param {string} employeeId The employee\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployee: function (employeeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).retrieveEmployee(employeeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for a single employee role.
         * @summary RetrieveEmployeeRole
         * @param {string} roleId The role\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployeeRole: function (roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).retrieveEmployeeRole(roleId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
         * @summary RetrieveTimecard
         * @param {string} timecardId The timecard\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTimecard: function (timecardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).retrieveTimecard(timecardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary UpdateEmployee
         * @param {string} employeeId The ID of the role to modify.
         * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: function (employeeId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).updateEmployee(employeeId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an employee role.
         * @summary UpdateEmployeeRole
         * @param {string} roleId The ID of the role to modify.
         * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeRole: function (roleId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).updateEmployeeRole(roleId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
         * @summary UpdateTimecard
         * @param {string} timecardId TThe ID of the timecard to modify.
         * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimecard: function (timecardId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1EmployeesApiAxiosParamCreator(configuration).updateTimecard(timecardId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * V1EmployeesApi - factory interface
 * @export
 */
exports.V1EmployeesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
         * @summary CreateEmployee
         * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee: function (body, options) {
            return exports.V1EmployeesApiFp(configuration).createEmployee(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
         * @summary CreateEmployeeRole
         * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeRole: function (employeeRole, options) {
            return exports.V1EmployeesApiFp(configuration).createEmployeeRole(employeeRole, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
         * @summary CreateTimecard
         * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimecard: function (body, options) {
            return exports.V1EmployeesApiFp(configuration).createTimecard(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
         * @summary DeleteTimecard
         * @param {string} timecardId The ID of the timecard to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimecard: function (timecardId, options) {
            return exports.V1EmployeesApiFp(configuration).deleteTimecard(timecardId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
         * @summary ListCashDrawerShifts
         * @param {string} locationId The ID of the location to list cash drawer shifts for.
         * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
         * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashDrawerShifts: function (locationId, order, beginTime, endTime, options) {
            return exports.V1EmployeesApiFp(configuration).listCashDrawerShifts(locationId, order, beginTime, endTime, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides summary information for all of a business\'s employee roles.
         * @summary ListEmployeeRoles
         * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
         * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeRoles: function (order, limit, batchToken, options) {
            return exports.V1EmployeesApiFp(configuration).listEmployeeRoles(order, limit, batchToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides summary information for all of a business\'s employees.
         * @summary ListEmployees
         * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
         * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
         * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
         * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
         * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees: function (order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit, batchToken, options) {
            return exports.V1EmployeesApiFp(configuration).listEmployees(order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit, batchToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
         * @summary ListTimecardEvents
         * @param {string} timecardId The ID of the timecard to list events for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimecardEvents: function (timecardId, options) {
            return exports.V1EmployeesApiFp(configuration).listTimecardEvents(timecardId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides summary information for all of a business\'s employee timecards.
         * @summary ListTimecards
         * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
         * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
         * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
         * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
         * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
         * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
         * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimecards: function (order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, batchToken, options) {
            return exports.V1EmployeesApiFp(configuration).listTimecards(order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, batchToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
         * @summary RetrieveCashDrawerShift
         * @param {string} locationId The ID of the location to list cash drawer shifts for.
         * @param {string} shiftId The shift\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCashDrawerShift: function (locationId, shiftId, options) {
            return exports.V1EmployeesApiFp(configuration).retrieveCashDrawerShift(locationId, shiftId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for a single employee.
         * @summary RetrieveEmployee
         * @param {string} employeeId The employee\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployee: function (employeeId, options) {
            return exports.V1EmployeesApiFp(configuration).retrieveEmployee(employeeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for a single employee role.
         * @summary RetrieveEmployeeRole
         * @param {string} roleId The role\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployeeRole: function (roleId, options) {
            return exports.V1EmployeesApiFp(configuration).retrieveEmployeeRole(roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
         * @summary RetrieveTimecard
         * @param {string} timecardId The timecard\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTimecard: function (timecardId, options) {
            return exports.V1EmployeesApiFp(configuration).retrieveTimecard(timecardId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary UpdateEmployee
         * @param {string} employeeId The ID of the role to modify.
         * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: function (employeeId, body, options) {
            return exports.V1EmployeesApiFp(configuration).updateEmployee(employeeId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an employee role.
         * @summary UpdateEmployeeRole
         * @param {string} roleId The ID of the role to modify.
         * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeRole: function (roleId, body, options) {
            return exports.V1EmployeesApiFp(configuration).updateEmployeeRole(roleId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
         * @summary UpdateTimecard
         * @param {string} timecardId TThe ID of the timecard to modify.
         * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimecard: function (timecardId, body, options) {
            return exports.V1EmployeesApiFp(configuration).updateTimecard(timecardId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * V1EmployeesApi - object-oriented interface
 * @export
 * @class V1EmployeesApi
 * @extends {BaseAPI}
 */
var V1EmployeesApi = /** @class */ (function (_super) {
    __extends(V1EmployeesApi, _super);
    function V1EmployeesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
     * @summary CreateEmployee
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.createEmployee = function (body, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).createEmployee(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     * @summary CreateEmployeeRole
     * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.createEmployeeRole = function (employeeRole, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).createEmployeeRole(employeeRole, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
     * @summary CreateTimecard
     * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.createTimecard = function (body, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).createTimecard(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
     * @summary DeleteTimecard
     * @param {string} timecardId The ID of the timecard to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.deleteTimecard = function (timecardId, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).deleteTimecard(timecardId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
     * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.listCashDrawerShifts = function (locationId, order, beginTime, endTime, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).listCashDrawerShifts(locationId, order, beginTime, endTime, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides summary information for all of a business\'s employee roles.
     * @summary ListEmployeeRoles
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.listEmployeeRoles = function (order, limit, batchToken, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).listEmployeeRoles(order, limit, batchToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides summary information for all of a business\'s employees.
     * @summary ListEmployees
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
     * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.listEmployees = function (order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit, batchToken, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).listEmployees(order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit, batchToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary ListTimecardEvents
     * @param {string} timecardId The ID of the timecard to list events for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.listTimecardEvents = function (timecardId, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).listTimecardEvents(timecardId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides summary information for all of a business\'s employee timecards.
     * @summary ListTimecards
     * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
     * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
     * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.listTimecards = function (order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, batchToken, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).listTimecards(order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, batchToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.retrieveCashDrawerShift = function (locationId, shiftId, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).retrieveCashDrawerShift(locationId, shiftId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for a single employee.
     * @summary RetrieveEmployee
     * @param {string} employeeId The employee\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.retrieveEmployee = function (employeeId, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).retrieveEmployee(employeeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for a single employee role.
     * @summary RetrieveEmployeeRole
     * @param {string} roleId The role\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.retrieveEmployeeRole = function (roleId, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).retrieveEmployeeRole(roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary RetrieveTimecard
     * @param {string} timecardId The timecard\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.retrieveTimecard = function (timecardId, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).retrieveTimecard(timecardId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary UpdateEmployee
     * @param {string} employeeId The ID of the role to modify.
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.updateEmployee = function (employeeId, body, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).updateEmployee(employeeId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an employee role.
     * @summary UpdateEmployeeRole
     * @param {string} roleId The ID of the role to modify.
     * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.updateEmployeeRole = function (roleId, body, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).updateEmployeeRole(roleId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
     * @summary UpdateTimecard
     * @param {string} timecardId TThe ID of the timecard to modify.
     * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    V1EmployeesApi.prototype.updateTimecard = function (timecardId, body, options) {
        var _this = this;
        return exports.V1EmployeesApiFp(this.configuration).updateTimecard(timecardId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return V1EmployeesApi;
}(base_1.BaseAPI));
exports.V1EmployeesApi = V1EmployeesApi;
/**
 * V1ItemsApi - axios parameter creator
 * @export
 */
exports.V1ItemsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adjusts the current available inventory of an item variation.
         * @summary AdjustInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} variationId The ID of the variation to adjust inventory information for.
         * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustInventory: function (locationId, variationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling adjustInventory.');
                    }
                    // verify required parameter 'variationId' is not null or undefined
                    if (variationId === null || variationId === undefined) {
                        throw new base_1.RequiredError('variationId', 'Required parameter variationId was null or undefined when calling adjustInventory.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling adjustInventory.');
                    }
                    localVarPath = "/v1/{location_id}/inventory/{variation_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "variation_id" + "}", encodeURIComponent(String(variationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
         * @summary ApplyFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyFee: function (locationId, itemId, feeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling applyFee.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling applyFee.');
                    }
                    // verify required parameter 'feeId' is not null or undefined
                    if (feeId === null || feeId === undefined) {
                        throw new base_1.RequiredError('feeId', 'Required parameter feeId was null or undefined when calling applyFee.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)))
                        .replace("{" + "fee_id" + "}", encodeURIComponent(String(feeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Associates a modifier list with an item so the associated modifier options can be applied to the item.
         * @summary ApplyModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to apply.
         * @param {string} itemId The ID of the item to add the modifier list to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyModifierList: function (locationId, modifierListId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling applyModifierList.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling applyModifierList.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling applyModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an item category.
         * @summary CreateCategory
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createCategory.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createCategory.');
                    }
                    localVarPath = "/v1/{location_id}/categories"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a discount.
         * @summary CreateDiscount
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createDiscount.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createDiscount.');
                    }
                    localVarPath = "/v1/{location_id}/discounts"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a fee (tax).
         * @summary CreateFee
         * @param {string} locationId The ID of the location to create a fee for.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFee: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createFee.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createFee.');
                    }
                    localVarPath = "/v1/{location_id}/fees"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
         * @summary CreateItem
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createItem.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createItem.');
                    }
                    localVarPath = "/v1/{location_id}/items"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an item modifier list and at least 1 modifier option for it.
         * @summary CreateModifierList
         * @param {string} locationId The ID of the location to create a modifier list for.
         * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierList: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createModifierList.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an item modifier option and adds it to a modifier list.
         * @summary CreateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierOption: function (locationId, modifierListId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createModifierOption.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling createModifierOption.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createModifierOption.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a Favorites page in Square Point of Sale.
         * @summary CreatePage
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createPage.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createPage.');
                    }
                    localVarPath = "/v1/{location_id}/pages"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an item variation for an existing item.
         * @summary CreateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariation: function (locationId, itemId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createVariation.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling createVariation.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createVariation.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/variations"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
         * @summary DeleteCategory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} categoryId The ID of the category to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: function (locationId, categoryId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteCategory.');
                    }
                    // verify required parameter 'categoryId' is not null or undefined
                    if (categoryId === null || categoryId === undefined) {
                        throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling deleteCategory.');
                    }
                    localVarPath = "/v1/{location_id}/categories/{category_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "category_id" + "}", encodeURIComponent(String(categoryId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
         * @summary DeleteDiscount
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} discountId The ID of the discount to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount: function (locationId, discountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteDiscount.');
                    }
                    // verify required parameter 'discountId' is not null or undefined
                    if (discountId === null || discountId === undefined) {
                        throw new base_1.RequiredError('discountId', 'Required parameter discountId was null or undefined when calling deleteDiscount.');
                    }
                    localVarPath = "/v1/{location_id}/discounts/{discount_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "discount_id" + "}", encodeURIComponent(String(discountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
         * @summary DeleteFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFee: function (locationId, feeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteFee.');
                    }
                    // verify required parameter 'feeId' is not null or undefined
                    if (feeId === null || feeId === undefined) {
                        throw new base_1.RequiredError('feeId', 'Required parameter feeId was null or undefined when calling deleteFee.');
                    }
                    localVarPath = "/v1/{location_id}/fees/{fee_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "fee_id" + "}", encodeURIComponent(String(feeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
         * @summary DeleteItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (locationId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteItem.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling deleteItem.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
         * @summary DeleteModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierList: function (locationId, modifierListId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteModifierList.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling deleteModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
         * @summary DeleteModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierOption: function (locationId, modifierListId, modifierOptionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteModifierOption.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling deleteModifierOption.');
                    }
                    // verify required parameter 'modifierOptionId' is not null or undefined
                    if (modifierOptionId === null || modifierOptionId === undefined) {
                        throw new base_1.RequiredError('modifierOptionId', 'Required parameter modifierOptionId was null or undefined when calling deleteModifierOption.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)))
                        .replace("{" + "modifier_option_id" + "}", encodeURIComponent(String(modifierOptionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
         * @summary DeletePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: function (locationId, pageId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deletePage.');
                    }
                    // verify required parameter 'pageId' is not null or undefined
                    if (pageId === null || pageId === undefined) {
                        throw new base_1.RequiredError('pageId', 'Required parameter pageId was null or undefined when calling deletePage.');
                    }
                    localVarPath = "/v1/{location_id}/pages/{page_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "page_id" + "}", encodeURIComponent(String(pageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
         * @summary DeletePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
         * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePageCell: function (locationId, pageId, row, column, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deletePageCell.');
                    }
                    // verify required parameter 'pageId' is not null or undefined
                    if (pageId === null || pageId === undefined) {
                        throw new base_1.RequiredError('pageId', 'Required parameter pageId was null or undefined when calling deletePageCell.');
                    }
                    localVarPath = "/v1/{location_id}/pages/{page_id}/cells"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "page_id" + "}", encodeURIComponent(String(pageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (row !== undefined) {
                        localVarQueryParameter['row'] = row;
                    }
                    if (column !== undefined) {
                        localVarQueryParameter['column'] = column;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
         * @summary DeleteVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to delete.
         * @param {string} variationId The ID of the variation to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariation: function (locationId, itemId, variationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteVariation.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling deleteVariation.');
                    }
                    // verify required parameter 'variationId' is not null or undefined
                    if (variationId === null || variationId === undefined) {
                        throw new base_1.RequiredError('variationId', 'Required parameter variationId was null or undefined when calling deleteVariation.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)))
                        .replace("{" + "variation_id" + "}", encodeURIComponent(String(variationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all the item categories for a given location.
         * @summary ListCategories
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listCategories.');
                    }
                    localVarPath = "/v1/{location_id}/categories"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all the discounts for a given location.
         * @summary ListDiscounts
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listDiscounts.');
                    }
                    localVarPath = "/v1/{location_id}/discounts"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all the fees (taxes) for a given location.
         * @summary ListFees
         * @param {string} locationId The ID of the location to list fees for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFees: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listFees.');
                    }
                    localVarPath = "/v1/{location_id}/fees"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides inventory information for all inventory-enabled item variations.
         * @summary ListInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventory: function (locationId, limit, batchToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listInventory.');
                    }
                    localVarPath = "/v1/{location_id}/inventory"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides summary information of all items for a given location.
         * @summary ListItems
         * @param {string} locationId The ID of the location to list items for.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: function (locationId, batchToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listItems.');
                    }
                    localVarPath = "/v1/{location_id}/items"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all the modifier lists for a given location.
         * @summary ListModifierLists
         * @param {string} locationId The ID of the location to list modifier lists for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModifierLists: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listModifierLists.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all Favorites pages (in Square Point of Sale) for a given location.
         * @summary ListPages
         * @param {string} locationId The ID of the location to list Favorites pages for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPages: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listPages.');
                    }
                    localVarPath = "/v1/{location_id}/pages"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
         * @summary RemoveFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFee: function (locationId, itemId, feeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling removeFee.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeFee.');
                    }
                    // verify required parameter 'feeId' is not null or undefined
                    if (feeId === null || feeId === undefined) {
                        throw new base_1.RequiredError('feeId', 'Required parameter feeId was null or undefined when calling removeFee.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)))
                        .replace("{" + "fee_id" + "}", encodeURIComponent(String(feeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
         * @summary RemoveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to remove.
         * @param {string} itemId The ID of the item to remove the modifier list from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeModifierList: function (locationId, modifierListId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling removeModifierList.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling removeModifierList.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for a single item, including associated modifier lists and fees.
         * @summary RetrieveItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItem: function (locationId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveItem.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling retrieveItem.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for a single modifier list.
         * @summary RetrieveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The modifier list\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveModifierList: function (locationId, modifierListId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveModifierList.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling retrieveModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing item category.
         * @summary UpdateCategory
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} categoryId The ID of the category to edit.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (locationId, categoryId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateCategory.');
                    }
                    // verify required parameter 'categoryId' is not null or undefined
                    if (categoryId === null || categoryId === undefined) {
                        throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling updateCategory.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateCategory.');
                    }
                    localVarPath = "/v1/{location_id}/categories/{category_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "category_id" + "}", encodeURIComponent(String(categoryId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing discount.
         * @summary UpdateDiscount
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} discountId The ID of the discount to edit.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiscount: function (locationId, discountId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateDiscount.');
                    }
                    // verify required parameter 'discountId' is not null or undefined
                    if (discountId === null || discountId === undefined) {
                        throw new base_1.RequiredError('discountId', 'Required parameter discountId was null or undefined when calling updateDiscount.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateDiscount.');
                    }
                    localVarPath = "/v1/{location_id}/discounts/{discount_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "discount_id" + "}", encodeURIComponent(String(discountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing fee (tax).
         * @summary UpdateFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to edit.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFee: function (locationId, feeId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateFee.');
                    }
                    // verify required parameter 'feeId' is not null or undefined
                    if (feeId === null || feeId === undefined) {
                        throw new base_1.RequiredError('feeId', 'Required parameter feeId was null or undefined when calling updateFee.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateFee.');
                    }
                    localVarPath = "/v1/{location_id}/fees/{fee_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "fee_id" + "}", encodeURIComponent(String(feeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the core details of an existing item.
         * @summary UpdateItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (locationId, itemId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateItem.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateItem.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateItem.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing item modifier list.
         * @summary UpdateModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierList: function (locationId, modifierListId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateModifierList.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling updateModifierList.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing item modifier option.
         * @summary UpdateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierOption: function (locationId, modifierListId, modifierOptionId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateModifierOption.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling updateModifierOption.');
                    }
                    // verify required parameter 'modifierOptionId' is not null or undefined
                    if (modifierOptionId === null || modifierOptionId === undefined) {
                        throw new base_1.RequiredError('modifierOptionId', 'Required parameter modifierOptionId was null or undefined when calling updateModifierOption.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateModifierOption.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)))
                        .replace("{" + "modifier_option_id" + "}", encodeURIComponent(String(modifierOptionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of a Favorites page in Square Point of Sale.
         * @summary UpdatePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location
         * @param {string} pageId The ID of the page to modify.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage: function (locationId, pageId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updatePage.');
                    }
                    // verify required parameter 'pageId' is not null or undefined
                    if (pageId === null || pageId === undefined) {
                        throw new base_1.RequiredError('pageId', 'Required parameter pageId was null or undefined when calling updatePage.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updatePage.');
                    }
                    localVarPath = "/v1/{location_id}/pages/{page_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "page_id" + "}", encodeURIComponent(String(pageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies a cell of a Favorites page in Square Point of Sale.
         * @summary UpdatePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page the cell belongs to.
         * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageCell: function (locationId, pageId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updatePageCell.');
                    }
                    // verify required parameter 'pageId' is not null or undefined
                    if (pageId === null || pageId === undefined) {
                        throw new base_1.RequiredError('pageId', 'Required parameter pageId was null or undefined when calling updatePageCell.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updatePageCell.');
                    }
                    localVarPath = "/v1/{location_id}/pages/{page_id}/cells"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "page_id" + "}", encodeURIComponent(String(pageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing item variation.
         * @summary UpdateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {string} variationId The ID of the variation to modify.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariation: function (locationId, itemId, variationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateVariation.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateVariation.');
                    }
                    // verify required parameter 'variationId' is not null or undefined
                    if (variationId === null || variationId === undefined) {
                        throw new base_1.RequiredError('variationId', 'Required parameter variationId was null or undefined when calling updateVariation.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateVariation.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)))
                        .replace("{" + "variation_id" + "}", encodeURIComponent(String(variationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * V1ItemsApi - functional programming interface
 * @export
 */
exports.V1ItemsApiFp = function (configuration) {
    return {
        /**
         * Adjusts the current available inventory of an item variation.
         * @summary AdjustInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} variationId The ID of the variation to adjust inventory information for.
         * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustInventory: function (locationId, variationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).adjustInventory(locationId, variationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
         * @summary ApplyFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyFee: function (locationId, itemId, feeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).applyFee(locationId, itemId, feeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Associates a modifier list with an item so the associated modifier options can be applied to the item.
         * @summary ApplyModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to apply.
         * @param {string} itemId The ID of the item to add the modifier list to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyModifierList: function (locationId, modifierListId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).applyModifierList(locationId, modifierListId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an item category.
         * @summary CreateCategory
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createCategory(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a discount.
         * @summary CreateDiscount
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createDiscount(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a fee (tax).
         * @summary CreateFee
         * @param {string} locationId The ID of the location to create a fee for.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFee: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createFee(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
         * @summary CreateItem
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createItem(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an item modifier list and at least 1 modifier option for it.
         * @summary CreateModifierList
         * @param {string} locationId The ID of the location to create a modifier list for.
         * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierList: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createModifierList(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an item modifier option and adds it to a modifier list.
         * @summary CreateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierOption: function (locationId, modifierListId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createModifierOption(locationId, modifierListId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a Favorites page in Square Point of Sale.
         * @summary CreatePage
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createPage(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an item variation for an existing item.
         * @summary CreateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariation: function (locationId, itemId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createVariation(locationId, itemId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
         * @summary DeleteCategory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} categoryId The ID of the category to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: function (locationId, categoryId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteCategory(locationId, categoryId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
         * @summary DeleteDiscount
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} discountId The ID of the discount to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount: function (locationId, discountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteDiscount(locationId, discountId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
         * @summary DeleteFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFee: function (locationId, feeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteFee(locationId, feeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
         * @summary DeleteItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (locationId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteItem(locationId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
         * @summary DeleteModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierList: function (locationId, modifierListId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteModifierList(locationId, modifierListId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
         * @summary DeleteModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierOption: function (locationId, modifierListId, modifierOptionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteModifierOption(locationId, modifierListId, modifierOptionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
         * @summary DeletePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: function (locationId, pageId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deletePage(locationId, pageId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
         * @summary DeletePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
         * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePageCell: function (locationId, pageId, row, column, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deletePageCell(locationId, pageId, row, column, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
         * @summary DeleteVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to delete.
         * @param {string} variationId The ID of the variation to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariation: function (locationId, itemId, variationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteVariation(locationId, itemId, variationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all the item categories for a given location.
         * @summary ListCategories
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listCategories(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all the discounts for a given location.
         * @summary ListDiscounts
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listDiscounts(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all the fees (taxes) for a given location.
         * @summary ListFees
         * @param {string} locationId The ID of the location to list fees for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFees: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listFees(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides inventory information for all inventory-enabled item variations.
         * @summary ListInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventory: function (locationId, limit, batchToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listInventory(locationId, limit, batchToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides summary information of all items for a given location.
         * @summary ListItems
         * @param {string} locationId The ID of the location to list items for.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: function (locationId, batchToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listItems(locationId, batchToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all the modifier lists for a given location.
         * @summary ListModifierLists
         * @param {string} locationId The ID of the location to list modifier lists for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModifierLists: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listModifierLists(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all Favorites pages (in Square Point of Sale) for a given location.
         * @summary ListPages
         * @param {string} locationId The ID of the location to list Favorites pages for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPages: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listPages(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
         * @summary RemoveFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFee: function (locationId, itemId, feeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).removeFee(locationId, itemId, feeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
         * @summary RemoveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to remove.
         * @param {string} itemId The ID of the item to remove the modifier list from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeModifierList: function (locationId, modifierListId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).removeModifierList(locationId, modifierListId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for a single item, including associated modifier lists and fees.
         * @summary RetrieveItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItem: function (locationId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).retrieveItem(locationId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for a single modifier list.
         * @summary RetrieveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The modifier list\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveModifierList: function (locationId, modifierListId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).retrieveModifierList(locationId, modifierListId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing item category.
         * @summary UpdateCategory
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} categoryId The ID of the category to edit.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (locationId, categoryId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateCategory(locationId, categoryId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing discount.
         * @summary UpdateDiscount
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} discountId The ID of the discount to edit.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiscount: function (locationId, discountId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateDiscount(locationId, discountId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing fee (tax).
         * @summary UpdateFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to edit.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFee: function (locationId, feeId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateFee(locationId, feeId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the core details of an existing item.
         * @summary UpdateItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (locationId, itemId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateItem(locationId, itemId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing item modifier list.
         * @summary UpdateModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierList: function (locationId, modifierListId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateModifierList(locationId, modifierListId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing item modifier option.
         * @summary UpdateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierOption: function (locationId, modifierListId, modifierOptionId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateModifierOption(locationId, modifierListId, modifierOptionId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of a Favorites page in Square Point of Sale.
         * @summary UpdatePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location
         * @param {string} pageId The ID of the page to modify.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage: function (locationId, pageId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updatePage(locationId, pageId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies a cell of a Favorites page in Square Point of Sale.
         * @summary UpdatePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page the cell belongs to.
         * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageCell: function (locationId, pageId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updatePageCell(locationId, pageId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing item variation.
         * @summary UpdateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {string} variationId The ID of the variation to modify.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariation: function (locationId, itemId, variationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateVariation(locationId, itemId, variationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * V1ItemsApi - factory interface
 * @export
 */
exports.V1ItemsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Adjusts the current available inventory of an item variation.
         * @summary AdjustInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} variationId The ID of the variation to adjust inventory information for.
         * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustInventory: function (locationId, variationId, body, options) {
            return exports.V1ItemsApiFp(configuration).adjustInventory(locationId, variationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
         * @summary ApplyFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyFee: function (locationId, itemId, feeId, options) {
            return exports.V1ItemsApiFp(configuration).applyFee(locationId, itemId, feeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Associates a modifier list with an item so the associated modifier options can be applied to the item.
         * @summary ApplyModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to apply.
         * @param {string} itemId The ID of the item to add the modifier list to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyModifierList: function (locationId, modifierListId, itemId, options) {
            return exports.V1ItemsApiFp(configuration).applyModifierList(locationId, modifierListId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an item category.
         * @summary CreateCategory
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createCategory(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a discount.
         * @summary CreateDiscount
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createDiscount(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a fee (tax).
         * @summary CreateFee
         * @param {string} locationId The ID of the location to create a fee for.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFee: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createFee(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
         * @summary CreateItem
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createItem(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an item modifier list and at least 1 modifier option for it.
         * @summary CreateModifierList
         * @param {string} locationId The ID of the location to create a modifier list for.
         * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierList: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createModifierList(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an item modifier option and adds it to a modifier list.
         * @summary CreateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierOption: function (locationId, modifierListId, body, options) {
            return exports.V1ItemsApiFp(configuration).createModifierOption(locationId, modifierListId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a Favorites page in Square Point of Sale.
         * @summary CreatePage
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createPage(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an item variation for an existing item.
         * @summary CreateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariation: function (locationId, itemId, body, options) {
            return exports.V1ItemsApiFp(configuration).createVariation(locationId, itemId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
         * @summary DeleteCategory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} categoryId The ID of the category to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: function (locationId, categoryId, options) {
            return exports.V1ItemsApiFp(configuration).deleteCategory(locationId, categoryId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
         * @summary DeleteDiscount
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} discountId The ID of the discount to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount: function (locationId, discountId, options) {
            return exports.V1ItemsApiFp(configuration).deleteDiscount(locationId, discountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
         * @summary DeleteFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFee: function (locationId, feeId, options) {
            return exports.V1ItemsApiFp(configuration).deleteFee(locationId, feeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
         * @summary DeleteItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (locationId, itemId, options) {
            return exports.V1ItemsApiFp(configuration).deleteItem(locationId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
         * @summary DeleteModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierList: function (locationId, modifierListId, options) {
            return exports.V1ItemsApiFp(configuration).deleteModifierList(locationId, modifierListId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
         * @summary DeleteModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierOption: function (locationId, modifierListId, modifierOptionId, options) {
            return exports.V1ItemsApiFp(configuration).deleteModifierOption(locationId, modifierListId, modifierOptionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
         * @summary DeletePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: function (locationId, pageId, options) {
            return exports.V1ItemsApiFp(configuration).deletePage(locationId, pageId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
         * @summary DeletePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
         * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePageCell: function (locationId, pageId, row, column, options) {
            return exports.V1ItemsApiFp(configuration).deletePageCell(locationId, pageId, row, column, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
         * @summary DeleteVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to delete.
         * @param {string} variationId The ID of the variation to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariation: function (locationId, itemId, variationId, options) {
            return exports.V1ItemsApiFp(configuration).deleteVariation(locationId, itemId, variationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all the item categories for a given location.
         * @summary ListCategories
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: function (locationId, options) {
            return exports.V1ItemsApiFp(configuration).listCategories(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all the discounts for a given location.
         * @summary ListDiscounts
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts: function (locationId, options) {
            return exports.V1ItemsApiFp(configuration).listDiscounts(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all the fees (taxes) for a given location.
         * @summary ListFees
         * @param {string} locationId The ID of the location to list fees for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFees: function (locationId, options) {
            return exports.V1ItemsApiFp(configuration).listFees(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides inventory information for all inventory-enabled item variations.
         * @summary ListInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventory: function (locationId, limit, batchToken, options) {
            return exports.V1ItemsApiFp(configuration).listInventory(locationId, limit, batchToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides summary information of all items for a given location.
         * @summary ListItems
         * @param {string} locationId The ID of the location to list items for.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: function (locationId, batchToken, options) {
            return exports.V1ItemsApiFp(configuration).listItems(locationId, batchToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all the modifier lists for a given location.
         * @summary ListModifierLists
         * @param {string} locationId The ID of the location to list modifier lists for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModifierLists: function (locationId, options) {
            return exports.V1ItemsApiFp(configuration).listModifierLists(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all Favorites pages (in Square Point of Sale) for a given location.
         * @summary ListPages
         * @param {string} locationId The ID of the location to list Favorites pages for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPages: function (locationId, options) {
            return exports.V1ItemsApiFp(configuration).listPages(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
         * @summary RemoveFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFee: function (locationId, itemId, feeId, options) {
            return exports.V1ItemsApiFp(configuration).removeFee(locationId, itemId, feeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
         * @summary RemoveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to remove.
         * @param {string} itemId The ID of the item to remove the modifier list from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeModifierList: function (locationId, modifierListId, itemId, options) {
            return exports.V1ItemsApiFp(configuration).removeModifierList(locationId, modifierListId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for a single item, including associated modifier lists and fees.
         * @summary RetrieveItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItem: function (locationId, itemId, options) {
            return exports.V1ItemsApiFp(configuration).retrieveItem(locationId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for a single modifier list.
         * @summary RetrieveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The modifier list\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveModifierList: function (locationId, modifierListId, options) {
            return exports.V1ItemsApiFp(configuration).retrieveModifierList(locationId, modifierListId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing item category.
         * @summary UpdateCategory
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} categoryId The ID of the category to edit.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (locationId, categoryId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateCategory(locationId, categoryId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing discount.
         * @summary UpdateDiscount
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} discountId The ID of the discount to edit.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiscount: function (locationId, discountId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateDiscount(locationId, discountId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing fee (tax).
         * @summary UpdateFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to edit.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFee: function (locationId, feeId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateFee(locationId, feeId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the core details of an existing item.
         * @summary UpdateItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (locationId, itemId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateItem(locationId, itemId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing item modifier list.
         * @summary UpdateModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierList: function (locationId, modifierListId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateModifierList(locationId, modifierListId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing item modifier option.
         * @summary UpdateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierOption: function (locationId, modifierListId, modifierOptionId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateModifierOption(locationId, modifierListId, modifierOptionId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of a Favorites page in Square Point of Sale.
         * @summary UpdatePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location
         * @param {string} pageId The ID of the page to modify.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage: function (locationId, pageId, body, options) {
            return exports.V1ItemsApiFp(configuration).updatePage(locationId, pageId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies a cell of a Favorites page in Square Point of Sale.
         * @summary UpdatePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page the cell belongs to.
         * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageCell: function (locationId, pageId, body, options) {
            return exports.V1ItemsApiFp(configuration).updatePageCell(locationId, pageId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing item variation.
         * @summary UpdateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {string} variationId The ID of the variation to modify.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariation: function (locationId, itemId, variationId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateVariation(locationId, itemId, variationId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * V1ItemsApi - object-oriented interface
 * @export
 * @class V1ItemsApi
 * @extends {BaseAPI}
 */
var V1ItemsApi = /** @class */ (function (_super) {
    __extends(V1ItemsApi, _super);
    function V1ItemsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adjusts the current available inventory of an item variation.
     * @summary AdjustInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} variationId The ID of the variation to adjust inventory information for.
     * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.adjustInventory = function (locationId, variationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).adjustInventory(locationId, variationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
     * @summary ApplyFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.applyFee = function (locationId, itemId, feeId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).applyFee(locationId, itemId, feeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Associates a modifier list with an item so the associated modifier options can be applied to the item.
     * @summary ApplyModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to apply.
     * @param {string} itemId The ID of the item to add the modifier list to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.applyModifierList = function (locationId, modifierListId, itemId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).applyModifierList(locationId, modifierListId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an item category.
     * @summary CreateCategory
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createCategory = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createCategory(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a discount.
     * @summary CreateDiscount
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createDiscount = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createDiscount(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a fee (tax).
     * @summary CreateFee
     * @param {string} locationId The ID of the location to create a fee for.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createFee = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createFee(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
     * @summary CreateItem
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createItem = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createItem(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an item modifier list and at least 1 modifier option for it.
     * @summary CreateModifierList
     * @param {string} locationId The ID of the location to create a modifier list for.
     * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createModifierList = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createModifierList(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an item modifier option and adds it to a modifier list.
     * @summary CreateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createModifierOption = function (locationId, modifierListId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createModifierOption(locationId, modifierListId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a Favorites page in Square Point of Sale.
     * @summary CreatePage
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createPage = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createPage(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an item variation for an existing item.
     * @summary CreateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createVariation = function (locationId, itemId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createVariation(locationId, itemId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
     * @summary DeleteCategory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} categoryId The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteCategory = function (locationId, categoryId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteCategory(locationId, categoryId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
     * @summary DeleteDiscount
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} discountId The ID of the discount to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteDiscount = function (locationId, discountId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteDiscount(locationId, discountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
     * @summary DeleteFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteFee = function (locationId, feeId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteFee(locationId, feeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
     * @summary DeleteItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteItem = function (locationId, itemId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteItem(locationId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
     * @summary DeleteModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteModifierList = function (locationId, modifierListId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteModifierList(locationId, modifierListId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
     * @summary DeleteModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteModifierOption = function (locationId, modifierListId, modifierOptionId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteModifierOption(locationId, modifierListId, modifierOptionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
     * @summary DeletePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deletePage = function (locationId, pageId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deletePage(locationId, pageId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
     * @summary DeletePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deletePageCell = function (locationId, pageId, row, column, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deletePageCell(locationId, pageId, row, column, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
     * @summary DeleteVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to delete.
     * @param {string} variationId The ID of the variation to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteVariation = function (locationId, itemId, variationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteVariation(locationId, itemId, variationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all the item categories for a given location.
     * @summary ListCategories
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listCategories = function (locationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listCategories(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all the discounts for a given location.
     * @summary ListDiscounts
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listDiscounts = function (locationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listDiscounts(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all the fees (taxes) for a given location.
     * @summary ListFees
     * @param {string} locationId The ID of the location to list fees for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listFees = function (locationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listFees(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides inventory information for all inventory-enabled item variations.
     * @summary ListInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listInventory = function (locationId, limit, batchToken, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listInventory(locationId, limit, batchToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides summary information of all items for a given location.
     * @summary ListItems
     * @param {string} locationId The ID of the location to list items for.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listItems = function (locationId, batchToken, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listItems(locationId, batchToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all the modifier lists for a given location.
     * @summary ListModifierLists
     * @param {string} locationId The ID of the location to list modifier lists for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listModifierLists = function (locationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listModifierLists(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all Favorites pages (in Square Point of Sale) for a given location.
     * @summary ListPages
     * @param {string} locationId The ID of the location to list Favorites pages for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listPages = function (locationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listPages(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
     * @summary RemoveFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.removeFee = function (locationId, itemId, feeId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).removeFee(locationId, itemId, feeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
     * @summary RemoveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to remove.
     * @param {string} itemId The ID of the item to remove the modifier list from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.removeModifierList = function (locationId, modifierListId, itemId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).removeModifierList(locationId, modifierListId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     * @summary RetrieveItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.retrieveItem = function (locationId, itemId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).retrieveItem(locationId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for a single modifier list.
     * @summary RetrieveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The modifier list\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.retrieveModifierList = function (locationId, modifierListId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).retrieveModifierList(locationId, modifierListId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing item category.
     * @summary UpdateCategory
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} categoryId The ID of the category to edit.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateCategory = function (locationId, categoryId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateCategory(locationId, categoryId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing discount.
     * @summary UpdateDiscount
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} discountId The ID of the discount to edit.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateDiscount = function (locationId, discountId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateDiscount(locationId, discountId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing fee (tax).
     * @summary UpdateFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to edit.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateFee = function (locationId, feeId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateFee(locationId, feeId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the core details of an existing item.
     * @summary UpdateItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateItem = function (locationId, itemId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateItem(locationId, itemId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing item modifier list.
     * @summary UpdateModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateModifierList = function (locationId, modifierListId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateModifierList(locationId, modifierListId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing item modifier option.
     * @summary UpdateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateModifierOption = function (locationId, modifierListId, modifierOptionId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateModifierOption(locationId, modifierListId, modifierOptionId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of a Favorites page in Square Point of Sale.
     * @summary UpdatePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location
     * @param {string} pageId The ID of the page to modify.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updatePage = function (locationId, pageId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updatePage(locationId, pageId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies a cell of a Favorites page in Square Point of Sale.
     * @summary UpdatePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page the cell belongs to.
     * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updatePageCell = function (locationId, pageId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updatePageCell(locationId, pageId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing item variation.
     * @summary UpdateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {string} variationId The ID of the variation to modify.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateVariation = function (locationId, itemId, variationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateVariation(locationId, itemId, variationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return V1ItemsApi;
}(base_1.BaseAPI));
exports.V1ItemsApi = V1ItemsApi;
/**
 * V1LocationsApi - axios parameter creator
 * @export
 */
exports.V1LocationsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Provides details for all business locations associated with a Square account, including the Square-assigned object ID for the location.
         * @summary ListLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v1/me/locations";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["MERCHANT_PROFILE_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get the general information for a business.
         * @summary RetrieveBusiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBusiness: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v1/me";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["MERCHANT_PROFILE_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * V1LocationsApi - functional programming interface
 * @export
 */
exports.V1LocationsApiFp = function (configuration) {
    return {
        /**
         * Provides details for all business locations associated with a Square account, including the Square-assigned object ID for the location.
         * @summary ListLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1LocationsApiAxiosParamCreator(configuration).listLocations(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Get the general information for a business.
         * @summary RetrieveBusiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBusiness: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1LocationsApiAxiosParamCreator(configuration).retrieveBusiness(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * V1LocationsApi - factory interface
 * @export
 */
exports.V1LocationsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Provides details for all business locations associated with a Square account, including the Square-assigned object ID for the location.
         * @summary ListLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations: function (options) {
            return exports.V1LocationsApiFp(configuration).listLocations(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the general information for a business.
         * @summary RetrieveBusiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBusiness: function (options) {
            return exports.V1LocationsApiFp(configuration).retrieveBusiness(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * V1LocationsApi - object-oriented interface
 * @export
 * @class V1LocationsApi
 * @extends {BaseAPI}
 */
var V1LocationsApi = /** @class */ (function (_super) {
    __extends(V1LocationsApi, _super);
    function V1LocationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Provides details for all business locations associated with a Square account, including the Square-assigned object ID for the location.
     * @summary ListLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1LocationsApi
     */
    V1LocationsApi.prototype.listLocations = function (options) {
        var _this = this;
        return exports.V1LocationsApiFp(this.configuration).listLocations(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the general information for a business.
     * @summary RetrieveBusiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1LocationsApi
     */
    V1LocationsApi.prototype.retrieveBusiness = function (options) {
        var _this = this;
        return exports.V1LocationsApiFp(this.configuration).retrieveBusiness(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return V1LocationsApi;
}(base_1.BaseAPI));
exports.V1LocationsApi = V1LocationsApi;
/**
 * V1TransactionsApi - axios parameter creator
 * @export
 */
exports.V1TransactionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
         * @summary CreateRefund
         * @param {string} locationId The ID of the original payment\&#39;s associated location.
         * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createRefund.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createRefund.');
                    }
                    localVarPath = "/v1/{location_id}/refunds"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary ListBankAccounts
         * @param {string} locationId The ID of the location to list bank accounts for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listBankAccounts.');
                    }
                    localVarPath = "/v1/{location_id}/bank-accounts"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["BANK_ACCOUNTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides summary information for a merchant\'s online store orders.
         * @summary ListOrders
         * @param {string} locationId The ID of the location to list online store orders for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: function (locationId, order, limit, batchToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listOrders.');
                    }
                    localVarPath = "/v1/{location_id}/orders"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (order !== undefined) {
                        localVarQueryParameter['order'] = order;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
         * @summary ListPayments
         * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: function (locationId, order, beginTime, endTime, limit, batchToken, includePartial, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listPayments.');
                    }
                    localVarPath = "/v1/{location_id}/payments"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (order !== undefined) {
                        localVarQueryParameter['order'] = order;
                    }
                    if (beginTime !== undefined) {
                        localVarQueryParameter['begin_time'] = beginTime;
                    }
                    if (endTime !== undefined) {
                        localVarQueryParameter['end_time'] = endTime;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    if (includePartial !== undefined) {
                        localVarQueryParameter['include_partial'] = includePartial;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
         * @summary ListRefunds
         * @param {string} locationId The ID of the location to list refunds for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds: function (locationId, order, beginTime, endTime, limit, batchToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listRefunds.');
                    }
                    localVarPath = "/v1/{location_id}/refunds"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (order !== undefined) {
                        localVarQueryParameter['order'] = order;
                    }
                    if (beginTime !== undefined) {
                        localVarQueryParameter['begin_time'] = beginTime;
                    }
                    if (endTime !== undefined) {
                        localVarQueryParameter['end_time'] = endTime;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
         * @summary ListSettlements
         * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which settlements are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
         * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSettlements: function (locationId, order, beginTime, endTime, limit, status, batchToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listSettlements.');
                    }
                    localVarPath = "/v1/{location_id}/settlements"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["SETTLEMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (order !== undefined) {
                        localVarQueryParameter['order'] = order;
                    }
                    if (beginTime !== undefined) {
                        localVarQueryParameter['begin_time'] = beginTime;
                    }
                    if (endTime !== undefined) {
                        localVarQueryParameter['end_time'] = endTime;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (status !== undefined) {
                        localVarQueryParameter['status'] = status;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary RetrieveBankAccount
         * @param {string} locationId The ID of the bank account\&#39;s associated location.
         * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBankAccount: function (locationId, bankAccountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveBankAccount.');
                    }
                    // verify required parameter 'bankAccountId' is not null or undefined
                    if (bankAccountId === null || bankAccountId === undefined) {
                        throw new base_1.RequiredError('bankAccountId', 'Required parameter bankAccountId was null or undefined when calling retrieveBankAccount.');
                    }
                    localVarPath = "/v1/{location_id}/bank-accounts/{bank_account_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "bank_account_id" + "}", encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["BANK_ACCOUNTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides comprehensive information for a single online store order, including the order\'s history.
         * @summary RetrieveOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrder: function (locationId, orderId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveOrder.');
                    }
                    // verify required parameter 'orderId' is not null or undefined
                    if (orderId === null || orderId === undefined) {
                        throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling retrieveOrder.');
                    }
                    localVarPath = "/v1/{location_id}/orders/{order_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides comprehensive information for a single payment.
         * @summary RetrievePayment
         * @param {string} locationId The ID of the payment\&#39;s associated location.
         * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePayment: function (locationId, paymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrievePayment.');
                    }
                    // verify required parameter 'paymentId' is not null or undefined
                    if (paymentId === null || paymentId === undefined) {
                        throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling retrievePayment.');
                    }
                    localVarPath = "/v1/{location_id}/payments/{payment_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "payment_id" + "}", encodeURIComponent(String(paymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
         * @summary RetrieveSettlement
         * @param {string} locationId The ID of the settlements\&#39;s associated location.
         * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSettlement: function (locationId, settlementId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveSettlement.');
                    }
                    // verify required parameter 'settlementId' is not null or undefined
                    if (settlementId === null || settlementId === undefined) {
                        throw new base_1.RequiredError('settlementId', 'Required parameter settlementId was null or undefined when calling retrieveSettlement.');
                    }
                    localVarPath = "/v1/{location_id}/settlements/{settlement_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "settlement_id" + "}", encodeURIComponent(String(settlementId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["SETTLEMENTS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
         * @summary UpdateOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (locationId, orderId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateOrder.');
                    }
                    // verify required parameter 'orderId' is not null or undefined
                    if (orderId === null || orderId === undefined) {
                        throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling updateOrder.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateOrder.');
                    }
                    localVarPath = "/v1/{location_id}/orders/{order_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ORDERS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * V1TransactionsApi - functional programming interface
 * @export
 */
exports.V1TransactionsApiFp = function (configuration) {
    return {
        /**
         * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
         * @summary CreateRefund
         * @param {string} locationId The ID of the original payment\&#39;s associated location.
         * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).createRefund(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary ListBankAccounts
         * @param {string} locationId The ID of the location to list bank accounts for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).listBankAccounts(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides summary information for a merchant\'s online store orders.
         * @summary ListOrders
         * @param {string} locationId The ID of the location to list online store orders for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: function (locationId, order, limit, batchToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).listOrders(locationId, order, limit, batchToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
         * @summary ListPayments
         * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: function (locationId, order, beginTime, endTime, limit, batchToken, includePartial, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).listPayments(locationId, order, beginTime, endTime, limit, batchToken, includePartial, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
         * @summary ListRefunds
         * @param {string} locationId The ID of the location to list refunds for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds: function (locationId, order, beginTime, endTime, limit, batchToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).listRefunds(locationId, order, beginTime, endTime, limit, batchToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
         * @summary ListSettlements
         * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which settlements are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
         * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSettlements: function (locationId, order, beginTime, endTime, limit, status, batchToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).listSettlements(locationId, order, beginTime, endTime, limit, status, batchToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary RetrieveBankAccount
         * @param {string} locationId The ID of the bank account\&#39;s associated location.
         * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBankAccount: function (locationId, bankAccountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).retrieveBankAccount(locationId, bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides comprehensive information for a single online store order, including the order\'s history.
         * @summary RetrieveOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrder: function (locationId, orderId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).retrieveOrder(locationId, orderId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides comprehensive information for a single payment.
         * @summary RetrievePayment
         * @param {string} locationId The ID of the payment\&#39;s associated location.
         * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePayment: function (locationId, paymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).retrievePayment(locationId, paymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
         * @summary RetrieveSettlement
         * @param {string} locationId The ID of the settlements\&#39;s associated location.
         * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSettlement: function (locationId, settlementId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).retrieveSettlement(locationId, settlementId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
         * @summary UpdateOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (locationId, orderId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1TransactionsApiAxiosParamCreator(configuration).updateOrder(locationId, orderId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * V1TransactionsApi - factory interface
 * @export
 */
exports.V1TransactionsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
         * @summary CreateRefund
         * @param {string} locationId The ID of the original payment\&#39;s associated location.
         * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: function (locationId, body, options) {
            return exports.V1TransactionsApiFp(configuration).createRefund(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary ListBankAccounts
         * @param {string} locationId The ID of the location to list bank accounts for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: function (locationId, options) {
            return exports.V1TransactionsApiFp(configuration).listBankAccounts(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides summary information for a merchant\'s online store orders.
         * @summary ListOrders
         * @param {string} locationId The ID of the location to list online store orders for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: function (locationId, order, limit, batchToken, options) {
            return exports.V1TransactionsApiFp(configuration).listOrders(locationId, order, limit, batchToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
         * @summary ListPayments
         * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: function (locationId, order, beginTime, endTime, limit, batchToken, includePartial, options) {
            return exports.V1TransactionsApiFp(configuration).listPayments(locationId, order, beginTime, endTime, limit, batchToken, includePartial, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
         * @summary ListRefunds
         * @param {string} locationId The ID of the location to list refunds for.
         * @param {string} [order] TThe order in which payments are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds: function (locationId, order, beginTime, endTime, limit, batchToken, options) {
            return exports.V1TransactionsApiFp(configuration).listRefunds(locationId, order, beginTime, endTime, limit, batchToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
         * @summary ListSettlements
         * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
         * @param {string} [order] The order in which settlements are listed in the response.
         * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
         * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
         * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
         * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSettlements: function (locationId, order, beginTime, endTime, limit, status, batchToken, options) {
            return exports.V1TransactionsApiFp(configuration).listSettlements(locationId, order, beginTime, endTime, limit, status, batchToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
         * @summary RetrieveBankAccount
         * @param {string} locationId The ID of the bank account\&#39;s associated location.
         * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBankAccount: function (locationId, bankAccountId, options) {
            return exports.V1TransactionsApiFp(configuration).retrieveBankAccount(locationId, bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides comprehensive information for a single online store order, including the order\'s history.
         * @summary RetrieveOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrder: function (locationId, orderId, options) {
            return exports.V1TransactionsApiFp(configuration).retrieveOrder(locationId, orderId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides comprehensive information for a single payment.
         * @summary RetrievePayment
         * @param {string} locationId The ID of the payment\&#39;s associated location.
         * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePayment: function (locationId, paymentId, options) {
            return exports.V1TransactionsApiFp(configuration).retrievePayment(locationId, paymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
         * @summary RetrieveSettlement
         * @param {string} locationId The ID of the settlements\&#39;s associated location.
         * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSettlement: function (locationId, settlementId, options) {
            return exports.V1TransactionsApiFp(configuration).retrieveSettlement(locationId, settlementId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
         * @summary UpdateOrder
         * @param {string} locationId The ID of the order\&#39;s associated location.
         * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
         * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (locationId, orderId, body, options) {
            return exports.V1TransactionsApiFp(configuration).updateOrder(locationId, orderId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * V1TransactionsApi - object-oriented interface
 * @export
 * @class V1TransactionsApi
 * @extends {BaseAPI}
 */
var V1TransactionsApi = /** @class */ (function (_super) {
    __extends(V1TransactionsApi, _super);
    function V1TransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
     * @summary CreateRefund
     * @param {string} locationId The ID of the original payment\&#39;s associated location.
     * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.createRefund = function (locationId, body, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).createRefund(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary ListBankAccounts
     * @param {string} locationId The ID of the location to list bank accounts for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.listBankAccounts = function (locationId, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).listBankAccounts(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides summary information for a merchant\'s online store orders.
     * @summary ListOrders
     * @param {string} locationId The ID of the location to list online store orders for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.listOrders = function (locationId, order, limit, batchToken, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).listOrders(locationId, order, limit, batchToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
     * @summary ListPayments
     * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.listPayments = function (locationId, order, beginTime, endTime, limit, batchToken, includePartial, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).listPayments(locationId, order, beginTime, endTime, limit, batchToken, includePartial, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.listRefunds = function (locationId, order, beginTime, endTime, limit, batchToken, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).listRefunds(locationId, order, beginTime, endTime, limit, batchToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
     * @summary ListSettlements
     * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which settlements are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
     * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.listSettlements = function (locationId, order, beginTime, endTime, limit, status, batchToken, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).listSettlements(locationId, order, beginTime, endTime, limit, status, batchToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary RetrieveBankAccount
     * @param {string} locationId The ID of the bank account\&#39;s associated location.
     * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.retrieveBankAccount = function (locationId, bankAccountId, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).retrieveBankAccount(locationId, bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides comprehensive information for a single online store order, including the order\'s history.
     * @summary RetrieveOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.retrieveOrder = function (locationId, orderId, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).retrieveOrder(locationId, orderId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides comprehensive information for a single payment.
     * @summary RetrievePayment
     * @param {string} locationId The ID of the payment\&#39;s associated location.
     * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.retrievePayment = function (locationId, paymentId, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).retrievePayment(locationId, paymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
     * @summary RetrieveSettlement
     * @param {string} locationId The ID of the settlements\&#39;s associated location.
     * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.retrieveSettlement = function (locationId, settlementId, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).retrieveSettlement(locationId, settlementId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
     * @summary UpdateOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    V1TransactionsApi.prototype.updateOrder = function (locationId, orderId, body, options) {
        var _this = this;
        return exports.V1TransactionsApiFp(this.configuration).updateOrder(locationId, orderId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return V1TransactionsApi;
}(base_1.BaseAPI));
exports.V1TransactionsApi = V1TransactionsApi;
