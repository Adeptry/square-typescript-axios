/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * Defines fields in a AcceptDispute response.
 * @export
 * @interface AcceptDisputeResponse
 */
export interface AcceptDisputeResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof AcceptDisputeResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Dispute}
     * @memberof AcceptDisputeResponse
     */
    dispute?: Dispute;
}
/**
 * A request to accumulate points for a purchase.
 * @export
 * @interface AccumulateLoyaltyPointsRequest
 */
export interface AccumulateLoyaltyPointsRequest {
    /**
     *
     * @type {LoyaltyEventAccumulatePoints}
     * @memberof AccumulateLoyaltyPointsRequest
     */
    accumulate_points: LoyaltyEventAccumulatePoints;
    /**
     * A unique string that identifies the `AccumulateLoyaltyPoints` request.  Keys can be any valid string but must be unique for every request.
     * @type {string}
     * @memberof AccumulateLoyaltyPointsRequest
     */
    idempotency_key: string;
    /**
     * The `location` where the purchase was made.
     * @type {string}
     * @memberof AccumulateLoyaltyPointsRequest
     */
    location_id: string;
}
/**
 * A response containing the resulting loyalty event.
 * @export
 * @interface AccumulateLoyaltyPointsResponse
 */
export interface AccumulateLoyaltyPointsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof AccumulateLoyaltyPointsResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {LoyaltyEvent}
     * @memberof AccumulateLoyaltyPointsResponse
     */
    event?: LoyaltyEvent;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ActionCancelReason {
    BUYERCANCELED = "BUYER_CANCELED",
    SELLERCANCELED = "SELLER_CANCELED",
    TIMEDOUT = "TIMED_OUT"
}
/**
 * Defines the fields that are included in the response body of a request to the [AddGroupToCustomer](#endpoint-addgrouptocustomer) endpoint.
 * @export
 * @interface AddGroupToCustomerResponse
 */
export interface AddGroupToCustomerResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof AddGroupToCustomerResponse
     */
    errors?: Array<Error>;
}
/**
 * Represents an additional recipient (other than the merchant) receiving a portion of this tender.
 * @export
 * @interface AdditionalRecipient
 */
export interface AdditionalRecipient {
    /**
     * The location ID for a recipient (other than the merchant) receiving a portion of this tender.
     * @type {string}
     * @memberof AdditionalRecipient
     */
    location_id: string;
    /**
     * The description of the additional recipient.
     * @type {string}
     * @memberof AdditionalRecipient
     */
    description: string;
    /**
     *
     * @type {Money}
     * @memberof AdditionalRecipient
     */
    amount_money: Money;
    /**
     * The unique ID for this `AdditionalRecipientReceivable`, assigned by the server.
     * @type {string}
     * @memberof AdditionalRecipient
     */
    receivable_id?: string;
}
/**
 * Represents a physical address.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The first line of the address.  Fields that start with `address_line` provide the address\'s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).
     * @type {string}
     * @memberof Address
     */
    address_line_1?: string;
    /**
     * The second line of the address, if any.
     * @type {string}
     * @memberof Address
     */
    address_line_2?: string;
    /**
     * The third line of the address, if any.
     * @type {string}
     * @memberof Address
     */
    address_line_3?: string;
    /**
     * The city or town of the address.
     * @type {string}
     * @memberof Address
     */
    locality?: string;
    /**
     * A civil region within the address\'s `locality`, if any.
     * @type {string}
     * @memberof Address
     */
    sublocality?: string;
    /**
     * A civil region within the address\'s `sublocality`, if any.
     * @type {string}
     * @memberof Address
     */
    sublocality_2?: string;
    /**
     * A civil region within the address\'s `sublocality_2`, if any.
     * @type {string}
     * @memberof Address
     */
    sublocality_3?: string;
    /**
     * A civil entity within the address\'s country. In the US, this is the state.
     * @type {string}
     * @memberof Address
     */
    administrative_district_level_1?: string;
    /**
     * A civil entity within the address\'s `administrative_district_level_1`. In the US, this is the county.
     * @type {string}
     * @memberof Address
     */
    administrative_district_level_2?: string;
    /**
     * A civil entity within the address\'s `administrative_district_level_2`, if any.
     * @type {string}
     * @memberof Address
     */
    administrative_district_level_3?: string;
    /**
     * The address\'s postal code.
     * @type {string}
     * @memberof Address
     */
    postal_code?: string;
    /**
     * The address\'s country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values
     * @type {string}
     * @memberof Address
     */
    country?: string;
    /**
     * Optional first name when it\'s representing recipient.
     * @type {string}
     * @memberof Address
     */
    first_name?: string;
    /**
     * Optional last name when it\'s representing recipient.
     * @type {string}
     * @memberof Address
     */
    last_name?: string;
    /**
     * Optional organization name when it\'s representing recipient.
     * @type {string}
     * @memberof Address
     */
    organization?: string;
}
/**
 * A request to adjust (add or subtract) points manually.
 * @export
 * @interface AdjustLoyaltyPointsRequest
 */
export interface AdjustLoyaltyPointsRequest {
    /**
     * A unique string that identifies this `AdjustLoyaltyPoints` request.  Keys can be any valid string, but must be unique for every request.
     * @type {string}
     * @memberof AdjustLoyaltyPointsRequest
     */
    idempotency_key: string;
    /**
     *
     * @type {LoyaltyEventAdjustPoints}
     * @memberof AdjustLoyaltyPointsRequest
     */
    adjust_points: LoyaltyEventAdjustPoints;
}
/**
 * A response that includes the loyalty event that  resulted from the successful API call.
 * @export
 * @interface AdjustLoyaltyPointsResponse
 */
export interface AdjustLoyaltyPointsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof AdjustLoyaltyPointsResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {LoyaltyEvent}
     * @memberof AdjustLoyaltyPointsResponse
     */
    event?: LoyaltyEvent;
}
/**
 * Reflects the current status of a balance payment.
 * @export
 * @interface BalancePaymentDetails
 */
export interface BalancePaymentDetails {
    /**
     * ID for the account used to fund the payment.
     * @type {string}
     * @memberof BalancePaymentDetails
     */
    account_id?: string;
    /**
     * The balance paymentâ€™s current state. Can be `COMPLETED` or `FAILED`.
     * @type {string}
     * @memberof BalancePaymentDetails
     */
    status?: string;
}
/**
 * Represents a bank account. For more information about  linking a bank account to a Square account, see  [Bank Accounts API](/docs/bank-accounts-api).
 * @export
 * @interface BankAccount
 */
export interface BankAccount {
    /**
     * The unique, Square-issued identifier for the bank account.
     * @type {string}
     * @memberof BankAccount
     */
    id: string;
    /**
     * The last few digits of the account number.
     * @type {string}
     * @memberof BankAccount
     */
    account_number_suffix: string;
    /**
     * The ISO 3166 Alpha-2 country code where the bank account is based. See [Country](#type-country) for possible values
     * @type {string}
     * @memberof BankAccount
     */
    country: string;
    /**
     * The 3-character ISO 4217 currency code indicating the operating currency of the bank account. For example, the currency code for US dollars is `USD`. See [Currency](#type-currency) for possible values
     * @type {string}
     * @memberof BankAccount
     */
    currency: string;
    /**
     * The financial purpose of the associated bank account. See [BankAccountType](#type-bankaccounttype) for possible values
     * @type {string}
     * @memberof BankAccount
     */
    account_type: string;
    /**
     * Name of the account holder. This name must match the name  on the targeted bank account record.
     * @type {string}
     * @memberof BankAccount
     */
    holder_name: string;
    /**
     * Primary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/docs/bank-accounts-api).
     * @type {string}
     * @memberof BankAccount
     */
    primary_bank_identification_number: string;
    /**
     * Secondary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/docs/bank-accounts-api).
     * @type {string}
     * @memberof BankAccount
     */
    secondary_bank_identification_number?: string;
    /**
     * Reference identifier that will be displayed to UK bank account owners when collecting direct debit authorization. Only required for UK bank accounts.
     * @type {string}
     * @memberof BankAccount
     */
    debit_mandate_reference_id?: string;
    /**
     * Client-provided identifier for linking the banking account to an entity in a third-party system (for example, a bank account number or a user identifier).
     * @type {string}
     * @memberof BankAccount
     */
    reference_id?: string;
    /**
     * The location to which the bank account belongs.
     * @type {string}
     * @memberof BankAccount
     */
    location_id?: string;
    /**
     * Read-only. The current verification status of this BankAccount object. See [BankAccountStatus](#type-bankaccountstatus) for possible values
     * @type {string}
     * @memberof BankAccount
     */
    status: string;
    /**
     * Indicates whether it is possible for Square to send money to this bank account.
     * @type {boolean}
     * @memberof BankAccount
     */
    creditable: boolean;
    /**
     * Indicates whether it is possible for Square to take money from this  bank account.
     * @type {boolean}
     * @memberof BankAccount
     */
    debitable: boolean;
    /**
     * A Square-assigned, unique identifier for the bank account based on the account information. The account fingerprint can be used to compare account entries and determine if the they represent the same real-world bank account.
     * @type {string}
     * @memberof BankAccount
     */
    fingerprint?: string;
    /**
     * The current version of the `BankAccount`.
     * @type {number}
     * @memberof BankAccount
     */
    version?: number;
    /**
     * Read only. Name of actual financial institution.  For example \"Bank of America\".
     * @type {string}
     * @memberof BankAccount
     */
    bank_name?: string;
}
/**
 * Indicates the current verification status of a `BankAccount` object.
 * @export
 * @enum {string}
 */
export declare enum BankAccountStatus {
    VERIFICATIONINPROGRESS = "VERIFICATION_IN_PROGRESS",
    VERIFIED = "VERIFIED",
    DISABLED = "DISABLED"
}
/**
 * Indicates the financial purpose of the bank account.
 * @export
 * @enum {string}
 */
export declare enum BankAccountType {
    CHECKING = "CHECKING",
    SAVINGS = "SAVINGS",
    INVESTMENT = "INVESTMENT",
    OTHER = "OTHER",
    BUSINESSCHECKING = "BUSINESS_CHECKING"
}
/**
 *
 * @export
 * @interface BatchChangeInventoryRequest
 */
export interface BatchChangeInventoryRequest {
    /**
     * A client-supplied, universally unique identifier (UUID) for the request.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more information.
     * @type {string}
     * @memberof BatchChangeInventoryRequest
     */
    idempotency_key?: string;
    /**
     * The set of physical counts and inventory adjustments to be made. Changes are applied based on the client-supplied timestamp and may be sent out of order.
     * @type {Array<InventoryChange>}
     * @memberof BatchChangeInventoryRequest
     */
    changes?: Array<InventoryChange>;
    /**
     * Indicates whether the current physical count should be ignored if the quantity is unchanged since the last physical count. Default: `true`.
     * @type {boolean}
     * @memberof BatchChangeInventoryRequest
     */
    ignore_unchanged_counts?: boolean;
}
/**
 *
 * @export
 * @interface BatchChangeInventoryResponse
 */
export interface BatchChangeInventoryResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof BatchChangeInventoryResponse
     */
    errors?: Array<Error>;
    /**
     * The current counts for all objects referenced in the request.
     * @type {Array<InventoryCount>}
     * @memberof BatchChangeInventoryResponse
     */
    counts?: Array<InventoryCount>;
}
/**
 *
 * @export
 * @interface BatchDeleteCatalogObjectsRequest
 */
export interface BatchDeleteCatalogObjectsRequest {
    /**
     * The IDs of the CatalogObjects to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a CatalogItem will delete its CatalogItemVariation.
     * @type {Array<string>}
     * @memberof BatchDeleteCatalogObjectsRequest
     */
    object_ids?: Array<string>;
}
/**
 *
 * @export
 * @interface BatchDeleteCatalogObjectsResponse
 */
export interface BatchDeleteCatalogObjectsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof BatchDeleteCatalogObjectsResponse
     */
    errors?: Array<Error>;
    /**
     * The IDs of all CatalogObjects deleted by this request.
     * @type {Array<string>}
     * @memberof BatchDeleteCatalogObjectsResponse
     */
    deleted_object_ids?: Array<string>;
    /**
     * The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this deletion in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof BatchDeleteCatalogObjectsResponse
     */
    deleted_at?: string;
}
/**
 *
 * @export
 * @interface BatchRetrieveCatalogObjectsRequest
 */
export interface BatchRetrieveCatalogObjectsRequest {
    /**
     * The IDs of the CatalogObjects to be retrieved.
     * @type {Array<string>}
     * @memberof BatchRetrieveCatalogObjectsRequest
     */
    object_ids: Array<string>;
    /**
     * If `true`, the response will include additional objects that are related to the requested objects, as follows:  If the `objects` field of the response contains a CatalogItem, its associated CatalogCategory objects, CatalogTax objects, CatalogImage objects and CatalogModifierLists will be returned in the `related_objects` field of the response. If the `objects` field of the response contains a CatalogItemVariation, its parent CatalogItem will be returned in the `related_objects` field of the response.
     * @type {boolean}
     * @memberof BatchRetrieveCatalogObjectsRequest
     */
    include_related_objects?: boolean;
}
/**
 *
 * @export
 * @interface BatchRetrieveCatalogObjectsResponse
 */
export interface BatchRetrieveCatalogObjectsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof BatchRetrieveCatalogObjectsResponse
     */
    errors?: Array<Error>;
    /**
     * A list of `CatalogObject`s returned.
     * @type {Array<CatalogObject>}
     * @memberof BatchRetrieveCatalogObjectsResponse
     */
    objects?: Array<CatalogObject>;
    /**
     * A list of `CatalogObject`s referenced by the object in the `objects` field.
     * @type {Array<CatalogObject>}
     * @memberof BatchRetrieveCatalogObjectsResponse
     */
    related_objects?: Array<CatalogObject>;
}
/**
 *
 * @export
 * @interface BatchRetrieveInventoryChangesRequest
 */
export interface BatchRetrieveInventoryChangesRequest {
    /**
     * The filter to return results by `CatalogObject` ID. The filter is only applicable when set. The default value is null.
     * @type {Array<string>}
     * @memberof BatchRetrieveInventoryChangesRequest
     */
    catalog_object_ids?: Array<string>;
    /**
     * The filter to return results by `Location` ID.  The filter is only applicable when set. The default value is null.
     * @type {Array<string>}
     * @memberof BatchRetrieveInventoryChangesRequest
     */
    location_ids?: Array<string>;
    /**
     * The filter to return results by `InventoryChangeType` values other than `TRANSFER`. The default value is `[PHYSICAL_COUNT, ADJUSTMENT]`. See [InventoryChangeType](#type-inventorychangetype) for possible values
     * @type {Array<string>}
     * @memberof BatchRetrieveInventoryChangesRequest
     */
    types?: Array<string>;
    /**
     * The filter to return `ADJUSTMENT` query results by `InventoryState`. This filter is only applied when set. The default value is null. See [InventoryState](#type-inventorystate) for possible values
     * @type {Array<string>}
     * @memberof BatchRetrieveInventoryChangesRequest
     */
    states?: Array<string>;
    /**
     * The filter to return results with their `calculated_at` value   after the given time as specified in an RFC 3339 timestamp.  The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
     * @type {string}
     * @memberof BatchRetrieveInventoryChangesRequest
     */
    updated_after?: string;
    /**
     * The filter to return results with their `created_at` or `calculated_at` value   strictly before the given time as specified in an RFC 3339 timestamp.  The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
     * @type {string}
     * @memberof BatchRetrieveInventoryChangesRequest
     */
    updated_before?: string;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @type {string}
     * @memberof BatchRetrieveInventoryChangesRequest
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface BatchRetrieveInventoryChangesResponse
 */
export interface BatchRetrieveInventoryChangesResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof BatchRetrieveInventoryChangesResponse
     */
    errors?: Array<Error>;
    /**
     * The current calculated inventory changes for the requested objects and locations.
     * @type {Array<InventoryChange>}
     * @memberof BatchRetrieveInventoryChangesResponse
     */
    changes?: Array<InventoryChange>;
    /**
     * The pagination cursor to be used in a subsequent request. If unset, this is the final response. See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @type {string}
     * @memberof BatchRetrieveInventoryChangesResponse
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface BatchRetrieveInventoryCountsRequest
 */
export interface BatchRetrieveInventoryCountsRequest {
    /**
     * The filter to return results by `CatalogObject` ID. The filter is applicable only when set.  The default is null.
     * @type {Array<string>}
     * @memberof BatchRetrieveInventoryCountsRequest
     */
    catalog_object_ids?: Array<string>;
    /**
     * The filter to return results by `Location` ID.  This filter is applicable only when set. The default is null.
     * @type {Array<string>}
     * @memberof BatchRetrieveInventoryCountsRequest
     */
    location_ids?: Array<string>;
    /**
     * The filter to return results with their `calculated_at` value  after the given time as specified in an RFC 3339 timestamp.  The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
     * @type {string}
     * @memberof BatchRetrieveInventoryCountsRequest
     */
    updated_after?: string;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @type {string}
     * @memberof BatchRetrieveInventoryCountsRequest
     */
    cursor?: string;
    /**
     * The filter to return results by `InventoryState`. The filter is only applicable when set. Ignored are untracked states of `NONE`, `SOLD`, and `UNLINKED_RETURN`. The default is null. See [InventoryState](#type-inventorystate) for possible values
     * @type {Array<string>}
     * @memberof BatchRetrieveInventoryCountsRequest
     */
    states?: Array<string>;
}
/**
 *
 * @export
 * @interface BatchRetrieveInventoryCountsResponse
 */
export interface BatchRetrieveInventoryCountsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof BatchRetrieveInventoryCountsResponse
     */
    errors?: Array<Error>;
    /**
     * The current calculated inventory counts for the requested objects and locations.
     * @type {Array<InventoryCount>}
     * @memberof BatchRetrieveInventoryCountsResponse
     */
    counts?: Array<InventoryCount>;
    /**
     * The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @type {string}
     * @memberof BatchRetrieveInventoryCountsResponse
     */
    cursor?: string;
}
/**
 * Defines the fields that are included in requests to the BatchRetrieveOrders endpoint.
 * @export
 * @interface BatchRetrieveOrdersRequest
 */
export interface BatchRetrieveOrdersRequest {
    /**
     * The ID of the location for these orders. This field is optional: omit it to retrieve orders within the scope of the current authorization\'s merchant ID.
     * @type {string}
     * @memberof BatchRetrieveOrdersRequest
     */
    location_id?: string;
    /**
     * The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.
     * @type {Array<string>}
     * @memberof BatchRetrieveOrdersRequest
     */
    order_ids: Array<string>;
}
/**
 * Defines the fields that are included in the response body of a request to the BatchRetrieveOrders endpoint.
 * @export
 * @interface BatchRetrieveOrdersResponse
 */
export interface BatchRetrieveOrdersResponse {
    /**
     * The requested orders. This will omit any requested orders that do not exist.
     * @type {Array<Order>}
     * @memberof BatchRetrieveOrdersResponse
     */
    orders?: Array<Order>;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof BatchRetrieveOrdersResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface BatchUpsertCatalogObjectsRequest
 */
export interface BatchUpsertCatalogObjectsRequest {
    /**
     * A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you\'re unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
     * @type {string}
     * @memberof BatchUpsertCatalogObjectsRequest
     */
    idempotency_key: string;
    /**
     * A batch of CatalogObjects to be inserted/updated atomically. The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error in one batch will not affect other batches within the same request.  For each object, its `updated_at` field is ignored and replaced with a current [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), and its `is_deleted` field must not be set to `true`.  To modify an existing object, supply its ID. To create a new object, use an ID starting with `#`. These IDs may be used to create relationships between an object and attributes of other objects that reference it. For example, you can create a CatalogItem with ID `#ABC` and a CatalogItemVariation with its `item_id` attribute set to `#ABC` in order to associate the CatalogItemVariation with its parent CatalogItem.  Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.  Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will be inserted or updated.
     * @type {Array<CatalogObjectBatch>}
     * @memberof BatchUpsertCatalogObjectsRequest
     */
    batches: Array<CatalogObjectBatch>;
}
/**
 *
 * @export
 * @interface BatchUpsertCatalogObjectsResponse
 */
export interface BatchUpsertCatalogObjectsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof BatchUpsertCatalogObjectsResponse
     */
    errors?: Array<Error>;
    /**
     * The created successfully created CatalogObjects.
     * @type {Array<CatalogObject>}
     * @memberof BatchUpsertCatalogObjectsResponse
     */
    objects?: Array<CatalogObject>;
    /**
     * The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof BatchUpsertCatalogObjectsResponse
     */
    updated_at?: string;
    /**
     * The mapping between client and server IDs for this upsert.
     * @type {Array<CatalogIdMapping>}
     * @memberof BatchUpsertCatalogObjectsResponse
     */
    id_mappings?: Array<CatalogIdMapping>;
}
/**
 * A record of an employee\'s break during a shift.
 * @export
 * @interface Break
 */
export interface Break {
    /**
     * UUID for this object
     * @type {string}
     * @memberof Break
     */
    id?: string;
    /**
     * RFC 3339; follows same timezone info as `Shift`. Precision up to the minute is respected; seconds are truncated.
     * @type {string}
     * @memberof Break
     */
    start_at: string;
    /**
     * RFC 3339; follows same timezone info as `Shift`. Precision up to the minute is respected; seconds are truncated.
     * @type {string}
     * @memberof Break
     */
    end_at?: string;
    /**
     * The `BreakType` this `Break` was templated on.
     * @type {string}
     * @memberof Break
     */
    break_type_id: string;
    /**
     * A human-readable name.
     * @type {string}
     * @memberof Break
     */
    name: string;
    /**
     * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.
     * @type {string}
     * @memberof Break
     */
    expected_duration: string;
    /**
     * Whether this break counts towards time worked for compensation purposes.
     * @type {boolean}
     * @memberof Break
     */
    is_paid: boolean;
}
/**
 * A defined break template that sets an expectation for possible `Break` instances on a `Shift`.
 * @export
 * @interface BreakType
 */
export interface BreakType {
    /**
     * UUID for this object.
     * @type {string}
     * @memberof BreakType
     */
    id?: string;
    /**
     * The ID of the business location this type of break applies to.
     * @type {string}
     * @memberof BreakType
     */
    location_id: string;
    /**
     * A human-readable name for this type of break. Will be displayed to employees in Square products.
     * @type {string}
     * @memberof BreakType
     */
    break_name: string;
    /**
     * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of this break. Precision below minutes is truncated.
     * @type {string}
     * @memberof BreakType
     */
    expected_duration: string;
    /**
     * Whether this break counts towards time worked for compensation purposes.
     * @type {boolean}
     * @memberof BreakType
     */
    is_paid: boolean;
    /**
     * Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If a value is not provided, Square\'s servers execute a \"blind\" write; potentially overwriting another writer\'s data.
     * @type {number}
     * @memberof BreakType
     */
    version?: number;
    /**
     * A read-only timestamp in RFC 3339 format.
     * @type {string}
     * @memberof BreakType
     */
    created_at?: string;
    /**
     * A read-only timestamp in RFC 3339 format.
     * @type {string}
     * @memberof BreakType
     */
    updated_at?: string;
}
/**
 * Represents a bulk create request for `TeamMember` objects.
 * @export
 * @interface BulkCreateTeamMembersRequest
 */
export interface BulkCreateTeamMembersRequest {
    /**
     * The data which will be used to create the `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`.
     * @type {{ [key: string]: CreateTeamMemberRequest; }}
     * @memberof BulkCreateTeamMembersRequest
     */
    team_members: {
        [key: string]: CreateTeamMemberRequest;
    };
}
/**
 * Represents a response from a bulk create request, containing the created `TeamMember` objects or error messages.
 * @export
 * @interface BulkCreateTeamMembersResponse
 */
export interface BulkCreateTeamMembersResponse {
    /**
     * The successfully created `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`.
     * @type {{ [key: string]: CreateTeamMemberResponse; }}
     * @memberof BulkCreateTeamMembersResponse
     */
    team_members?: {
        [key: string]: CreateTeamMemberResponse;
    };
    /**
     * The errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof BulkCreateTeamMembersResponse
     */
    errors?: Array<Error>;
}
/**
 * Represents a bulk update request for `TeamMember` objects.
 * @export
 * @interface BulkUpdateTeamMembersRequest
 */
export interface BulkUpdateTeamMembersRequest {
    /**
     * The data which will be used to update the `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
     * @type {{ [key: string]: UpdateTeamMemberRequest; }}
     * @memberof BulkUpdateTeamMembersRequest
     */
    team_members: {
        [key: string]: UpdateTeamMemberRequest;
    };
}
/**
 * Represents a response from a bulk update request, containing the updated `TeamMember` objects or error messages.
 * @export
 * @interface BulkUpdateTeamMembersResponse
 */
export interface BulkUpdateTeamMembersResponse {
    /**
     * The successfully updated `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
     * @type {{ [key: string]: UpdateTeamMemberResponse; }}
     * @memberof BulkUpdateTeamMembersResponse
     */
    team_members?: {
        [key: string]: UpdateTeamMemberResponse;
    };
    /**
     * The errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof BulkUpdateTeamMembersResponse
     */
    errors?: Array<Error>;
}
/**
 * Represents the hours of operation for a business location.
 * @export
 * @interface BusinessHours
 */
export interface BusinessHours {
    /**
     * The list of time periods during which the business is open. There may be at most 10 periods per day.
     * @type {Array<BusinessHoursPeriod>}
     * @memberof BusinessHours
     */
    periods?: Array<BusinessHoursPeriod>;
}
/**
 * Represents a period of time during which a business location is open.
 * @export
 * @interface BusinessHoursPeriod
 */
export interface BusinessHoursPeriod {
    /**
     * The day of week for this time period. See [DayOfWeek](#type-dayofweek) for possible values
     * @type {string}
     * @memberof BusinessHoursPeriod
     */
    day_of_week?: string;
    /**
     * The start time of a business hours period, specified in local time using partial-time RFC 3339 format.
     * @type {string}
     * @memberof BusinessHoursPeriod
     */
    start_local_time?: string;
    /**
     * The end time of a business hours period, specified in local time using partial-time RFC 3339 format.
     * @type {string}
     * @memberof BusinessHoursPeriod
     */
    end_local_time?: string;
}
/**
 * A request to calculate the points that a buyer can earn from  a specified purchase.
 * @export
 * @interface CalculateLoyaltyPointsRequest
 */
export interface CalculateLoyaltyPointsRequest {
    /**
     * The `order` ID for which to calculate the points. Specify this field if your application uses the Orders API to process orders. Otherwise, specify the `transaction_amount`.
     * @type {string}
     * @memberof CalculateLoyaltyPointsRequest
     */
    order_id?: string;
    /**
     *
     * @type {Money}
     * @memberof CalculateLoyaltyPointsRequest
     */
    transaction_amount_money?: Money;
}
/**
 * A response that includes the points that the buyer can earn from  a specified purchase.
 * @export
 * @interface CalculateLoyaltyPointsResponse
 */
export interface CalculateLoyaltyPointsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CalculateLoyaltyPointsResponse
     */
    errors?: Array<Error>;
    /**
     * The points that the buyer can earn from a specified purchase.
     * @type {number}
     * @memberof CalculateLoyaltyPointsResponse
     */
    points?: number;
}
/**
 *
 * @export
 * @interface CalculateOrderRequest
 */
export interface CalculateOrderRequest {
    /**
     *
     * @type {Order}
     * @memberof CalculateOrderRequest
     */
    order: Order;
    /**
     * Identifies one or more loyalty reward tiers to apply during order calculation. The discounts defined by the reward tiers are added to the order only to preview the effect of applying the specified reward(s). The reward(s) do not correspond to actual redemptions, that is, no `reward`s are created. Therefore, the reward `id`s are random strings used only to reference the reward tier.
     * @type {Array<OrderReward>}
     * @memberof CalculateOrderRequest
     */
    proposed_rewards?: Array<OrderReward>;
}
/**
 *
 * @export
 * @interface CalculateOrderResponse
 */
export interface CalculateOrderResponse {
    /**
     *
     * @type {Order}
     * @memberof CalculateOrderResponse
     */
    order?: Order;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CalculateOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * Describes a `CancelInvoice` request.
 * @export
 * @interface CancelInvoiceRequest
 */
export interface CancelInvoiceRequest {
    /**
     * The version of the `invoice` to cancel. If you do not know the version, you can call  `GetInvoice](#endpoint-Invoices-GetInvoice) or [ListInvoices`.
     * @type {number}
     * @memberof CancelInvoiceRequest
     */
    version: number;
}
/**
 * The response returned by the `CancelInvoice` request.
 * @export
 * @interface CancelInvoiceResponse
 */
export interface CancelInvoiceResponse {
    /**
     *
     * @type {Invoice}
     * @memberof CancelInvoiceResponse
     */
    invoice?: Invoice;
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CancelInvoiceResponse
     */
    errors?: Array<Error>;
}
/**
 * Specifies the idempotency key of a payment to cancel.
 * @export
 * @interface CancelPaymentByIdempotencyKeyRequest
 */
export interface CancelPaymentByIdempotencyKeyRequest {
    /**
     * The `idempotency_key` identifying the payment to be canceled.
     * @type {string}
     * @memberof CancelPaymentByIdempotencyKeyRequest
     */
    idempotency_key: string;
}
/**
 * The return value from the [CancelPaymentByIdempotencyKey](#endpoint-payments-cancelpaymentbyidempotencykey) endpoint. On success, `errors` is empty.
 * @export
 * @interface CancelPaymentByIdempotencyKeyResponse
 */
export interface CancelPaymentByIdempotencyKeyResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CancelPaymentByIdempotencyKeyResponse
     */
    errors?: Array<Error>;
}
/**
 * The return value from the [CancelPayment](#endpoint-payments-cancelpayment) endpoint.
 * @export
 * @interface CancelPaymentResponse
 */
export interface CancelPaymentResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CancelPaymentResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Payment}
     * @memberof CancelPaymentResponse
     */
    payment?: Payment;
}
/**
 * Defines fields that are included in a  [CancelSubscription](#endpoint-subscriptions-cancelsubscription) response.
 * @export
 * @interface CancelSubscriptionResponse
 */
export interface CancelSubscriptionResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CancelSubscriptionResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Subscription}
     * @memberof CancelSubscriptionResponse
     */
    subscription?: Subscription;
}
/**
 *
 * @export
 * @interface CancelTerminalCheckoutResponse
 */
export interface CancelTerminalCheckoutResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CancelTerminalCheckoutResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {TerminalCheckout}
     * @memberof CancelTerminalCheckoutResponse
     */
    checkout?: TerminalCheckout;
}
/**
 *
 * @export
 * @interface CancelTerminalRefundResponse
 */
export interface CancelTerminalRefundResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CancelTerminalRefundResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {TerminalRefund}
     * @memberof CancelTerminalRefundResponse
     */
    refund?: TerminalRefund;
}
/**
 * Defines the fields that are included in the response body of a request to the [CaptureTransaction](#endpoint-capturetransaction) endpoint.
 * @export
 * @interface CaptureTransactionResponse
 */
export interface CaptureTransactionResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CaptureTransactionResponse
     */
    errors?: Array<Error>;
}
/**
 * Represents the payment details of a card to be used for payments. These details are determined by the `card_nonce` generated by `SqPaymentForm`.
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * Unique ID for this card. Generated by Square.
     * @type {string}
     * @memberof Card
     */
    id?: string;
    /**
     * The card\'s brand. See [CardBrand](#type-cardbrand) for possible values
     * @type {string}
     * @memberof Card
     */
    card_brand?: string;
    /**
     * The last 4 digits of the card number.
     * @type {string}
     * @memberof Card
     */
    last_4?: string;
    /**
     * The expiration month of the associated card as an integer between 1 and 12.
     * @type {number}
     * @memberof Card
     */
    exp_month?: number;
    /**
     * The four-digit year of the card\'s expiration date.
     * @type {number}
     * @memberof Card
     */
    exp_year?: number;
    /**
     * The name of the cardholder.
     * @type {string}
     * @memberof Card
     */
    cardholder_name?: string;
    /**
     *
     * @type {Address}
     * @memberof Card
     */
    billing_address?: Address;
    /**
     * __Not currently set.__ Intended as a Square-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.
     * @type {string}
     * @memberof Card
     */
    fingerprint?: string;
    /**
     * The type of the card. The Card object includes this field only in response to Payments API calls. See [CardType](#type-cardtype) for possible values
     * @type {string}
     * @memberof Card
     */
    card_type?: string;
    /**
     * Indicates whether the Card is prepaid or not. The Card object includes this field only in response to Payments API calls. See [CardPrepaidType](#type-cardprepaidtype) for possible values
     * @type {string}
     * @memberof Card
     */
    prepaid_type?: string;
    /**
     * The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API returns this field.
     * @type {string}
     * @memberof Card
     */
    bin?: string;
}
/**
 * Indicates a card\'s brand, such as `VISA` or `MASTERCARD`.
 * @export
 * @enum {string}
 */
export declare enum CardBrand {
    OTHERBRAND = "OTHER_BRAND",
    VISA = "VISA",
    MASTERCARD = "MASTERCARD",
    AMERICANEXPRESS = "AMERICAN_EXPRESS",
    DISCOVER = "DISCOVER",
    DISCOVERDINERS = "DISCOVER_DINERS",
    JCB = "JCB",
    CHINAUNIONPAY = "CHINA_UNIONPAY",
    SQUAREGIFTCARD = "SQUARE_GIFT_CARD",
    SQUARECAPITALCARD = "SQUARE_CAPITAL_CARD",
    INTERAC = "INTERAC",
    EFTPOS = "EFTPOS",
    FELICA = "FELICA"
}
/**
 * Reflects the current status of a card payment.
 * @export
 * @interface CardPaymentDetails
 */
export interface CardPaymentDetails {
    /**
     * The card payment\'s current state. It can be one of: `AUTHORIZED`, `CAPTURED`, `VOIDED`, `FAILED`.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    status?: string;
    /**
     *
     * @type {Card}
     * @memberof CardPaymentDetails
     */
    card?: Card;
    /**
     * The method used to enter the card\'s details for the payment.  Can be `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    entry_method?: string;
    /**
     * Status code returned from the Card Verification Value (CVV) check. Can be `CVV_ACCEPTED`, `CVV_REJECTED`, `CVV_NOT_CHECKED`.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    cvv_status?: string;
    /**
     * Status code returned from the Address Verification System (AVS) check. Can be `AVS_ACCEPTED`, `AVS_REJECTED`, `AVS_NOT_CHECKED`.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    avs_status?: string;
    /**
     * Status code returned by the card issuer that describes the payment\'s authorization status.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    auth_result_code?: string;
    /**
     * For EMV payments, identifies the EMV application used for the payment.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    application_identifier?: string;
    /**
     * For EMV payments, the human-readable name of the EMV application used for the payment.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    application_name?: string;
    /**
     * For EMV payments, the cryptogram generated for the payment.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    application_cryptogram?: string;
    /**
     * For EMV payments, method used to verify the cardholder\'s identity.  Can be one of `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    verification_method?: string;
    /**
     * For EMV payments, the results of the cardholder verification.  Can be one of `SUCCESS`, `FAILURE`, or `UNKNOWN`.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    verification_results?: string;
    /**
     * The statement description sent to the card networks.  Note: The actual statement description will vary and is likely to be truncated and appended with additional information on a per issuer basis.
     * @type {string}
     * @memberof CardPaymentDetails
     */
    statement_description?: string;
    /**
     *
     * @type {DeviceDetails}
     * @memberof CardPaymentDetails
     */
    device_details?: DeviceDetails;
    /**
     * Whether or not the card is required to be physically present in order for the payment to be refunded.  If true, the card is required to be present.
     * @type {boolean}
     * @memberof CardPaymentDetails
     */
    refund_requires_card_presence?: boolean;
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CardPaymentDetails
     */
    errors?: Array<Error>;
}
/**
 * Indicates a card\'s prepaid type, such as `NOT_PREPAID` or `PREPAID`.
 * @export
 * @enum {string}
 */
export declare enum CardPrepaidType {
    UNKNOWNPREPAIDTYPE = "UNKNOWN_PREPAID_TYPE",
    NOTPREPAID = "NOT_PREPAID",
    PREPAID = "PREPAID"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CardSquareProduct {
    UNKNOWNSQUAREPRODUCT = "UNKNOWN_SQUARE_PRODUCT",
    CONNECTAPI = "CONNECT_API",
    DASHBOARD = "DASHBOARD",
    REGISTERCLIENT = "REGISTER_CLIENT",
    BUYERDASHBOARD = "BUYER_DASHBOARD",
    WEB = "WEB",
    INVOICES = "INVOICES",
    GIFTCARD = "GIFT_CARD",
    VIRTUALTERMINAL = "VIRTUAL_TERMINAL",
    READERSDK = "READER_SDK"
}
/**
 * Indicates a card\'s type, such as `CREDIT` or `DEBIT`.
 * @export
 * @enum {string}
 */
export declare enum CardType {
    UNKNOWNCARDTYPE = "UNKNOWN_CARD_TYPE",
    CREDIT = "CREDIT",
    DEBIT = "DEBIT"
}
/**
 *
 * @export
 * @interface CashDrawerDevice
 */
export interface CashDrawerDevice {
    /**
     * The device Square-issued ID
     * @type {string}
     * @memberof CashDrawerDevice
     */
    id?: string;
    /**
     * The device merchant-specified name.
     * @type {string}
     * @memberof CashDrawerDevice
     */
    name?: string;
}
/**
 * The types of events on a CashDrawerShift. Each event type represents an employee action on the actual cash drawer represented by a CashDrawerShift.
 * @export
 * @enum {string}
 */
export declare enum CashDrawerEventType {
    NOSALE = "NO_SALE",
    CASHTENDERPAYMENT = "CASH_TENDER_PAYMENT",
    OTHERTENDERPAYMENT = "OTHER_TENDER_PAYMENT",
    CASHTENDERCANCELLEDPAYMENT = "CASH_TENDER_CANCELLED_PAYMENT",
    OTHERTENDERCANCELLEDPAYMENT = "OTHER_TENDER_CANCELLED_PAYMENT",
    CASHTENDERREFUND = "CASH_TENDER_REFUND",
    OTHERTENDERREFUND = "OTHER_TENDER_REFUND",
    PAIDIN = "PAID_IN",
    PAIDOUT = "PAID_OUT"
}
/**
 * This model gives the details of a cash drawer shift. The cash_payment_money, cash_refund_money, cash_paid_in_money, and cash_paid_out_money fields are all computed by summing their respective event types.
 * @export
 * @interface CashDrawerShift
 */
export interface CashDrawerShift {
    /**
     * The shift unique ID.
     * @type {string}
     * @memberof CashDrawerShift
     */
    id?: string;
    /**
     * The shift current state. See [CashDrawerShiftState](#type-cashdrawershiftstate) for possible values
     * @type {string}
     * @memberof CashDrawerShift
     */
    state?: string;
    /**
     * The time when the shift began, in ISO 8601 format.
     * @type {string}
     * @memberof CashDrawerShift
     */
    opened_at?: string;
    /**
     * The time when the shift ended, in ISO 8601 format.
     * @type {string}
     * @memberof CashDrawerShift
     */
    ended_at?: string;
    /**
     * The time when the shift was closed, in ISO 8601 format.
     * @type {string}
     * @memberof CashDrawerShift
     */
    closed_at?: string;
    /**
     * The IDs of all employees that were logged into Square Point of Sale at any point while the cash drawer shift was open.
     * @type {Array<string>}
     * @memberof CashDrawerShift
     */
    employee_ids?: Array<string>;
    /**
     * The ID of the employee that started the cash drawer shift.
     * @type {string}
     * @memberof CashDrawerShift
     */
    opening_employee_id?: string;
    /**
     * The ID of the employee that ended the cash drawer shift.
     * @type {string}
     * @memberof CashDrawerShift
     */
    ending_employee_id?: string;
    /**
     * The ID of the employee that closed the cash drawer shift by auditing the cash drawer contents.
     * @type {string}
     * @memberof CashDrawerShift
     */
    closing_employee_id?: string;
    /**
     * The free-form text description of a cash drawer by an employee.
     * @type {string}
     * @memberof CashDrawerShift
     */
    description?: string;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShift
     */
    opened_cash_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShift
     */
    cash_payment_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShift
     */
    cash_refunds_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShift
     */
    cash_paid_in_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShift
     */
    cash_paid_out_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShift
     */
    expected_cash_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShift
     */
    closed_cash_money?: Money;
    /**
     *
     * @type {CashDrawerDevice}
     * @memberof CashDrawerShift
     */
    device?: CashDrawerDevice;
}
/**
 *
 * @export
 * @interface CashDrawerShiftEvent
 */
export interface CashDrawerShiftEvent {
    /**
     * The unique ID of the event.
     * @type {string}
     * @memberof CashDrawerShiftEvent
     */
    id?: string;
    /**
     * The ID of the employee that created the event.
     * @type {string}
     * @memberof CashDrawerShiftEvent
     */
    employee_id?: string;
    /**
     * The type of cash drawer shift event. See [CashDrawerEventType](#type-cashdrawereventtype) for possible values
     * @type {string}
     * @memberof CashDrawerShiftEvent
     */
    event_type?: string;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShiftEvent
     */
    event_money?: Money;
    /**
     * The event time in ISO 8601 format.
     * @type {string}
     * @memberof CashDrawerShiftEvent
     */
    created_at?: string;
    /**
     * An optional description of the event, entered by the employee that created the event.
     * @type {string}
     * @memberof CashDrawerShiftEvent
     */
    description?: string;
}
/**
 * The current state of a cash drawer shift.
 * @export
 * @enum {string}
 */
export declare enum CashDrawerShiftState {
    OPEN = "OPEN",
    ENDED = "ENDED",
    CLOSED = "CLOSED"
}
/**
 * The summary of a closed cash drawer shift. This model contains only the money counted to start a cash drawer shift, counted at the end of the shift, and the amount that should be in the drawer at shift end based on summing all cash drawer shift events.
 * @export
 * @interface CashDrawerShiftSummary
 */
export interface CashDrawerShiftSummary {
    /**
     * The shift unique ID.
     * @type {string}
     * @memberof CashDrawerShiftSummary
     */
    id?: string;
    /**
     * The shift current state. See [CashDrawerShiftState](#type-cashdrawershiftstate) for possible values
     * @type {string}
     * @memberof CashDrawerShiftSummary
     */
    state?: string;
    /**
     * The shift start time in ISO 8601 format.
     * @type {string}
     * @memberof CashDrawerShiftSummary
     */
    opened_at?: string;
    /**
     * The shift end time in ISO 8601 format.
     * @type {string}
     * @memberof CashDrawerShiftSummary
     */
    ended_at?: string;
    /**
     * The shift close time in ISO 8601 format.
     * @type {string}
     * @memberof CashDrawerShiftSummary
     */
    closed_at?: string;
    /**
     * An employee free-text description of a cash drawer shift.
     * @type {string}
     * @memberof CashDrawerShiftSummary
     */
    description?: string;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShiftSummary
     */
    opened_cash_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShiftSummary
     */
    expected_cash_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof CashDrawerShiftSummary
     */
    closed_cash_money?: Money;
}
/**
 * A category to which a `CatalogItem` instance belongs.
 * @export
 * @interface CatalogCategory
 */
export interface CatalogCategory {
    /**
     * The category name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     * @type {string}
     * @memberof CatalogCategory
     */
    name?: string;
}
/**
 * Contains information defining a custom attribute. Custom attributes are intended to store additional information about a catalog object or to associate a catalog object with an entity in another system. Do not use custom attributes to store any sensitive information (personally identifiable information, card details, etc.). [Read more about custom attributes](/catalog-api/add-custom-attributes)
 * @export
 * @interface CatalogCustomAttributeDefinition
 */
export interface CatalogCustomAttributeDefinition {
    /**
     * The type of this custom attribute. Cannot be modified after creation. Required. See [CatalogCustomAttributeDefinitionType](#type-catalogcustomattributedefinitiontype) for possible values
     * @type {string}
     * @memberof CatalogCustomAttributeDefinition
     */
    type: string;
    /**
     *  The name of this definition for API and seller-facing UI purposes. The name must be unique within the (merchant, application) pair. Required. May not be empty and may not exceed 255 characters. Can be modified after creation.
     * @type {string}
     * @memberof CatalogCustomAttributeDefinition
     */
    name: string;
    /**
     * Seller-oriented description of the meaning of this Custom Attribute, any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.
     * @type {string}
     * @memberof CatalogCustomAttributeDefinition
     */
    description?: string;
    /**
     *
     * @type {SourceApplication}
     * @memberof CatalogCustomAttributeDefinition
     */
    source_application?: SourceApplication;
    /**
     * The set of Catalog Object Types that this Custom Attribute may be applied to. Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included. See [CatalogObjectType](#type-catalogobjecttype) for possible values
     * @type {Array<string>}
     * @memberof CatalogCustomAttributeDefinition
     */
    allowed_object_types: Array<string>;
    /**
     * The visibility of a custom attribute in seller-facing UIs (including Square Point of Sale applications and Square Dashboard). May be modified. See [CatalogCustomAttributeDefinitionSellerVisibility](#type-catalogcustomattributedefinitionsellervisibility) for possible values
     * @type {string}
     * @memberof CatalogCustomAttributeDefinition
     */
    seller_visibility?: string;
    /**
     * The visibility of a custom attribute to applications other than the application that created the attribute. See [CatalogCustomAttributeDefinitionAppVisibility](#type-catalogcustomattributedefinitionappvisibility) for possible values
     * @type {string}
     * @memberof CatalogCustomAttributeDefinition
     */
    app_visibility?: string;
    /**
     *
     * @type {CatalogCustomAttributeDefinitionStringConfig}
     * @memberof CatalogCustomAttributeDefinition
     */
    string_config?: CatalogCustomAttributeDefinitionStringConfig;
    /**
     *
     * @type {CatalogCustomAttributeDefinitionNumberConfig}
     * @memberof CatalogCustomAttributeDefinition
     */
    number_config?: CatalogCustomAttributeDefinitionNumberConfig;
    /**
     *
     * @type {CatalogCustomAttributeDefinitionSelectionConfig}
     * @memberof CatalogCustomAttributeDefinition
     */
    selection_config?: CatalogCustomAttributeDefinitionSelectionConfig;
    /**
     * __Read-only.__ The number of custom attributes that reference this custom attribute definition. Set by the server in response to a ListCatalog request with `include_counts` set to `true`.  If the actual count is greater than 100, `custom_attribute_usage_count` will be set to `100`.
     * @type {number}
     * @memberof CatalogCustomAttributeDefinition
     */
    custom_attribute_usage_count?: number;
    /**
     * The name of the desired custom attribute key that can be used to access the custom attribute value on catalog objects. Cannot be modified after the custom attribute definition has been created. Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.
     * @type {string}
     * @memberof CatalogCustomAttributeDefinition
     */
    key?: string;
}
/**
 * Defines the visibility of a custom attribute to applications other than their creating application.
 * @export
 * @enum {string}
 */
export declare enum CatalogCustomAttributeDefinitionAppVisibility {
    HIDDEN = "APP_VISIBILITY_HIDDEN",
    READONLY = "APP_VISIBILITY_READ_ONLY",
    READWRITEVALUES = "APP_VISIBILITY_READ_WRITE_VALUES"
}
/**
 *
 * @export
 * @interface CatalogCustomAttributeDefinitionNumberConfig
 */
export interface CatalogCustomAttributeDefinitionNumberConfig {
    /**
     * An integer between 0 and 5 that represents the maximum number of positions allowed after the decimal in number custom attribute values For example:  - if the precision is 0, the quantity can be 1, 2, 3, etc. - if the precision is 1, the quantity can be 0.1, 0.2, etc. - if the precision is 2, the quantity can be 0.01, 0.12, etc.  Default: 5
     * @type {number}
     * @memberof CatalogCustomAttributeDefinitionNumberConfig
     */
    precision?: number;
}
/**
 * Configuration associated with `SELECTION`-type custom attribute definitions.
 * @export
 * @interface CatalogCustomAttributeDefinitionSelectionConfig
 */
export interface CatalogCustomAttributeDefinitionSelectionConfig {
    /**
     * The maximum number of selections that can be set. The maximum value for this attribute is 100. The default value is 1. The value can be modified, but changing the value will not affect existing custom attribute values on objects. Clients need to handle custom attributes with more selected values than allowed by this limit.
     * @type {number}
     * @memberof CatalogCustomAttributeDefinitionSelectionConfig
     */
    max_allowed_selections?: number;
    /**
     * The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100 selections can be defined. Can be modified.
     * @type {Array<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>}
     * @memberof CatalogCustomAttributeDefinitionSelectionConfig
     */
    allowed_selections?: Array<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>;
}
/**
 * A named selection for this `SELECTION`-type custom attribute definition.
 * @export
 * @interface CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection
 */
export interface CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection {
    /**
     * Unique ID set by Square.
     * @type {string}
     * @memberof CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection
     */
    uid?: string;
    /**
     * Selection name, unique within `allowed_selections`.
     * @type {string}
     * @memberof CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection
     */
    name: string;
}
/**
 * Defines the visibility of a custom attribute to sellers in Square client applications, Square APIs or in Square UIs (including Square Point of Sale applications and Square Dashboard).
 * @export
 * @enum {string}
 */
export declare enum CatalogCustomAttributeDefinitionSellerVisibility {
    HIDDEN = "SELLER_VISIBILITY_HIDDEN",
    READWRITEVALUES = "SELLER_VISIBILITY_READ_WRITE_VALUES"
}
/**
 * Configuration associated with Custom Attribute Definitions of type `STRING`.
 * @export
 * @interface CatalogCustomAttributeDefinitionStringConfig
 */
export interface CatalogCustomAttributeDefinitionStringConfig {
    /**
     * If true, each Custom Attribute instance associated with this Custom Attribute Definition must have a unique value within the seller\'s catalog. For example, this may be used for a value like a SKU that should not be duplicated within a seller\'s catalog. May not be modified after the definition has been created.
     * @type {boolean}
     * @memberof CatalogCustomAttributeDefinitionStringConfig
     */
    enforce_uniqueness?: boolean;
}
/**
 * Defines the possible types for a custom attribute.
 * @export
 * @enum {string}
 */
export declare enum CatalogCustomAttributeDefinitionType {
    STRING = "STRING",
    BOOLEAN = "BOOLEAN",
    NUMBER = "NUMBER",
    SELECTION = "SELECTION"
}
/**
 * An instance of a custom attribute. Custom attributes can be defined and added to `ITEM` and `ITEM_VARIATION` type catalog objects. [Read more about custom attributes](/catalog-api/add-custom-attributes).
 * @export
 * @interface CatalogCustomAttributeValue
 */
export interface CatalogCustomAttributeValue {
    /**
     * The name of the custom attribute.
     * @type {string}
     * @memberof CatalogCustomAttributeValue
     */
    name?: string;
    /**
     * The string value of the custom attribute.  Populated if `type` = `STRING`.
     * @type {string}
     * @memberof CatalogCustomAttributeValue
     */
    string_value?: string;
    /**
     * __Read-only.__ The id of the `CatalogCustomAttributeDefinition` this value belongs to.
     * @type {string}
     * @memberof CatalogCustomAttributeValue
     */
    custom_attribute_definition_id?: string;
    /**
     * __Read-only.__ A copy of type from the associated `CatalogCustomAttributeDefinition`. See [CatalogCustomAttributeDefinitionType](#type-catalogcustomattributedefinitiontype) for possible values
     * @type {string}
     * @memberof CatalogCustomAttributeValue
     */
    type?: string;
    /**
     * Populated if `type` = `NUMBER`. Contains a string representation of a decimal number, using a `.` as the decimal separator.
     * @type {string}
     * @memberof CatalogCustomAttributeValue
     */
    number_value?: string;
    /**
     * A `true` or `false` value. Populated if `type` = `BOOLEAN`.
     * @type {boolean}
     * @memberof CatalogCustomAttributeValue
     */
    boolean_value?: boolean;
    /**
     * One or more choices from `allowed_selections`. Populated if `type` = `SELECTION`.
     * @type {Array<string>}
     * @memberof CatalogCustomAttributeValue
     */
    selection_uid_values?: Array<string>;
    /**
     * __Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`.
     * @type {string}
     * @memberof CatalogCustomAttributeValue
     */
    key?: string;
}
/**
 * A discount applicable to items.
 * @export
 * @interface CatalogDiscount
 */
export interface CatalogDiscount {
    /**
     * The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     * @type {string}
     * @memberof CatalogDiscount
     */
    name?: string;
    /**
     * Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for possible values
     * @type {string}
     * @memberof CatalogDiscount
     */
    discount_type?: string;
    /**
     * The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type` is `VARIABLE_PERCENTAGE`.  Do not use this field for amount-based or variable discounts.
     * @type {string}
     * @memberof CatalogDiscount
     */
    percentage?: string;
    /**
     *
     * @type {Money}
     * @memberof CatalogDiscount
     */
    amount_money?: Money;
    /**
     * Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.
     * @type {boolean}
     * @memberof CatalogDiscount
     */
    pin_required?: boolean;
    /**
     * The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.
     * @type {string}
     * @memberof CatalogDiscount
     */
    label_color?: string;
    /**
     * Indicates whether this discount should reduce the price used to calculate tax.  Most discounts should use `MODIFY_TAX_BASIS`. However, in some circumstances taxes must be calculated based on an item\'s price, ignoring a particular discount. For example, in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a customer pays but does not reduce the sale price used to calculate how much sales tax is due. In this case, the discount representing that manufacturer coupon should have `DO_NOT_MODIFY_TAX_BASIS` for this field.  If you are unsure whether you need to use this field, consult your tax professional. See [CatalogDiscountModifyTaxBasis](#type-catalogdiscountmodifytaxbasis) for possible values
     * @type {string}
     * @memberof CatalogDiscount
     */
    modify_tax_basis?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CatalogDiscountModifyTaxBasis {
    MODIFYTAXBASIS = "MODIFY_TAX_BASIS",
    DONOTMODIFYTAXBASIS = "DO_NOT_MODIFY_TAX_BASIS"
}
/**
 * How to apply a CatalogDiscount to a CatalogItem.
 * @export
 * @enum {string}
 */
export declare enum CatalogDiscountType {
    FIXEDPERCENTAGE = "FIXED_PERCENTAGE",
    FIXEDAMOUNT = "FIXED_AMOUNT",
    VARIABLEPERCENTAGE = "VARIABLE_PERCENTAGE",
    VARIABLEAMOUNT = "VARIABLE_AMOUNT"
}
/**
 * A mapping between a temporary client-supplied ID and a permanent server-generated ID.  When calling [UpsertCatalogObject](#endpoint-Catalog-UpsertCatalogObject) or [BatchUpsertCatalogObjects](#endpoint-Catalog-BatchUpsertCatalogObjects) to create a [CatalogObject](#type-CatalogObject) instance, you can supply a temporary ID for the to-be-created object, especially when the object is to be referenced elsewhere in the same request body. This temporary ID can be any string unique within the call, but must be prefixed by \"#\".  After the request is sumbitted and the object created, a permanent server-generated ID is assigned to the new object. The permanent ID is unique across the Square catalog.
 * @export
 * @interface CatalogIdMapping
 */
export interface CatalogIdMapping {
    /**
     * The client-supplied temporary `#`-prefixed ID for a new `CatalogObject`.
     * @type {string}
     * @memberof CatalogIdMapping
     */
    client_object_id?: string;
    /**
     * The permanent ID for the CatalogObject created by the server.
     * @type {string}
     * @memberof CatalogIdMapping
     */
    object_id?: string;
}
/**
 * An image file to use in Square catalogs. It can be associated with catalog items, item variations, and categories.
 * @export
 * @interface CatalogImage
 */
export interface CatalogImage {
    /**
     * The internal name to identify this image in calls to the Square API.
     * @type {string}
     * @memberof CatalogImage
     */
    name?: string;
    /**
     * The URL of this image, generated by Square after an image is uploaded using the `CreateCatalogImage` endpoint.
     * @type {string}
     * @memberof CatalogImage
     */
    url?: string;
    /**
     * A caption that describes what is shown in the image. Displayed in the Square Online Store. This is a searchable attribute for use in applicable query filters.
     * @type {string}
     * @memberof CatalogImage
     */
    caption?: string;
}
/**
 *
 * @export
 * @interface CatalogInfoResponse
 */
export interface CatalogInfoResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CatalogInfoResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {CatalogInfoResponseLimits}
     * @memberof CatalogInfoResponse
     */
    limits?: CatalogInfoResponseLimits;
    /**
     *
     * @type {StandardUnitDescriptionGroup}
     * @memberof CatalogInfoResponse
     */
    standard_unit_description_group?: StandardUnitDescriptionGroup;
}
/**
 *
 * @export
 * @interface CatalogInfoResponseLimits
 */
export interface CatalogInfoResponseLimits {
    /**
     * The maximum number of objects that may appear within a single batch in a `/v2/catalog/batch-upsert` request.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    batch_upsert_max_objects_per_batch?: number;
    /**
     * The maximum number of objects that may appear across all batches in a `/v2/catalog/batch-upsert` request.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    batch_upsert_max_total_objects?: number;
    /**
     * The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve` request.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    batch_retrieve_max_object_ids?: number;
    /**
     * The maximum number of results that may be returned in a page of a `/v2/catalog/search` response.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    search_max_page_limit?: number;
    /**
     * The maximum number of object IDs that may be included in a single `/v2/catalog/batch-delete` request.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    batch_delete_max_object_ids?: number;
    /**
     * The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-taxes` request.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    update_item_taxes_max_item_ids?: number;
    /**
     * The maximum number of tax IDs to be enabled that may be included in a single `/v2/catalog/update-item-taxes` request.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    update_item_taxes_max_taxes_to_enable?: number;
    /**
     * The maximum number of tax IDs to be disabled that may be included in a single `/v2/catalog/update-item-taxes` request.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    update_item_taxes_max_taxes_to_disable?: number;
    /**
     * The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    update_item_modifier_lists_max_item_ids?: number;
    /**
     * The maximum number of modifier list IDs to be enabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    update_item_modifier_lists_max_modifier_lists_to_enable?: number;
    /**
     * The maximum number of modifier list IDs to be disabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
     * @type {number}
     * @memberof CatalogInfoResponseLimits
     */
    update_item_modifier_lists_max_modifier_lists_to_disable?: number;
}
/**
 * An [CatalogObject](#type-CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog.
 * @export
 * @interface CatalogItem
 */
export interface CatalogItem {
    /**
     * The item\'s name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points.
     * @type {string}
     * @memberof CatalogItem
     */
    name?: string;
    /**
     * The item\'s description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     * @type {string}
     * @memberof CatalogItem
     */
    description?: string;
    /**
     * The text of the item\'s display label in the Square Point of Sale app. Only up to the first five characters of the string are used. This attribute is searchable, and its value length is of Unicode code points.
     * @type {string}
     * @memberof CatalogItem
     */
    abbreviation?: string;
    /**
     * The color of the item\'s display label in the Square Point of Sale app. This must be a valid hex color code.
     * @type {string}
     * @memberof CatalogItem
     */
    label_color?: string;
    /**
     * If `true`, the item can be added to shipping orders from the merchant\'s online store.
     * @type {boolean}
     * @memberof CatalogItem
     */
    available_online?: boolean;
    /**
     * If `true`, the item can be added to pickup orders from the merchant\'s online store.
     * @type {boolean}
     * @memberof CatalogItem
     */
    available_for_pickup?: boolean;
    /**
     * If `true`, the item can be added to electronically fulfilled orders from the merchant\'s online store.
     * @type {boolean}
     * @memberof CatalogItem
     */
    available_electronically?: boolean;
    /**
     * The ID of the item\'s category, if any.
     * @type {string}
     * @memberof CatalogItem
     */
    category_id?: string;
    /**
     * A set of IDs indicating the taxes enabled for this item. When updating an item, any taxes listed here will be added to the item. Taxes may also be added to or deleted from an item using `UpdateItemTaxes`.
     * @type {Array<string>}
     * @memberof CatalogItem
     */
    tax_ids?: Array<string>;
    /**
     * A set of `CatalogItemModifierListInfo` objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. Modifier lists may also be added to or deleted from an item using `UpdateItemModifierLists`.
     * @type {Array<CatalogItemModifierListInfo>}
     * @memberof CatalogItem
     */
    modifier_list_info?: Array<CatalogItemModifierListInfo>;
    /**
     * A list of CatalogObjects containing the `CatalogItemVariation`s for this item.
     * @type {Array<CatalogObject>}
     * @memberof CatalogItem
     */
    variations?: Array<CatalogObject>;
    /**
     * The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` or `APPOINTMENTS_SERVICE` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values
     * @type {string}
     * @memberof CatalogItem
     */
    product_type?: string;
    /**
     * If `false`, the Square Point of Sale app will present the `CatalogItem`\'s details screen immediately, allowing the merchant to choose `CatalogModifier`s before adding the item to the cart.  This is the default behavior.  If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item\'s details.  Third-party clients are encouraged to implement similar behaviors.
     * @type {boolean}
     * @memberof CatalogItem
     */
    skip_modifier_screen?: boolean;
    /**
     * List of item options IDs for this item. Used to manage and group item variations in a specified order.  Maximum: 6 item options.
     * @type {Array<CatalogItemOptionForItem>}
     * @memberof CatalogItem
     */
    item_options?: Array<CatalogItemOptionForItem>;
}
/**
 * Options to control the properties of a `CatalogModifierList` applied to a `CatalogItem` instance.
 * @export
 * @interface CatalogItemModifierListInfo
 */
export interface CatalogItemModifierListInfo {
    /**
     * The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`.
     * @type {string}
     * @memberof CatalogItemModifierListInfo
     */
    modifier_list_id: string;
    /**
     * A set of `CatalogModifierOverride` objects that override whether a given `CatalogModifier` is enabled by default.
     * @type {Array<CatalogModifierOverride>}
     * @memberof CatalogItemModifierListInfo
     */
    modifier_overrides?: Array<CatalogModifierOverride>;
    /**
     * If 0 or larger, the smallest number of `CatalogModifier`s that must be selected from this `CatalogModifierList`.
     * @type {number}
     * @memberof CatalogItemModifierListInfo
     */
    min_selected_modifiers?: number;
    /**
     * If 0 or larger, the largest number of `CatalogModifier`s that can be selected from this `CatalogModifierList`.
     * @type {number}
     * @memberof CatalogItemModifierListInfo
     */
    max_selected_modifiers?: number;
    /**
     * If `true`, enable this `CatalogModifierList`. The default value is `true`.
     * @type {boolean}
     * @memberof CatalogItemModifierListInfo
     */
    enabled?: boolean;
}
/**
 * A group of variations for a `CatalogItem`.
 * @export
 * @interface CatalogItemOption
 */
export interface CatalogItemOption {
    /**
     * The item option\'s display name for the seller. Must be unique across all item options. This is a searchable attribute for use in applicable query filters.
     * @type {string}
     * @memberof CatalogItemOption
     */
    name?: string;
    /**
     * The item option\'s display name for the customer. This is a searchable attribute for use in applicable query filters.
     * @type {string}
     * @memberof CatalogItemOption
     */
    display_name?: string;
    /**
     * The item option\'s human-readable description. Displayed in the Square Point of Sale app for the seller and in the Online Store or on receipts for the buyer. This is a searchable attribute for use in applicable query filters.
     * @type {string}
     * @memberof CatalogItemOption
     */
    description?: string;
    /**
     * If true, display colors for entries in `values` when present.
     * @type {boolean}
     * @memberof CatalogItemOption
     */
    show_colors?: boolean;
    /**
     * A list of CatalogObjects containing the `CatalogItemOptionValue`s for this item.
     * @type {Array<CatalogObject>}
     * @memberof CatalogItemOption
     */
    values?: Array<CatalogObject>;
}
/**
 *  An option that can be assigned to an item. For example, a t-shirt item may offer a color option or a size option.
 * @export
 * @interface CatalogItemOptionForItem
 */
export interface CatalogItemOptionForItem {
    /**
     * The unique id of the item option, used to form the dimensions of the item option matrix in a specified order.
     * @type {string}
     * @memberof CatalogItemOptionForItem
     */
    item_option_id?: string;
}
/**
 * An enumerated value that can link a `CatalogItemVariation` to an item option as one of its item option values.
 * @export
 * @interface CatalogItemOptionValue
 */
export interface CatalogItemOptionValue {
    /**
     * Unique ID of the associated item option.
     * @type {string}
     * @memberof CatalogItemOptionValue
     */
    item_option_id?: string;
    /**
     * Name of this item option value. This is a searchable attribute for use in applicable query filters.
     * @type {string}
     * @memberof CatalogItemOptionValue
     */
    name?: string;
    /**
     * A human-readable description for the option value. This is a searchable attribute for use in applicable query filters.
     * @type {string}
     * @memberof CatalogItemOptionValue
     */
    description?: string;
    /**
     * The HTML-supported hex color for the item option (e.g., \"#ff8d4e85\"). Only displayed if `show_colors` is enabled on the parent `ItemOption`. When left unset, `color` defaults to white (\"#ffffff\") when `show_colors` is enabled on the parent `ItemOption`.
     * @type {string}
     * @memberof CatalogItemOptionValue
     */
    color?: string;
    /**
     * Determines where this option value appears in a list of option values.
     * @type {number}
     * @memberof CatalogItemOptionValue
     */
    ordinal?: number;
}
/**
 * A `CatalogItemOptionValue` links an item variation to an item option as an item option value. For example, a t-shirt item may offer a color option and a size option. An item option value would represent each variation of t-shirt: For example, \"Color:Red, Size:Small\" or \"Color:Blue, Size:Medium\".
 * @export
 * @interface CatalogItemOptionValueForItemVariation
 */
export interface CatalogItemOptionValueForItemVariation {
    /**
     * The unique id of an item option.
     * @type {string}
     * @memberof CatalogItemOptionValueForItemVariation
     */
    item_option_id?: string;
    /**
     * The unique id of the selected value for the item option.
     * @type {string}
     * @memberof CatalogItemOptionValueForItemVariation
     */
    item_option_value_id?: string;
}
/**
 * The type of a CatalogItem. Connect V2 only allows the creation of `REGULAR` or `APPOINTMENTS_SERVICE` items.
 * @export
 * @enum {string}
 */
export declare enum CatalogItemProductType {
    REGULAR = "REGULAR",
    GIFTCARD = "GIFT_CARD",
    APPOINTMENTSSERVICE = "APPOINTMENTS_SERVICE"
}
/**
 * An item variation (i.e., product) in the Catalog object model. Each item may have a maximum of 250 item variations.
 * @export
 * @interface CatalogItemVariation
 */
export interface CatalogItemVariation {
    /**
     * The ID of the `CatalogItem` associated with this item variation.
     * @type {string}
     * @memberof CatalogItemVariation
     */
    item_id?: string;
    /**
     * The item variation\'s name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     * @type {string}
     * @memberof CatalogItemVariation
     */
    name?: string;
    /**
     * The item variation\'s SKU, if any. This is a searchable attribute for use in applicable query filters.
     * @type {string}
     * @memberof CatalogItemVariation
     */
    sku?: string;
    /**
     * The item variation\'s UPC, if any. This is a searchable attribute for use in applicable query filters. It is only accessible through the Square API, and not exposed in the Square Seller Dashboard, Square Point of Sale or Retail Point of Sale apps.
     * @type {string}
     * @memberof CatalogItemVariation
     */
    upc?: string;
    /**
     * The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent `CatalogItem` is set according to the item variations\'s position. On reads, the value is not guaranteed to be sequential or unique.
     * @type {number}
     * @memberof CatalogItemVariation
     */
    ordinal?: number;
    /**
     * Indicates whether the item variation\'s price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for possible values
     * @type {string}
     * @memberof CatalogItemVariation
     */
    pricing_type?: string;
    /**
     *
     * @type {Money}
     * @memberof CatalogItemVariation
     */
    price_money?: Money;
    /**
     * Per-location price and inventory overrides.
     * @type {Array<ItemVariationLocationOverrides>}
     * @memberof CatalogItemVariation
     */
    location_overrides?: Array<ItemVariationLocationOverrides>;
    /**
     * If `true`, inventory tracking is active for the variation.
     * @type {boolean}
     * @memberof CatalogItemVariation
     */
    track_inventory?: boolean;
    /**
     * Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for possible values
     * @type {string}
     * @memberof CatalogItemVariation
     */
    inventory_alert_type?: string;
    /**
     * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.
     * @type {number}
     * @memberof CatalogItemVariation
     */
    inventory_alert_threshold?: number;
    /**
     * Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points.
     * @type {string}
     * @memberof CatalogItemVariation
     */
    user_data?: string;
    /**
     * If the `CatalogItem` that owns this item variation is of type `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value `1800000`, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
     * @type {number}
     * @memberof CatalogItemVariation
     */
    service_duration?: number;
    /**
     * List of item option values associated with this item variation. Listed in the same order as the item options of the parent item.
     * @type {Array<CatalogItemOptionValueForItemVariation>}
     * @memberof CatalogItemVariation
     */
    item_option_values?: Array<CatalogItemOptionValueForItemVariation>;
    /**
     * ID of the â€˜CatalogMeasurementUnitâ€™ that is used to measure the quantity sold of this item variation. If left unset, the item will be sold in whole quantities.
     * @type {string}
     * @memberof CatalogItemVariation
     */
    measurement_unit_id?: string;
}
/**
 * Represents the unit used to measure a `CatalogItemVariation` and specifies the precision for decimal quantities.
 * @export
 * @interface CatalogMeasurementUnit
 */
export interface CatalogMeasurementUnit {
    /**
     *
     * @type {MeasurementUnit}
     * @memberof CatalogMeasurementUnit
     */
    measurement_unit?: MeasurementUnit;
    /**
     * An integer between 0 and 5 that represents the maximum number of positions allowed after the decimal in quantities measured with this unit. For example:  - if the precision is 0, the quantity can be 1, 2, 3, etc. - if the precision is 1, the quantity can be 0.1, 0.2, etc. - if the precision is 2, the quantity can be 0.01, 0.12, etc.  Default: 3
     * @type {number}
     * @memberof CatalogMeasurementUnit
     */
    precision?: number;
}
/**
 * A modifier applicable to items at the time of sale.
 * @export
 * @interface CatalogModifier
 */
export interface CatalogModifier {
    /**
     * The modifier name.  This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     * @type {string}
     * @memberof CatalogModifier
     */
    name?: string;
    /**
     *
     * @type {Money}
     * @memberof CatalogModifier
     */
    price_money?: Money;
    /**
     * Determines where this `CatalogModifier` appears in the `CatalogModifierList`.
     * @type {number}
     * @memberof CatalogModifier
     */
    ordinal?: number;
    /**
     * The ID of the `CatalogModifierList` associated with this modifier.
     * @type {string}
     * @memberof CatalogModifier
     */
    modifier_list_id?: string;
}
/**
 * A list of modifiers applicable to items at the time of sale.  For example, a \"Condiments\" modifier list applicable to a \"Hot Dog\" item may contain \"Ketchup\", \"Mustard\", and \"Relish\" modifiers. Use the `selection_type` field to specify whether or not multiple selections from the modifier list are allowed.
 * @export
 * @interface CatalogModifierList
 */
export interface CatalogModifierList {
    /**
     * The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     * @type {string}
     * @memberof CatalogModifierList
     */
    name?: string;
    /**
     * Determines where this modifier list appears in a list of `CatalogModifierList` values.
     * @type {number}
     * @memberof CatalogModifierList
     */
    ordinal?: number;
    /**
     * Indicates whether multiple options from the modifier list can be applied to a single `CatalogItem`. See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values
     * @type {string}
     * @memberof CatalogModifierList
     */
    selection_type?: string;
    /**
     * The options included in the `CatalogModifierList`. You must include at least one `CatalogModifier`. Each CatalogObject must have type `MODIFIER` and contain `CatalogModifier` data.
     * @type {Array<CatalogObject>}
     * @memberof CatalogModifierList
     */
    modifiers?: Array<CatalogObject>;
}
/**
 * Indicates whether a CatalogModifierList supports multiple selections.
 * @export
 * @enum {string}
 */
export declare enum CatalogModifierListSelectionType {
    SINGLE = "SINGLE",
    MULTIPLE = "MULTIPLE"
}
/**
 * Options to control how to override the default behavior of the specified modifier.
 * @export
 * @interface CatalogModifierOverride
 */
export interface CatalogModifierOverride {
    /**
     * The ID of the `CatalogModifier` whose default behavior is being overridden.
     * @type {string}
     * @memberof CatalogModifierOverride
     */
    modifier_id: string;
    /**
     * If `true`, this `CatalogModifier` should be selected by default for this `CatalogItem`.
     * @type {boolean}
     * @memberof CatalogModifierOverride
     */
    on_by_default?: boolean;
}
/**
 * The wrapper object for the Catalog entries of a given object type.  The type of a particular `CatalogObject` is determined by the value of the `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance. For example, the following list shows some instances of `CatalogObject` of a given `type` and their corresponding data atrribute that can be set: - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object. - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object. - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object. - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object. - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object. - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object. - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object. - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object. - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object. - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object. - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object. - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object. - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.   For a more detailed discussion of the Catalog data model, please see the [Design a Catalog](/catalog-api/design-a-catalog) guide.
 * @export
 * @interface CatalogObject
 */
export interface CatalogObject {
    /**
     * The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below. See [CatalogObjectType](#type-catalogobjecttype) for possible values
     * @type {string}
     * @memberof CatalogObject
     */
    type: string;
    /**
     * An identifier to reference this object in the catalog. When a new `CatalogObject` is inserted, the client should set the id to a temporary identifier starting with a \"`#`\" character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.
     * @type {string}
     * @memberof CatalogObject
     */
    id: string;
    /**
     * Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `\"2016-08-15T23:59:33.123Z\"` would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
     * @type {string}
     * @memberof CatalogObject
     */
    updated_at?: string;
    /**
     * The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.
     * @type {number}
     * @memberof CatalogObject
     */
    version?: number;
    /**
     * If `true`, the object has been deleted from the database. Must be `false` for new objects being inserted. When deleted, the `updated_at` field will equal the deletion time.
     * @type {boolean}
     * @memberof CatalogObject
     */
    is_deleted?: boolean;
    /**
     * A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair is a `CatalogCustomAttributeValue` object. The key is the `key` attribute value defined in the associated `CatalogCustomAttributeDefinition` object defined by the application making the request.  If the `CatalogCustomAttributeDefinition` object is defined by another application, the `CatalogCustomAttributeDefinition`\'s key attribute value is prefixed by the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of `\"cocoa_brand\"` and the defining application ID is `\"abcd1234\"`, the key in the map is `\"abcd1234:cocoa_brand\"` if the application making the request is different from the application defining the custom attribute definition. Otherwise, the key used in the map is simply `\"cocoa_brand\"`.  Application-defined custom attributes that are set at a global (location-independent) level. Custom attribute values are intended to store additional information about a catalog object or associations with an entity in another system. Do not use custom attributes to store any sensitive information (personally identifiable information, card details, etc.).
     * @type {{ [key: string]: CatalogCustomAttributeValue; }}
     * @memberof CatalogObject
     */
    custom_attribute_values?: {
        [key: string]: CatalogCustomAttributeValue;
    };
    /**
     * The Connect v1 IDs for this object at each location where it is present, where they differ from the object\'s Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs.
     * @type {Array<CatalogV1Id>}
     * @memberof CatalogObject
     */
    catalog_v1_ids?: Array<CatalogV1Id>;
    /**
     * If `true`, this object is present at all locations (including future locations), except where specified in the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations), except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.
     * @type {boolean}
     * @memberof CatalogObject
     */
    present_at_all_locations?: boolean;
    /**
     * A list of locations where the object is present, even if `present_at_all_locations` is `false`.
     * @type {Array<string>}
     * @memberof CatalogObject
     */
    present_at_location_ids?: Array<string>;
    /**
     * A list of locations where the object is not present, even if `present_at_all_locations` is `true`.
     * @type {Array<string>}
     * @memberof CatalogObject
     */
    absent_at_location_ids?: Array<string>;
    /**
     * Identifies the `CatalogImage` attached to this `CatalogObject`.
     * @type {string}
     * @memberof CatalogObject
     */
    image_id?: string;
    /**
     *
     * @type {CatalogItem}
     * @memberof CatalogObject
     */
    item_data?: CatalogItem;
    /**
     *
     * @type {CatalogCategory}
     * @memberof CatalogObject
     */
    category_data?: CatalogCategory;
    /**
     *
     * @type {CatalogItemVariation}
     * @memberof CatalogObject
     */
    item_variation_data?: CatalogItemVariation;
    /**
     *
     * @type {CatalogTax}
     * @memberof CatalogObject
     */
    tax_data?: CatalogTax;
    /**
     *
     * @type {CatalogDiscount}
     * @memberof CatalogObject
     */
    discount_data?: CatalogDiscount;
    /**
     *
     * @type {CatalogModifierList}
     * @memberof CatalogObject
     */
    modifier_list_data?: CatalogModifierList;
    /**
     *
     * @type {CatalogModifier}
     * @memberof CatalogObject
     */
    modifier_data?: CatalogModifier;
    /**
     *
     * @type {CatalogTimePeriod}
     * @memberof CatalogObject
     */
    time_period_data?: CatalogTimePeriod;
    /**
     *
     * @type {CatalogProductSet}
     * @memberof CatalogObject
     */
    product_set_data?: CatalogProductSet;
    /**
     *
     * @type {CatalogPricingRule}
     * @memberof CatalogObject
     */
    pricing_rule_data?: CatalogPricingRule;
    /**
     *
     * @type {CatalogImage}
     * @memberof CatalogObject
     */
    image_data?: CatalogImage;
    /**
     *
     * @type {CatalogMeasurementUnit}
     * @memberof CatalogObject
     */
    measurement_unit_data?: CatalogMeasurementUnit;
    /**
     *
     * @type {CatalogSubscriptionPlan}
     * @memberof CatalogObject
     */
    subscription_plan_data?: CatalogSubscriptionPlan;
    /**
     *
     * @type {CatalogItemOption}
     * @memberof CatalogObject
     */
    item_option_data?: CatalogItemOption;
    /**
     *
     * @type {CatalogItemOptionValue}
     * @memberof CatalogObject
     */
    item_option_value_data?: CatalogItemOptionValue;
    /**
     *
     * @type {CatalogCustomAttributeDefinition}
     * @memberof CatalogObject
     */
    custom_attribute_definition_data?: CatalogCustomAttributeDefinition;
    /**
     *
     * @type {CatalogQuickAmountsSettings}
     * @memberof CatalogObject
     */
    quick_amounts_settings_data?: CatalogQuickAmountsSettings;
}
/**
 * A batch of catalog objects.
 * @export
 * @interface CatalogObjectBatch
 */
export interface CatalogObjectBatch {
    /**
     * A list of CatalogObjects belonging to this batch.
     * @type {Array<CatalogObject>}
     * @memberof CatalogObjectBatch
     */
    objects: Array<CatalogObject>;
}
/**
 * Possible types of CatalogObjects returned from the Catalog, each containing type-specific properties in the `*_data` field corresponding to the object type.
 * @export
 * @enum {string}
 */
export declare enum CatalogObjectType {
    ITEM = "ITEM",
    IMAGE = "IMAGE",
    CATEGORY = "CATEGORY",
    ITEMVARIATION = "ITEM_VARIATION",
    TAX = "TAX",
    DISCOUNT = "DISCOUNT",
    MODIFIERLIST = "MODIFIER_LIST",
    MODIFIER = "MODIFIER",
    PRICINGRULE = "PRICING_RULE",
    PRODUCTSET = "PRODUCT_SET",
    TIMEPERIOD = "TIME_PERIOD",
    MEASUREMENTUNIT = "MEASUREMENT_UNIT",
    SUBSCRIPTIONPLAN = "SUBSCRIPTION_PLAN",
    ITEMOPTION = "ITEM_OPTION",
    ITEMOPTIONVAL = "ITEM_OPTION_VAL",
    CUSTOMATTRIBUTEDEFINITION = "CUSTOM_ATTRIBUTE_DEFINITION",
    QUICKAMOUNTSSETTINGS = "QUICK_AMOUNTS_SETTINGS"
}
/**
 * Defines how discounts are automatically applied to a set of items that match the pricing rule during the active time period.
 * @export
 * @interface CatalogPricingRule
 */
export interface CatalogPricingRule {
    /**
     * User-defined name for the pricing rule. For example, \"Buy one get one free\" or \"10% off\".
     * @type {string}
     * @memberof CatalogPricingRule
     */
    name?: string;
    /**
     * A list of unique IDs for the catalog time periods when this pricing rule is in effect. If left unset, the pricing rule is always in effect.
     * @type {Array<string>}
     * @memberof CatalogPricingRule
     */
    time_period_ids?: Array<string>;
    /**
     * Unique ID for the `CatalogDiscount` to take off the price of all matched items.
     * @type {string}
     * @memberof CatalogPricingRule
     */
    discount_id?: string;
    /**
     * Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule matches within the entire cart, and can match multiple times. This field will always be set.
     * @type {string}
     * @memberof CatalogPricingRule
     */
    match_products_id?: string;
    /**
     * __Deprecated__: Please use the `exclude_products_id` field to apply an exclude set instead. Exclude sets allow better control over quantity ranges and offer more flexibility for which matched items receive a discount.  `CatalogProductSet` to apply the pricing to. An apply rule matches within the subset of the cart that fits the match rules (the match set). An apply rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.
     * @type {string}
     * @memberof CatalogPricingRule
     */
    apply_products_id?: string;
    /**
     * `CatalogProductSet` to exclude from the pricing rule. An exclude rule matches within the subset of the cart that fits the match rules (the match set). An exclude rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.
     * @type {string}
     * @memberof CatalogPricingRule
     */
    exclude_products_id?: string;
    /**
     * Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD).
     * @type {string}
     * @memberof CatalogPricingRule
     */
    valid_from_date?: string;
    /**
     * Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.
     * @type {string}
     * @memberof CatalogPricingRule
     */
    valid_from_local_time?: string;
    /**
     * Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD).
     * @type {string}
     * @memberof CatalogPricingRule
     */
    valid_until_date?: string;
    /**
     * Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.
     * @type {string}
     * @memberof CatalogPricingRule
     */
    valid_until_local_time?: string;
    /**
     * If an `exclude_products_id` was given, controls which subset of matched products is excluded from any discounts.  Default value: `LEAST_EXPENSIVE` See [ExcludeStrategy](#type-excludestrategy) for possible values
     * @type {string}
     * @memberof CatalogPricingRule
     */
    exclude_strategy?: string;
}
/**
 * Indicates whether the price of a CatalogItemVariation should be entered manually at the time of sale.
 * @export
 * @enum {string}
 */
export declare enum CatalogPricingType {
    FIXEDPRICING = "FIXED_PRICING",
    VARIABLEPRICING = "VARIABLE_PRICING"
}
/**
 * Represents a collection of catalog objects for the purpose of applying a `PricingRule`. Including a catalog object will include all of its subtypes. For example, including a category in a product set will include all of its items and associated item variations in the product set. Including an item in a product set will also include its item variations.
 * @export
 * @interface CatalogProductSet
 */
export interface CatalogProductSet {
    /**
     * User-defined name for the product set. For example, \"Clearance Items\" or \"Winter Sale Items\".
     * @type {string}
     * @memberof CatalogProductSet
     */
    name?: string;
    /**
     *  Unique IDs for any `CatalogObject` included in this product set. Any number of these catalog objects can be in an order for a pricing rule to apply.  This can be used with `product_ids_all` in a parent `CatalogProductSet` to match groups of products for a bulk discount, such as a discount for an entree and side combo.  Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.  Max: 500 catalog object IDs.
     * @type {Array<string>}
     * @memberof CatalogProductSet
     */
    product_ids_any?: Array<string>;
    /**
     * Unique IDs for any `CatalogObject` included in this product set. All objects in this set must be included in an order for a pricing rule to apply.  Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.  Max: 500 catalog object IDs.
     * @type {Array<string>}
     * @memberof CatalogProductSet
     */
    product_ids_all?: Array<string>;
    /**
     * If set, there must be exactly this many items from `products_any` or `products_all` in the cart for the discount to apply.  Cannot be combined with either `quantity_min` or `quantity_max`.
     * @type {number}
     * @memberof CatalogProductSet
     */
    quantity_exact?: number;
    /**
     * If set, there must be at least this many items from `products_any` or `products_all` in a cart for the discount to apply. See `quantity_exact`. Defaults to 0 if `quantity_exact`, `quantity_min` and `quantity_max` are all unspecified.
     * @type {number}
     * @memberof CatalogProductSet
     */
    quantity_min?: number;
    /**
     * If set, the pricing rule will apply to a maximum of this many items from `products_any` or `products_all`.
     * @type {number}
     * @memberof CatalogProductSet
     */
    quantity_max?: number;
    /**
     * If set to `true`, the product set will include every item in the catalog.  Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
     * @type {boolean}
     * @memberof CatalogProductSet
     */
    all_products?: boolean;
}
/**
 * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.  Although a query can have multiple filters, only one query is allowed per call to [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects).  When a query filter is based on an attribute, the attribute must be searchable. Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.  * Searchable attribute and objects queryable by searchable attributes ** - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatelogCatogry`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, \'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue` - `description`: `CatalogItem`, `CatalogItemOptionValue` - `abbreviation`: `CatalogItem` - `upc`: `CatalogItemVariation` - `sku`: `CatalogItemVariation` - `caption`: `CatalogImage` - `display_name`: `CatalogItemOption`  For example, to search for [CatalogItem](#type-CatalogItem) objects by searchable attributes, you can use the `\"name\"`, `\"description\"`, or `\"abbreviation\"` attribute in an applicable query filter.
 * @export
 * @interface CatalogQuery
 */
export interface CatalogQuery {
    /**
     *
     * @type {CatalogQuerySortedAttribute}
     * @memberof CatalogQuery
     */
    sorted_attribute_query?: CatalogQuerySortedAttribute;
    /**
     *
     * @type {CatalogQueryExact}
     * @memberof CatalogQuery
     */
    exact_query?: CatalogQueryExact;
    /**
     *
     * @type {CatalogQuerySet}
     * @memberof CatalogQuery
     */
    set_query?: CatalogQuerySet;
    /**
     *
     * @type {CatalogQueryPrefix}
     * @memberof CatalogQuery
     */
    prefix_query?: CatalogQueryPrefix;
    /**
     *
     * @type {CatalogQueryRange}
     * @memberof CatalogQuery
     */
    range_query?: CatalogQueryRange;
    /**
     *
     * @type {CatalogQueryText}
     * @memberof CatalogQuery
     */
    text_query?: CatalogQueryText;
    /**
     *
     * @type {CatalogQueryItemsForTax}
     * @memberof CatalogQuery
     */
    items_for_tax_query?: CatalogQueryItemsForTax;
    /**
     *
     * @type {CatalogQueryItemsForModifierList}
     * @memberof CatalogQuery
     */
    items_for_modifier_list_query?: CatalogQueryItemsForModifierList;
    /**
     *
     * @type {CatalogQueryItemsForItemOptions}
     * @memberof CatalogQuery
     */
    items_for_item_options_query?: CatalogQueryItemsForItemOptions;
    /**
     *
     * @type {CatalogQueryItemVariationsForItemOptionValues}
     * @memberof CatalogQuery
     */
    item_variations_for_item_option_values_query?: CatalogQueryItemVariationsForItemOptionValues;
}
/**
 * The query filter to return the search result by exact match of the specified attribute name and value.
 * @export
 * @interface CatalogQueryExact
 */
export interface CatalogQueryExact {
    /**
     * The name of the attribute to be searched. Matching of the attribute name is exact.
     * @type {string}
     * @memberof CatalogQueryExact
     */
    attribute_name: string;
    /**
     * The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial. For example, if a specified value of \"sma\", objects with the named attribute value of \"Small\", \"small\" are both matched.
     * @type {string}
     * @memberof CatalogQueryExact
     */
    attribute_value: string;
}
/**
 * The query filter to return the item variations containing the specified item option value IDs.
 * @export
 * @interface CatalogQueryItemVariationsForItemOptionValues
 */
export interface CatalogQueryItemVariationsForItemOptionValues {
    /**
     * A set of `CatalogItemOptionValue` IDs to be used to find associated `CatalogItemVariation`s. All ItemVariations that contain all of the given Item Option Values (in any order) will be returned.
     * @type {Array<string>}
     * @memberof CatalogQueryItemVariationsForItemOptionValues
     */
    item_option_value_ids?: Array<string>;
}
/**
 * The query filter to return the items containing the specified item option IDs.
 * @export
 * @interface CatalogQueryItemsForItemOptions
 */
export interface CatalogQueryItemsForItemOptions {
    /**
     * A set of `CatalogItemOption` IDs to be used to find associated `CatalogItem`s. All Items that contain all of the given Item Options (in any order) will be returned.
     * @type {Array<string>}
     * @memberof CatalogQueryItemsForItemOptions
     */
    item_option_ids?: Array<string>;
}
/**
 * The query filter to return the items containing the specified modifier list IDs.
 * @export
 * @interface CatalogQueryItemsForModifierList
 */
export interface CatalogQueryItemsForModifierList {
    /**
     * A set of `CatalogModifierList` IDs to be used to find associated `CatalogItem`s.
     * @type {Array<string>}
     * @memberof CatalogQueryItemsForModifierList
     */
    modifier_list_ids: Array<string>;
}
/**
 * The query filter to return the items containing the specified tax IDs.
 * @export
 * @interface CatalogQueryItemsForTax
 */
export interface CatalogQueryItemsForTax {
    /**
     * A set of `CatalogTax` IDs to be used to find associated `CatalogItem`s.
     * @type {Array<string>}
     * @memberof CatalogQueryItemsForTax
     */
    tax_ids: Array<string>;
}
/**
 * The query filter to return the search result whose named attribute values are prefixed by the specified attribute value.
 * @export
 * @interface CatalogQueryPrefix
 */
export interface CatalogQueryPrefix {
    /**
     * The name of the attribute to be searched.
     * @type {string}
     * @memberof CatalogQueryPrefix
     */
    attribute_name: string;
    /**
     * The desired prefix of the search attribute value.
     * @type {string}
     * @memberof CatalogQueryPrefix
     */
    attribute_prefix: string;
}
/**
 * The query filter to return the search result whose named attribute values fall between the specified range.
 * @export
 * @interface CatalogQueryRange
 */
export interface CatalogQueryRange {
    /**
     * The name of the attribute to be searched.
     * @type {string}
     * @memberof CatalogQueryRange
     */
    attribute_name: string;
    /**
     * The desired minimum value for the search attribute (inclusive).
     * @type {number}
     * @memberof CatalogQueryRange
     */
    attribute_min_value?: number;
    /**
     * The desired maximum value for the search attribute (inclusive).
     * @type {number}
     * @memberof CatalogQueryRange
     */
    attribute_max_value?: number;
}
/**
 * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of the `attribute_values`.
 * @export
 * @interface CatalogQuerySet
 */
export interface CatalogQuerySet {
    /**
     * The name of the attribute to be searched. Matching of the attribute name is exact.
     * @type {string}
     * @memberof CatalogQuerySet
     */
    attribute_name: string;
    /**
     * The desired values of the search attribute. Matching of the attribute values is exact and case insensitive. A maximum of 250 values may be searched in a request.
     * @type {Array<string>}
     * @memberof CatalogQuerySet
     */
    attribute_values: Array<string>;
}
/**
 * The query expression to specify the key to sort search results.
 * @export
 * @interface CatalogQuerySortedAttribute
 */
export interface CatalogQuerySortedAttribute {
    /**
     * The attribute whose value is used as the sort key.
     * @type {string}
     * @memberof CatalogQuerySortedAttribute
     */
    attribute_name: string;
    /**
     * The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
     * @type {string}
     * @memberof CatalogQuerySortedAttribute
     */
    initial_attribute_value?: string;
    /**
     * The desired sort order, `\"ASC\"` (ascending) or `\"DESC\"` (descending). See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof CatalogQuerySortedAttribute
     */
    sort_order?: string;
}
/**
 * The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case.
 * @export
 * @interface CatalogQueryText
 */
export interface CatalogQueryText {
    /**
     * A list of 1, 2, or 3 search keywords. Keywords with fewer than 3 characters are ignored.
     * @type {Array<string>}
     * @memberof CatalogQueryText
     */
    keywords: Array<string>;
}
/**
 * Represents a Quick Amount in the Catalog.
 * @export
 * @interface CatalogQuickAmount
 */
export interface CatalogQuickAmount {
    /**
     * Represents the type of the Quick Amount. See [CatalogQuickAmountType](#type-catalogquickamounttype) for possible values
     * @type {string}
     * @memberof CatalogQuickAmount
     */
    type: string;
    /**
     *
     * @type {Money}
     * @memberof CatalogQuickAmount
     */
    amount: Money;
    /**
     * Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100]. MANUAL type amount will always have score = 100.
     * @type {number}
     * @memberof CatalogQuickAmount
     */
    score?: number;
    /**
     * The order in which this Quick Amount should be displayed.
     * @type {number}
     * @memberof CatalogQuickAmount
     */
    ordinal?: number;
}
/**
 * Determines the type of a specific Quick Amount.
 * @export
 * @enum {string}
 */
export declare enum CatalogQuickAmountType {
    MANUAL = "QUICK_AMOUNT_TYPE_MANUAL",
    AUTO = "QUICK_AMOUNT_TYPE_AUTO"
}
/**
 * A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts.
 * @export
 * @interface CatalogQuickAmountsSettings
 */
export interface CatalogQuickAmountsSettings {
    /**
     * Represents the option seller currently uses on Quick Amounts. See [CatalogQuickAmountsSettingsOption](#type-catalogquickamountssettingsoption) for possible values
     * @type {string}
     * @memberof CatalogQuickAmountsSettings
     */
    option: string;
    /**
     * Represents location\'s eligibility for auto amounts The boolean should be consistent with whether there are AUTO amounts in the `amounts`.
     * @type {boolean}
     * @memberof CatalogQuickAmountsSettings
     */
    eligible_for_auto_amounts?: boolean;
    /**
     * Represents a set of Quick Amounts at this location.
     * @type {Array<CatalogQuickAmount>}
     * @memberof CatalogQuickAmountsSettings
     */
    amounts?: Array<CatalogQuickAmount>;
}
/**
 * Determines a seller\'s option on Quick Amounts feature.
 * @export
 * @enum {string}
 */
export declare enum CatalogQuickAmountsSettingsOption {
    DISABLED = "DISABLED",
    MANUAL = "MANUAL",
    AUTO = "AUTO"
}
/**
 * Describes a subscription plan. For more information, see [Set Up and Manage a Subscription Plan](/docs/subscriptions-api/setup-plan).
 * @export
 * @interface CatalogSubscriptionPlan
 */
export interface CatalogSubscriptionPlan {
    /**
     * The name of the plan.
     * @type {string}
     * @memberof CatalogSubscriptionPlan
     */
    name?: string;
    /**
     * A list of SubscriptionPhase containing the `SubscriptionPhase` for this plan.
     * @type {Array<SubscriptionPhase>}
     * @memberof CatalogSubscriptionPlan
     */
    phases?: Array<SubscriptionPhase>;
}
/**
 * A tax applicable to an item.
 * @export
 * @interface CatalogTax
 */
export interface CatalogTax {
    /**
     * The tax\'s name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     * @type {string}
     * @memberof CatalogTax
     */
    name?: string;
    /**
     * Whether the tax is calculated based on a payment\'s subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for possible values
     * @type {string}
     * @memberof CatalogTax
     */
    calculation_phase?: string;
    /**
     * Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for possible values
     * @type {string}
     * @memberof CatalogTax
     */
    inclusion_type?: string;
    /**
     * The percentage of the tax in decimal form, using a `\'.\'` as the decimal separator and without a `\'%\'` sign. A value of `7.5` corresponds to 7.5%.
     * @type {string}
     * @memberof CatalogTax
     */
    percentage?: string;
    /**
     * If `true`, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular `CatalogItem`.
     * @type {boolean}
     * @memberof CatalogTax
     */
    applies_to_custom_amounts?: boolean;
    /**
     * A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`).
     * @type {boolean}
     * @memberof CatalogTax
     */
    enabled?: boolean;
}
/**
 * Represents a time period - either a single period or a repeating period.
 * @export
 * @interface CatalogTimePeriod
 */
export interface CatalogTimePeriod {
    /**
     * An iCalendar (RFC 5545) [event](https://tools.ietf.org/html/rfc5545#section-3.6.1), which specifies the name, timing, duration and recurrence of this time period.  Example:  ``` DTSTART:20190707T180000 DURATION:P2H RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR ```  Only `SUMMARY`, `DTSTART`, `DURATION` and `RRULE` fields are supported. `DTSTART` must be in local (unzoned) time format. Note that while `BEGIN:VEVENT` and `END:VEVENT` is not required in the request. The response will always include them.
     * @type {string}
     * @memberof CatalogTimePeriod
     */
    event?: string;
}
/**
 * A Square API V1 identifier of an item, including the object ID and its associated location ID.
 * @export
 * @interface CatalogV1Id
 */
export interface CatalogV1Id {
    /**
     * The ID for an object used in the Square API V1, if the object ID differs from the Square API V2 object ID.
     * @type {string}
     * @memberof CatalogV1Id
     */
    catalog_v1_id?: string;
    /**
     * The ID of the `Location` this Connect V1 ID is associated with.
     * @type {string}
     * @memberof CatalogV1Id
     */
    location_id?: string;
}
/**
 * Defines the parameters that can be included in the body of a request to the [Charge](#endpoint-charge) endpoint.  Deprecated - recommend using [CreatePayment](#endpoint-payments-createpayment)
 * @export
 * @interface ChargeRequest
 */
export interface ChargeRequest {
    /**
     * A value you specify that uniquely identifies this transaction among transactions you\'ve created.  If you\'re unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](#idempotencykeys) for more information.
     * @type {string}
     * @memberof ChargeRequest
     */
    idempotency_key: string;
    /**
     *
     * @type {Money}
     * @memberof ChargeRequest
     */
    amount_money: Money;
    /**
     * A nonce generated from the `SqPaymentForm` that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the `SqPaymentForm`. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.
     * @type {string}
     * @memberof ChargeRequest
     */
    card_nonce?: string;
    /**
     * The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.
     * @type {string}
     * @memberof ChargeRequest
     */
    customer_card_id?: string;
    /**
     * If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the `CaptureTransaction` or a Void (with the `VoidTransaction`.  Default value: `false`
     * @type {boolean}
     * @memberof ChargeRequest
     */
    delay_capture?: boolean;
    /**
     * An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.
     * @type {string}
     * @memberof ChargeRequest
     */
    reference_id?: string;
    /**
     * An optional note to associate with the transaction.  This value cannot exceed 60 characters.
     * @type {string}
     * @memberof ChargeRequest
     */
    note?: string;
    /**
     * The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.
     * @type {string}
     * @memberof ChargeRequest
     */
    customer_id?: string;
    /**
     *
     * @type {Address}
     * @memberof ChargeRequest
     */
    billing_address?: Address;
    /**
     *
     * @type {Address}
     * @memberof ChargeRequest
     */
    shipping_address?: Address;
    /**
     * The buyer\'s email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.
     * @type {string}
     * @memberof ChargeRequest
     */
    buyer_email_address?: string;
    /**
     * The ID of the order to associate with this transaction.  If you provide this value, the `amount_money` value of your request must __exactly match__ the value of the order\'s `total_money` field.
     * @type {string}
     * @memberof ChargeRequest
     */
    order_id?: string;
    /**
     * The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `amount_money` value in the charge request. The `location_id` must be the valid location of the app owner merchant.  This field requires the `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox.
     * @type {Array<AdditionalRecipient>}
     * @memberof ChargeRequest
     */
    additional_recipients?: Array<AdditionalRecipient>;
    /**
     * A token generated by SqPaymentForm\'s verifyBuyer() that represents customer\'s device info and 3ds challenge result.
     * @type {string}
     * @memberof ChargeRequest
     */
    verification_token?: string;
}
/**
 * Represents an additional recipient (other than the merchant) entitled to a portion of the tender. Support is currently limited to USD, CAD and GBP currencies
 * @export
 * @interface ChargeRequestAdditionalRecipient
 */
export interface ChargeRequestAdditionalRecipient {
    /**
     * The location ID for a recipient (other than the merchant) receiving a portion of the tender.
     * @type {string}
     * @memberof ChargeRequestAdditionalRecipient
     */
    location_id: string;
    /**
     * The description of the additional recipient.
     * @type {string}
     * @memberof ChargeRequestAdditionalRecipient
     */
    description: string;
    /**
     *
     * @type {Money}
     * @memberof ChargeRequestAdditionalRecipient
     */
    amount_money: Money;
}
/**
 * Defines the fields that are included in the response body of a request to the [Charge](#endpoint-charge) endpoint.  One of `errors` or `transaction` is present in a given response (never both).
 * @export
 * @interface ChargeResponse
 */
export interface ChargeResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ChargeResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Transaction}
     * @memberof ChargeResponse
     */
    transaction?: Transaction;
}
/**
 * Square Checkout lets merchants accept online payments for supported payment types using a checkout workflow hosted on squareup.com.
 * @export
 * @interface Checkout
 */
export interface Checkout {
    /**
     * ID generated by Square Checkout when a new checkout is requested.
     * @type {string}
     * @memberof Checkout
     */
    id?: string;
    /**
     * The URL that the buyer\'s browser should be redirected to after the checkout is completed.
     * @type {string}
     * @memberof Checkout
     */
    checkout_page_url?: string;
    /**
     * If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.
     * @type {boolean}
     * @memberof Checkout
     */
    ask_for_shipping_address?: boolean;
    /**
     * The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant\'s Square account.  Default: none; only exists if explicitly set.
     * @type {string}
     * @memberof Checkout
     */
    merchant_support_email?: string;
    /**
     * If provided, the buyer\'s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
     * @type {string}
     * @memberof Checkout
     */
    pre_populate_buyer_email?: string;
    /**
     *
     * @type {Address}
     * @memberof Checkout
     */
    pre_populate_shipping_address?: Address;
    /**
     * The URL to redirect to after checkout is completed with `checkoutId`, Square\'s `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.
     * @type {string}
     * @memberof Checkout
     */
    redirect_url?: string;
    /**
     *
     * @type {Order}
     * @memberof Checkout
     */
    order?: Order;
    /**
     * The time when the checkout was created, in RFC 3339 format.
     * @type {string}
     * @memberof Checkout
     */
    created_at?: string;
    /**
     * Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.
     * @type {Array<AdditionalRecipient>}
     * @memberof Checkout
     */
    additional_recipients?: Array<AdditionalRecipient>;
}
/**
 * The return value from a [CompletePayment](#endpoint-payments-completepayment) call.
 * @export
 * @interface CompletePaymentResponse
 */
export interface CompletePaymentResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CompletePaymentResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Payment}
     * @memberof CompletePaymentResponse
     */
    payment?: Payment;
}
/**
 * Latitude and longitude coordinates.
 * @export
 * @interface Coordinates
 */
export interface Coordinates {
    /**
     * The latitude of the coordinate expressed in degrees.
     * @type {number}
     * @memberof Coordinates
     */
    latitude?: number;
    /**
     * The longitude of the coordinate expressed in degrees.
     * @type {number}
     * @memberof Coordinates
     */
    longitude?: number;
}
/**
 * Indicates the country associated with another entity, such as a business. Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
 * @export
 * @enum {string}
 */
export declare enum Country {
    ZZ = "ZZ",
    AD = "AD",
    AE = "AE",
    AF = "AF",
    AG = "AG",
    AI = "AI",
    AL = "AL",
    AM = "AM",
    AO = "AO",
    AQ = "AQ",
    AR = "AR",
    AS = "AS",
    AT = "AT",
    AU = "AU",
    AW = "AW",
    AX = "AX",
    AZ = "AZ",
    BA = "BA",
    BB = "BB",
    BD = "BD",
    BE = "BE",
    BF = "BF",
    BG = "BG",
    BH = "BH",
    BI = "BI",
    BJ = "BJ",
    BL = "BL",
    BM = "BM",
    BN = "BN",
    BO = "BO",
    BQ = "BQ",
    BR = "BR",
    BS = "BS",
    BT = "BT",
    BV = "BV",
    BW = "BW",
    BY = "BY",
    BZ = "BZ",
    CA = "CA",
    CC = "CC",
    CD = "CD",
    CF = "CF",
    CG = "CG",
    CH = "CH",
    CI = "CI",
    CK = "CK",
    CL = "CL",
    CM = "CM",
    CN = "CN",
    CO = "CO",
    CR = "CR",
    CU = "CU",
    CV = "CV",
    CW = "CW",
    CX = "CX",
    CY = "CY",
    CZ = "CZ",
    DE = "DE",
    DJ = "DJ",
    DK = "DK",
    DM = "DM",
    DO = "DO",
    DZ = "DZ",
    EC = "EC",
    EE = "EE",
    EG = "EG",
    EH = "EH",
    ER = "ER",
    ES = "ES",
    ET = "ET",
    FI = "FI",
    FJ = "FJ",
    FK = "FK",
    FM = "FM",
    FO = "FO",
    FR = "FR",
    GA = "GA",
    GB = "GB",
    GD = "GD",
    GE = "GE",
    GF = "GF",
    GG = "GG",
    GH = "GH",
    GI = "GI",
    GL = "GL",
    GM = "GM",
    GN = "GN",
    GP = "GP",
    GQ = "GQ",
    GR = "GR",
    GS = "GS",
    GT = "GT",
    GU = "GU",
    GW = "GW",
    GY = "GY",
    HK = "HK",
    HM = "HM",
    HN = "HN",
    HR = "HR",
    HT = "HT",
    HU = "HU",
    ID = "ID",
    IE = "IE",
    IL = "IL",
    IM = "IM",
    IN = "IN",
    IO = "IO",
    IQ = "IQ",
    IR = "IR",
    IS = "IS",
    IT = "IT",
    JE = "JE",
    JM = "JM",
    JO = "JO",
    JP = "JP",
    KE = "KE",
    KG = "KG",
    KH = "KH",
    KI = "KI",
    KM = "KM",
    KN = "KN",
    KP = "KP",
    KR = "KR",
    KW = "KW",
    KY = "KY",
    KZ = "KZ",
    LA = "LA",
    LB = "LB",
    LC = "LC",
    LI = "LI",
    LK = "LK",
    LR = "LR",
    LS = "LS",
    LT = "LT",
    LU = "LU",
    LV = "LV",
    LY = "LY",
    MA = "MA",
    MC = "MC",
    MD = "MD",
    ME = "ME",
    MF = "MF",
    MG = "MG",
    MH = "MH",
    MK = "MK",
    ML = "ML",
    MM = "MM",
    MN = "MN",
    MO = "MO",
    MP = "MP",
    MQ = "MQ",
    MR = "MR",
    MS = "MS",
    MT = "MT",
    MU = "MU",
    MV = "MV",
    MW = "MW",
    MX = "MX",
    MY = "MY",
    MZ = "MZ",
    NA = "NA",
    NC = "NC",
    NE = "NE",
    NF = "NF",
    NG = "NG",
    NI = "NI",
    NL = "NL",
    NO = "NO",
    NP = "NP",
    NR = "NR",
    NU = "NU",
    NZ = "NZ",
    OM = "OM",
    PA = "PA",
    PE = "PE",
    PF = "PF",
    PG = "PG",
    PH = "PH",
    PK = "PK",
    PL = "PL",
    PM = "PM",
    PN = "PN",
    PR = "PR",
    PS = "PS",
    PT = "PT",
    PW = "PW",
    PY = "PY",
    QA = "QA",
    RE = "RE",
    RO = "RO",
    RS = "RS",
    RU = "RU",
    RW = "RW",
    SA = "SA",
    SB = "SB",
    SC = "SC",
    SD = "SD",
    SE = "SE",
    SG = "SG",
    SH = "SH",
    SI = "SI",
    SJ = "SJ",
    SK = "SK",
    SL = "SL",
    SM = "SM",
    SN = "SN",
    SO = "SO",
    SR = "SR",
    SS = "SS",
    ST = "ST",
    SV = "SV",
    SX = "SX",
    SY = "SY",
    SZ = "SZ",
    TC = "TC",
    TD = "TD",
    TF = "TF",
    TG = "TG",
    TH = "TH",
    TJ = "TJ",
    TK = "TK",
    TL = "TL",
    TM = "TM",
    TN = "TN",
    TO = "TO",
    TR = "TR",
    TT = "TT",
    TV = "TV",
    TW = "TW",
    TZ = "TZ",
    UA = "UA",
    UG = "UG",
    UM = "UM",
    US = "US",
    UY = "UY",
    UZ = "UZ",
    VA = "VA",
    VC = "VC",
    VE = "VE",
    VG = "VG",
    VI = "VI",
    VN = "VN",
    VU = "VU",
    WF = "WF",
    WS = "WS",
    YE = "YE",
    YT = "YT",
    ZA = "ZA",
    ZM = "ZM",
    ZW = "ZW"
}
/**
 * A request to create a new `BreakType`
 * @export
 * @interface CreateBreakTypeRequest
 */
export interface CreateBreakTypeRequest {
    /**
     * Unique string value to insure idempotency of the operation
     * @type {string}
     * @memberof CreateBreakTypeRequest
     */
    idempotency_key?: string;
    /**
     *
     * @type {BreakType}
     * @memberof CreateBreakTypeRequest
     */
    break_type: BreakType;
}
/**
 * The response to the request to create a `BreakType`. Contains the created `BreakType` object. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface CreateBreakTypeResponse
 */
export interface CreateBreakTypeResponse {
    /**
     *
     * @type {BreakType}
     * @memberof CreateBreakTypeResponse
     */
    break_type?: BreakType;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateBreakTypeResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface CreateCatalogImageRequest
 */
export interface CreateCatalogImageRequest {
    /**
     * A unique string that identifies this CreateCatalogImage request. Keys can be any valid string but must be unique for every CreateCatalogImage request.  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
     * @type {string}
     * @memberof CreateCatalogImageRequest
     */
    idempotency_key: string;
    /**
     * Unique ID of the `CatalogObject` to attach to this `CatalogImage`. Leave this field empty to create unattached images, for example if you are building an integration where these images can be attached to catalog items at a later time.
     * @type {string}
     * @memberof CreateCatalogImageRequest
     */
    object_id?: string;
    /**
     *
     * @type {CatalogObject}
     * @memberof CreateCatalogImageRequest
     */
    image?: CatalogObject;
}
/**
 *
 * @export
 * @interface CreateCatalogImageResponse
 */
export interface CreateCatalogImageResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateCatalogImageResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {CatalogObject}
     * @memberof CreateCatalogImageResponse
     */
    image?: CatalogObject;
}
/**
 * Defines the parameters that can be included in the body of a request to the __CreateCheckout__ endpoint.
 * @export
 * @interface CreateCheckoutRequest
 */
export interface CreateCheckoutRequest {
    /**
     * A unique string that identifies this checkout among others you\'ve created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you\'re unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See the [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency) guide for more information.
     * @type {string}
     * @memberof CreateCheckoutRequest
     */
    idempotency_key: string;
    /**
     *
     * @type {CreateOrderRequest}
     * @memberof CreateCheckoutRequest
     */
    order: CreateOrderRequest;
    /**
     * If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.
     * @type {boolean}
     * @memberof CreateCheckoutRequest
     */
    ask_for_shipping_address?: boolean;
    /**
     * The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant\'s Square account.  Default: none; only exists if explicitly set.
     * @type {string}
     * @memberof CreateCheckoutRequest
     */
    merchant_support_email?: string;
    /**
     * If provided, the buyer\'s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
     * @type {string}
     * @memberof CreateCheckoutRequest
     */
    pre_populate_buyer_email?: string;
    /**
     *
     * @type {Address}
     * @memberof CreateCheckoutRequest
     */
    pre_populate_shipping_address?: Address;
    /**
     * The URL to redirect to after checkout is completed with `checkoutId`, Square\'s `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.
     * @type {string}
     * @memberof CreateCheckoutRequest
     */
    redirect_url?: string;
    /**
     * The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `total_money` calculated by Square for your order. The `location_id` must be the valid location of the app owner merchant.  This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox.
     * @type {Array<ChargeRequestAdditionalRecipient>}
     * @memberof CreateCheckoutRequest
     */
    additional_recipients?: Array<ChargeRequestAdditionalRecipient>;
    /**
     * An optional note to associate with the checkout object.  This value cannot exceed 60 characters.
     * @type {string}
     * @memberof CreateCheckoutRequest
     */
    note?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the __CreateCheckout__ endpoint.
 * @export
 * @interface CreateCheckoutResponse
 */
export interface CreateCheckoutResponse {
    /**
     *
     * @type {Checkout}
     * @memberof CreateCheckoutResponse
     */
    checkout?: Checkout;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateCheckoutResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines the fields that are included in the request body of a request to the CreateCustomerCard endpoint.
 * @export
 * @interface CreateCustomerCardRequest
 */
export interface CreateCustomerCardRequest {
    /**
     * A card nonce representing the credit card to link to the customer.  Card nonces are generated by the Square Payment Form when customers enter their card information. See [Embedding the payment form](https://developer.squareup.com/docs/payment-form/payment-form-walkthrough) for more information.  __NOTE:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card.
     * @type {string}
     * @memberof CreateCustomerCardRequest
     */
    card_nonce: string;
    /**
     *
     * @type {Address}
     * @memberof CreateCustomerCardRequest
     */
    billing_address?: Address;
    /**
     * The full name printed on the credit card.
     * @type {string}
     * @memberof CreateCustomerCardRequest
     */
    cardholder_name?: string;
    /**
     * An identifying token generated by `SqPaymentForm.verifyBuyer()`. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.
     * @type {string}
     * @memberof CreateCustomerCardRequest
     */
    verification_token?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the CreateCustomerCard endpoint.  One of `errors` or `card` is present in a given response (never both).
 * @export
 * @interface CreateCustomerCardResponse
 */
export interface CreateCustomerCardResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateCustomerCardResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Card}
     * @memberof CreateCustomerCardResponse
     */
    card?: Card;
}
/**
 * Defines the body parameters that can be provided in a request to the [CreateCustomerGroup](#endpoint-createcustomegroup) endpoint.
 * @export
 * @interface CreateCustomerGroupRequest
 */
export interface CreateCustomerGroupRequest {
    /**
     * The idempotency key for the request. See the [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) guide for more information.
     * @type {string}
     * @memberof CreateCustomerGroupRequest
     */
    idempotency_key?: string;
    /**
     *
     * @type {CustomerGroup}
     * @memberof CreateCustomerGroupRequest
     */
    group: CustomerGroup;
}
/**
 * Defines the fields that are included in the response body of a request to the [CreateCustomerGroup](#endpoint-createcustomergroup) endpoint.  One of `errors` or `group` is present in a given response (never both).
 * @export
 * @interface CreateCustomerGroupResponse
 */
export interface CreateCustomerGroupResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateCustomerGroupResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {CustomerGroup}
     * @memberof CreateCustomerGroupResponse
     */
    group?: CustomerGroup;
}
/**
 * Defines the body parameters that can be provided in a request to the CreateCustomer endpoint.
 * @export
 * @interface CreateCustomerRequest
 */
export interface CreateCustomerRequest {
    /**
     * The idempotency key for the request. See the [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency) guide for more information.
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    idempotency_key?: string;
    /**
     * The given (i.e., first) name associated with the customer profile.
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    given_name?: string;
    /**
     * The family (i.e., last) name associated with the customer profile.
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    family_name?: string;
    /**
     * A business name associated with the customer profile.
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    company_name?: string;
    /**
     * A nickname for the customer profile.
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    nickname?: string;
    /**
     * The email address associated with the customer profile.
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    email_address?: string;
    /**
     *
     * @type {Address}
     * @memberof CreateCustomerRequest
     */
    address?: Address;
    /**
     * The 11-digit phone number associated with the customer profile.
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    phone_number?: string;
    /**
     * An optional, second ID used to associate the customer profile with an entity in another system.
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    reference_id?: string;
    /**
     * A custom note associated with the customer profile.
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    note?: string;
    /**
     * The birthday associated with the customer profile, in RFC 3339 format. Year is optional, timezone and times are not allowed. For example: `0000-09-01T00:00:00-00:00` indicates a birthday on September 1st. `1998-09-01T00:00:00-00:00` indications a birthday on September 1st __1998__.
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    birthday?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the CreateCustomer endpoint.  One of `errors` or `customer` is present in a given response (never both).
 * @export
 * @interface CreateCustomerResponse
 */
export interface CreateCustomerResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateCustomerResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Customer}
     * @memberof CreateCustomerResponse
     */
    customer?: Customer;
}
/**
 *
 * @export
 * @interface CreateDeviceCodeRequest
 */
export interface CreateDeviceCodeRequest {
    /**
     * A unique string that identifies this CreateCheckout request. Keys can be any valid string but must be unique for every CreateCheckout request.  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
     * @type {string}
     * @memberof CreateDeviceCodeRequest
     */
    idempotency_key: string;
    /**
     *
     * @type {DeviceCode}
     * @memberof CreateDeviceCodeRequest
     */
    device_code: DeviceCode;
}
/**
 *
 * @export
 * @interface CreateDeviceCodeResponse
 */
export interface CreateDeviceCodeResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateDeviceCodeResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {DeviceCode}
     * @memberof CreateDeviceCodeResponse
     */
    device_code?: DeviceCode;
}
/**
 * Defines parameters for a CreateDisputeEvidenceFile request.
 * @export
 * @interface CreateDisputeEvidenceFileRequest
 */
export interface CreateDisputeEvidenceFileRequest {
    /**
     * Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/docs/working-with-apis/idempotency).
     * @type {string}
     * @memberof CreateDisputeEvidenceFileRequest
     */
    idempotency_key: string;
    /**
     * The type of evidence you are uploading. See [DisputeEvidenceType](#type-disputeevidencetype) for possible values
     * @type {string}
     * @memberof CreateDisputeEvidenceFileRequest
     */
    evidence_type?: string;
    /**
     * The MIME type of the uploaded file. One of image/heic, image/heif, image/jpeg, application/pdf,  image/png, image/tiff.
     * @type {string}
     * @memberof CreateDisputeEvidenceFileRequest
     */
    content_type?: string;
}
/**
 * Defines fields in a CreateDisputeEvidenceFile response.
 * @export
 * @interface CreateDisputeEvidenceFileResponse
 */
export interface CreateDisputeEvidenceFileResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateDisputeEvidenceFileResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {DisputeEvidence}
     * @memberof CreateDisputeEvidenceFileResponse
     */
    evidence?: DisputeEvidence;
}
/**
 * Defines parameters for a CreateDisputeEvidenceText request.
 * @export
 * @interface CreateDisputeEvidenceTextRequest
 */
export interface CreateDisputeEvidenceTextRequest {
    /**
     * Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/docs/working-with-apis/idempotency).
     * @type {string}
     * @memberof CreateDisputeEvidenceTextRequest
     */
    idempotency_key: string;
    /**
     * The type of evidence you are uploading. See [DisputeEvidenceType](#type-disputeevidencetype) for possible values
     * @type {string}
     * @memberof CreateDisputeEvidenceTextRequest
     */
    evidence_type?: string;
    /**
     * The evidence string.
     * @type {string}
     * @memberof CreateDisputeEvidenceTextRequest
     */
    evidence_text: string;
}
/**
 * Defines fields in a CreateDisputeEvidenceText response.
 * @export
 * @interface CreateDisputeEvidenceTextResponse
 */
export interface CreateDisputeEvidenceTextResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateDisputeEvidenceTextResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {DisputeEvidence}
     * @memberof CreateDisputeEvidenceTextResponse
     */
    evidence?: DisputeEvidence;
}
/**
 * Describes a `CreateInvoice` request.
 * @export
 * @interface CreateInvoiceRequest
 */
export interface CreateInvoiceRequest {
    /**
     *
     * @type {Invoice}
     * @memberof CreateInvoiceRequest
     */
    invoice: Invoice;
    /**
     * A unique string that identifies the `CreateInvoice` request. If you do not  provide `idempotency_key` (or provide an empty string as the value), the endpoint  treats each request as independent.  For more information, see [Idempotency](https://developer.squareup.com/docs/docs/working-with-apis/idempotency).
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    idempotency_key?: string;
}
/**
 * The response returned by the `CreateInvoice` request.
 * @export
 * @interface CreateInvoiceResponse
 */
export interface CreateInvoiceResponse {
    /**
     *
     * @type {Invoice}
     * @memberof CreateInvoiceResponse
     */
    invoice?: Invoice;
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CreateInvoiceResponse
     */
    errors?: Array<Error>;
}
/**
 * Request object for the [CreateLocation](#endpoint-createlocation) endpoint.
 * @export
 * @interface CreateLocationRequest
 */
export interface CreateLocationRequest {
    /**
     *
     * @type {Location}
     * @memberof CreateLocationRequest
     */
    location?: Location;
}
/**
 * Response object returned by the [CreateLocation](#endpoint-createlocation) endpoint.
 * @export
 * @interface CreateLocationResponse
 */
export interface CreateLocationResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CreateLocationResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Location}
     * @memberof CreateLocationResponse
     */
    location?: Location;
}
/**
 * A request to create a new loyalty account.
 * @export
 * @interface CreateLoyaltyAccountRequest
 */
export interface CreateLoyaltyAccountRequest {
    /**
     *
     * @type {LoyaltyAccount}
     * @memberof CreateLoyaltyAccountRequest
     */
    loyalty_account: LoyaltyAccount;
    /**
     * A unique string that identifies this `CreateLoyaltyAccount` request.  Keys can be any valid string, but must be unique for every request.
     * @type {string}
     * @memberof CreateLoyaltyAccountRequest
     */
    idempotency_key: string;
}
/**
 * A response that includes loyalty account created.
 * @export
 * @interface CreateLoyaltyAccountResponse
 */
export interface CreateLoyaltyAccountResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateLoyaltyAccountResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {LoyaltyAccount}
     * @memberof CreateLoyaltyAccountResponse
     */
    loyalty_account?: LoyaltyAccount;
}
/**
 * A request to create a loyalty reward.
 * @export
 * @interface CreateLoyaltyRewardRequest
 */
export interface CreateLoyaltyRewardRequest {
    /**
     *
     * @type {LoyaltyReward}
     * @memberof CreateLoyaltyRewardRequest
     */
    reward: LoyaltyReward;
    /**
     * A unique string that identifies this `CreateLoyaltyReward` request.  Keys can be any valid string, but must be unique for every request.
     * @type {string}
     * @memberof CreateLoyaltyRewardRequest
     */
    idempotency_key: string;
}
/**
 * A response that includes the loyalty reward created.
 * @export
 * @interface CreateLoyaltyRewardResponse
 */
export interface CreateLoyaltyRewardResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateLoyaltyRewardResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {LoyaltyReward}
     * @memberof CreateLoyaltyRewardResponse
     */
    reward?: LoyaltyReward;
}
/**
 * Defines the body parameters that can be provided in a request to the __CreateMobileAuthorizationCode__ endpoint.
 * @export
 * @interface CreateMobileAuthorizationCodeRequest
 */
export interface CreateMobileAuthorizationCodeRequest {
    /**
     * The Square location ID the authorization code should be tied to.
     * @type {string}
     * @memberof CreateMobileAuthorizationCodeRequest
     */
    location_id?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the __CreateMobileAuthorizationCode__ endpoint.
 * @export
 * @interface CreateMobileAuthorizationCodeResponse
 */
export interface CreateMobileAuthorizationCodeResponse {
    /**
     * Generated authorization code that connects a mobile application instance to a Square account.
     * @type {string}
     * @memberof CreateMobileAuthorizationCodeResponse
     */
    authorization_code?: string;
    /**
     * The timestamp when `authorization_code` expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof CreateMobileAuthorizationCodeResponse
     */
    expires_at?: string;
    /**
     *
     * @type {Error}
     * @memberof CreateMobileAuthorizationCodeResponse
     */
    error?: Error;
}
/**
 *
 * @export
 * @interface CreateOrderRequest
 */
export interface CreateOrderRequest {
    /**
     *
     * @type {Order}
     * @memberof CreateOrderRequest
     */
    order?: Order;
    /**
     * The ID of the business location to associate the order with.
     * @type {string}
     * @memberof CreateOrderRequest
     */
    location_id?: string;
    /**
     * A value you specify that uniquely identifies this order among orders you\'ve created.  If you\'re unsure whether a particular order was created successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate orders.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
     * @type {string}
     * @memberof CreateOrderRequest
     */
    idempotency_key?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the CreateOrder endpoint.  One of `errors` or `order` is present in a given response (never both).
 * @export
 * @interface CreateOrderResponse
 */
export interface CreateOrderResponse {
    /**
     *
     * @type {Order}
     * @memberof CreateOrderResponse
     */
    order?: Order;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * Creates a payment from a provided source (such as a nonce or a card on file).  The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.  For more information, see [Payments and Refunds APIs Overview](/payments-api/overview).  For information about application fees in a payment, see [Take Payments and Collect Fees](/payments-api/take-payments-and-collect-fees).
 * @export
 * @interface CreatePaymentRequest
 */
export interface CreatePaymentRequest {
    /**
     * The ID for the source of funds for this payment. This can be a nonce generated by the Square payment form or a card on file made with the Customers API.
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    source_id: string;
    /**
     * A unique string that identifies this `CreatePayment` request. Keys can be any valid string but must be unique for every `CreatePayment` request.  Max: 45 characters  Note: The number of allowed characters might be less than the stated maximum, if multi-byte characters are used.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    idempotency_key: string;
    /**
     *
     * @type {Money}
     * @memberof CreatePaymentRequest
     */
    amount_money: Money;
    /**
     *
     * @type {Money}
     * @memberof CreatePaymentRequest
     */
    tip_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof CreatePaymentRequest
     */
    app_fee_money?: Money;
    /**
     * The duration of time after the payment\'s creation when Square automatically cancels the payment. This automatic cancellation applies only to payments that do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.  This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value of 1 minute.  Note: This feature is only supported for card payments. This parameter can only be set for a delayed capture payment (`autocomplete=false`).  Default:  - Card-present payments: \"PT36H\" (36 hours) from the creation time. - Card-not-present payments: \"P7D\" (7 days) from the creation time.
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    delay_duration?: string;
    /**
     * If set to `true`, this payment will be completed when possible. If set to `false`, this payment is held in an approved state until either explicitly completed (captured) or canceled (voided). For more information, see [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-payments).  Default: true
     * @type {boolean}
     * @memberof CreatePaymentRequest
     */
    autocomplete?: boolean;
    /**
     * Associates a previously created order with this payment.
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    order_id?: string;
    /**
     * The `Customer` ID of the customer associated with the payment.  This is required if the `source_id` refers to a card on file created using the Customers API.
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    customer_id?: string;
    /**
     * The location ID to associate with the payment. If not specified, the default location is used.
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    location_id?: string;
    /**
     * A user-defined ID to associate with the payment.  You can use this field to associate the payment to an entity in an external system  (for example, you might specify an order ID that is generated by a third-party shopping cart).  Limit 40 characters.
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    reference_id?: string;
    /**
     * An identifying token generated by `SqPaymentForm.verifyBuyer()`. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    verification_token?: string;
    /**
     * If set to `true` and charging a Square Gift Card, a payment might be returned with `amount_money` equal to less than what was requested. For example, a request for $20 when charging a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card payment. This field cannot be `true` when `autocomplete = true`.  For more information, see [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).  Default: false
     * @type {boolean}
     * @memberof CreatePaymentRequest
     */
    accept_partial_authorization?: boolean;
    /**
     * The buyer\'s email address.
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    buyer_email_address?: string;
    /**
     *
     * @type {Address}
     * @memberof CreatePaymentRequest
     */
    billing_address?: Address;
    /**
     *
     * @type {Address}
     * @memberof CreatePaymentRequest
     */
    shipping_address?: Address;
    /**
     * An optional note to be entered by the developer when creating a payment.  Limit 500 characters.
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    note?: string;
    /**
     * Optional additional payment information to include on the customer\'s card statement as part of the statement description. This can be, for example, an invoice number, ticket number, or short description that uniquely identifies the purchase.  Note that the `statement_description_identifier` might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the seller taking the payment.
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    statement_description_identifier?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the [CreatePayment](#endpoint-payments-createpayment) endpoint.  Note: If there are errors processing the request, the payment field might not be present, or it might be present with a status of `FAILED`.
 * @export
 * @interface CreatePaymentResponse
 */
export interface CreatePaymentResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CreatePaymentResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Payment}
     * @memberof CreatePaymentResponse
     */
    payment?: Payment;
}
/**
 * Defines the body parameters that can be included in a request to the [CreateRefund](#endpoint-createrefund) endpoint.  Deprecated - recommend using [RefundPayment](#endpoint-refunds-refundpayment)
 * @export
 * @interface CreateRefundRequest
 */
export interface CreateRefundRequest {
    /**
     * A value you specify that uniquely identifies this refund among refunds you\'ve created for the tender.  If you\'re unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](#idempotencykeys) for more information.
     * @type {string}
     * @memberof CreateRefundRequest
     */
    idempotency_key: string;
    /**
     * The ID of the tender to refund.  A ``Transaction`` has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.
     * @type {string}
     * @memberof CreateRefundRequest
     */
    tender_id: string;
    /**
     * A description of the reason for the refund.  Default value: `Refund via API`
     * @type {string}
     * @memberof CreateRefundRequest
     */
    reason?: string;
    /**
     *
     * @type {Money}
     * @memberof CreateRefundRequest
     */
    amount_money: Money;
}
/**
 * Defines the fields that are included in the response body of a request to the [CreateRefund](#endpoint-createrefund) endpoint.  One of `errors` or `refund` is present in a given response (never both).
 * @export
 * @interface CreateRefundResponse
 */
export interface CreateRefundResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateRefundResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Refund}
     * @memberof CreateRefundResponse
     */
    refund?: Refund;
}
/**
 * Represents a request to create a `Shift`
 * @export
 * @interface CreateShiftRequest
 */
export interface CreateShiftRequest {
    /**
     * Unique string value to insure the idempotency of the operation.
     * @type {string}
     * @memberof CreateShiftRequest
     */
    idempotency_key?: string;
    /**
     *
     * @type {Shift}
     * @memberof CreateShiftRequest
     */
    shift: Shift;
}
/**
 * The response to the request to create a `Shift`. Contains the created `Shift` object. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface CreateShiftResponse
 */
export interface CreateShiftResponse {
    /**
     *
     * @type {Shift}
     * @memberof CreateShiftResponse
     */
    shift?: Shift;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateShiftResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines parameters in a  [CreateSubscription](#endpoint-subscriptions-createsubscription) endpoint request.
 * @export
 * @interface CreateSubscriptionRequest
 */
export interface CreateSubscriptionRequest {
    /**
     * A unique string that identifies this `CreateSubscription` request. If you do not provide a unique string (or provide an empty string as the value), the endpoint treats each request as independent.  For more information, see [Idempotency keys](https://developer.squareup.com/docs/docs/working-with-apis/idempotency).
     * @type {string}
     * @memberof CreateSubscriptionRequest
     */
    idempotency_key: string;
    /**
     * The ID of the location the subscription is associated with.
     * @type {string}
     * @memberof CreateSubscriptionRequest
     */
    location_id: string;
    /**
     * The ID of the subscription plan. For more information, see  [Subscription Plan Overview](https://developer.squareup.com/docs/docs/subscriptions/overview).
     * @type {string}
     * @memberof CreateSubscriptionRequest
     */
    plan_id: string;
    /**
     * The ID of the `customer` profile.
     * @type {string}
     * @memberof CreateSubscriptionRequest
     */
    customer_id: string;
    /**
     * The start date of the subscription, in YYYY-MM-DD format. For example, 2013-01-15. If the start date is left empty, the subscription begins  immediately.
     * @type {string}
     * @memberof CreateSubscriptionRequest
     */
    start_date?: string;
    /**
     * The date when the subscription should be canceled, in  YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration  if it comes before the date the subscription would otherwise end.
     * @type {string}
     * @memberof CreateSubscriptionRequest
     */
    canceled_date?: string;
    /**
     * The tax to add when billing the subscription. The percentage is expressed in decimal form, using a `\'.\'` as the decimal separator and without a `\'%\'` sign. For example, a value of 7.5 corresponds to 7.5%.
     * @type {string}
     * @memberof CreateSubscriptionRequest
     */
    tax_percentage?: string;
    /**
     *
     * @type {Money}
     * @memberof CreateSubscriptionRequest
     */
    price_override_money?: Money;
    /**
     * The ID of the `customer](#type-customer) [card` to charge. If not specified, Square sends an invoice via email. For an example to create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/docs/subscriptions-api/walkthrough).
     * @type {string}
     * @memberof CreateSubscriptionRequest
     */
    card_id?: string;
    /**
     * The timezone that is used in date calculations for the subscription. If unset, defaults to the location timezone. If a timezone is not configured for the location, defaults to \"America/New_York\". Format: the IANA Timezone Database identifier for the location timezone. For a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
     * @type {string}
     * @memberof CreateSubscriptionRequest
     */
    timezone?: string;
}
/**
 * Defines the fields that are included in the response from the [CreateSubscription](#endpoint-subscriptions-createsubscription) endpoint.
 * @export
 * @interface CreateSubscriptionResponse
 */
export interface CreateSubscriptionResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CreateSubscriptionResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Subscription}
     * @memberof CreateSubscriptionResponse
     */
    subscription?: Subscription;
}
/**
 * Represents a create request for a `TeamMember` object.
 * @export
 * @interface CreateTeamMemberRequest
 */
export interface CreateTeamMemberRequest {
    /**
     * A unique string that identifies this CreateTeamMember request. Keys can be any valid string but must be unique for every request. See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information. <br> <b>Min Length 1    Max Length 45</b>
     * @type {string}
     * @memberof CreateTeamMemberRequest
     */
    idempotency_key?: string;
    /**
     *
     * @type {TeamMember}
     * @memberof CreateTeamMemberRequest
     */
    team_member?: TeamMember;
}
/**
 * Represents a response from a create request, containing the created `TeamMember` object or error messages.
 * @export
 * @interface CreateTeamMemberResponse
 */
export interface CreateTeamMemberResponse {
    /**
     *
     * @type {TeamMember}
     * @memberof CreateTeamMemberResponse
     */
    team_member?: TeamMember;
    /**
     * The errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof CreateTeamMemberResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface CreateTerminalCheckoutRequest
 */
export interface CreateTerminalCheckoutRequest {
    /**
     * A unique string that identifies this `CreateCheckout` request. Keys can be any valid string but must be unique for every `CreateCheckout` request.  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
     * @type {string}
     * @memberof CreateTerminalCheckoutRequest
     */
    idempotency_key: string;
    /**
     *
     * @type {TerminalCheckout}
     * @memberof CreateTerminalCheckoutRequest
     */
    checkout: TerminalCheckout;
}
/**
 *
 * @export
 * @interface CreateTerminalCheckoutResponse
 */
export interface CreateTerminalCheckoutResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CreateTerminalCheckoutResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {TerminalCheckout}
     * @memberof CreateTerminalCheckoutResponse
     */
    checkout?: TerminalCheckout;
}
/**
 *
 * @export
 * @interface CreateTerminalRefundRequest
 */
export interface CreateTerminalRefundRequest {
    /**
     * A unique string that identifies this `CreateRefund` request. Keys can be any valid string but must be unique for every `CreateRefund` request.  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
     * @type {string}
     * @memberof CreateTerminalRefundRequest
     */
    idempotency_key: string;
    /**
     *
     * @type {TerminalRefund}
     * @memberof CreateTerminalRefundRequest
     */
    refund?: TerminalRefund;
}
/**
 *
 * @export
 * @interface CreateTerminalRefundResponse
 */
export interface CreateTerminalRefundResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof CreateTerminalRefundResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {TerminalRefund}
     * @memberof CreateTerminalRefundResponse
     */
    refund?: TerminalRefund;
}
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
 * @export
 * @enum {string}
 */
export declare enum Currency {
    UNKNOWNCURRENCY = "UNKNOWN_CURRENCY",
    AED = "AED",
    AFN = "AFN",
    ALL = "ALL",
    AMD = "AMD",
    ANG = "ANG",
    AOA = "AOA",
    ARS = "ARS",
    AUD = "AUD",
    AWG = "AWG",
    AZN = "AZN",
    BAM = "BAM",
    BBD = "BBD",
    BDT = "BDT",
    BGN = "BGN",
    BHD = "BHD",
    BIF = "BIF",
    BMD = "BMD",
    BND = "BND",
    BOB = "BOB",
    BOV = "BOV",
    BRL = "BRL",
    BSD = "BSD",
    BTN = "BTN",
    BWP = "BWP",
    BYR = "BYR",
    BZD = "BZD",
    CAD = "CAD",
    CDF = "CDF",
    CHE = "CHE",
    CHF = "CHF",
    CHW = "CHW",
    CLF = "CLF",
    CLP = "CLP",
    CNY = "CNY",
    COP = "COP",
    COU = "COU",
    CRC = "CRC",
    CUC = "CUC",
    CUP = "CUP",
    CVE = "CVE",
    CZK = "CZK",
    DJF = "DJF",
    DKK = "DKK",
    DOP = "DOP",
    DZD = "DZD",
    EGP = "EGP",
    ERN = "ERN",
    ETB = "ETB",
    EUR = "EUR",
    FJD = "FJD",
    FKP = "FKP",
    GBP = "GBP",
    GEL = "GEL",
    GHS = "GHS",
    GIP = "GIP",
    GMD = "GMD",
    GNF = "GNF",
    GTQ = "GTQ",
    GYD = "GYD",
    HKD = "HKD",
    HNL = "HNL",
    HRK = "HRK",
    HTG = "HTG",
    HUF = "HUF",
    IDR = "IDR",
    ILS = "ILS",
    INR = "INR",
    IQD = "IQD",
    IRR = "IRR",
    ISK = "ISK",
    JMD = "JMD",
    JOD = "JOD",
    JPY = "JPY",
    KES = "KES",
    KGS = "KGS",
    KHR = "KHR",
    KMF = "KMF",
    KPW = "KPW",
    KRW = "KRW",
    KWD = "KWD",
    KYD = "KYD",
    KZT = "KZT",
    LAK = "LAK",
    LBP = "LBP",
    LKR = "LKR",
    LRD = "LRD",
    LSL = "LSL",
    LTL = "LTL",
    LVL = "LVL",
    LYD = "LYD",
    MAD = "MAD",
    MDL = "MDL",
    MGA = "MGA",
    MKD = "MKD",
    MMK = "MMK",
    MNT = "MNT",
    MOP = "MOP",
    MRO = "MRO",
    MUR = "MUR",
    MVR = "MVR",
    MWK = "MWK",
    MXN = "MXN",
    MXV = "MXV",
    MYR = "MYR",
    MZN = "MZN",
    NAD = "NAD",
    NGN = "NGN",
    NIO = "NIO",
    NOK = "NOK",
    NPR = "NPR",
    NZD = "NZD",
    OMR = "OMR",
    PAB = "PAB",
    PEN = "PEN",
    PGK = "PGK",
    PHP = "PHP",
    PKR = "PKR",
    PLN = "PLN",
    PYG = "PYG",
    QAR = "QAR",
    RON = "RON",
    RSD = "RSD",
    RUB = "RUB",
    RWF = "RWF",
    SAR = "SAR",
    SBD = "SBD",
    SCR = "SCR",
    SDG = "SDG",
    SEK = "SEK",
    SGD = "SGD",
    SHP = "SHP",
    SLL = "SLL",
    SOS = "SOS",
    SRD = "SRD",
    SSP = "SSP",
    STD = "STD",
    SVC = "SVC",
    SYP = "SYP",
    SZL = "SZL",
    THB = "THB",
    TJS = "TJS",
    TMT = "TMT",
    TND = "TND",
    TOP = "TOP",
    TRY = "TRY",
    TTD = "TTD",
    TWD = "TWD",
    TZS = "TZS",
    UAH = "UAH",
    UGX = "UGX",
    USD = "USD",
    USN = "USN",
    USS = "USS",
    UYI = "UYI",
    UYU = "UYU",
    UZS = "UZS",
    VEF = "VEF",
    VND = "VND",
    VUV = "VUV",
    WST = "WST",
    XAF = "XAF",
    XAG = "XAG",
    XAU = "XAU",
    XBA = "XBA",
    XBB = "XBB",
    XBC = "XBC",
    XBD = "XBD",
    XCD = "XCD",
    XDR = "XDR",
    XOF = "XOF",
    XPD = "XPD",
    XPF = "XPF",
    XPT = "XPT",
    XTS = "XTS",
    XXX = "XXX",
    YER = "YER",
    ZAR = "ZAR",
    ZMK = "ZMK",
    ZMW = "ZMW",
    BTC = "BTC"
}
/**
 * Supported custom attribute query expressions for calling the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint to search for items or item variations.
 * @export
 * @interface CustomAttributeFilter
 */
export interface CustomAttributeFilter {
    /**
     * A query expression to filter items or item variations by matching their custom attributes\' `custom_attribute_definition_id` property value against the the specified id.
     * @type {string}
     * @memberof CustomAttributeFilter
     */
    custom_attribute_definition_id?: string;
    /**
     * A query expression to filter items or item variations by matching their custom attributes\' `key` property value against the specified key.
     * @type {string}
     * @memberof CustomAttributeFilter
     */
    key?: string;
    /**
     * A query expression to filter items or item variations by matching their custom attributes\' `string_value`  property value against the specified text.
     * @type {string}
     * @memberof CustomAttributeFilter
     */
    string_filter?: string;
    /**
     *
     * @type {Range}
     * @memberof CustomAttributeFilter
     */
    number_filter?: Range;
    /**
     * A query expression to filter items or item variations by matching  their custom attributes\' `selection_uid_values` values against the specified selection uids.
     * @type {Array<string>}
     * @memberof CustomAttributeFilter
     */
    selection_uids_filter?: Array<string>;
    /**
     * A query expression to filter items or item variations by matching their custom attributes\' `boolean_value` property values against the specified Boolean expression.
     * @type {boolean}
     * @memberof CustomAttributeFilter
     */
    bool_filter?: boolean;
}
/**
 * Represents a Square customer profile, which can have one or more cards on file associated with it.
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * A unique Square-assigned ID for the customer profile.
     * @type {string}
     * @memberof Customer
     */
    id?: string;
    /**
     * The timestamp when the customer profile was created, in RFC 3339 format.
     * @type {string}
     * @memberof Customer
     */
    created_at?: string;
    /**
     * The timestamp when the customer profile was last updated, in RFC 3339 format.
     * @type {string}
     * @memberof Customer
     */
    updated_at?: string;
    /**
     * Payment details of cards stored on file for the customer profile.
     * @type {Array<Card>}
     * @memberof Customer
     */
    cards?: Array<Card>;
    /**
     * The given (i.e., first) name associated with the customer profile.
     * @type {string}
     * @memberof Customer
     */
    given_name?: string;
    /**
     * The family (i.e., last) name associated with the customer profile.
     * @type {string}
     * @memberof Customer
     */
    family_name?: string;
    /**
     * A nickname for the customer profile.
     * @type {string}
     * @memberof Customer
     */
    nickname?: string;
    /**
     * A business name associated with the customer profile.
     * @type {string}
     * @memberof Customer
     */
    company_name?: string;
    /**
     * The email address associated with the customer profile.
     * @type {string}
     * @memberof Customer
     */
    email_address?: string;
    /**
     *
     * @type {Address}
     * @memberof Customer
     */
    address?: Address;
    /**
     * The 11-digit phone number associated with the customer profile.
     * @type {string}
     * @memberof Customer
     */
    phone_number?: string;
    /**
     * The birthday associated with the customer profile, in RFC 3339 format. Year is optional, timezone and times are not allowed. For example: `0000-09-01T00:00:00-00:00` indicates a birthday on September 1st. `1998-09-01T00:00:00-00:00` indications a birthday on September 1st __1998__.
     * @type {string}
     * @memberof Customer
     */
    birthday?: string;
    /**
     * An optional, second ID used to associate the customer profile with an entity in another system.
     * @type {string}
     * @memberof Customer
     */
    reference_id?: string;
    /**
     * A custom note associated with the customer profile.
     * @type {string}
     * @memberof Customer
     */
    note?: string;
    /**
     *
     * @type {CustomerPreferences}
     * @memberof Customer
     */
    preferences?: CustomerPreferences;
    /**
     * The customer groups and segments the customer belongs to. This deprecated field has been replaced with  the dedicated `group_ids` for customer groups and the dedicated `segment_ids` field for customer segments. You can retrieve information about a given customer group and segment respectively using the Customer Groups API and Customer Segments API.
     * @type {Array<CustomerGroupInfo>}
     * @memberof Customer
     */
    groups?: Array<CustomerGroupInfo>;
    /**
     * A creation source represents the method used to create the customer profile. See [CustomerCreationSource](#type-customercreationsource) for possible values
     * @type {string}
     * @memberof Customer
     */
    creation_source?: string;
    /**
     * The IDs of customer groups the customer belongs to.
     * @type {Array<string>}
     * @memberof Customer
     */
    group_ids?: Array<string>;
    /**
     * The IDs of segments the customer belongs to.
     * @type {Array<string>}
     * @memberof Customer
     */
    segment_ids?: Array<string>;
}
/**
 * Indicates the method used to create the customer profile.
 * @export
 * @enum {string}
 */
export declare enum CustomerCreationSource {
    OTHER = "OTHER",
    APPOINTMENTS = "APPOINTMENTS",
    COUPON = "COUPON",
    DELETIONRECOVERY = "DELETION_RECOVERY",
    DIRECTORY = "DIRECTORY",
    EGIFTING = "EGIFTING",
    EMAILCOLLECTION = "EMAIL_COLLECTION",
    FEEDBACK = "FEEDBACK",
    IMPORT = "IMPORT",
    INVOICES = "INVOICES",
    LOYALTY = "LOYALTY",
    MARKETING = "MARKETING",
    MERGE = "MERGE",
    ONLINESTORE = "ONLINE_STORE",
    INSTANTPROFILE = "INSTANT_PROFILE",
    TERMINAL = "TERMINAL",
    THIRDPARTY = "THIRD_PARTY",
    THIRDPARTYIMPORT = "THIRD_PARTY_IMPORT",
    UNMERGERECOVERY = "UNMERGE_RECOVERY"
}
/**
 * Creation source filter.  If one or more creation sources are set, customer profiles are included in, or excluded from, the result if they match at least one of the filter criteria.
 * @export
 * @interface CustomerCreationSourceFilter
 */
export interface CustomerCreationSourceFilter {
    /**
     * The list of creation sources used as filtering criteria. See [CustomerCreationSource](#type-customercreationsource) for possible values
     * @type {Array<string>}
     * @memberof CustomerCreationSourceFilter
     */
    values?: Array<string>;
    /**
     * Indicates whether a customer profile matching the filter criteria should be included in the result or excluded from the result.  Default: `INCLUDE`. See [CustomerInclusionExclusion](#type-customerinclusionexclusion) for possible values
     * @type {string}
     * @memberof CustomerCreationSourceFilter
     */
    rule?: string;
}
/**
 * Represents a set of `CustomerQuery` filters used to limit the set of `Customers` returned by `SearchCustomers`.
 * @export
 * @interface CustomerFilter
 */
export interface CustomerFilter {
    /**
     *
     * @type {CustomerCreationSourceFilter}
     * @memberof CustomerFilter
     */
    creation_source?: CustomerCreationSourceFilter;
    /**
     *
     * @type {TimeRange}
     * @memberof CustomerFilter
     */
    created_at?: TimeRange;
    /**
     *
     * @type {TimeRange}
     * @memberof CustomerFilter
     */
    updated_at?: TimeRange;
    /**
     *
     * @type {CustomerTextFilter}
     * @memberof CustomerFilter
     */
    email_address?: CustomerTextFilter;
    /**
     *
     * @type {CustomerTextFilter}
     * @memberof CustomerFilter
     */
    phone_number?: CustomerTextFilter;
    /**
     *
     * @type {CustomerTextFilter}
     * @memberof CustomerFilter
     */
    reference_id?: CustomerTextFilter;
    /**
     *
     * @type {FilterValue}
     * @memberof CustomerFilter
     */
    group_ids?: FilterValue;
}
/**
 * Represents a group of customer profiles.   Customer groups can be created, modified, and have their membership defined either via  the Customers API or within Customer Directory in the Square Dashboard or Point of Sale.
 * @export
 * @interface CustomerGroup
 */
export interface CustomerGroup {
    /**
     * Unique Square-generated ID for the customer group.
     * @type {string}
     * @memberof CustomerGroup
     */
    id?: string;
    /**
     * Name of the customer group.
     * @type {string}
     * @memberof CustomerGroup
     */
    name: string;
    /**
     * The timestamp when the customer group was created, in RFC 3339 format.
     * @type {string}
     * @memberof CustomerGroup
     */
    created_at?: string;
    /**
     * The timesamp when the customer group was last updated, in RFC 3339 format.
     * @type {string}
     * @memberof CustomerGroup
     */
    updated_at?: string;
}
/**
 * Contains some brief information about a Customer Group with its identifier included.
 * @export
 * @interface CustomerGroupInfo
 */
export interface CustomerGroupInfo {
    /**
     * The ID of the Customer Group.
     * @type {string}
     * @memberof CustomerGroupInfo
     */
    id: string;
    /**
     * The name of the Customer Group.
     * @type {string}
     * @memberof CustomerGroupInfo
     */
    name: string;
}
/**
 * Indicates whether customers should be included in, or excluded from, the result set when they match the filtering criteria.
 * @export
 * @enum {string}
 */
export declare enum CustomerInclusionExclusion {
    INCLUDE = "INCLUDE",
    EXCLUDE = "EXCLUDE"
}
/**
 * Represents communication preferences for the customer profile.
 * @export
 * @interface CustomerPreferences
 */
export interface CustomerPreferences {
    /**
     * The customer has unsubscribed from receiving marketing campaign emails.
     * @type {boolean}
     * @memberof CustomerPreferences
     */
    email_unsubscribed?: boolean;
}
/**
 * Represents a query (including filtering criteria, sorting criteria, or both) used to search for customer profiles.
 * @export
 * @interface CustomerQuery
 */
export interface CustomerQuery {
    /**
     *
     * @type {CustomerFilter}
     * @memberof CustomerQuery
     */
    filter?: CustomerFilter;
    /**
     *
     * @type {CustomerSort}
     * @memberof CustomerQuery
     */
    sort?: CustomerSort;
}
/**
 * Represents a group of customer profiles that match one or more predefined filter criteria.   Segments (also known as Smart Groups) are defined and created within Customer Directory in the Square Dashboard or Point of Sale.
 * @export
 * @interface CustomerSegment
 */
export interface CustomerSegment {
    /**
     * Unique Square-generated ID for the segment.
     * @type {string}
     * @memberof CustomerSegment
     */
    id?: string;
    /**
     * Name of the segment.
     * @type {string}
     * @memberof CustomerSegment
     */
    name: string;
    /**
     * The timestamp when the segment was created, in RFC 3339 format.
     * @type {string}
     * @memberof CustomerSegment
     */
    created_at?: string;
    /**
     * The timestamp when the segment was last updated, in RFC 3339 format.
     * @type {string}
     * @memberof CustomerSegment
     */
    updated_at?: string;
}
/**
 * Specifies how searched customers profiles are sorted, including the sort key and sort order.
 * @export
 * @interface CustomerSort
 */
export interface CustomerSort {
    /**
     *  Use one or more customer attributes as the sort key to sort searched customer profiles.  For example, use creation date (`created_at`) of customers or default attributes as the sort key.   Default: `DEFAULT`. See [CustomerSortField](#type-customersortfield) for possible values
     * @type {string}
     * @memberof CustomerSort
     */
    field?: string;
    /**
     * Indicates the order in which results should be sorted based on the sort field value. Strings use standard alphabetic comparison to determine order. Strings representing numbers are sorted as strings.  Default: `ASC`. See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof CustomerSort
     */
    order?: string;
}
/**
 * Specifies customer attributes as the sort key to customer profiles returned from a search.
 * @export
 * @enum {string}
 */
export declare enum CustomerSortField {
    DEFAULT = "DEFAULT",
    CREATEDAT = "CREATED_AT"
}
/**
 * A filter to select customers based on exact or fuzzy matching of customer attributes against a specified query. Depending on customer attributes,  the filter can be case sensitive. This filter can be either exact or fuzzy. It cannot be both.
 * @export
 * @interface CustomerTextFilter
 */
export interface CustomerTextFilter {
    /**
     * Use the exact filter to select customers whose attributes match exactly the specified query.
     * @type {string}
     * @memberof CustomerTextFilter
     */
    exact?: string;
    /**
     * Use the fuzzy filter to select customers whose attributes match the specified query  in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then  each query token must be matched somewhere in the searched attribute. For single token queries,  this is effectively the same behavior as a partial match operation.
     * @type {string}
     * @memberof CustomerTextFilter
     */
    fuzzy?: string;
}
/**
 * A range defined by two dates. Used for filtering a query for Connect v2 objects that have date properties.
 * @export
 * @interface DateRange
 */
export interface DateRange {
    /**
     * String in `YYYY-MM-DD` format, e.g. `2017-10-31` per the ISO 8601 extended format for calendar dates. The beginning of a date range (inclusive)
     * @type {string}
     * @memberof DateRange
     */
    start_date?: string;
    /**
     * String in `YYYY-MM-DD` format, e.g. `2017-10-31` per the ISO 8601 extended format for calendar dates. The end of a date range (inclusive)
     * @type {string}
     * @memberof DateRange
     */
    end_date?: string;
}
/**
 * Indicates the specific day  of the week.
 * @export
 * @enum {string}
 */
export declare enum DayOfWeek {
    SUN = "SUN",
    MON = "MON",
    TUE = "TUE",
    WED = "WED",
    THU = "THU",
    FRI = "FRI",
    SAT = "SAT"
}
/**
 * The response to a request to delete a `BreakType`. May contain a set  of `Error` objects if the request resulted in errors.
 * @export
 * @interface DeleteBreakTypeResponse
 */
export interface DeleteBreakTypeResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof DeleteBreakTypeResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface DeleteCatalogObjectResponse
 */
export interface DeleteCatalogObjectResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof DeleteCatalogObjectResponse
     */
    errors?: Array<Error>;
    /**
     * The IDs of all catalog objects deleted by this request. Multiple IDs may be returned when associated objects are also deleted, for example a catalog item variation will be deleted (and its ID included in this field) when its parent catalog item is deleted.
     * @type {Array<string>}
     * @memberof DeleteCatalogObjectResponse
     */
    deleted_object_ids?: Array<string>;
    /**
     * The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this deletion in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
     * @type {string}
     * @memberof DeleteCatalogObjectResponse
     */
    deleted_at?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the DeleteCustomerCard endpoint.
 * @export
 * @interface DeleteCustomerCardResponse
 */
export interface DeleteCustomerCardResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof DeleteCustomerCardResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines the fields that are included in the response body of a request to the [DeleteCustomerGroup](#endpoint-deletecustomergroup) endpoint.
 * @export
 * @interface DeleteCustomerGroupResponse
 */
export interface DeleteCustomerGroupResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof DeleteCustomerGroupResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines the fields that are included in the response body of a request to the DeleteCustomer endpoint.
 * @export
 * @interface DeleteCustomerResponse
 */
export interface DeleteCustomerResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof DeleteCustomerResponse
     */
    errors?: Array<Error>;
}
/**
 * Describes a `DeleteInvoice` request.
 * @export
 * @interface DeleteInvoiceRequest
 */
export interface DeleteInvoiceRequest {
    /**
     * The version of the `invoice` to delete. If you do not know the version, you can call `GetInvoice` or  `ListInvoices`.
     * @type {number}
     * @memberof DeleteInvoiceRequest
     */
    version?: number;
}
/**
 * Describes a `DeleteInvoice` response.
 * @export
 * @interface DeleteInvoiceResponse
 */
export interface DeleteInvoiceResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof DeleteInvoiceResponse
     */
    errors?: Array<Error>;
}
/**
 * A response returned by the API call.
 * @export
 * @interface DeleteLoyaltyRewardResponse
 */
export interface DeleteLoyaltyRewardResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof DeleteLoyaltyRewardResponse
     */
    errors?: Array<Error>;
}
/**
 * The response to a request to delete a `Shift`. May contain a set of  `Error` objects if the request resulted in errors.
 * @export
 * @interface DeleteShiftResponse
 */
export interface DeleteShiftResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof DeleteShiftResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * The device\'s Square-issued ID.
     * @type {string}
     * @memberof Device
     */
    id?: string;
    /**
     * The device\'s merchant-specified name.
     * @type {string}
     * @memberof Device
     */
    name?: string;
}
/**
 *
 * @export
 * @interface DeviceCheckoutOptions
 */
export interface DeviceCheckoutOptions {
    /**
     * The unique ID of the device intended for this `TerminalCheckout`. A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint. Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.
     * @type {string}
     * @memberof DeviceCheckoutOptions
     */
    device_id: string;
    /**
     * Instruct the device to skip the receipt screen. Defaults to false.
     * @type {boolean}
     * @memberof DeviceCheckoutOptions
     */
    skip_receipt_screen?: boolean;
    /**
     *
     * @type {TipSettings}
     * @memberof DeviceCheckoutOptions
     */
    tip_settings?: TipSettings;
}
/**
 *
 * @export
 * @interface DeviceCode
 */
export interface DeviceCode {
    /**
     * The unique id for this device code.
     * @type {string}
     * @memberof DeviceCode
     */
    id?: string;
    /**
     * An optional user-defined name for the device code.
     * @type {string}
     * @memberof DeviceCode
     */
    name?: string;
    /**
     * The unique code that can be used to login.
     * @type {string}
     * @memberof DeviceCode
     */
    code?: string;
    /**
     * The unique id of the device that used this code. Populated when the device is paired up.
     * @type {string}
     * @memberof DeviceCode
     */
    device_id?: string;
    /**
     * The targeting product type of the device code. See [ProductType](#type-producttype) for possible values
     * @type {string}
     * @memberof DeviceCode
     */
    product_type: string;
    /**
     * The location assigned to this code.
     * @type {string}
     * @memberof DeviceCode
     */
    location_id?: string;
    /**
     * The pairing status of the device code. See [DeviceCodeStatus](#type-devicecodestatus) for possible values
     * @type {string}
     * @memberof DeviceCode
     */
    status?: string;
    /**
     * When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format.
     * @type {string}
     * @memberof DeviceCode
     */
    pair_by?: string;
    /**
     * When this DeviceCode was created. Timestamp in RFC 3339 format.
     * @type {string}
     * @memberof DeviceCode
     */
    created_at?: string;
    /**
     * When this DeviceCode\'s status was last changed. Timestamp in RFC 3339 format.
     * @type {string}
     * @memberof DeviceCode
     */
    status_changed_at?: string;
    /**
     * When this DeviceCode was paired. Timestamp in RFC 3339 format.
     * @type {string}
     * @memberof DeviceCode
     */
    paired_at?: string;
}
/**
 * DeviceCode.Status enum.
 * @export
 * @enum {string}
 */
export declare enum DeviceCodeStatus {
    UNKNOWN = "UNKNOWN",
    UNPAIRED = "UNPAIRED",
    PAIRED = "PAIRED",
    EXPIRED = "EXPIRED"
}
/**
 * Details about the device that took the payment.
 * @export
 * @interface DeviceDetails
 */
export interface DeviceDetails {
    /**
     * Square-issued ID of the device.
     * @type {string}
     * @memberof DeviceDetails
     */
    device_id?: string;
    /**
     * Square-issued installation ID for the device.
     * @type {string}
     * @memberof DeviceDetails
     */
    device_installation_id?: string;
    /**
     * The name of the device set by the merchant.
     * @type {string}
     * @memberof DeviceDetails
     */
    device_name?: string;
}
/**
 * Represents a dispute a cardholder initiated with their bank.
 * @export
 * @interface Dispute
 */
export interface Dispute {
    /**
     * Unique ID for this `Dispute`, generated by Square.
     * @type {string}
     * @memberof Dispute
     */
    dispute_id?: string;
    /**
     *
     * @type {Money}
     * @memberof Dispute
     */
    amount_money?: Money;
    /**
     * The dispute reason why cardholder initiated dispute with their bank. See [DisputeReason](#type-disputereason) for possible values
     * @type {string}
     * @memberof Dispute
     */
    reason?: string;
    /**
     * The current state of this dispute. See [DisputeState](#type-disputestate) for possible values
     * @type {string}
     * @memberof Dispute
     */
    state?: string;
    /**
     * The time when the next action is due, in RFC 3339 format.
     * @type {string}
     * @memberof Dispute
     */
    due_at?: string;
    /**
     *
     * @type {DisputedPayment}
     * @memberof Dispute
     */
    disputed_payment?: DisputedPayment;
    /**
     * The IDs of the evidence associated with the dispute.
     * @type {Array<string>}
     * @memberof Dispute
     */
    evidence_ids?: Array<string>;
    /**
     * The card brand used in the disputed payment. See [CardBrand](#type-cardbrand) for possible values
     * @type {string}
     * @memberof Dispute
     */
    card_brand?: string;
    /**
     * Timestamp when the dispute was created, in RFC 3339 format.
     * @type {string}
     * @memberof Dispute
     */
    created_at?: string;
    /**
     * Timestamp when dispute was last updated, in RFC 3339 format.
     * @type {string}
     * @memberof Dispute
     */
    updated_at?: string;
    /**
     * ID of the dispute in the card brand system, generated by the card brand.
     * @type {string}
     * @memberof Dispute
     */
    brand_dispute_id?: string;
    /**
     * Timestamp when the dispute was reported, in RFC 3339 format.
     * @type {string}
     * @memberof Dispute
     */
    reported_date?: string;
    /**
     * The current version of the `Dispute`.
     * @type {number}
     * @memberof Dispute
     */
    version?: number;
    /**
     * The ID of location where dispute originated.
     * @type {string}
     * @memberof Dispute
     */
    location_id?: string;
}
/**
 *
 * @export
 * @interface DisputeEvidence
 */
export interface DisputeEvidence {
    /**
     * The Square-generated ID of the evidence.
     * @type {string}
     * @memberof DisputeEvidence
     */
    evidence_id?: string;
    /**
     * The ID of the dispute the evidence is associated with.
     * @type {string}
     * @memberof DisputeEvidence
     */
    dispute_id?: string;
    /**
     * The time when the next action is due, in RFC 3339 format.
     * @type {string}
     * @memberof DisputeEvidence
     */
    uploaded_at?: string;
    /**
     * The type of the evidence. See [DisputeEvidenceType](#type-disputeevidencetype) for possible values
     * @type {string}
     * @memberof DisputeEvidence
     */
    evidence_type?: string;
}
/**
 * A file to be uploaded as dispute evidence.
 * @export
 * @interface DisputeEvidenceFile
 */
export interface DisputeEvidenceFile {
    /**
     * The file name including the file extension. For example: \"receipt.tiff\".
     * @type {string}
     * @memberof DisputeEvidenceFile
     */
    filename?: string;
    /**
     * Dispute evidence files must one of application/pdf, image/heic, image/heif, image/jpeg, image/png, image/tiff formats.
     * @type {string}
     * @memberof DisputeEvidenceFile
     */
    filetype?: string;
}
/**
 * Type of the dispute evidence.
 * @export
 * @enum {string}
 */
export declare enum DisputeEvidenceType {
    GENERICEVIDENCE = "GENERIC_EVIDENCE",
    ONLINEORAPPACCESSLOG = "ONLINE_OR_APP_ACCESS_LOG",
    AUTHORIZATIONDOCUMENTATION = "AUTHORIZATION_DOCUMENTATION",
    CANCELLATIONORREFUNDDOCUMENTATION = "CANCELLATION_OR_REFUND_DOCUMENTATION",
    CARDHOLDERCOMMUNICATION = "CARDHOLDER_COMMUNICATION",
    CARDHOLDERINFORMATION = "CARDHOLDER_INFORMATION",
    PURCHASEACKNOWLEDGEMENT = "PURCHASE_ACKNOWLEDGEMENT",
    DUPLICATECHARGEDOCUMENTATION = "DUPLICATE_CHARGE_DOCUMENTATION",
    PRODUCTORSERVICEDESCRIPTION = "PRODUCT_OR_SERVICE_DESCRIPTION",
    RECEIPT = "RECEIPT",
    SERVICERECEIVEDDOCUMENTATION = "SERVICE_RECEIVED_DOCUMENTATION",
    PROOFOFDELIVERYDOCUMENTATION = "PROOF_OF_DELIVERY_DOCUMENTATION",
    RELATEDTRANSACTIONDOCUMENTATION = "RELATED_TRANSACTION_DOCUMENTATION",
    REBUTTALEXPLANATION = "REBUTTAL_EXPLANATION",
    TRACKINGNUMBER = "TRACKING_NUMBER"
}
/**
 * List of possible reasons why a cardholder might initiate a dispute with their bank.
 * @export
 * @enum {string}
 */
export declare enum DisputeReason {
    AMOUNTDIFFERS = "AMOUNT_DIFFERS",
    CANCELLED = "CANCELLED",
    DUPLICATE = "DUPLICATE",
    NOKNOWLEDGE = "NO_KNOWLEDGE",
    NOTASDESCRIBED = "NOT_AS_DESCRIBED",
    NOTRECEIVED = "NOT_RECEIVED",
    PAIDBYOTHERMEANS = "PAID_BY_OTHER_MEANS",
    CUSTOMERREQUESTSCREDIT = "CUSTOMER_REQUESTS_CREDIT",
    EMVLIABILITYSHIFT = "EMV_LIABILITY_SHIFT"
}
/**
 * List of possible dispute states.
 * @export
 * @enum {string}
 */
export declare enum DisputeState {
    UNKNOWNSTATE = "UNKNOWN_STATE",
    INQUIRYEVIDENCEREQUIRED = "INQUIRY_EVIDENCE_REQUIRED",
    INQUIRYPROCESSING = "INQUIRY_PROCESSING",
    INQUIRYCLOSED = "INQUIRY_CLOSED",
    EVIDENCEREQUIRED = "EVIDENCE_REQUIRED",
    PROCESSING = "PROCESSING",
    WON = "WON",
    LOST = "LOST",
    ACCEPTED = "ACCEPTED",
    WAITINGTHIRDPARTY = "WAITING_THIRD_PARTY"
}
/**
 * The payment the cardholder disputed.
 * @export
 * @interface DisputedPayment
 */
export interface DisputedPayment {
    /**
     * Square-generated unique ID of the payment being disputed.
     * @type {string}
     * @memberof DisputedPayment
     */
    payment_id?: string;
}
/**
 * Determines item visibility in Ecom (Online Store) and Online Checkout.
 * @export
 * @enum {string}
 */
export declare enum EcomVisibility {
    UNINDEXED = "UNINDEXED",
    UNAVAILABLE = "UNAVAILABLE",
    HIDDEN = "HIDDEN",
    VISIBLE = "VISIBLE"
}
/**
 * An employee object that is used by the external API.
 * @export
 * @interface Employee
 */
export interface Employee {
    /**
     * UUID for this object.
     * @type {string}
     * @memberof Employee
     */
    id?: string;
    /**
     * The employee\'s first name.
     * @type {string}
     * @memberof Employee
     */
    first_name?: string;
    /**
     * The employee\'s last name.
     * @type {string}
     * @memberof Employee
     */
    last_name?: string;
    /**
     * The employee\'s email address
     * @type {string}
     * @memberof Employee
     */
    email?: string;
    /**
     * The employee\'s phone number in E.164 format, i.e. \"+12125554250\"
     * @type {string}
     * @memberof Employee
     */
    phone_number?: string;
    /**
     * A list of location IDs where this employee has access to.
     * @type {Array<string>}
     * @memberof Employee
     */
    location_ids?: Array<string>;
    /**
     * Specifies the status of the employees being fetched. See [EmployeeStatus](#type-employeestatus) for possible values
     * @type {string}
     * @memberof Employee
     */
    status?: string;
    /**
     * Whether this employee is the owner of the merchant. Each merchant has one owner employee, and that employee has full authority over the account.
     * @type {boolean}
     * @memberof Employee
     */
    is_owner?: boolean;
    /**
     * A read-only timestamp in RFC 3339 format.
     * @type {string}
     * @memberof Employee
     */
    created_at?: string;
    /**
     * A read-only timestamp in RFC 3339 format.
     * @type {string}
     * @memberof Employee
     */
    updated_at?: string;
}
/**
 * The status of the Employee being retrieved.
 * @export
 * @enum {string}
 */
export declare enum EmployeeStatus {
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
/**
 * The hourly wage rate that an employee will earn on a `Shift` for doing the job specified by the `title` property of this object. Deprecated at verison 2020-08-26. Use `TeamMemberWage` instead.
 * @export
 * @interface EmployeeWage
 */
export interface EmployeeWage {
    /**
     * UUID for this object.
     * @type {string}
     * @memberof EmployeeWage
     */
    id?: string;
    /**
     * The `Employee` that this wage is assigned to.
     * @type {string}
     * @memberof EmployeeWage
     */
    employee_id?: string;
    /**
     * The job title that this wage relates to.
     * @type {string}
     * @memberof EmployeeWage
     */
    title?: string;
    /**
     *
     * @type {Money}
     * @memberof EmployeeWage
     */
    hourly_rate?: Money;
}
/**
 * Indicates which high-level category of error has occurred during a request to the Connect API.
 * @export
 * @enum {string}
 */
export declare enum ErrorCategory {
    APIERROR = "API_ERROR",
    AUTHENTICATIONERROR = "AUTHENTICATION_ERROR",
    INVALIDREQUESTERROR = "INVALID_REQUEST_ERROR",
    RATELIMITERROR = "RATE_LIMIT_ERROR",
    PAYMENTMETHODERROR = "PAYMENT_METHOD_ERROR",
    REFUNDERROR = "REFUND_ERROR"
}
/**
 * Indicates the specific error that occurred during a request to a Square API.
 * @export
 * @enum {string}
 */
export declare enum ErrorCode {
    INTERNALSERVERERROR = "INTERNAL_SERVER_ERROR",
    UNAUTHORIZED = "UNAUTHORIZED",
    ACCESSTOKENEXPIRED = "ACCESS_TOKEN_EXPIRED",
    ACCESSTOKENREVOKED = "ACCESS_TOKEN_REVOKED",
    CLIENTDISABLED = "CLIENT_DISABLED",
    FORBIDDEN = "FORBIDDEN",
    INSUFFICIENTSCOPES = "INSUFFICIENT_SCOPES",
    APPLICATIONDISABLED = "APPLICATION_DISABLED",
    V1APPLICATION = "V1_APPLICATION",
    V1ACCESSTOKEN = "V1_ACCESS_TOKEN",
    CARDPROCESSINGNOTENABLED = "CARD_PROCESSING_NOT_ENABLED",
    BADREQUEST = "BAD_REQUEST",
    MISSINGREQUIREDPARAMETER = "MISSING_REQUIRED_PARAMETER",
    INCORRECTTYPE = "INCORRECT_TYPE",
    INVALIDTIME = "INVALID_TIME",
    INVALIDTIMERANGE = "INVALID_TIME_RANGE",
    INVALIDVALUE = "INVALID_VALUE",
    INVALIDCURSOR = "INVALID_CURSOR",
    UNKNOWNQUERYPARAMETER = "UNKNOWN_QUERY_PARAMETER",
    CONFLICTINGPARAMETERS = "CONFLICTING_PARAMETERS",
    EXPECTEDJSONBODY = "EXPECTED_JSON_BODY",
    INVALIDSORTORDER = "INVALID_SORT_ORDER",
    VALUEREGEXMISMATCH = "VALUE_REGEX_MISMATCH",
    VALUETOOSHORT = "VALUE_TOO_SHORT",
    VALUETOOLONG = "VALUE_TOO_LONG",
    VALUETOOLOW = "VALUE_TOO_LOW",
    VALUETOOHIGH = "VALUE_TOO_HIGH",
    VALUEEMPTY = "VALUE_EMPTY",
    ARRAYLENGTHTOOLONG = "ARRAY_LENGTH_TOO_LONG",
    ARRAYLENGTHTOOSHORT = "ARRAY_LENGTH_TOO_SHORT",
    ARRAYEMPTY = "ARRAY_EMPTY",
    EXPECTEDBOOLEAN = "EXPECTED_BOOLEAN",
    EXPECTEDINTEGER = "EXPECTED_INTEGER",
    EXPECTEDFLOAT = "EXPECTED_FLOAT",
    EXPECTEDSTRING = "EXPECTED_STRING",
    EXPECTEDOBJECT = "EXPECTED_OBJECT",
    EXPECTEDARRAY = "EXPECTED_ARRAY",
    EXPECTEDMAP = "EXPECTED_MAP",
    EXPECTEDBASE64ENCODEDBYTEARRAY = "EXPECTED_BASE64_ENCODED_BYTE_ARRAY",
    INVALIDARRAYVALUE = "INVALID_ARRAY_VALUE",
    INVALIDENUMVALUE = "INVALID_ENUM_VALUE",
    INVALIDCONTENTTYPE = "INVALID_CONTENT_TYPE",
    INVALIDFORMVALUE = "INVALID_FORM_VALUE",
    CUSTOMERNOTFOUND = "CUSTOMER_NOT_FOUND",
    ONEINSTRUMENTEXPECTED = "ONE_INSTRUMENT_EXPECTED",
    NOFIELDSSET = "NO_FIELDS_SET",
    TOOMANYMAPENTRIES = "TOO_MANY_MAP_ENTRIES",
    MAPKEYLENGTHTOOSHORT = "MAP_KEY_LENGTH_TOO_SHORT",
    MAPKEYLENGTHTOOLONG = "MAP_KEY_LENGTH_TOO_LONG",
    CARDEXPIRED = "CARD_EXPIRED",
    INVALIDEXPIRATION = "INVALID_EXPIRATION",
    INVALIDEXPIRATIONYEAR = "INVALID_EXPIRATION_YEAR",
    INVALIDEXPIRATIONDATE = "INVALID_EXPIRATION_DATE",
    UNSUPPORTEDCARDBRAND = "UNSUPPORTED_CARD_BRAND",
    UNSUPPORTEDENTRYMETHOD = "UNSUPPORTED_ENTRY_METHOD",
    INVALIDENCRYPTEDCARD = "INVALID_ENCRYPTED_CARD",
    INVALIDCARD = "INVALID_CARD",
    GENERICDECLINE = "GENERIC_DECLINE",
    CVVFAILURE = "CVV_FAILURE",
    ADDRESSVERIFICATIONFAILURE = "ADDRESS_VERIFICATION_FAILURE",
    INVALIDACCOUNT = "INVALID_ACCOUNT",
    CURRENCYMISMATCH = "CURRENCY_MISMATCH",
    INSUFFICIENTFUNDS = "INSUFFICIENT_FUNDS",
    INSUFFICIENTPERMISSIONS = "INSUFFICIENT_PERMISSIONS",
    CARDHOLDERINSUFFICIENTPERMISSIONS = "CARDHOLDER_INSUFFICIENT_PERMISSIONS",
    INVALIDLOCATION = "INVALID_LOCATION",
    TRANSACTIONLIMIT = "TRANSACTION_LIMIT",
    VOICEFAILURE = "VOICE_FAILURE",
    PANFAILURE = "PAN_FAILURE",
    EXPIRATIONFAILURE = "EXPIRATION_FAILURE",
    CARDNOTSUPPORTED = "CARD_NOT_SUPPORTED",
    INVALIDPIN = "INVALID_PIN",
    INVALIDPOSTALCODE = "INVALID_POSTAL_CODE",
    INVALIDFEES = "INVALID_FEES",
    MANUALLYENTEREDPAYMENTNOTSUPPORTED = "MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED",
    PAYMENTLIMITEXCEEDED = "PAYMENT_LIMIT_EXCEEDED",
    GIFTCARDAVAILABLEAMOUNT = "GIFT_CARD_AVAILABLE_AMOUNT",
    DELAYEDTRANSACTIONEXPIRED = "DELAYED_TRANSACTION_EXPIRED",
    DELAYEDTRANSACTIONCANCELED = "DELAYED_TRANSACTION_CANCELED",
    DELAYEDTRANSACTIONCAPTURED = "DELAYED_TRANSACTION_CAPTURED",
    DELAYEDTRANSACTIONFAILED = "DELAYED_TRANSACTION_FAILED",
    CARDTOKENEXPIRED = "CARD_TOKEN_EXPIRED",
    CARDTOKENUSED = "CARD_TOKEN_USED",
    AMOUNTTOOHIGH = "AMOUNT_TOO_HIGH",
    UNSUPPORTEDINSTRUMENTTYPE = "UNSUPPORTED_INSTRUMENT_TYPE",
    REFUNDAMOUNTINVALID = "REFUND_AMOUNT_INVALID",
    REFUNDALREADYPENDING = "REFUND_ALREADY_PENDING",
    PAYMENTNOTREFUNDABLE = "PAYMENT_NOT_REFUNDABLE",
    REFUNDDECLINED = "REFUND_DECLINED",
    INVALIDCARDDATA = "INVALID_CARD_DATA",
    SOURCEUSED = "SOURCE_USED",
    SOURCEEXPIRED = "SOURCE_EXPIRED",
    LOCATIONMISMATCH = "LOCATION_MISMATCH",
    IDEMPOTENCYKEYREUSED = "IDEMPOTENCY_KEY_REUSED",
    UNEXPECTEDVALUE = "UNEXPECTED_VALUE",
    SANDBOXNOTSUPPORTED = "SANDBOX_NOT_SUPPORTED",
    INVALIDEMAILADDRESS = "INVALID_EMAIL_ADDRESS",
    INVALIDPHONENUMBER = "INVALID_PHONE_NUMBER",
    CHECKOUTEXPIRED = "CHECKOUT_EXPIRED",
    BADCERTIFICATE = "BAD_CERTIFICATE",
    INVALIDSQUAREVERSIONFORMAT = "INVALID_SQUARE_VERSION_FORMAT",
    APIVERSIONINCOMPATIBLE = "API_VERSION_INCOMPATIBLE",
    CARDDECLINED = "CARD_DECLINED",
    VERIFYCVVFAILURE = "VERIFY_CVV_FAILURE",
    VERIFYAVSFAILURE = "VERIFY_AVS_FAILURE",
    CARDDECLINEDCALLISSUER = "CARD_DECLINED_CALL_ISSUER",
    CARDDECLINEDVERIFICATIONREQUIRED = "CARD_DECLINED_VERIFICATION_REQUIRED",
    BADEXPIRATION = "BAD_EXPIRATION",
    CHIPINSERTIONREQUIRED = "CHIP_INSERTION_REQUIRED",
    ALLOWABLEPINTRIESEXCEEDED = "ALLOWABLE_PIN_TRIES_EXCEEDED",
    RESERVATIONDECLINED = "RESERVATION_DECLINED",
    NOTFOUND = "NOT_FOUND",
    APPLEPAYMENTPROCESSINGCERTIFICATEHASHNOTFOUND = "APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND",
    METHODNOTALLOWED = "METHOD_NOT_ALLOWED",
    NOTACCEPTABLE = "NOT_ACCEPTABLE",
    REQUESTTIMEOUT = "REQUEST_TIMEOUT",
    CONFLICT = "CONFLICT",
    GONE = "GONE",
    REQUESTENTITYTOOLARGE = "REQUEST_ENTITY_TOO_LARGE",
    UNSUPPORTEDMEDIATYPE = "UNSUPPORTED_MEDIA_TYPE",
    UNPROCESSABLEENTITY = "UNPROCESSABLE_ENTITY",
    RATELIMITED = "RATE_LIMITED",
    NOTIMPLEMENTED = "NOT_IMPLEMENTED",
    BADGATEWAY = "BAD_GATEWAY",
    SERVICEUNAVAILABLE = "SERVICE_UNAVAILABLE",
    TEMPORARYERROR = "TEMPORARY_ERROR",
    GATEWAYTIMEOUT = "GATEWAY_TIMEOUT"
}
/**
 * Indicates which products matched by a CatalogPricingRule will be excluded if the pricing rule uses an exclude set.
 * @export
 * @enum {string}
 */
export declare enum ExcludeStrategy {
    LEASTEXPENSIVE = "LEAST_EXPENSIVE",
    MOSTEXPENSIVE = "MOST_EXPENSIVE"
}
/**
 * A filter to select resources based on an exact field value. For any given value, the value can only be in one property. Depending on the field, either all properties can be set or only a subset will be available.  Refer to the documentation of the field.
 * @export
 * @interface FilterValue
 */
export interface FilterValue {
    /**
     * A list of terms that must be present on the field of the resource.
     * @type {Array<string>}
     * @memberof FilterValue
     */
    all?: Array<string>;
    /**
     * A list of terms where at least one of them must be present on the field of the resource.
     * @type {Array<string>}
     * @memberof FilterValue
     */
    any?: Array<string>;
    /**
     * A list of terms that must not be present on the field the resource
     * @type {Array<string>}
     * @memberof FilterValue
     */
    none?: Array<string>;
}
/**
 * Response object returned by GetBankAccountByV1Id.
 * @export
 * @interface GetBankAccountByV1IdResponse
 */
export interface GetBankAccountByV1IdResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof GetBankAccountByV1IdResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {BankAccount}
     * @memberof GetBankAccountByV1IdResponse
     */
    bank_account?: BankAccount;
}
/**
 * Response object returned by `GetBankAccount`.
 * @export
 * @interface GetBankAccountResponse
 */
export interface GetBankAccountResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof GetBankAccountResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {BankAccount}
     * @memberof GetBankAccountResponse
     */
    bank_account?: BankAccount;
}
/**
 * The response to a request to get a `BreakType`. Contains the requested `BreakType` objects. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface GetBreakTypeResponse
 */
export interface GetBreakTypeResponse {
    /**
     *
     * @type {BreakType}
     * @memberof GetBreakTypeResponse
     */
    break_type?: BreakType;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof GetBreakTypeResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface GetDeviceCodeResponse
 */
export interface GetDeviceCodeResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof GetDeviceCodeResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {DeviceCode}
     * @memberof GetDeviceCodeResponse
     */
    device_code?: DeviceCode;
}
/**
 * A response to a request to get an `EmployeeWage`. Contains the requested `EmployeeWage` objects. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface GetEmployeeWageResponse
 */
export interface GetEmployeeWageResponse {
    /**
     *
     * @type {EmployeeWage}
     * @memberof GetEmployeeWageResponse
     */
    employee_wage?: EmployeeWage;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof GetEmployeeWageResponse
     */
    errors?: Array<Error>;
}
/**
 * Describes a `GetInvoice` response.
 * @export
 * @interface GetInvoiceResponse
 */
export interface GetInvoiceResponse {
    /**
     *
     * @type {Invoice}
     * @memberof GetInvoiceResponse
     */
    invoice?: Invoice;
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof GetInvoiceResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines the fields that are included in the response body of a request to the [GetRefund](#endpoint-refunds-getpaymentrefund) endpoint.  Note: if there are errors processing the request, the refund field may not be present, or it may be present in a FAILED state.
 * @export
 * @interface GetPaymentRefundResponse
 */
export interface GetPaymentRefundResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof GetPaymentRefundResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {PaymentRefund}
     * @memberof GetPaymentRefundResponse
     */
    refund?: PaymentRefund;
}
/**
 * Defines the fields that are included in the response body of a request to the [GetPayment](#endpoint-payments-getpayment) endpoint.
 * @export
 * @interface GetPaymentResponse
 */
export interface GetPaymentResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof GetPaymentResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Payment}
     * @memberof GetPaymentResponse
     */
    payment?: Payment;
}
/**
 * A response to request to get a `Shift`. Contains the requested `Shift` object. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface GetShiftResponse
 */
export interface GetShiftResponse {
    /**
     *
     * @type {Shift}
     * @memberof GetShiftResponse
     */
    shift?: Shift;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof GetShiftResponse
     */
    errors?: Array<Error>;
}
/**
 * A response to a request to get a `TeamMemberWage`. Contains the requested `TeamMemberWage` objects. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface GetTeamMemberWageResponse
 */
export interface GetTeamMemberWageResponse {
    /**
     *
     * @type {TeamMemberWage}
     * @memberof GetTeamMemberWageResponse
     */
    team_member_wage?: TeamMemberWage;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof GetTeamMemberWageResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface GetTerminalCheckoutResponse
 */
export interface GetTerminalCheckoutResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof GetTerminalCheckoutResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {TerminalCheckout}
     * @memberof GetTerminalCheckoutResponse
     */
    checkout?: TerminalCheckout;
}
/**
 *
 * @export
 * @interface GetTerminalRefundResponse
 */
export interface GetTerminalRefundResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof GetTerminalRefundResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {TerminalRefund}
     * @memberof GetTerminalRefundResponse
     */
    refund?: TerminalRefund;
}
/**
 * Object types to inline under their respective parent object in certain connect v2 responses
 * @export
 * @enum {string}
 */
export declare enum InlineTypes {
    NONE = "INLINE_NONE",
    VARIATIONS = "INLINE_VARIATIONS",
    ALL = "INLINE_ALL"
}
/**
 * Represents a change in state or quantity of product inventory at a particular time and location.
 * @export
 * @interface InventoryAdjustment
 */
export interface InventoryAdjustment {
    /**
     * A unique ID generated by Square for the `InventoryAdjustment`.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    id?: string;
    /**
     * An optional ID provided by the application to tie the `InventoryAdjustment` to an external system.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    reference_id?: string;
    /**
     * The `InventoryState` of the related quantity of items before the adjustment. See [InventoryState](#type-inventorystate) for possible values
     * @type {string}
     * @memberof InventoryAdjustment
     */
    from_state?: string;
    /**
     * The `InventoryState` of the related quantity of items after the adjustment. See [InventoryState](#type-inventorystate) for possible values
     * @type {string}
     * @memberof InventoryAdjustment
     */
    to_state?: string;
    /**
     * The Square ID of the `Location` where the related quantity of items are being tracked.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    location_id?: string;
    /**
     * The Square generated ID of the `CatalogObject` being tracked.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    catalog_object_id?: string;
    /**
     * The `CatalogObjectType` of the `CatalogObject` being tracked. Tracking is only supported for the `ITEM_VARIATION` type.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    catalog_object_type?: string;
    /**
     * The number of items affected by the adjustment as a decimal string. Can support up to 5 digits after the decimal point.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    quantity?: string;
    /**
     *
     * @type {Money}
     * @memberof InventoryAdjustment
     */
    total_price_money?: Money;
    /**
     * A client-generated timestamp in RFC 3339 format that indicates when the adjustment took place. For write actions, the `occurred_at` timestamp cannot be older than 24 hours or in the future relative to the time of the request.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    occurred_at?: string;
    /**
     * A read-only timestamp in RFC 3339 format that indicates when Square received the adjustment.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    created_at?: string;
    /**
     *
     * @type {SourceApplication}
     * @memberof InventoryAdjustment
     */
    source?: SourceApplication;
    /**
     * The Square ID of the `Employee` responsible for the inventory adjustment.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    employee_id?: string;
    /**
     * The read-only Square ID of the [Transaction][#type-transaction] that caused the adjustment. Only relevant for payment-related state transitions.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    transaction_id?: string;
    /**
     * The read-only Square ID of the [Refund][#type-refund] that caused the adjustment. Only relevant for refund-related state transitions.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    refund_id?: string;
    /**
     * The read-only Square ID of the purchase order that caused the adjustment. Only relevant for state transitions from the Square for Retail app.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    purchase_order_id?: string;
    /**
     * The read-only Square ID of the Square goods receipt that caused the adjustment. Only relevant for state transitions from the Square for Retail app.
     * @type {string}
     * @memberof InventoryAdjustment
     */
    goods_receipt_id?: string;
}
/**
 * Indicates whether Square should alert the merchant when the inventory quantity of a CatalogItemVariation is low.
 * @export
 * @enum {string}
 */
export declare enum InventoryAlertType {
    NONE = "NONE",
    LOWQUANTITY = "LOW_QUANTITY"
}
/**
 * Represents a single physical count, inventory, adjustment, or transfer that is part of the history of inventory changes for a particular `CatalogObject`.
 * @export
 * @interface InventoryChange
 */
export interface InventoryChange {
    /**
     * Indicates how the inventory change was applied. See `InventoryChangeType` for all possible values. See [InventoryChangeType](#type-inventorychangetype) for possible values
     * @type {string}
     * @memberof InventoryChange
     */
    type?: string;
    /**
     *
     * @type {InventoryPhysicalCount}
     * @memberof InventoryChange
     */
    physical_count?: InventoryPhysicalCount;
    /**
     *
     * @type {InventoryAdjustment}
     * @memberof InventoryChange
     */
    adjustment?: InventoryAdjustment;
    /**
     *
     * @type {InventoryTransfer}
     * @memberof InventoryChange
     */
    transfer?: InventoryTransfer;
}
/**
 * Indicates how the inventory change was applied to a tracked quantity of items.
 * @export
 * @enum {string}
 */
export declare enum InventoryChangeType {
    PHYSICALCOUNT = "PHYSICAL_COUNT",
    ADJUSTMENT = "ADJUSTMENT",
    TRANSFER = "TRANSFER"
}
/**
 * Represents Square\'s estimated quantity of items in a particular state at a particular location based on the known history of physical counts and inventory adjustments.
 * @export
 * @interface InventoryCount
 */
export interface InventoryCount {
    /**
     * The Square generated ID of the `CatalogObject` being tracked.
     * @type {string}
     * @memberof InventoryCount
     */
    catalog_object_id?: string;
    /**
     * The `CatalogObjectType` of the `CatalogObject` being tracked. Tracking is only supported for the `ITEM_VARIATION` type.
     * @type {string}
     * @memberof InventoryCount
     */
    catalog_object_type?: string;
    /**
     * The current `InventoryState` for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values
     * @type {string}
     * @memberof InventoryCount
     */
    state?: string;
    /**
     * The Square ID of the `Location` where the related quantity of items are being tracked.
     * @type {string}
     * @memberof InventoryCount
     */
    location_id?: string;
    /**
     * The number of items affected by the estimated count as a decimal string. Can support up to 5 digits after the decimal point.
     * @type {string}
     * @memberof InventoryCount
     */
    quantity?: string;
    /**
     * A read-only timestamp in RFC 3339 format that indicates when Square received the most recent physical count or adjustment that had an affect on the estimated count.
     * @type {string}
     * @memberof InventoryCount
     */
    calculated_at?: string;
}
/**
 * Represents the quantity of an item variation that is physically present at a specific location, verified by a seller or a seller\'s employee. For example, a physical count might come from an employee counting the item variations on hand or from syncing with an external system.
 * @export
 * @interface InventoryPhysicalCount
 */
export interface InventoryPhysicalCount {
    /**
     * A unique ID generated by Square for the `InventoryPhysicalCount`.
     * @type {string}
     * @memberof InventoryPhysicalCount
     */
    id?: string;
    /**
     * An optional ID provided by the application to tie the `InventoryPhysicalCount` to an external system.
     * @type {string}
     * @memberof InventoryPhysicalCount
     */
    reference_id?: string;
    /**
     * The Square generated ID of the `CatalogObject` being tracked.
     * @type {string}
     * @memberof InventoryPhysicalCount
     */
    catalog_object_id?: string;
    /**
     * The `CatalogObjectType` of the `CatalogObject` being tracked. Tracking is only supported for the `ITEM_VARIATION` type.
     * @type {string}
     * @memberof InventoryPhysicalCount
     */
    catalog_object_type?: string;
    /**
     * The current `InventoryState` for the related quantity of items. See [InventoryState](#type-inventorystate) for possible values
     * @type {string}
     * @memberof InventoryPhysicalCount
     */
    state?: string;
    /**
     * The Square ID of the `Location` where the related quantity of items are being tracked.
     * @type {string}
     * @memberof InventoryPhysicalCount
     */
    location_id?: string;
    /**
     * The number of items affected by the physical count as a decimal string. Can support up to 5 digits after the decimal point.
     * @type {string}
     * @memberof InventoryPhysicalCount
     */
    quantity?: string;
    /**
     *
     * @type {SourceApplication}
     * @memberof InventoryPhysicalCount
     */
    source?: SourceApplication;
    /**
     * The Square ID of the `Employee` responsible for the physical count.
     * @type {string}
     * @memberof InventoryPhysicalCount
     */
    employee_id?: string;
    /**
     * A client-generated timestamp in RFC 3339 format that indicates when the physical count took place. For write actions, the `occurred_at` timestamp cannot be older than 24 hours or in the future relative to the time of the request.
     * @type {string}
     * @memberof InventoryPhysicalCount
     */
    occurred_at?: string;
    /**
     * A read-only timestamp in RFC 3339 format that indicates when Square received the physical count.
     * @type {string}
     * @memberof InventoryPhysicalCount
     */
    created_at?: string;
}
/**
 * Indicates the state of a tracked item quantity in the lifecycle of goods.
 * @export
 * @enum {string}
 */
export declare enum InventoryState {
    CUSTOM = "CUSTOM",
    INSTOCK = "IN_STOCK",
    SOLD = "SOLD",
    RETURNEDBYCUSTOMER = "RETURNED_BY_CUSTOMER",
    RESERVEDFORSALE = "RESERVED_FOR_SALE",
    SOLDONLINE = "SOLD_ONLINE",
    ORDEREDFROMVENDOR = "ORDERED_FROM_VENDOR",
    RECEIVEDFROMVENDOR = "RECEIVED_FROM_VENDOR",
    INTRANSITTO = "IN_TRANSIT_TO",
    NONE = "NONE",
    WASTE = "WASTE",
    UNLINKEDRETURN = "UNLINKED_RETURN"
}
/**
 * Represents the transfer of a quantity of product inventory at a particular time from one location to another.
 * @export
 * @interface InventoryTransfer
 */
export interface InventoryTransfer {
    /**
     * A unique ID generated by Square for the `InventoryTransfer`.
     * @type {string}
     * @memberof InventoryTransfer
     */
    id?: string;
    /**
     * An optional ID provided by the application to tie the `InventoryTransfer` to an external system.
     * @type {string}
     * @memberof InventoryTransfer
     */
    reference_id?: string;
    /**
     * The `InventoryState` for the quantity of items being transferred. See [InventoryState](#type-inventorystate) for possible values
     * @type {string}
     * @memberof InventoryTransfer
     */
    state?: string;
    /**
     * The Square ID of the `Location` where the related quantity of items were tracked before the transfer.
     * @type {string}
     * @memberof InventoryTransfer
     */
    from_location_id?: string;
    /**
     * The Square ID of the `Location` where the related quantity of items were tracked after the transfer.
     * @type {string}
     * @memberof InventoryTransfer
     */
    to_location_id?: string;
    /**
     * The Square generated ID of the `CatalogObject` being tracked.
     * @type {string}
     * @memberof InventoryTransfer
     */
    catalog_object_id?: string;
    /**
     * The `CatalogObjectType` of the `CatalogObject` being tracked.Tracking is only supported for the `ITEM_VARIATION` type.
     * @type {string}
     * @memberof InventoryTransfer
     */
    catalog_object_type?: string;
    /**
     * The number of items affected by the transfer as a decimal string. Can support up to 5 digits after the decimal point.
     * @type {string}
     * @memberof InventoryTransfer
     */
    quantity?: string;
    /**
     * A client-generated timestamp in RFC 3339 format that indicates when the transfer took place. For write actions, the `occurred_at` timestamp cannot be older than 24 hours or in the future relative to the time of the request.
     * @type {string}
     * @memberof InventoryTransfer
     */
    occurred_at?: string;
    /**
     * A read-only timestamp in RFC 3339 format that indicates when Square received the transfer request.
     * @type {string}
     * @memberof InventoryTransfer
     */
    created_at?: string;
    /**
     *
     * @type {SourceApplication}
     * @memberof InventoryTransfer
     */
    source?: SourceApplication;
    /**
     * The Square ID of the `Employee` responsible for the inventory transfer.
     * @type {string}
     * @memberof InventoryTransfer
     */
    employee_id?: string;
}
/**
 * Stores information about an invoice. You use the Invoices API to create and process invoices. For more information, see [Manage Invoices Using the Invoices API](/docs/invoices-api/overview).
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * The Square-assigned ID of the invoice.
     * @type {string}
     * @memberof Invoice
     */
    id?: string;
    /**
     * The Square-assigned version number, which is incremented each time an update is committed to the invoice.
     * @type {number}
     * @memberof Invoice
     */
    version?: number;
    /**
     * The ID of the location that this invoice is associated with. This field is required when creating an invoice.
     * @type {string}
     * @memberof Invoice
     */
    location_id?: string;
    /**
     * The ID of the `order` for which the invoice is created.  This order must be in the `OPEN` state and must belong to the `location_id` specified for this invoice. This field is required when creating an invoice.
     * @type {string}
     * @memberof Invoice
     */
    order_id?: string;
    /**
     *
     * @type {InvoiceRecipient}
     * @memberof Invoice
     */
    primary_recipient?: InvoiceRecipient;
    /**
     * An array of `InvoicePaymentRequest` objects. Each object defines a payment request in an invoice payment schedule. It provides information such as when and how Square processes payments. You must specify at least one payment request. For invoices  with multiple payment requests, you can specify a maximum of 12 `INSTALLMENT` request types. All of the payment requests must specify the same `request_method`.  This field is required when creating an invoice.
     * @type {Array<InvoicePaymentRequest>}
     * @memberof Invoice
     */
    payment_requests?: Array<InvoicePaymentRequest>;
    /**
     * A user-friendly invoice number. The value is unique within a location. If not provided when creating an invoice, Square assigns a value. It increments from 1 and padded with zeros making it 7 characters long for example, 0000001, 0000002.
     * @type {string}
     * @memberof Invoice
     */
    invoice_number?: string;
    /**
     * The title of the invoice.
     * @type {string}
     * @memberof Invoice
     */
    title?: string;
    /**
     * The description of the invoice. This is visible the customer receiving the invoice.
     * @type {string}
     * @memberof Invoice
     */
    description?: string;
    /**
     * The timestamp when the invoice is scheduled for processing, in RFC 3339 format. At the specified time, depending on the `request_method`, Square sends the invoice to the customer\'s email address or charge the customer\'s card on file.  If the field is not set, Square processes the invoice immediately after publication.
     * @type {string}
     * @memberof Invoice
     */
    scheduled_at?: string;
    /**
     * The URL of the Square-hosted invoice page. After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice page and returns the page URL in the response.
     * @type {string}
     * @memberof Invoice
     */
    public_url?: string;
    /**
     *
     * @type {Money}
     * @memberof Invoice
     */
    next_payment_amount_money?: Money;
    /**
     * The status of the invoice. See [InvoiceStatus](#type-invoicestatus) for possible values
     * @type {string}
     * @memberof Invoice
     */
    status?: string;
    /**
     * The time zone of the date values (for example, `due_date`) specified in the invoice.
     * @type {string}
     * @memberof Invoice
     */
    timezone?: string;
    /**
     * The timestamp when the invoice was created, in RFC 3339 format.
     * @type {string}
     * @memberof Invoice
     */
    created_at?: string;
    /**
     * The timestamp when the invoice was last updated, in RFC 3339 format.
     * @type {string}
     * @memberof Invoice
     */
    updated_at?: string;
}
/**
 * Describes query filters to apply.
 * @export
 * @interface InvoiceFilter
 */
export interface InvoiceFilter {
    /**
     * Limits the search to the specified locations. A location is required.  In the current implementation, only one location can be specified.
     * @type {Array<string>}
     * @memberof InvoiceFilter
     */
    location_ids: Array<string>;
    /**
     * Limits the search to the specified customers, within the specified locations.  Specifying a customer is optional. In the current implementation,  a maximum of one customer can be specified.
     * @type {Array<string>}
     * @memberof InvoiceFilter
     */
    customer_ids?: Array<string>;
}
/**
 * Describes a payment request reminder (automatic notification) that Square sends to the customer. You configure a reminder relative to the payment request `due_date`.
 * @export
 * @interface InvoicePaymentReminder
 */
export interface InvoicePaymentReminder {
    /**
     * A Square-assigned ID that uniquely identifies the reminder within the `InvoicePaymentRequest`.
     * @type {string}
     * @memberof InvoicePaymentReminder
     */
    uid?: string;
    /**
     * The number of days before (a negative number) or after (a positive number) the payment request `due_date` when the reminder is sent. For example, -3 indicates that the reminder should be sent 3 days before the payment request `due_date`.
     * @type {number}
     * @memberof InvoicePaymentReminder
     */
    relative_scheduled_days?: number;
    /**
     * The reminder message.
     * @type {string}
     * @memberof InvoicePaymentReminder
     */
    message?: string;
    /**
     * The status of the reminder. See [InvoicePaymentReminderStatus](#type-invoicepaymentreminderstatus) for possible values
     * @type {string}
     * @memberof InvoicePaymentReminder
     */
    status?: string;
    /**
     * If sent, the timestamp when the reminder was sent, in RFC 3339 format.
     * @type {string}
     * @memberof InvoicePaymentReminder
     */
    sent_at?: string;
}
/**
 * The status of a payment request reminder.
 * @export
 * @enum {string}
 */
export declare enum InvoicePaymentReminderStatus {
    PENDING = "PENDING",
    NOTAPPLICABLE = "NOT_APPLICABLE",
    SENT = "SENT"
}
/**
 * Describes a specific payment request in an invoice. Invoices that contain multiple payment requests can  specify a maximum of 12 `INSTALLMENT` request types. All of the payment requests must specify the same `request_method`.  For more information,  see [Payment requests](/docs/invoices-api/overview#payment-requests).
 * @export
 * @interface InvoicePaymentRequest
 */
export interface InvoicePaymentRequest {
    /**
     * The Square-generated ID of the payment request in an `invoice`.
     * @type {string}
     * @memberof InvoicePaymentRequest
     */
    uid?: string;
    /**
     * Indicates how Square processes the payment request. See [InvoiceRequestMethod](#type-invoicerequestmethod) for possible values
     * @type {string}
     * @memberof InvoicePaymentRequest
     */
    request_method?: string;
    /**
     * Identifies the payment request type. This type defines how the payment request amount is determined. See [InvoiceRequestType](#type-invoicerequesttype) for possible values
     * @type {string}
     * @memberof InvoicePaymentRequest
     */
    request_type?: string;
    /**
     * The due date (in the invoice location\'s time zone) for the payment request.  After this date, the invoice becomes overdue.
     * @type {string}
     * @memberof InvoicePaymentRequest
     */
    due_date?: string;
    /**
     *
     * @type {Money}
     * @memberof InvoicePaymentRequest
     */
    fixed_amount_requested_money?: Money;
    /**
     * Specifies the amount for the payment request in percentage:  - When the payment `request_type` is `DEPOSIT`, it is the percentage of the order total amount. - When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order total less  the deposit, if requested. The sum of the `percentage_requested` in all installment  payment requests must be equal to 100.  You cannot specify this when the payment `request_type` is `BALANCE` or when the  payment request specifies the `fixed_amount_requested_money` field.
     * @type {string}
     * @memberof InvoicePaymentRequest
     */
    percentage_requested?: string;
    /**
     * If set to true, the Square-hosted invoice page (the `public_url` field of the invoice)  provides a place for the customer to pay a tip.   This field is allowed only on the final payment request   and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.
     * @type {boolean}
     * @memberof InvoicePaymentRequest
     */
    tipping_enabled?: boolean;
    /**
     * If the request method is `CHARGE_CARD_ON_FILE`, this field provides the  card to charge.
     * @type {string}
     * @memberof InvoicePaymentRequest
     */
    card_id?: string;
    /**
     * A list of one or more reminders to send for the payment request.
     * @type {Array<InvoicePaymentReminder>}
     * @memberof InvoicePaymentRequest
     */
    reminders?: Array<InvoicePaymentReminder>;
    /**
     *
     * @type {Money}
     * @memberof InvoicePaymentRequest
     */
    computed_amount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof InvoicePaymentRequest
     */
    total_completed_amount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof InvoicePaymentRequest
     */
    rounding_adjustment_included_money?: Money;
}
/**
 * Describes query criteria for searching invoices.
 * @export
 * @interface InvoiceQuery
 */
export interface InvoiceQuery {
    /**
     *
     * @type {InvoiceFilter}
     * @memberof InvoiceQuery
     */
    filter: InvoiceFilter;
    /**
     *
     * @type {InvoiceSort}
     * @memberof InvoiceQuery
     */
    sort?: InvoiceSort;
}
/**
 * Provides customer data that Square uses to deliver an invoice.
 * @export
 * @interface InvoiceRecipient
 */
export interface InvoiceRecipient {
    /**
     * The ID of the customer. This is the customer profile ID that  you provide when creating a draft invoice.
     * @type {string}
     * @memberof InvoiceRecipient
     */
    customer_id?: string;
    /**
     * The recipient\'s given (that is, first) name.
     * @type {string}
     * @memberof InvoiceRecipient
     */
    given_name?: string;
    /**
     * The recipient\'s family (that is, last) name.
     * @type {string}
     * @memberof InvoiceRecipient
     */
    family_name?: string;
    /**
     * The recipient\'s email address.
     * @type {string}
     * @memberof InvoiceRecipient
     */
    email_address?: string;
    /**
     *
     * @type {Address}
     * @memberof InvoiceRecipient
     */
    address?: Address;
    /**
     * The recipient\'s phone number.
     * @type {string}
     * @memberof InvoiceRecipient
     */
    phone_number?: string;
    /**
     * The name of the recipient\'s company.
     * @type {string}
     * @memberof InvoiceRecipient
     */
    company_name?: string;
}
/**
 * Specifies the action for Square to take for processing the invoice. For example,  email the invoice, charge a customer\'s card on file, or do nothing.
 * @export
 * @enum {string}
 */
export declare enum InvoiceRequestMethod {
    EMAIL = "EMAIL",
    CHARGECARDONFILE = "CHARGE_CARD_ON_FILE",
    SHAREMANUALLY = "SHARE_MANUALLY"
}
/**
 * Indicates the type of the payment request. An invoice supports the following payment request combinations: - 1 balance - 1 deposit with 1 balance - 2 - 12 installments - 1 deposit with 2 - 12 installments  For more information,  see [Payment requests](https://developer.squareup.com/docs/docs/invoices-api/overview#payment-requests).
 * @export
 * @enum {string}
 */
export declare enum InvoiceRequestType {
    BALANCE = "BALANCE",
    DEPOSIT = "DEPOSIT",
    INSTALLMENT = "INSTALLMENT"
}
/**
 * Identifies the  sort field and sort order.
 * @export
 * @interface InvoiceSort
 */
export interface InvoiceSort {
    /**
     * The field to sort on. See [InvoiceSortField](#type-invoicesortfield) for possible values
     * @type {string}
     * @memberof InvoiceSort
     */
    field: string;
    /**
     * The order to use for sorting the results. See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof InvoiceSort
     */
    order?: string;
}
/**
 * Field to use for sorting.
 * @export
 * @enum {string}
 */
export declare enum InvoiceSortField {
    INVOICESORTDATE = "INVOICE_SORT_DATE"
}
/**
 * Indicates the status of an invoice.
 * @export
 * @enum {string}
 */
export declare enum InvoiceStatus {
    DRAFT = "DRAFT",
    UNPAID = "UNPAID",
    SCHEDULED = "SCHEDULED",
    PARTIALLYPAID = "PARTIALLY_PAID",
    PAID = "PAID",
    PARTIALLYREFUNDED = "PARTIALLY_REFUNDED",
    REFUNDED = "REFUNDED",
    CANCELED = "CANCELED",
    FAILED = "FAILED",
    PAYMENTPENDING = "PAYMENT_PENDING"
}
/**
 * Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`.
 * @export
 * @interface ItemVariationLocationOverrides
 */
export interface ItemVariationLocationOverrides {
    /**
     * The ID of the `Location`.
     * @type {string}
     * @memberof ItemVariationLocationOverrides
     */
    location_id?: string;
    /**
     *
     * @type {Money}
     * @memberof ItemVariationLocationOverrides
     */
    price_money?: Money;
    /**
     * The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`. See [CatalogPricingType](#type-catalogpricingtype) for possible values
     * @type {string}
     * @memberof ItemVariationLocationOverrides
     */
    pricing_type?: string;
    /**
     * If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`.
     * @type {boolean}
     * @memberof ItemVariationLocationOverrides
     */
    track_inventory?: boolean;
    /**
     * Indicates whether the `CatalogItemVariation` displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for possible values
     * @type {string}
     * @memberof ItemVariationLocationOverrides
     */
    inventory_alert_type?: string;
    /**
     * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.
     * @type {number}
     * @memberof ItemVariationLocationOverrides
     */
    inventory_alert_threshold?: number;
}
/**
 * An object describing a job that a team member is assigned to.
 * @export
 * @interface JobAssignment
 */
export interface JobAssignment {
    /**
     * The title of the job.
     * @type {string}
     * @memberof JobAssignment
     */
    job_title: string;
    /**
     * The current pay type for the job assignment used to calculate the pay amount in a pay period. See [JobAssignmentPayType](#type-jobassignmentpaytype) for possible values
     * @type {string}
     * @memberof JobAssignment
     */
    pay_type: string;
    /**
     *
     * @type {Money}
     * @memberof JobAssignment
     */
    hourly_rate?: Money;
    /**
     *
     * @type {Money}
     * @memberof JobAssignment
     */
    annual_rate?: Money;
    /**
     * The planned hours per week for the job. Set if the job `PayType` is `SALARY`.
     * @type {number}
     * @memberof JobAssignment
     */
    weekly_hours?: number;
}
/**
 * Enumerates the possible pay types that a job can be assigned.
 * @export
 * @enum {string}
 */
export declare enum JobAssignmentPayType {
    NONE = "NONE",
    HOURLY = "HOURLY",
    SALARY = "SALARY"
}
/**
 * Request object for fetching all `BankAccount` objects linked to a account.
 * @export
 * @interface ListBankAccountsRequest
 */
export interface ListBankAccountsRequest {
    /**
     * The pagination cursor returned by a previous call to this endpoint. Use it in the next `ListBankAccounts` request to retrieve the next set  of results.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @type {string}
     * @memberof ListBankAccountsRequest
     */
    cursor?: string;
    /**
     * Upper limit on the number of bank accounts to return in the response.  Currently, 1000 is the largest supported limit. You can specify a limit  of up to 1000 bank accounts. This is also the default limit.
     * @type {number}
     * @memberof ListBankAccountsRequest
     */
    limit?: number;
    /**
     * Location ID. You can specify this optional filter  to retrieve only the linked bank accounts belonging to a specific location.
     * @type {string}
     * @memberof ListBankAccountsRequest
     */
    location_id?: string;
}
/**
 * Response object returned by ListBankAccounts.
 * @export
 * @interface ListBankAccountsResponse
 */
export interface ListBankAccountsResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof ListBankAccountsResponse
     */
    errors?: Array<Error>;
    /**
     * List of BankAccounts associated with this account.
     * @type {Array<BankAccount>}
     * @memberof ListBankAccountsResponse
     */
    bank_accounts?: Array<BankAccount>;
    /**
     * When a response is truncated, it includes a cursor that you can  use in a subsequent request to fetch next set of bank accounts. If empty, this is the final response.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @type {string}
     * @memberof ListBankAccountsResponse
     */
    cursor?: string;
}
/**
 * A request for a filtered set of `BreakType` objects
 * @export
 * @interface ListBreakTypesRequest
 */
export interface ListBreakTypesRequest {
    /**
     * Filter Break Types returned to only those that are associated with the specified location.
     * @type {string}
     * @memberof ListBreakTypesRequest
     */
    location_id?: string;
    /**
     * Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @type {number}
     * @memberof ListBreakTypesRequest
     */
    limit?: number;
    /**
     * Pointer to the next page of Break Type results to fetch.
     * @type {string}
     * @memberof ListBreakTypesRequest
     */
    cursor?: string;
}
/**
 * The response to a request for a set of `BreakTypes`. Contains the requested `BreakType` objects. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface ListBreakTypesResponse
 */
export interface ListBreakTypesResponse {
    /**
     *  A page of `BreakType` results.
     * @type {Array<BreakType>}
     * @memberof ListBreakTypesResponse
     */
    break_types?: Array<BreakType>;
    /**
     * Value supplied in the subsequent request to fetch the next next page of Break Type results.
     * @type {string}
     * @memberof ListBreakTypesResponse
     */
    cursor?: string;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListBreakTypesResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface ListCashDrawerShiftEventsRequest
 */
export interface ListCashDrawerShiftEventsRequest {
    /**
     * The ID of the location to list cash drawer shifts for.
     * @type {string}
     * @memberof ListCashDrawerShiftEventsRequest
     */
    location_id: string;
    /**
     * Number of resources to be returned in a page of results (200 by default, 1000 max).
     * @type {number}
     * @memberof ListCashDrawerShiftEventsRequest
     */
    limit?: number;
    /**
     * Opaque cursor for fetching the next page of results.
     * @type {string}
     * @memberof ListCashDrawerShiftEventsRequest
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface ListCashDrawerShiftEventsResponse
 */
export interface ListCashDrawerShiftEventsResponse {
    /**
     * All of the events (payments, refunds, etc.) for a cash drawer during the shift.
     * @type {Array<CashDrawerShiftEvent>}
     * @memberof ListCashDrawerShiftEventsResponse
     */
    events?: Array<CashDrawerShiftEvent>;
    /**
     * Opaque cursor for fetching the next page. Cursor is not present in the last page of results.
     * @type {string}
     * @memberof ListCashDrawerShiftEventsResponse
     */
    cursor?: string;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListCashDrawerShiftEventsResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface ListCashDrawerShiftsRequest
 */
export interface ListCashDrawerShiftsRequest {
    /**
     * The ID of the location to query for a list of cash drawer shifts.
     * @type {string}
     * @memberof ListCashDrawerShiftsRequest
     */
    location_id: string;
    /**
     * The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof ListCashDrawerShiftsRequest
     */
    sort_order?: string;
    /**
     * The inclusive start time of the query on opened_at, in ISO 8601 format.
     * @type {string}
     * @memberof ListCashDrawerShiftsRequest
     */
    begin_time?: string;
    /**
     * The exclusive end date of the query on opened_at, in ISO 8601 format.
     * @type {string}
     * @memberof ListCashDrawerShiftsRequest
     */
    end_time?: string;
    /**
     * Number of cash drawer shift events in a page of results (200 by default, 1000 max).
     * @type {number}
     * @memberof ListCashDrawerShiftsRequest
     */
    limit?: number;
    /**
     * Opaque cursor for fetching the next page of results.
     * @type {string}
     * @memberof ListCashDrawerShiftsRequest
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface ListCashDrawerShiftsResponse
 */
export interface ListCashDrawerShiftsResponse {
    /**
     * A collection of CashDrawerShiftSummary objects for shifts that match the query.
     * @type {Array<CashDrawerShiftSummary>}
     * @memberof ListCashDrawerShiftsResponse
     */
    items?: Array<CashDrawerShiftSummary>;
    /**
     * Opaque cursor for fetching the next page of results. Cursor is not present in the last page of results.
     * @type {string}
     * @memberof ListCashDrawerShiftsResponse
     */
    cursor?: string;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListCashDrawerShiftsResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface ListCatalogRequest
 */
export interface ListCatalogRequest {
    /**
     * The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof ListCatalogRequest
     */
    cursor?: string;
    /**
     * An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY,IMAGE`.  The legal values are taken from the CatalogObjectType enum: `ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`, `MODIFIER`, `MODIFIER_LIST`, or `IMAGE`.
     * @type {string}
     * @memberof ListCatalogRequest
     */
    types?: string;
}
/**
 *
 * @export
 * @interface ListCatalogResponse
 */
export interface ListCatalogResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListCatalogResponse
     */
    errors?: Array<Error>;
    /**
     * The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof ListCatalogResponse
     */
    cursor?: string;
    /**
     * The CatalogObjects returned.
     * @type {Array<CatalogObject>}
     * @memberof ListCatalogResponse
     */
    objects?: Array<CatalogObject>;
}
/**
 * Defines the query parameters that can be provided in a request to the [ListCustomerGroups](#endpoint-listcustomergroups) endpoint.
 * @export
 * @interface ListCustomerGroupsRequest
 */
export interface ListCustomerGroupsRequest {
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @type {string}
     * @memberof ListCustomerGroupsRequest
     */
    cursor?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the [ListCustomerGroups](#endpoint-listcustomergroups) endpoint.  One of `errors` or `groups` is present in a given response (never both).
 * @export
 * @interface ListCustomerGroupsResponse
 */
export interface ListCustomerGroupsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListCustomerGroupsResponse
     */
    errors?: Array<Error>;
    /**
     * A list of customer groups belonging to the current merchant.
     * @type {Array<CustomerGroup>}
     * @memberof ListCustomerGroupsResponse
     */
    groups?: Array<CustomerGroup>;
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @type {string}
     * @memberof ListCustomerGroupsResponse
     */
    cursor?: string;
}
/**
 * Defines the valid parameters for requests to __ListCustomerSegments__.
 * @export
 * @interface ListCustomerSegmentsRequest
 */
export interface ListCustomerSegmentsRequest {
    /**
     * A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
     * @type {string}
     * @memberof ListCustomerSegmentsRequest
     */
    cursor?: string;
}
/**
 * Defines the fields included in the response body for requests to __ListCustomerSegments__.  One of `errors` or `segments` is present in a given response (never both).
 * @export
 * @interface ListCustomerSegmentsResponse
 */
export interface ListCustomerSegmentsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListCustomerSegmentsResponse
     */
    errors?: Array<Error>;
    /**
     * The list of customer segments belonging to the associated Square account.
     * @type {Array<CustomerSegment>}
     * @memberof ListCustomerSegmentsResponse
     */
    segments?: Array<CustomerSegment>;
    /**
     * A pagination cursor to be used in subsequent calls to __ListCustomerSegments__ to retrieve the next set of query results. Only present only if the request succeeded and additional results are available.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
     * @type {string}
     * @memberof ListCustomerSegmentsResponse
     */
    cursor?: string;
}
/**
 * Defines the query parameters that can be provided in a request to the ListCustomers endpoint.
 * @export
 * @interface ListCustomersRequest
 */
export interface ListCustomersRequest {
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @type {string}
     * @memberof ListCustomersRequest
     */
    cursor?: string;
    /**
     * Indicates how Customers should be sorted.  Default: `DEFAULT`. See [CustomerSortField](#type-customersortfield) for possible values
     * @type {string}
     * @memberof ListCustomersRequest
     */
    sort_field?: string;
    /**
     * Indicates whether Customers should be sorted in ascending (`ASC`) or descending (`DESC`) order.  Default: `ASC`. See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof ListCustomersRequest
     */
    sort_order?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the ListCustomers endpoint.  One of `errors` or `customers` is present in a given response (never both).
 * @export
 * @interface ListCustomersResponse
 */
export interface ListCustomersResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListCustomersResponse
     */
    errors?: Array<Error>;
    /**
     * An array of `Customer` objects that match the provided query.
     * @type {Array<Customer>}
     * @memberof ListCustomersResponse
     */
    customers?: Array<Customer>;
    /**
     * A pagination cursor to retrieve the next set of results for the original query. Only present if the request succeeded and additional results are available.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @type {string}
     * @memberof ListCustomersResponse
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface ListDeviceCodesRequest
 */
export interface ListDeviceCodesRequest {
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @type {string}
     * @memberof ListDeviceCodesRequest
     */
    cursor?: string;
    /**
     * If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
     * @type {string}
     * @memberof ListDeviceCodesRequest
     */
    location_id?: string;
    /**
     * If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty. See [ProductType](#type-producttype) for possible values
     * @type {string}
     * @memberof ListDeviceCodesRequest
     */
    product_type?: string;
    /**
     * If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty. See [DeviceCodeStatus](#type-devicecodestatus) for possible values
     * @type {Array<string>}
     * @memberof ListDeviceCodesRequest
     */
    status?: Array<string>;
}
/**
 *
 * @export
 * @interface ListDeviceCodesResponse
 */
export interface ListDeviceCodesResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListDeviceCodesResponse
     */
    errors?: Array<Error>;
    /**
     * The queried DeviceCode.
     * @type {Array<DeviceCode>}
     * @memberof ListDeviceCodesResponse
     */
    device_codes?: Array<DeviceCode>;
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Paginating results](#paginatingresults) for more information.
     * @type {string}
     * @memberof ListDeviceCodesResponse
     */
    cursor?: string;
}
/**
 * Defines fields in a ListDisputeEvidence response.
 * @export
 * @interface ListDisputeEvidenceResponse
 */
export interface ListDisputeEvidenceResponse {
    /**
     * The list of evidence previously uploaded to the specified dispute.
     * @type {Array<DisputeEvidence>}
     * @memberof ListDisputeEvidenceResponse
     */
    evidence?: Array<DisputeEvidence>;
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof ListDisputeEvidenceResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines request parameters for the ListDisputes endpoint.
 * @export
 * @interface ListDisputesRequest
 */
export interface ListDisputesRequest {
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @type {string}
     * @memberof ListDisputesRequest
     */
    cursor?: string;
    /**
     * The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`). See [DisputeState](#type-disputestate) for possible values
     * @type {Array<string>}
     * @memberof ListDisputesRequest
     */
    states?: Array<string>;
    /**
     * The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not `INQUIRY_CLOSED`, `WON`, or  `LOST`) associated with all locations.
     * @type {string}
     * @memberof ListDisputesRequest
     */
    location_id?: string;
}
/**
 * Defines fields in a ListDisputes response.
 * @export
 * @interface ListDisputesResponse
 */
export interface ListDisputesResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof ListDisputesResponse
     */
    errors?: Array<Error>;
    /**
     * The list of Disputes.
     * @type {Array<Dispute>}
     * @memberof ListDisputesResponse
     */
    disputes?: Array<Dispute>;
    /**
     * The pagination cursor to be used in a subsequent request. If unset, this is the final response. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @type {string}
     * @memberof ListDisputesResponse
     */
    cursor?: string;
}
/**
 * A request for a set of `EmployeeWage` objects
 * @export
 * @interface ListEmployeeWagesRequest
 */
export interface ListEmployeeWagesRequest {
    /**
     * Filter wages returned to only those that are associated with the specified employee.
     * @type {string}
     * @memberof ListEmployeeWagesRequest
     */
    employee_id?: string;
    /**
     * Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @type {number}
     * @memberof ListEmployeeWagesRequest
     */
    limit?: number;
    /**
     * Pointer to the next page of Employee Wage results to fetch.
     * @type {string}
     * @memberof ListEmployeeWagesRequest
     */
    cursor?: string;
}
/**
 * The response to a request for a set of `EmployeeWage` objects. Contains  a set of `EmployeeWage`.
 * @export
 * @interface ListEmployeeWagesResponse
 */
export interface ListEmployeeWagesResponse {
    /**
     * A page of Employee Wage results.
     * @type {Array<EmployeeWage>}
     * @memberof ListEmployeeWagesResponse
     */
    employee_wages?: Array<EmployeeWage>;
    /**
     * Value supplied in the subsequent request to fetch the next next page of Employee Wage results.
     * @type {string}
     * @memberof ListEmployeeWagesResponse
     */
    cursor?: string;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListEmployeeWagesResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface ListEmployeesRequest
 */
export interface ListEmployeesRequest {
    /**
     *
     * @type {string}
     * @memberof ListEmployeesRequest
     */
    location_id?: string;
    /**
     * Specifies the EmployeeStatus to filter the employee by. See [EmployeeStatus](#type-employeestatus) for possible values
     * @type {string}
     * @memberof ListEmployeesRequest
     */
    status?: string;
    /**
     * The number of employees to be returned on each page.
     * @type {number}
     * @memberof ListEmployeesRequest
     */
    limit?: number;
    /**
     * The token required to retrieve the specified page of results.
     * @type {string}
     * @memberof ListEmployeesRequest
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface ListEmployeesResponse
 */
export interface ListEmployeesResponse {
    /**
     *
     * @type {Array<Employee>}
     * @memberof ListEmployeesResponse
     */
    employees?: Array<Employee>;
    /**
     * The token to be used to retrieve the next page of results.
     * @type {string}
     * @memberof ListEmployeesResponse
     */
    cursor?: string;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListEmployeesResponse
     */
    errors?: Array<Error>;
}
/**
 * Describes a `ListInvoice` request.
 * @export
 * @interface ListInvoicesRequest
 */
export interface ListInvoicesRequest {
    /**
     * The ID of the location for which to list invoices.
     * @type {string}
     * @memberof ListInvoicesRequest
     */
    location_id: string;
    /**
     * A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @type {string}
     * @memberof ListInvoicesRequest
     */
    cursor?: string;
    /**
     * The maximum number of invoices to return (200 is the maximum `limit`).  If not provided, the server  uses a default limit of 100 invoices.
     * @type {number}
     * @memberof ListInvoicesRequest
     */
    limit?: number;
}
/**
 * Describes a `ListInvoice` response.
 * @export
 * @interface ListInvoicesResponse
 */
export interface ListInvoicesResponse {
    /**
     * The invoices retrieved.
     * @type {Array<Invoice>}
     * @memberof ListInvoicesResponse
     */
    invoices?: Array<Invoice>;
    /**
     * When a response is truncated, it includes a cursor that you can use in a  subsequent request to fetch the next set of invoices. If empty, this is the final  response.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @type {string}
     * @memberof ListInvoicesResponse
     */
    cursor?: string;
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof ListInvoicesResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines the fields that are included in the response body of a request to the __ListLocations__ endpoint.  One of `errors` or `locations` is present in a given response (never both).
 * @export
 * @interface ListLocationsResponse
 */
export interface ListLocationsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListLocationsResponse
     */
    errors?: Array<Error>;
    /**
     * The business locations.
     * @type {Array<Location>}
     * @memberof ListLocationsResponse
     */
    locations?: Array<Location>;
}
/**
 * A response that contains all loyalty programs.
 * @export
 * @interface ListLoyaltyProgramsResponse
 */
export interface ListLoyaltyProgramsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListLoyaltyProgramsResponse
     */
    errors?: Array<Error>;
    /**
     * A list of `LoyaltyProgram` for the merchant.
     * @type {Array<LoyaltyProgram>}
     * @memberof ListLoyaltyProgramsResponse
     */
    programs?: Array<LoyaltyProgram>;
}
/**
 * Request object for the [ListMerchant](#endpoint-listmerchant) endpoint.
 * @export
 * @interface ListMerchantsRequest
 */
export interface ListMerchantsRequest {
    /**
     * The cursor generated by the previous response.
     * @type {number}
     * @memberof ListMerchantsRequest
     */
    cursor?: number;
}
/**
 * The response object returned by the [ListMerchant](#endpoint-listmerchant) endpoint.
 * @export
 * @interface ListMerchantsResponse
 */
export interface ListMerchantsResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof ListMerchantsResponse
     */
    errors?: Array<Error>;
    /**
     * The requested `Merchant` entities.
     * @type {Array<Merchant>}
     * @memberof ListMerchantsResponse
     */
    merchant?: Array<Merchant>;
    /**
     * If the  response is truncated, the cursor to use in next  request to fetch next set of objects.
     * @type {number}
     * @memberof ListMerchantsResponse
     */
    cursor?: number;
}
/**
 * Retrieves a list of refunds for the account making the request.  Max results per page: 100
 * @export
 * @interface ListPaymentRefundsRequest
 */
export interface ListPaymentRefundsRequest {
    /**
     * Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.
     * @type {string}
     * @memberof ListPaymentRefundsRequest
     */
    begin_time?: string;
    /**
     * Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
     * @type {string}
     * @memberof ListPaymentRefundsRequest
     */
    end_time?: string;
    /**
     * The order in which results are listed. - `ASC` - oldest to newest - `DESC` - newest to oldest (default).
     * @type {string}
     * @memberof ListPaymentRefundsRequest
     */
    sort_order?: string;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof ListPaymentRefundsRequest
     */
    cursor?: string;
    /**
     * Limit results to the location supplied. By default, results are returned for all locations associated with the merchant.
     * @type {string}
     * @memberof ListPaymentRefundsRequest
     */
    location_id?: string;
    /**
     * If provided, only refunds with the given status are returned. For a list of refund status values, see `PaymentRefund`.  Default: If omitted refunds are returned regardless of status.
     * @type {string}
     * @memberof ListPaymentRefundsRequest
     */
    status?: string;
    /**
     * If provided, only refunds with the given source type are returned. - `CARD` - List refunds only for payments where card was specified as payment source.  Default: If omitted refunds are returned regardless of source type.
     * @type {string}
     * @memberof ListPaymentRefundsRequest
     */
    source_type?: string;
    /**
     * Maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, at most 100 results will be returned.  Default: `100`
     * @type {number}
     * @memberof ListPaymentRefundsRequest
     */
    limit?: number;
}
/**
 * Defines the fields that are included in the response body of a request to the [ListPaymentRefunds](#endpoint-refunds-listpaymentrefunds) endpoint.  One of `errors` or `refunds` is present in a given response (never both).
 * @export
 * @interface ListPaymentRefundsResponse
 */
export interface ListPaymentRefundsResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof ListPaymentRefundsResponse
     */
    errors?: Array<Error>;
    /**
     * The list of requested refunds.
     * @type {Array<PaymentRefund>}
     * @memberof ListPaymentRefundsResponse
     */
    refunds?: Array<PaymentRefund>;
    /**
     * The pagination cursor to be used in a subsequent request. If empty, this is the final response.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof ListPaymentRefundsResponse
     */
    cursor?: string;
}
/**
 * Retrieves a list of payments taken by the account making the request.  The maximum results per page is 100.
 * @export
 * @interface ListPaymentsRequest
 */
export interface ListPaymentsRequest {
    /**
     * The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
     * @type {string}
     * @memberof ListPaymentsRequest
     */
    begin_time?: string;
    /**
     * The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.
     * @type {string}
     * @memberof ListPaymentsRequest
     */
    end_time?: string;
    /**
     * The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).
     * @type {string}
     * @memberof ListPaymentsRequest
     */
    sort_order?: string;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @type {string}
     * @memberof ListPaymentsRequest
     */
    cursor?: string;
    /**
     * Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.
     * @type {string}
     * @memberof ListPaymentsRequest
     */
    location_id?: string;
    /**
     * The exact amount in the `total_money` for a payment.
     * @type {number}
     * @memberof ListPaymentsRequest
     */
    total?: number;
    /**
     * The last four digits of a payment card.
     * @type {string}
     * @memberof ListPaymentsRequest
     */
    last_4?: string;
    /**
     * The brand of the payment card (for example, VISA).
     * @type {string}
     * @memberof ListPaymentsRequest
     */
    card_brand?: string;
    /**
     * The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: `100`
     * @type {number}
     * @memberof ListPaymentsRequest
     */
    limit?: number;
}
/**
 * Defines the fields that are included in the response body of a request to the [ListPayments](#endpoint-payments-listpayments) endpoint.
 * @export
 * @interface ListPaymentsResponse
 */
export interface ListPaymentsResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof ListPaymentsResponse
     */
    errors?: Array<Error>;
    /**
     * The requested list of payments.
     * @type {Array<Payment>}
     * @memberof ListPaymentsResponse
     */
    payments?: Array<Payment>;
    /**
     * The pagination cursor to be used in a subsequent request. If empty, this is the final response.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @type {string}
     * @memberof ListPaymentsResponse
     */
    cursor?: string;
}
/**
 * Defines the query parameters that can be included in a request to the [ListRefunds](#endpoint-listrefunds) endpoint.  Deprecated - recommend using [SearchOrders](#endpoint-orders-searchorders)
 * @export
 * @interface ListRefundsRequest
 */
export interface ListRefundsRequest {
    /**
     * The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @type {string}
     * @memberof ListRefundsRequest
     */
    begin_time?: string;
    /**
     * The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @type {string}
     * @memberof ListRefundsRequest
     */
    end_time?: string;
    /**
     * The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof ListRefundsRequest
     */
    sort_order?: string;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @type {string}
     * @memberof ListRefundsRequest
     */
    cursor?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the [ListRefunds](#endpoint-listrefunds) endpoint.  One of `errors` or `refunds` is present in a given response (never both).
 * @export
 * @interface ListRefundsResponse
 */
export interface ListRefundsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListRefundsResponse
     */
    errors?: Array<Error>;
    /**
     * An array of refunds that match your query.
     * @type {Array<Refund>}
     * @memberof ListRefundsResponse
     */
    refunds?: Array<Refund>;
    /**
     * A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.
     * @type {string}
     * @memberof ListRefundsResponse
     */
    cursor?: string;
}
/**
 * Defines parameters in a  [ListSubscriptionEvents](#endpoint-subscriptions-listsubscriptionevents) endpoint request.
 * @export
 * @interface ListSubscriptionEventsRequest
 */
export interface ListSubscriptionEventsRequest {
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @type {string}
     * @memberof ListSubscriptionEventsRequest
     */
    cursor?: string;
    /**
     * The upper limit on the number of subscription events to return  in the response.   Default: `200`
     * @type {number}
     * @memberof ListSubscriptionEventsRequest
     */
    limit?: number;
}
/**
 * Defines the fields that are included in the response from the [ListSubscriptionEvents](#endpoint-subscriptions-listsubscriptionevents) endpoint.
 * @export
 * @interface ListSubscriptionEventsResponse
 */
export interface ListSubscriptionEventsResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof ListSubscriptionEventsResponse
     */
    errors?: Array<Error>;
    /**
     * The `SubscriptionEvents` retrieved.
     * @type {Array<SubscriptionEvent>}
     * @memberof ListSubscriptionEventsResponse
     */
    subscription_events?: Array<SubscriptionEvent>;
    /**
     * When a response is truncated, it includes a cursor that you can  use in a subsequent request to fetch the next set of events.  If empty, this is the final response.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @type {string}
     * @memberof ListSubscriptionEventsResponse
     */
    cursor?: string;
}
/**
 * A request for a set of `TeamMemberWage` objects
 * @export
 * @interface ListTeamMemberWagesRequest
 */
export interface ListTeamMemberWagesRequest {
    /**
     * Filter wages returned to only those that are associated with the specified team member.
     * @type {string}
     * @memberof ListTeamMemberWagesRequest
     */
    team_member_id?: string;
    /**
     * Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @type {number}
     * @memberof ListTeamMemberWagesRequest
     */
    limit?: number;
    /**
     * Pointer to the next page of Employee Wage results to fetch.
     * @type {string}
     * @memberof ListTeamMemberWagesRequest
     */
    cursor?: string;
}
/**
 * The response to a request for a set of `TeamMemberWage` objects. Contains a set of `TeamMemberWage`.
 * @export
 * @interface ListTeamMemberWagesResponse
 */
export interface ListTeamMemberWagesResponse {
    /**
     * A page of Team Member Wage results.
     * @type {Array<TeamMemberWage>}
     * @memberof ListTeamMemberWagesResponse
     */
    team_member_wages?: Array<TeamMemberWage>;
    /**
     * Value supplied in the subsequent request to fetch the next next page of Team Member Wage results.
     * @type {string}
     * @memberof ListTeamMemberWagesResponse
     */
    cursor?: string;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListTeamMemberWagesResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines the query parameters that can be included in a request to the [ListTransactions](#endpoint-listtransactions) endpoint.  Deprecated - recommend using [SearchOrders](#endpoint-orders-searchorders)
 * @export
 * @interface ListTransactionsRequest
 */
export interface ListTransactionsRequest {
    /**
     * The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @type {string}
     * @memberof ListTransactionsRequest
     */
    begin_time?: string;
    /**
     * The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @type {string}
     * @memberof ListTransactionsRequest
     */
    end_time?: string;
    /**
     * The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof ListTransactionsRequest
     */
    sort_order?: string;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @type {string}
     * @memberof ListTransactionsRequest
     */
    cursor?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the [ListTransactions](#endpoint-listtransactions) endpoint.  One of `errors` or `transactions` is present in a given response (never both).
 * @export
 * @interface ListTransactionsResponse
 */
export interface ListTransactionsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListTransactionsResponse
     */
    errors?: Array<Error>;
    /**
     * An array of transactions that match your query.
     * @type {Array<Transaction>}
     * @memberof ListTransactionsResponse
     */
    transactions?: Array<Transaction>;
    /**
     * A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.
     * @type {string}
     * @memberof ListTransactionsResponse
     */
    cursor?: string;
}
/**
 * A request for a set of `WorkweekConfig` objects
 * @export
 * @interface ListWorkweekConfigsRequest
 */
export interface ListWorkweekConfigsRequest {
    /**
     * Maximum number of Workweek Configs to return per page.
     * @type {number}
     * @memberof ListWorkweekConfigsRequest
     */
    limit?: number;
    /**
     * Pointer to the next page of Workweek Config results to fetch.
     * @type {string}
     * @memberof ListWorkweekConfigsRequest
     */
    cursor?: string;
}
/**
 * The response to a request for a set of `WorkweekConfig` objects. Contains the requested `WorkweekConfig` objects. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface ListWorkweekConfigsResponse
 */
export interface ListWorkweekConfigsResponse {
    /**
     * A page of Employee Wage results.
     * @type {Array<WorkweekConfig>}
     * @memberof ListWorkweekConfigsResponse
     */
    workweek_configs?: Array<WorkweekConfig>;
    /**
     * Value supplied in the subsequent request to fetch the next page of Employee Wage results.
     * @type {string}
     * @memberof ListWorkweekConfigsResponse
     */
    cursor?: string;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof ListWorkweekConfigsResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * The Square-issued ID of the location.
     * @type {string}
     * @memberof Location
     */
    id?: string;
    /**
     * The name of the location. This information appears in the dashboard as the nickname.
     * @type {string}
     * @memberof Location
     */
    name?: string;
    /**
     *
     * @type {Address}
     * @memberof Location
     */
    address?: Address;
    /**
     * The [IANA Timezone](https://www.iana.org/time-zones) identifier for the timezone of the location.
     * @type {string}
     * @memberof Location
     */
    timezone?: string;
    /**
     * The Square features that are enabled for the location. See `LocationCapability` for possible values. See [LocationCapability](#type-locationcapability) for possible values
     * @type {Array<string>}
     * @memberof Location
     */
    capabilities?: Array<string>;
    /**
     * The status of the location, either active or inactive. See [LocationStatus](#type-locationstatus) for possible values
     * @type {string}
     * @memberof Location
     */
    status?: string;
    /**
     * The time when the location was created, in RFC 3339 format.
     * @type {string}
     * @memberof Location
     */
    created_at?: string;
    /**
     * The ID of the merchant that owns the location.
     * @type {string}
     * @memberof Location
     */
    merchant_id?: string;
    /**
     * The country of the location, in ISO 3166-1-alpha-2 format.  See `Country` for possible values. See [Country](#type-country) for possible values
     * @type {string}
     * @memberof Location
     */
    country?: string;
    /**
     * The language associated with the location, in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).
     * @type {string}
     * @memberof Location
     */
    language_code?: string;
    /**
     * The currency used for all transactions at this location, in ISO 4217 format. See `Currency` for possible values. See [Currency](#type-currency) for possible values
     * @type {string}
     * @memberof Location
     */
    currency?: string;
    /**
     * The phone number of the location in human readable format.
     * @type {string}
     * @memberof Location
     */
    phone_number?: string;
    /**
     * The business name of the location This is the name visible to the customers of the location. For example, this name appears on customer receipts.
     * @type {string}
     * @memberof Location
     */
    business_name?: string;
    /**
     * The type of the location, either physical or mobile. See [LocationType](#type-locationtype) for possible values
     * @type {string}
     * @memberof Location
     */
    type?: string;
    /**
     * The website URL of the location.
     * @type {string}
     * @memberof Location
     */
    website_url?: string;
    /**
     *
     * @type {BusinessHours}
     * @memberof Location
     */
    business_hours?: BusinessHours;
    /**
     * The email of the location. This email is visible to the customers of the location. For example, the email appears on customer receipts.
     * @type {string}
     * @memberof Location
     */
    business_email?: string;
    /**
     * The description of the location.
     * @type {string}
     * @memberof Location
     */
    description?: string;
    /**
     * The Twitter username of the location without the \'&#64;\' symbol.
     * @type {string}
     * @memberof Location
     */
    twitter_username?: string;
    /**
     * The Instagram username of the location without the \'&#64;\' symbol.
     * @type {string}
     * @memberof Location
     */
    instagram_username?: string;
    /**
     * The Facebook profile URL of the location. The URL should begin with \'facebook.com/\'.
     * @type {string}
     * @memberof Location
     */
    facebook_url?: string;
    /**
     *
     * @type {Coordinates}
     * @memberof Location
     */
    coordinates?: Coordinates;
    /**
     * The URL of the logo image for the location. The Seller must choose this logo in the Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices) that Square generates on behalf of the Seller. This image should have an aspect ratio close to 1:1 and is recommended to be at least 200x200 pixels.
     * @type {string}
     * @memberof Location
     */
    logo_url?: string;
    /**
     * The URL of the Point of Sale background image for the location.
     * @type {string}
     * @memberof Location
     */
    pos_background_url?: string;
    /**
     * The merchant category code (MCC) of the location, as standardized by ISO 18245. The MCC describes the kind of goods or services sold at the location.
     * @type {string}
     * @memberof Location
     */
    mcc?: string;
    /**
     * The URL of a full-format logo image for the location. The Seller must choose this logo in the Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices) that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater and is recommended to be at least 1280x648 pixels.
     * @type {string}
     * @memberof Location
     */
    full_format_logo_url?: string;
}
/**
 * The capabilities a location may have.
 * @export
 * @enum {string}
 */
export declare enum LocationCapability {
    CREDITCARDPROCESSING = "CREDIT_CARD_PROCESSING"
}
/**
 * The status of the location, whether a location is active or inactive.
 * @export
 * @enum {string}
 */
export declare enum LocationStatus {
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
/**
 * A location\'s physical or mobile type.
 * @export
 * @enum {string}
 */
export declare enum LocationType {
    PHYSICAL = "PHYSICAL",
    MOBILE = "MOBILE"
}
/**
 * Describes a loyalty account. For more information, see  [Loyalty Overview](/docs/loyalty/overview).
 * @export
 * @interface LoyaltyAccount
 */
export interface LoyaltyAccount {
    /**
     * The Square-assigned ID of the loyalty account.
     * @type {string}
     * @memberof LoyaltyAccount
     */
    id?: string;
    /**
     * The list of mappings that the account is associated with.  Currently, a buyer can only be mapped to a loyalty account using  a phone number. Therefore, the list can only have one mapping.
     * @type {Array<LoyaltyAccountMapping>}
     * @memberof LoyaltyAccount
     */
    mappings: Array<LoyaltyAccountMapping>;
    /**
     * The Square-assigned ID of the `loyalty program` to which the account belongs.
     * @type {string}
     * @memberof LoyaltyAccount
     */
    program_id: string;
    /**
     * The available point balance in the loyalty account.    Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.
     * @type {number}
     * @memberof LoyaltyAccount
     */
    balance?: number;
    /**
     * The total points accrued during the lifetime of the account.
     * @type {number}
     * @memberof LoyaltyAccount
     */
    lifetime_points?: number;
    /**
     * The Square-assigned ID of the `customer` that is associated with the account.
     * @type {string}
     * @memberof LoyaltyAccount
     */
    customer_id?: string;
    /**
     * The timestamp when enrollment occurred, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyAccount
     */
    enrolled_at?: string;
    /**
     * The timestamp when the loyalty account was created, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyAccount
     */
    created_at?: string;
    /**
     * The timestamp when the loyalty account was last updated, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyAccount
     */
    updated_at?: string;
}
/**
 * Associates a loyalty account with the buyer\'s phone number. For more information, see  [Loyalty Overview](/docs/loyalty/overview).
 * @export
 * @interface LoyaltyAccountMapping
 */
export interface LoyaltyAccountMapping {
    /**
     * The Square-assigned ID of the mapping.
     * @type {string}
     * @memberof LoyaltyAccountMapping
     */
    id?: string;
    /**
     * The type of mapping. See [LoyaltyAccountMappingType](#type-loyaltyaccountmappingtype) for possible values
     * @type {string}
     * @memberof LoyaltyAccountMapping
     */
    type: string;
    /**
     * The phone number, in E.164 format. For example, \"+14155551111\".
     * @type {string}
     * @memberof LoyaltyAccountMapping
     */
    value: string;
    /**
     * The timestamp when the mapping was created, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyAccountMapping
     */
    created_at?: string;
}
/**
 * The type of mapping.
 * @export
 * @enum {string}
 */
export declare enum LoyaltyAccountMappingType {
    PHONE = "PHONE"
}
/**
 * Provides information about a loyalty event.  For more information, see [Loyalty events](/docs/loyalty-api/overview/#loyalty-events).
 * @export
 * @interface LoyaltyEvent
 */
export interface LoyaltyEvent {
    /**
     * The Square-assigned ID of the loyalty event.
     * @type {string}
     * @memberof LoyaltyEvent
     */
    id: string;
    /**
     * The type of the loyalty event. See [LoyaltyEventType](#type-loyaltyeventtype) for possible values
     * @type {string}
     * @memberof LoyaltyEvent
     */
    type: string;
    /**
     * The timestamp when the event was created, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyEvent
     */
    created_at: string;
    /**
     *
     * @type {LoyaltyEventAccumulatePoints}
     * @memberof LoyaltyEvent
     */
    accumulate_points?: LoyaltyEventAccumulatePoints;
    /**
     *
     * @type {LoyaltyEventCreateReward}
     * @memberof LoyaltyEvent
     */
    create_reward?: LoyaltyEventCreateReward;
    /**
     *
     * @type {LoyaltyEventRedeemReward}
     * @memberof LoyaltyEvent
     */
    redeem_reward?: LoyaltyEventRedeemReward;
    /**
     *
     * @type {LoyaltyEventDeleteReward}
     * @memberof LoyaltyEvent
     */
    delete_reward?: LoyaltyEventDeleteReward;
    /**
     *
     * @type {LoyaltyEventAdjustPoints}
     * @memberof LoyaltyEvent
     */
    adjust_points?: LoyaltyEventAdjustPoints;
    /**
     * The ID of the `loyalty account` in which the event occurred.
     * @type {string}
     * @memberof LoyaltyEvent
     */
    loyalty_account_id: string;
    /**
     * The ID of the `location` where the event occurred.
     * @type {string}
     * @memberof LoyaltyEvent
     */
    location_id?: string;
    /**
     * Defines whether the event was generated by the Square Point of Sale. See [LoyaltyEventSource](#type-loyaltyeventsource) for possible values
     * @type {string}
     * @memberof LoyaltyEvent
     */
    source: string;
    /**
     *
     * @type {LoyaltyEventExpirePoints}
     * @memberof LoyaltyEvent
     */
    expire_points?: LoyaltyEventExpirePoints;
    /**
     *
     * @type {LoyaltyEventOther}
     * @memberof LoyaltyEvent
     */
    other_event?: LoyaltyEventOther;
}
/**
 * Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
 * @export
 * @interface LoyaltyEventAccumulatePoints
 */
export interface LoyaltyEventAccumulatePoints {
    /**
     * The ID of the `loyalty program`.
     * @type {string}
     * @memberof LoyaltyEventAccumulatePoints
     */
    loyalty_program_id?: string;
    /**
     * The number of points accumulated by the event.
     * @type {number}
     * @memberof LoyaltyEventAccumulatePoints
     */
    points?: number;
    /**
     * The ID of the `order` for which the buyer accumulated the points. This field is returned only if the Orders API is used to process orders.
     * @type {string}
     * @memberof LoyaltyEventAccumulatePoints
     */
    order_id?: string;
}
/**
 * Provides metadata when the event `type` is `ADJUST_POINTS`.
 * @export
 * @interface LoyaltyEventAdjustPoints
 */
export interface LoyaltyEventAdjustPoints {
    /**
     * The Square-assigned ID of the `loyalty program`.
     * @type {string}
     * @memberof LoyaltyEventAdjustPoints
     */
    loyalty_program_id?: string;
    /**
     * The number of points added or removed.
     * @type {number}
     * @memberof LoyaltyEventAdjustPoints
     */
    points: number;
    /**
     * The reason for the adjustment of points.
     * @type {string}
     * @memberof LoyaltyEventAdjustPoints
     */
    reason?: string;
}
/**
 * Provides metadata when the event `type` is `CREATE_REWARD`.
 * @export
 * @interface LoyaltyEventCreateReward
 */
export interface LoyaltyEventCreateReward {
    /**
     * The ID of the `loyalty program`.
     * @type {string}
     * @memberof LoyaltyEventCreateReward
     */
    loyalty_program_id: string;
    /**
     * The Square-assigned ID of the created `loyalty reward`. This field is returned only if the event source is `LOYALTY_API`.
     * @type {string}
     * @memberof LoyaltyEventCreateReward
     */
    reward_id?: string;
    /**
     * The loyalty points used to create the reward.
     * @type {number}
     * @memberof LoyaltyEventCreateReward
     */
    points: number;
}
/**
 * Filter events by date time range.
 * @export
 * @interface LoyaltyEventDateTimeFilter
 */
export interface LoyaltyEventDateTimeFilter {
    /**
     *
     * @type {TimeRange}
     * @memberof LoyaltyEventDateTimeFilter
     */
    created_at: TimeRange;
}
/**
 * Provides metadata when the event `type` is `DELETE_REWARD`.
 * @export
 * @interface LoyaltyEventDeleteReward
 */
export interface LoyaltyEventDeleteReward {
    /**
     * The ID of the `loyalty program`.
     * @type {string}
     * @memberof LoyaltyEventDeleteReward
     */
    loyalty_program_id: string;
    /**
     * The ID of the deleted `loyalty reward`. This field is returned only if the event source is `LOYALTY_API`.
     * @type {string}
     * @memberof LoyaltyEventDeleteReward
     */
    reward_id?: string;
    /**
     * The number of points returned to the loyalty account.
     * @type {number}
     * @memberof LoyaltyEventDeleteReward
     */
    points: number;
}
/**
 * Provides metadata when the event `type` is `EXPIRE_POINTS`.
 * @export
 * @interface LoyaltyEventExpirePoints
 */
export interface LoyaltyEventExpirePoints {
    /**
     * The Square-assigned ID of the `loyalty program`.
     * @type {string}
     * @memberof LoyaltyEventExpirePoints
     */
    loyalty_program_id: string;
    /**
     * The number of points expired.
     * @type {number}
     * @memberof LoyaltyEventExpirePoints
     */
    points: number;
}
/**
 * The filtering criteria. If the request specifies multiple filters,  the endpoint uses a logical AND to evaluate them.
 * @export
 * @interface LoyaltyEventFilter
 */
export interface LoyaltyEventFilter {
    /**
     *
     * @type {LoyaltyEventLoyaltyAccountFilter}
     * @memberof LoyaltyEventFilter
     */
    loyalty_account_filter?: LoyaltyEventLoyaltyAccountFilter;
    /**
     *
     * @type {LoyaltyEventTypeFilter}
     * @memberof LoyaltyEventFilter
     */
    type_filter?: LoyaltyEventTypeFilter;
    /**
     *
     * @type {LoyaltyEventDateTimeFilter}
     * @memberof LoyaltyEventFilter
     */
    date_time_filter?: LoyaltyEventDateTimeFilter;
    /**
     *
     * @type {LoyaltyEventLocationFilter}
     * @memberof LoyaltyEventFilter
     */
    location_filter?: LoyaltyEventLocationFilter;
    /**
     *
     * @type {LoyaltyEventOrderFilter}
     * @memberof LoyaltyEventFilter
     */
    order_filter?: LoyaltyEventOrderFilter;
}
/**
 * Filter events by location.
 * @export
 * @interface LoyaltyEventLocationFilter
 */
export interface LoyaltyEventLocationFilter {
    /**
     * The `location` IDs for loyalty events to query. If multiple values are specified, the endpoint uses  a logical OR to combine them.
     * @type {Array<string>}
     * @memberof LoyaltyEventLocationFilter
     */
    location_ids: Array<string>;
}
/**
 * Filter events by loyalty account.
 * @export
 * @interface LoyaltyEventLoyaltyAccountFilter
 */
export interface LoyaltyEventLoyaltyAccountFilter {
    /**
     * The ID of the `loyalty account` associated with loyalty events.
     * @type {string}
     * @memberof LoyaltyEventLoyaltyAccountFilter
     */
    loyalty_account_id: string;
}
/**
 * Filter events by the order associated with the event.
 * @export
 * @interface LoyaltyEventOrderFilter
 */
export interface LoyaltyEventOrderFilter {
    /**
     * The ID of the `order` associated with the event.
     * @type {string}
     * @memberof LoyaltyEventOrderFilter
     */
    order_id: string;
}
/**
 * Provides metadata when the event `type` is `OTHER`.
 * @export
 * @interface LoyaltyEventOther
 */
export interface LoyaltyEventOther {
    /**
     * The Square-assigned ID of the `loyalty program`.
     * @type {string}
     * @memberof LoyaltyEventOther
     */
    loyalty_program_id: string;
    /**
     * The number of points added or removed.
     * @type {number}
     * @memberof LoyaltyEventOther
     */
    points: number;
}
/**
 * Represents a query used to search for loyalty events.
 * @export
 * @interface LoyaltyEventQuery
 */
export interface LoyaltyEventQuery {
    /**
     *
     * @type {LoyaltyEventFilter}
     * @memberof LoyaltyEventQuery
     */
    filter?: LoyaltyEventFilter;
}
/**
 * Provides metadata when the event `type` is `REDEEM_REWARD`.
 * @export
 * @interface LoyaltyEventRedeemReward
 */
export interface LoyaltyEventRedeemReward {
    /**
     * The ID of the `loyalty program`.
     * @type {string}
     * @memberof LoyaltyEventRedeemReward
     */
    loyalty_program_id: string;
    /**
     * The ID of the redeemed `loyalty reward`. This field is returned only if the event source is `LOYALTY_API`.
     * @type {string}
     * @memberof LoyaltyEventRedeemReward
     */
    reward_id?: string;
    /**
     * The ID of the `order` that redeemed the reward. This field is returned only if the Orders API is used to process orders.
     * @type {string}
     * @memberof LoyaltyEventRedeemReward
     */
    order_id?: string;
}
/**
 * Defines whether the event was generated by the Square Point of Sale.
 * @export
 * @enum {string}
 */
export declare enum LoyaltyEventSource {
    SQUARE = "SQUARE",
    LOYALTYAPI = "LOYALTY_API"
}
/**
 * The type of the loyalty event.
 * @export
 * @enum {string}
 */
export declare enum LoyaltyEventType {
    ACCUMULATEPOINTS = "ACCUMULATE_POINTS",
    CREATEREWARD = "CREATE_REWARD",
    REDEEMREWARD = "REDEEM_REWARD",
    DELETEREWARD = "DELETE_REWARD",
    ADJUSTPOINTS = "ADJUST_POINTS",
    EXPIREPOINTS = "EXPIRE_POINTS",
    OTHER = "OTHER"
}
/**
 * Filter events by event type.
 * @export
 * @interface LoyaltyEventTypeFilter
 */
export interface LoyaltyEventTypeFilter {
    /**
     * The loyalty event types used to filter the result. If multiple values are specified, the endpoint uses a  logical OR to combine them. See [LoyaltyEventType](#type-loyaltyeventtype) for possible values
     * @type {Array<string>}
     * @memberof LoyaltyEventTypeFilter
     */
    types: Array<string>;
}
/**
 *
 * @export
 * @interface LoyaltyProgram
 */
export interface LoyaltyProgram {
    /**
     * The Square-assigned ID of the loyalty program. Updates to  the loyalty program do not modify the identifier.
     * @type {string}
     * @memberof LoyaltyProgram
     */
    id: string;
    /**
     * Whether the program is currently active. See [LoyaltyProgramStatus](#type-loyaltyprogramstatus) for possible values
     * @type {string}
     * @memberof LoyaltyProgram
     */
    status: string;
    /**
     * The list of rewards for buyers, sorted by ascending points.
     * @type {Array<LoyaltyProgramRewardTier>}
     * @memberof LoyaltyProgram
     */
    reward_tiers: Array<LoyaltyProgramRewardTier>;
    /**
     *
     * @type {LoyaltyProgramExpirationPolicy}
     * @memberof LoyaltyProgram
     */
    expiration_policy?: LoyaltyProgramExpirationPolicy;
    /**
     *
     * @type {LoyaltyProgramTerminology}
     * @memberof LoyaltyProgram
     */
    terminology: LoyaltyProgramTerminology;
    /**
     * The `locations` at which the program is active.
     * @type {Array<string>}
     * @memberof LoyaltyProgram
     */
    location_ids: Array<string>;
    /**
     * The timestamp when the program was created, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyProgram
     */
    created_at: string;
    /**
     * The timestamp when the reward was last updated, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyProgram
     */
    updated_at: string;
    /**
     * Defines how buyers can earn loyalty points.
     * @type {Array<LoyaltyProgramAccrualRule>}
     * @memberof LoyaltyProgram
     */
    accrual_rules: Array<LoyaltyProgramAccrualRule>;
}
/**
 * Defines an accrual rule, which is how buyers can earn points.
 * @export
 * @interface LoyaltyProgramAccrualRule
 */
export interface LoyaltyProgramAccrualRule {
    /**
     * The type of the accrual rule that defines how buyers can earn points. See [LoyaltyProgramAccrualRuleType](#type-loyaltyprogramaccrualruletype) for possible values
     * @type {string}
     * @memberof LoyaltyProgramAccrualRule
     */
    accrual_type: string;
    /**
     * The number of points that  buyers earn based on the `accrual_type`.
     * @type {number}
     * @memberof LoyaltyProgramAccrualRule
     */
    points?: number;
    /**
     *
     * @type {Money}
     * @memberof LoyaltyProgramAccrualRule
     */
    visit_minimum_amount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof LoyaltyProgramAccrualRule
     */
    spend_amount_money?: Money;
    /**
     * The ID of the `catalog object` to purchase to earn the number of points defined by the rule. This is either an item variation or a category, depending on the type. This is defined on `ITEM_VARIATION` rules and `CATEGORY` rules.
     * @type {string}
     * @memberof LoyaltyProgramAccrualRule
     */
    catalog_object_id?: string;
}
/**
 * The type of the accrual rule that defines how buyers can earn points.
 * @export
 * @enum {string}
 */
export declare enum LoyaltyProgramAccrualRuleType {
    VISIT = "VISIT",
    SPEND = "SPEND",
    ITEMVARIATION = "ITEM_VARIATION",
    CATEGORY = "CATEGORY"
}
/**
 * Describes when the loyalty program expires.
 * @export
 * @interface LoyaltyProgramExpirationPolicy
 */
export interface LoyaltyProgramExpirationPolicy {
    /**
     * The duration of time before points expire, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyProgramExpirationPolicy
     */
    expiration_duration: string;
}
/**
 * Provides details about the loyalty program reward tier definition.
 * @export
 * @interface LoyaltyProgramRewardDefinition
 */
export interface LoyaltyProgramRewardDefinition {
    /**
     * Indicates the scope of the reward tier. See [LoyaltyProgramRewardDefinitionScope](#type-loyaltyprogramrewarddefinitionscope) for possible values
     * @type {string}
     * @memberof LoyaltyProgramRewardDefinition
     */
    scope: string;
    /**
     * The type of discount the reward tier offers. See [LoyaltyProgramRewardDefinitionType](#type-loyaltyprogramrewarddefinitiontype) for possible values
     * @type {string}
     * @memberof LoyaltyProgramRewardDefinition
     */
    discount_type: string;
    /**
     * Present if `discount_type` is `FIXED_PERCENTAGE`. For example, a 7.25% off discount will be represented as \"7.25\".
     * @type {string}
     * @memberof LoyaltyProgramRewardDefinition
     */
    percentage_discount?: string;
    /**
     * A list of `catalog object` ids to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field.
     * @type {Array<string>}
     * @memberof LoyaltyProgramRewardDefinition
     */
    catalog_object_ids?: Array<string>;
    /**
     *
     * @type {Money}
     * @memberof LoyaltyProgramRewardDefinition
     */
    fixed_discount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof LoyaltyProgramRewardDefinition
     */
    max_discount_money?: Money;
}
/**
 * Indicates the scope of the reward tier.
 * @export
 * @enum {string}
 */
export declare enum LoyaltyProgramRewardDefinitionScope {
    ORDER = "ORDER",
    ITEMVARIATION = "ITEM_VARIATION",
    CATEGORY = "CATEGORY"
}
/**
 * The type of discount the reward tier offers.
 * @export
 * @enum {string}
 */
export declare enum LoyaltyProgramRewardDefinitionType {
    AMOUNT = "FIXED_AMOUNT",
    PERCENTAGE = "FIXED_PERCENTAGE"
}
/**
 * Describes a loyalty program reward tier.
 * @export
 * @interface LoyaltyProgramRewardTier
 */
export interface LoyaltyProgramRewardTier {
    /**
     * The Square-assigned ID of the reward tier.
     * @type {string}
     * @memberof LoyaltyProgramRewardTier
     */
    id: string;
    /**
     * The points exchanged for the reward tier.
     * @type {number}
     * @memberof LoyaltyProgramRewardTier
     */
    points: number;
    /**
     * The name of the reward tier.
     * @type {string}
     * @memberof LoyaltyProgramRewardTier
     */
    name: string;
    /**
     *
     * @type {LoyaltyProgramRewardDefinition}
     * @memberof LoyaltyProgramRewardTier
     */
    definition: LoyaltyProgramRewardDefinition;
    /**
     * The timestamp when the reward tier was created, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyProgramRewardTier
     */
    created_at: string;
}
/**
 * Whether the program is currently active.
 * @export
 * @enum {string}
 */
export declare enum LoyaltyProgramStatus {
    INACTIVE = "INACTIVE",
    ACTIVE = "ACTIVE"
}
/**
 *
 * @export
 * @interface LoyaltyProgramTerminology
 */
export interface LoyaltyProgramTerminology {
    /**
     * A singular unit for a point (for example, 1 point is called 1 star).
     * @type {string}
     * @memberof LoyaltyProgramTerminology
     */
    one: string;
    /**
     * A plural unit for point (for example, 10 points is called 10 stars).
     * @type {string}
     * @memberof LoyaltyProgramTerminology
     */
    other: string;
}
/**
 *
 * @export
 * @interface LoyaltyReward
 */
export interface LoyaltyReward {
    /**
     * The Square-assigned ID of the loyalty reward.
     * @type {string}
     * @memberof LoyaltyReward
     */
    id?: string;
    /**
     * The status of a loyalty reward. See [LoyaltyRewardStatus](#type-loyaltyrewardstatus) for possible values
     * @type {string}
     * @memberof LoyaltyReward
     */
    status?: string;
    /**
     * The Square-assigned ID of the `loyalty account` to which the reward belongs.
     * @type {string}
     * @memberof LoyaltyReward
     */
    loyalty_account_id: string;
    /**
     * The Square-assigned ID of the `reward tier` used to create the reward.
     * @type {string}
     * @memberof LoyaltyReward
     */
    reward_tier_id: string;
    /**
     * The number of loyalty points used for the reward.
     * @type {number}
     * @memberof LoyaltyReward
     */
    points?: number;
    /**
     * The Square-assigned ID of the `order` to which the reward is attached.
     * @type {string}
     * @memberof LoyaltyReward
     */
    order_id?: string;
    /**
     * The timestamp when the reward was created, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyReward
     */
    created_at?: string;
    /**
     * The timestamp when the reward was last updated, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyReward
     */
    updated_at?: string;
    /**
     * The timestamp when the reward was redeemed, in RFC 3339 format.
     * @type {string}
     * @memberof LoyaltyReward
     */
    redeemed_at?: string;
}
/**
 * The status of the loyalty reward.
 * @export
 * @enum {string}
 */
export declare enum LoyaltyRewardStatus {
    ISSUED = "ISSUED",
    REDEEMED = "REDEEMED",
    DELETED = "DELETED"
}
/**
 * Represents a unit of measurement to use with a quantity, such as ounces or inches. Exactly one of the following fields are required: `custom_unit`, `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
 * @export
 * @interface MeasurementUnit
 */
export interface MeasurementUnit {
    /**
     *
     * @type {MeasurementUnitCustom}
     * @memberof MeasurementUnit
     */
    custom_unit?: MeasurementUnitCustom;
    /**
     * Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values
     * @type {string}
     * @memberof MeasurementUnit
     */
    area_unit?: string;
    /**
     * Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values
     * @type {string}
     * @memberof MeasurementUnit
     */
    length_unit?: string;
    /**
     * Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values
     * @type {string}
     * @memberof MeasurementUnit
     */
    volume_unit?: string;
    /**
     * Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values
     * @type {string}
     * @memberof MeasurementUnit
     */
    weight_unit?: string;
    /**
     * Reserved for API integrations that lack the ability to specify a real measurement unit See [MeasurementUnitGeneric](#type-measurementunitgeneric) for possible values
     * @type {string}
     * @memberof MeasurementUnit
     */
    generic_unit?: string;
    /**
     * Represents a standard unit of time. See [MeasurementUnitTime](#type-measurementunittime) for possible values
     * @type {string}
     * @memberof MeasurementUnit
     */
    time_unit?: string;
    /**
     * Represents the type of the measurement unit. See [MeasurementUnitUnitType](#type-measurementunitunittype) for possible values
     * @type {string}
     * @memberof MeasurementUnit
     */
    type?: string;
}
/**
 * Unit of area used to measure a quantity.
 * @export
 * @enum {string}
 */
export declare enum MeasurementUnitArea {
    IMPERIALACRE = "IMPERIAL_ACRE",
    IMPERIALSQUAREINCH = "IMPERIAL_SQUARE_INCH",
    IMPERIALSQUAREFOOT = "IMPERIAL_SQUARE_FOOT",
    IMPERIALSQUAREYARD = "IMPERIAL_SQUARE_YARD",
    IMPERIALSQUAREMILE = "IMPERIAL_SQUARE_MILE",
    METRICSQUARECENTIMETER = "METRIC_SQUARE_CENTIMETER",
    METRICSQUAREMETER = "METRIC_SQUARE_METER",
    METRICSQUAREKILOMETER = "METRIC_SQUARE_KILOMETER"
}
/**
 * The information needed to define a custom unit, provided by the seller.
 * @export
 * @interface MeasurementUnitCustom
 */
export interface MeasurementUnitCustom {
    /**
     * The name of the custom unit, for example \"bushel\".
     * @type {string}
     * @memberof MeasurementUnitCustom
     */
    name: string;
    /**
     * The abbreviation of the custom unit, such as \"bsh\" (bushel). This appears in the cart for the Point of Sale app, and in reports.
     * @type {string}
     * @memberof MeasurementUnitCustom
     */
    abbreviation: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum MeasurementUnitGeneric {
    UNIT = "UNIT"
}
/**
 * The unit of length used to measure a quantity.
 * @export
 * @enum {string}
 */
export declare enum MeasurementUnitLength {
    IMPERIALINCH = "IMPERIAL_INCH",
    IMPERIALFOOT = "IMPERIAL_FOOT",
    IMPERIALYARD = "IMPERIAL_YARD",
    IMPERIALMILE = "IMPERIAL_MILE",
    METRICMILLIMETER = "METRIC_MILLIMETER",
    METRICCENTIMETER = "METRIC_CENTIMETER",
    METRICMETER = "METRIC_METER",
    METRICKILOMETER = "METRIC_KILOMETER"
}
/**
 * Unit of time used to measure a quantity (a duration).
 * @export
 * @enum {string}
 */
export declare enum MeasurementUnitTime {
    MILLISECOND = "GENERIC_MILLISECOND",
    SECOND = "GENERIC_SECOND",
    MINUTE = "GENERIC_MINUTE",
    HOUR = "GENERIC_HOUR",
    DAY = "GENERIC_DAY"
}
/**
 * Describes the type of this unit and indicates which field contains the unit information. This is an â€˜openâ€™ enum.
 * @export
 * @enum {string}
 */
export declare enum MeasurementUnitUnitType {
    CUSTOM = "TYPE_CUSTOM",
    AREA = "TYPE_AREA",
    LENGTH = "TYPE_LENGTH",
    VOLUME = "TYPE_VOLUME",
    WEIGHT = "TYPE_WEIGHT",
    GENERIC = "TYPE_GENERIC"
}
/**
 * The unit of volume used to measure a quantity.
 * @export
 * @enum {string}
 */
export declare enum MeasurementUnitVolume {
    GENERICFLUIDOUNCE = "GENERIC_FLUID_OUNCE",
    GENERICSHOT = "GENERIC_SHOT",
    GENERICCUP = "GENERIC_CUP",
    GENERICPINT = "GENERIC_PINT",
    GENERICQUART = "GENERIC_QUART",
    GENERICGALLON = "GENERIC_GALLON",
    IMPERIALCUBICINCH = "IMPERIAL_CUBIC_INCH",
    IMPERIALCUBICFOOT = "IMPERIAL_CUBIC_FOOT",
    IMPERIALCUBICYARD = "IMPERIAL_CUBIC_YARD",
    METRICMILLILITER = "METRIC_MILLILITER",
    METRICLITER = "METRIC_LITER"
}
/**
 * Unit of weight used to measure a quantity.
 * @export
 * @enum {string}
 */
export declare enum MeasurementUnitWeight {
    IMPERIALWEIGHTOUNCE = "IMPERIAL_WEIGHT_OUNCE",
    IMPERIALPOUND = "IMPERIAL_POUND",
    IMPERIALSTONE = "IMPERIAL_STONE",
    METRICMILLIGRAM = "METRIC_MILLIGRAM",
    METRICGRAM = "METRIC_GRAM",
    METRICKILOGRAM = "METRIC_KILOGRAM"
}
/**
 * Represents a Square seller.
 * @export
 * @interface Merchant
 */
export interface Merchant {
    /**
     * The Square-issued ID of the merchant.
     * @type {string}
     * @memberof Merchant
     */
    id?: string;
    /**
     * The business name of the merchant.
     * @type {string}
     * @memberof Merchant
     */
    business_name?: string;
    /**
     * The country code associated with the merchant account, in ISO 3166 format. See [Country](#type-country) for possible values
     * @type {string}
     * @memberof Merchant
     */
    country: string;
    /**
     * The language code associated with the merchant account, in BCP 47 format.
     * @type {string}
     * @memberof Merchant
     */
    language_code?: string;
    /**
     * The currency associated with the merchant account, in ISO 4217 format. See [Currency](#type-currency) for possible values
     * @type {string}
     * @memberof Merchant
     */
    currency?: string;
    /**
     * The merchant status, active or inactive. See [MerchantStatus](#type-merchantstatus) for possible values
     * @type {string}
     * @memberof Merchant
     */
    status?: string;
    /**
     * The ID of the main `Location` for this merchant.
     * @type {string}
     * @memberof Merchant
     */
    main_location_id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum MerchantStatus {
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
/**
 * Represents an error encountered during a request to the Connect API.  See [Handling errors](#handlingerrors) for more information.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * The high-level category for the error. See `ErrorCategory` for possible values. See [ErrorCategory](#type-errorcategory) for possible values
     * @type {string}
     * @memberof ModelError
     */
    category: string;
    /**
     * The specific code of the error. See `ErrorCode` for possible values See [ErrorCode](#type-errorcode) for possible values
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A human-readable description of the error for debugging purposes.
     * @type {string}
     * @memberof ModelError
     */
    detail?: string;
    /**
     * The name of the field provided in the original request (if any) that the error pertains to.
     * @type {string}
     * @memberof ModelError
     */
    field?: string;
}
/**
 * Represents an amount of money. `Money` fields can be signed or unsigned. Fields that do not explicitly define whether they are signed or unsigned are considered unsigned and can only hold positive amounts. For signed fields, the sign of the value indicates the purpose of the money transfer. See [Working with Monetary Amounts](/build-basics/working-with-monetary-amounts) for more information.
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * The amount of money, in the smallest denomination of the currency indicated by `currency`. For example, when `currency` is `USD`, `amount` is in cents. Monetary amounts can be positive or negative. See the specific field description to determine the meaning of the sign in a particular case.
     * @type {number}
     * @memberof Money
     */
    amount?: number;
    /**
     * The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See `Currency` for possible values. See [Currency](#type-currency) for possible values
     * @type {string}
     * @memberof Money
     */
    currency?: string;
}
/**
 *
 * @export
 * @interface ObtainTokenRequest
 */
export interface ObtainTokenRequest {
    /**
     * The Square-issued ID of your application, available from the [application dashboard](https://connect.squareup.com/apps).
     * @type {string}
     * @memberof ObtainTokenRequest
     */
    client_id: string;
    /**
     * The Square-issued application secret for your application, available from the [application dashboard](https://connect.squareup.com/apps).
     * @type {string}
     * @memberof ObtainTokenRequest
     */
    client_secret: string;
    /**
     * The authorization code to exchange. This is required if `grant_type` is set to `authorization_code`, to indicate that the application wants to exchange an authorization code for an OAuth access token.
     * @type {string}
     * @memberof ObtainTokenRequest
     */
    code?: string;
    /**
     * The redirect URL assigned in the [application dashboard](https://connect.squareup.com/apps).
     * @type {string}
     * @memberof ObtainTokenRequest
     */
    redirect_uri?: string;
    /**
     * Specifies the method to request an OAuth access token. Valid values are: `authorization_code`, `refresh_token`, and `migration_token`
     * @type {string}
     * @memberof ObtainTokenRequest
     */
    grant_type: string;
    /**
     * A valid refresh token for generating a new OAuth access token. A valid refresh token is required if `grant_type` is set to `refresh_token` , to indicate the application wants a replacement for an expired OAuth access token.
     * @type {string}
     * @memberof ObtainTokenRequest
     */
    refresh_token?: string;
    /**
     * Legacy OAuth access token obtained using a Connect API version prior to 2019-03-13. This parameter is required if `grant_type` is set to `migration_token` to indicate that the application wants to get a replacement OAuth access token. The response also returns a refresh token. For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/authz/oauth/migration).
     * @type {string}
     * @memberof ObtainTokenRequest
     */
    migration_token?: string;
}
/**
 *
 * @export
 * @interface ObtainTokenResponse
 */
export interface ObtainTokenResponse {
    /**
     * A valid OAuth access token. OAuth access tokens are 64 bytes long. Provide the access token in a header with every request to Connect API endpoints. See the [Build with OAuth](https://developer.squareup.com/docs/authz/oauth/build-with-the-api) guide for more information.
     * @type {string}
     * @memberof ObtainTokenResponse
     */
    access_token?: string;
    /**
     * This value is always _bearer_.
     * @type {string}
     * @memberof ObtainTokenResponse
     */
    token_type?: string;
    /**
     * The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
     * @type {string}
     * @memberof ObtainTokenResponse
     */
    expires_at?: string;
    /**
     * The ID of the authorizing merchant\'s business.
     * @type {string}
     * @memberof ObtainTokenResponse
     */
    merchant_id?: string;
    /**
     * __LEGACY FIELD__. The ID of a subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.
     * @type {string}
     * @memberof ObtainTokenResponse
     */
    subscription_id?: string;
    /**
     * T__LEGACY FIELD__. The ID of the subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.
     * @type {string}
     * @memberof ObtainTokenResponse
     */
    plan_id?: string;
    /**
     * Then OpenID token belonging to this this person. Only present if the OPENID scope is included in the authorize request.
     * @type {string}
     * @memberof ObtainTokenResponse
     */
    id_token?: string;
    /**
     * A refresh token. OAuth refresh tokens are 64 bytes long. For more information, see [OAuth access token management](https://developer.squareup.com/docs/authz/oauth/how-it-works#oauth-access-token-management).
     * @type {string}
     * @memberof ObtainTokenResponse
     */
    refresh_token?: string;
}
/**
 * Contains all information related to a single order to process with Square, including line items that specify the products to purchase. Order objects also include information on any associated tenders, refunds, and returns.  All Connect V2 Transactions have all been converted to Orders including all associated itemization data.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * The order\'s unique ID.
     * @type {string}
     * @memberof Order
     */
    id?: string;
    /**
     * The ID of the merchant location this order is associated with.
     * @type {string}
     * @memberof Order
     */
    location_id: string;
    /**
     * A client specified identifier to associate an entity in another system with this order.
     * @type {string}
     * @memberof Order
     */
    reference_id?: string;
    /**
     *
     * @type {OrderSource}
     * @memberof Order
     */
    source?: OrderSource;
    /**
     * The `Customer` ID of the customer associated with the order.
     * @type {string}
     * @memberof Order
     */
    customer_id?: string;
    /**
     * The line items included in the order.
     * @type {Array<OrderLineItem>}
     * @memberof Order
     */
    line_items?: Array<OrderLineItem>;
    /**
     * The list of all taxes associated with the order.  Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes with `ORDER` scope, the server will generate an `OrderLineItemAppliedTax` for every line item.  On reads, each tax in the list will include the total amount of that tax applied to the order.  __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, usage of the deprecated `line_items.taxes` field will result in an error. Please use `line_items.applied_taxes` instead.
     * @type {Array<OrderLineItemTax>}
     * @memberof Order
     */
    taxes?: Array<OrderLineItemTax>;
    /**
     * The list of all discounts associated with the order.  Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`, an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to. For discounts with `ORDER` scope, the server will generate an `OrderLineItemAppliedDiscount` for every line item.  __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, usage of the deprecated `line_items.discounts` field will result in an error. Please use `line_items.applied_discounts` instead.
     * @type {Array<OrderLineItemDiscount>}
     * @memberof Order
     */
    discounts?: Array<OrderLineItemDiscount>;
    /**
     * A list of service charges applied to the order.
     * @type {Array<OrderServiceCharge>}
     * @memberof Order
     */
    service_charges?: Array<OrderServiceCharge>;
    /**
     * Details on order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API may contain multiple fulfillments.
     * @type {Array<OrderFulfillment>}
     * @memberof Order
     */
    fulfillments?: Array<OrderFulfillment>;
    /**
     * Collection of items from sale Orders being returned in this one. Normally part of an Itemized Return or Exchange.  There will be exactly one `Return` object per sale Order being referenced.
     * @type {Array<OrderReturn>}
     * @memberof Order
     */
    returns?: Array<OrderReturn>;
    /**
     *
     * @type {OrderMoneyAmounts}
     * @memberof Order
     */
    return_amounts?: OrderMoneyAmounts;
    /**
     *
     * @type {OrderMoneyAmounts}
     * @memberof Order
     */
    net_amounts?: OrderMoneyAmounts;
    /**
     *
     * @type {OrderRoundingAdjustment}
     * @memberof Order
     */
    rounding_adjustment?: OrderRoundingAdjustment;
    /**
     * The Tenders which were used to pay for the Order.
     * @type {Array<Tender>}
     * @memberof Order
     */
    tenders?: Array<Tender>;
    /**
     * The Refunds that are part of this Order.
     * @type {Array<Refund>}
     * @memberof Order
     */
    refunds?: Array<Refund>;
    /**
     * Application-defined data attached to this order. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (personally identifiable information, card details, etc.).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a \':\' character.  Values have a max length of 255 characters.  An application may have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
     * @type {{ [key: string]: string; }}
     * @memberof Order
     */
    metadata?: {
        [key: string]: string;
    };
    /**
     * Timestamp for when the order was created. In RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof Order
     */
    created_at?: string;
    /**
     * Timestamp for when the order was last updated. In RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof Order
     */
    updated_at?: string;
    /**
     * Timestamp for when the order reached a terminal [state](#property-state). In RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof Order
     */
    closed_at?: string;
    /**
     * The current state of the order. `OPEN`,`COMPLETED`,`CANCELED` See [OrderState](#type-orderstate) for possible values
     * @type {string}
     * @memberof Order
     */
    state?: string;
    /**
     * Version number which is incremented each time an update is committed to the order. Orders that were not created through the API will not include a version and thus cannot be updated.  [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
     * @type {number}
     * @memberof Order
     */
    version?: number;
    /**
     *
     * @type {Money}
     * @memberof Order
     */
    total_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof Order
     */
    total_tax_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof Order
     */
    total_discount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof Order
     */
    total_tip_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof Order
     */
    total_service_charge_money?: Money;
    /**
     *
     * @type {OrderPricingOptions}
     * @memberof Order
     */
    pricing_options?: OrderPricingOptions;
    /**
     * A set-like list of rewards that have been added to the order.
     * @type {Array<OrderReward>}
     * @memberof Order
     */
    rewards?: Array<OrderReward>;
}
/**
 *
 * @export
 * @interface OrderCreated
 */
export interface OrderCreated {
    /**
     * The order\'s unique ID.
     * @type {string}
     * @memberof OrderCreated
     */
    order_id?: string;
    /**
     * Version number which is incremented each time an update is committed to the order. Orders that were not created through the API will not include a version and thus cannot be updated.  [Read more about working with versions](https://developer.squareup.com/docs/docs/orders-api/manage-orders#update-orders)
     * @type {number}
     * @memberof OrderCreated
     */
    version?: number;
    /**
     * The ID of the merchant location this order is associated with.
     * @type {string}
     * @memberof OrderCreated
     */
    location_id?: string;
    /**
     * The state of the order. See [OrderState](#type-orderstate) for possible values
     * @type {string}
     * @memberof OrderCreated
     */
    state?: string;
    /**
     * Timestamp for when the order was created in RFC 3339 format.
     * @type {string}
     * @memberof OrderCreated
     */
    created_at?: string;
}
/**
 *
 * @export
 * @interface OrderCreatedObject
 */
export interface OrderCreatedObject {
    /**
     *
     * @type {OrderCreated}
     * @memberof OrderCreatedObject
     */
    order_created?: OrderCreated;
}
/**
 * A lightweight description of an [Order](#type-order) that is returned when `returned_entries` is true on a [SearchOrderRequest](#type-searchorderrequest)
 * @export
 * @interface OrderEntry
 */
export interface OrderEntry {
    /**
     * The id of the Order
     * @type {string}
     * @memberof OrderEntry
     */
    order_id?: string;
    /**
     * Version number which is incremented each time an update is committed to the order. Orders that were not created through the API will not include a version and thus cannot be updated.  [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
     * @type {number}
     * @memberof OrderEntry
     */
    version?: number;
    /**
     * The location id the Order belongs to.
     * @type {string}
     * @memberof OrderEntry
     */
    location_id?: string;
}
/**
 * Contains details on how to fulfill this order.
 * @export
 * @interface OrderFulfillment
 */
export interface OrderFulfillment {
    /**
     * Unique ID that identifies the fulfillment only within this order.
     * @type {string}
     * @memberof OrderFulfillment
     */
    uid?: string;
    /**
     * The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values
     * @type {string}
     * @memberof OrderFulfillment
     */
    type?: string;
    /**
     * The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values
     * @type {string}
     * @memberof OrderFulfillment
     */
    state?: string;
    /**
     * Application-defined data attached to this fulfillment. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (personally identifiable information, card details, etc.).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a \':\' character.  Values have a max length of 255 characters.  An application may have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
     * @type {{ [key: string]: string; }}
     * @memberof OrderFulfillment
     */
    metadata?: {
        [key: string]: string;
    };
    /**
     *
     * @type {OrderFulfillmentPickupDetails}
     * @memberof OrderFulfillment
     */
    pickup_details?: OrderFulfillmentPickupDetails;
    /**
     *
     * @type {OrderFulfillmentShipmentDetails}
     * @memberof OrderFulfillment
     */
    shipment_details?: OrderFulfillmentShipmentDetails;
}
/**
 * Contains details necessary to fulfill a pickup order.
 * @export
 * @interface OrderFulfillmentPickupDetails
 */
export interface OrderFulfillmentPickupDetails {
    /**
     *
     * @type {OrderFulfillmentRecipient}
     * @memberof OrderFulfillmentPickupDetails
     */
    recipient?: OrderFulfillmentRecipient;
    /**
     * The [timestamp](#workingwithdates) indicating when this fulfillment will expire if it is not accepted. Must be in RFC 3339 format e.g., \"2016-09-04T23:59:33.123Z\". Expiration time can only be set up to 7 days in the future. If `expires_at` is not set, this pickup fulfillment will be automatically accepted when placed.
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    expires_at?: string;
    /**
     * The duration of time after which an open and accepted pickup fulfillment will automatically move to the `COMPLETED` state. Must be in RFC3339 duration format e.g., \"P1W3D\".  If not set, this pickup fulfillment will remain accepted until it is canceled or completed.
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    auto_complete_duration?: string;
    /**
     * The schedule type of the pickup fulfillment. Defaults to `SCHEDULED`. See [OrderFulfillmentPickupDetailsScheduleType](#type-orderfulfillmentpickupdetailsscheduletype) for possible values
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    schedule_type?: string;
    /**
     * The [timestamp](#workingwithdates) that represents the start of the pickup window. Must be in RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\". For fulfillments with the schedule type `ASAP`, this is automatically set to the current time plus the expected duration to prepare the fulfillment.
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    pickup_at?: string;
    /**
     * The window of time in which the order should be picked up after the `pickup_at` timestamp. Must be in RFC3339 duration format, e.g., \"P1W3D\". Can be used as an informational guideline for merchants.
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    pickup_window_duration?: string;
    /**
     * The duration of time it takes to prepare this fulfillment. Must be in RFC3339 duration format, e.g., \"P1W3D\".
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    prep_time_duration?: string;
    /**
     * A note meant to provide additional instructions about the pickup fulfillment displayed in the Square Point of Sale and set by the API.
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    note?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when the fulfillment was placed. Must be in RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    placed_at?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when the fulfillment was accepted. In RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    accepted_at?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when the fulfillment was rejected. In RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    rejected_at?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when the fulfillment is marked as ready for pickup. In RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    ready_at?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when the fulfillment expired. In RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    expired_at?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when the fulfillment was picked up by the recipient. In RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    picked_up_at?: string;
    /**
     * The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\", indicating when the fulfillment was canceled.
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    canceled_at?: string;
    /**
     * A description of why the pickup was canceled. Max length: 100 characters.
     * @type {string}
     * @memberof OrderFulfillmentPickupDetails
     */
    cancel_reason?: string;
    /**
     * If true, indicates this pickup order is for curbside pickup, not in-store pickup.
     * @type {boolean}
     * @memberof OrderFulfillmentPickupDetails
     */
    is_curbside_pickup?: boolean;
    /**
     *
     * @type {OrderFulfillmentPickupDetailsCurbsidePickupDetails}
     * @memberof OrderFulfillmentPickupDetails
     */
    curbside_pickup_details?: OrderFulfillmentPickupDetailsCurbsidePickupDetails;
}
/**
 * Specific details for curbside pickup.
 * @export
 * @interface OrderFulfillmentPickupDetailsCurbsidePickupDetails
 */
export interface OrderFulfillmentPickupDetailsCurbsidePickupDetails {
    /**
     * Specific details for curbside pickup, such as parking number, vehicle model, etc.
     * @type {string}
     * @memberof OrderFulfillmentPickupDetailsCurbsidePickupDetails
     */
    curbside_details?: string;
    /**
     * The [timestamp](#workingwithdates) in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\", indicating when the buyer arrived and is waiting for pickup.
     * @type {string}
     * @memberof OrderFulfillmentPickupDetailsCurbsidePickupDetails
     */
    buyer_arrived_at?: string;
}
/**
 * The schedule type of the pickup fulfillment.
 * @export
 * @enum {string}
 */
export declare enum OrderFulfillmentPickupDetailsScheduleType {
    SCHEDULED = "SCHEDULED",
    ASAP = "ASAP"
}
/**
 * Contains information on the recipient of a fulfillment.
 * @export
 * @interface OrderFulfillmentRecipient
 */
export interface OrderFulfillmentRecipient {
    /**
     * The Customer ID of the customer associated with the fulfillment.  If `customer_id` is provided, the fulfillment recipient\'s `display_name`, `email_address`, and `phone_number` are automatically populated from the targeted customer profile. If these fields are set in the request, the request values will override the information from the customer profile. If the targeted customer profile does not contain the necessary information and these fields are left unset, the request will result in an error.
     * @type {string}
     * @memberof OrderFulfillmentRecipient
     */
    customer_id?: string;
    /**
     * The display name of the fulfillment recipient.  If provided, overrides the value pulled from the customer profile indicated by `customer_id`.
     * @type {string}
     * @memberof OrderFulfillmentRecipient
     */
    display_name?: string;
    /**
     * The email address of the fulfillment recipient.  If provided, overrides the value pulled from the customer profile indicated by `customer_id`.
     * @type {string}
     * @memberof OrderFulfillmentRecipient
     */
    email_address?: string;
    /**
     * The phone number of the fulfillment recipient.  If provided, overrides the value pulled from the customer profile indicated by `customer_id`.
     * @type {string}
     * @memberof OrderFulfillmentRecipient
     */
    phone_number?: string;
    /**
     *
     * @type {Address}
     * @memberof OrderFulfillmentRecipient
     */
    address?: Address;
}
/**
 * Contains details necessary to fulfill a shipment order.
 * @export
 * @interface OrderFulfillmentShipmentDetails
 */
export interface OrderFulfillmentShipmentDetails {
    /**
     *
     * @type {OrderFulfillmentRecipient}
     * @memberof OrderFulfillmentShipmentDetails
     */
    recipient?: OrderFulfillmentRecipient;
    /**
     * The shipping carrier being used to ship this fulfillment e.g. UPS, FedEx, USPS, etc.
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    carrier?: string;
    /**
     * A note with additional information for the shipping carrier.
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    shipping_note?: string;
    /**
     * A description of the type of shipping product purchased from the carrier. e.g. First Class, Priority, Express
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    shipping_type?: string;
    /**
     * The reference number provided by the carrier to track the shipment\'s progress.
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    tracking_number?: string;
    /**
     * A link to the tracking webpage on the carrier\'s website.
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    tracking_url?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when the shipment was requested. Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    placed_at?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when this fulfillment was moved to the `RESERVED` state. Indicates that preparation of this shipment has begun. Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    in_progress_at?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when this fulfillment was moved to the `PREPARED` state. Indicates that the fulfillment is packaged. Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    packaged_at?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when the shipment is expected to be delivered to the shipping carrier. Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    expected_shipped_at?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when this fulfillment was moved to the `COMPLETED`state. Indicates that the fulfillment has been given to the shipping carrier. Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    shipped_at?: string;
    /**
     * The [timestamp](#workingwithdates) indicating the shipment was canceled. Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    canceled_at?: string;
    /**
     * A description of why the shipment was canceled.
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    cancel_reason?: string;
    /**
     * The [timestamp](#workingwithdates) indicating when the shipment failed to be completed. Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    failed_at?: string;
    /**
     * A description of why the shipment failed to be completed.
     * @type {string}
     * @memberof OrderFulfillmentShipmentDetails
     */
    failure_reason?: string;
}
/**
 * The current state of this fulfillment.
 * @export
 * @enum {string}
 */
export declare enum OrderFulfillmentState {
    PROPOSED = "PROPOSED",
    RESERVED = "RESERVED",
    PREPARED = "PREPARED",
    COMPLETED = "COMPLETED",
    CANCELED = "CANCELED",
    FAILED = "FAILED"
}
/**
 * The type of fulfillment.
 * @export
 * @enum {string}
 */
export declare enum OrderFulfillmentType {
    PICKUP = "PICKUP",
    SHIPMENT = "SHIPMENT"
}
/**
 *
 * @export
 * @interface OrderFulfillmentUpdated
 */
export interface OrderFulfillmentUpdated {
    /**
     * The order\'s unique ID.
     * @type {string}
     * @memberof OrderFulfillmentUpdated
     */
    order_id?: string;
    /**
     * Version number which is incremented each time an update is committed to the order. Orders that were not created through the API will not include a version and thus cannot be updated.  [Read more about working with versions](https://developer.squareup.com/docs/docs/orders-api/manage-orders#update-orders)
     * @type {number}
     * @memberof OrderFulfillmentUpdated
     */
    version?: number;
    /**
     * The ID of the merchant location this order is associated with.
     * @type {string}
     * @memberof OrderFulfillmentUpdated
     */
    location_id?: string;
    /**
     * The state of the order. See [OrderState](#type-orderstate) for possible values
     * @type {string}
     * @memberof OrderFulfillmentUpdated
     */
    state?: string;
    /**
     * Timestamp for when the order was created in RFC 3339 format.
     * @type {string}
     * @memberof OrderFulfillmentUpdated
     */
    created_at?: string;
    /**
     * Timestamp for when the order was last updated in RFC 3339 format.
     * @type {string}
     * @memberof OrderFulfillmentUpdated
     */
    updated_at?: string;
    /**
     * The fulfillments that were updated with this version change.
     * @type {Array<OrderFulfillmentUpdatedUpdate>}
     * @memberof OrderFulfillmentUpdated
     */
    fulfillment_update?: Array<OrderFulfillmentUpdatedUpdate>;
}
/**
 *
 * @export
 * @interface OrderFulfillmentUpdatedObject
 */
export interface OrderFulfillmentUpdatedObject {
    /**
     *
     * @type {OrderFulfillmentUpdated}
     * @memberof OrderFulfillmentUpdatedObject
     */
    order_fulfillment_updated?: OrderFulfillmentUpdated;
}
/**
 * Information about fulfillment updates.
 * @export
 * @interface OrderFulfillmentUpdatedUpdate
 */
export interface OrderFulfillmentUpdatedUpdate {
    /**
     * Unique ID that identifies the fulfillment only within this order.
     * @type {string}
     * @memberof OrderFulfillmentUpdatedUpdate
     */
    fulfillment_uid?: string;
    /**
     * The state of the fulfillment before the change. Will not be populated if the fulfillment is created with this new Order version. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values
     * @type {string}
     * @memberof OrderFulfillmentUpdatedUpdate
     */
    old_state?: string;
    /**
     * The state of the fulfillment after the change. May be equal to old_state if a non-state field was changed on the fulfillment (e.g. tracking number). See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values
     * @type {string}
     * @memberof OrderFulfillmentUpdatedUpdate
     */
    new_state?: string;
}
/**
 * Represents a line item in an order. Each line item describes a different product to purchase, with its own quantity and price details.
 * @export
 * @interface OrderLineItem
 */
export interface OrderLineItem {
    /**
     * Unique ID that identifies the line item only within this order.
     * @type {string}
     * @memberof OrderLineItem
     */
    uid?: string;
    /**
     * The name of the line item.
     * @type {string}
     * @memberof OrderLineItem
     */
    name?: string;
    /**
     * The quantity purchased, formatted as a decimal number. For example: `\"3\"`.  Line items with a quantity of `\"0\"` will be automatically removed upon paying for or otherwise completing the order.  Line items with a `quantity_unit` can have non-integer quantities. For example: `\"1.70000\"`.
     * @type {string}
     * @memberof OrderLineItem
     */
    quantity: string;
    /**
     *
     * @type {OrderQuantityUnit}
     * @memberof OrderLineItem
     */
    quantity_unit?: OrderQuantityUnit;
    /**
     * The note of the line item.
     * @type {string}
     * @memberof OrderLineItem
     */
    note?: string;
    /**
     * The `CatalogItemVariation` id applied to this line item.
     * @type {string}
     * @memberof OrderLineItem
     */
    catalog_object_id?: string;
    /**
     * The name of the variation applied to this line item.
     * @type {string}
     * @memberof OrderLineItem
     */
    variation_name?: string;
    /**
     * Application-defined data attached to this line item. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (personally identifiable information, card details, etc.).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a \':\' character.  Values have a max length of 255 characters.  An application may have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
     * @type {{ [key: string]: string; }}
     * @memberof OrderLineItem
     */
    metadata?: {
        [key: string]: string;
    };
    /**
     * The `CatalogModifier`s applied to this line item.
     * @type {Array<OrderLineItemModifier>}
     * @memberof OrderLineItem
     */
    modifiers?: Array<OrderLineItemModifier>;
    /**
     * The list of references to taxes applied to this line item. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderLineItemTax` applied to the line item. On reads, the amount applied is populated.  An `OrderLineItemAppliedTax` will be automatically created on every line item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax` records for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any line items.  To change the amount of a tax, modify the referenced top-level tax.
     * @type {Array<OrderLineItemAppliedTax>}
     * @memberof OrderLineItem
     */
    applied_taxes?: Array<OrderLineItemAppliedTax>;
    /**
     * The list of references to discounts applied to this line item. Each `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level `OrderLineItemDiscounts` applied to the line item. On reads, the amount applied is populated.  An `OrderLineItemAppliedDiscount` will be automatically created on every line item for all `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any line items.  To change the amount of a discount, modify the referenced top-level discount.
     * @type {Array<OrderLineItemAppliedDiscount>}
     * @memberof OrderLineItem
     */
    applied_discounts?: Array<OrderLineItemAppliedDiscount>;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItem
     */
    base_price_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItem
     */
    variation_total_price_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItem
     */
    gross_sales_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItem
     */
    total_tax_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItem
     */
    total_discount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItem
     */
    total_money?: Money;
}
/**
 * Represents an applied portion of a discount to a line item in an order.  Order scoped discounts will automatically have applied discounts present for each line item. Line item scoped discounts must have applied discounts added manually for any applicable line items. The corresponding applied money will automatically be computed based on participating line items.
 * @export
 * @interface OrderLineItemAppliedDiscount
 */
export interface OrderLineItemAppliedDiscount {
    /**
     * Unique ID that identifies the applied discount only within this order.
     * @type {string}
     * @memberof OrderLineItemAppliedDiscount
     */
    uid?: string;
    /**
     * The `uid` of the discount the applied discount represents. Must reference a discount present in the `order.discounts` field.  This field is immutable. To change which discounts apply to a line item, you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.
     * @type {string}
     * @memberof OrderLineItemAppliedDiscount
     */
    discount_uid: string;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItemAppliedDiscount
     */
    applied_money?: Money;
}
/**
 * Represents an applied portion of a tax to a line item in an order.  Order-scoped taxes automatically include the applied taxes in each line item. Line item taxes must be referenced from any applicable line items. The corresponding applied money is automatically computed, based on the set of participating line items.
 * @export
 * @interface OrderLineItemAppliedTax
 */
export interface OrderLineItemAppliedTax {
    /**
     * Unique ID that identifies the applied tax only within this order.
     * @type {string}
     * @memberof OrderLineItemAppliedTax
     */
    uid?: string;
    /**
     * The `uid` of the tax for which this applied tax represents.  Must reference a tax present in the `order.taxes` field.  This field is immutable. To change which taxes apply to a line item, delete and add new `OrderLineItemAppliedTax`s.
     * @type {string}
     * @memberof OrderLineItemAppliedTax
     */
    tax_uid: string;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItemAppliedTax
     */
    applied_money?: Money;
}
/**
 * Represents a discount that applies to one or more line items in an order.  Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals. The amount distributed to each line item is relative to the amount contributed by the item to the order subtotal.
 * @export
 * @interface OrderLineItemDiscount
 */
export interface OrderLineItemDiscount {
    /**
     * Unique ID that identifies the discount only within this order.
     * @type {string}
     * @memberof OrderLineItemDiscount
     */
    uid?: string;
    /**
     * The catalog object id referencing `CatalogDiscount`.
     * @type {string}
     * @memberof OrderLineItemDiscount
     */
    catalog_object_id?: string;
    /**
     * The discount\'s name.
     * @type {string}
     * @memberof OrderLineItemDiscount
     */
    name?: string;
    /**
     * The type of the discount.  Discounts that don\'t reference a catalog object ID must have a type of `FIXED_PERCENTAGE` or `FIXED_AMOUNT`. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values
     * @type {string}
     * @memberof OrderLineItemDiscount
     */
    type?: string;
    /**
     * The percentage of the discount, as a string representation of a decimal number. A value of `7.25` corresponds to a percentage of 7.25%.  `percentage` is not set for amount-based discounts.
     * @type {string}
     * @memberof OrderLineItemDiscount
     */
    percentage?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItemDiscount
     */
    amount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItemDiscount
     */
    applied_money?: Money;
    /**
     * Application-defined data attached to this discount. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (personally identifiable information, card details, etc.).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a \':\' character.  Values have a max length of 255 characters.  An application may have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
     * @type {{ [key: string]: string; }}
     * @memberof OrderLineItemDiscount
     */
    metadata?: {
        [key: string]: string;
    };
    /**
     * Indicates the level at which the discount applies. For `ORDER` scoped discounts, Square generates references in `applied_discounts` on all order line items that do not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items with a discount reference in their `applied_discounts` field.  This field is immutable. To change the scope of a discount you must delete the discount and re-add it as a new discount. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values
     * @type {string}
     * @memberof OrderLineItemDiscount
     */
    scope?: string;
    /**
     * The reward identifiers corresponding to this discount. The application and specification of discounts that have `reward_ids` are completely controlled by the backing criteria corresponding to the reward tiers of the rewards that are added to the order through the Loyalty API. To manually unapply discounts that are the result of added rewards, the rewards must be removed from the order through the Loyalty API.
     * @type {Array<string>}
     * @memberof OrderLineItemDiscount
     */
    reward_ids?: Array<string>;
    /**
     * The object identifier of a `pricing rule` to be applied automatically to this discount. The specification and application of the discounts, to which a `pricing_rule_id` is assigned, are completely controlled by the corresponding pricing rule.
     * @type {string}
     * @memberof OrderLineItemDiscount
     */
    pricing_rule_id?: string;
}
/**
 * Indicates whether this is a line item or order level discount.
 * @export
 * @enum {string}
 */
export declare enum OrderLineItemDiscountScope {
    OTHERDISCOUNTSCOPE = "OTHER_DISCOUNT_SCOPE",
    LINEITEM = "LINE_ITEM",
    ORDER = "ORDER"
}
/**
 * Indicates how the discount is applied to the associated line item or order.
 * @export
 * @enum {string}
 */
export declare enum OrderLineItemDiscountType {
    UNKNOWNDISCOUNT = "UNKNOWN_DISCOUNT",
    FIXEDPERCENTAGE = "FIXED_PERCENTAGE",
    FIXEDAMOUNT = "FIXED_AMOUNT",
    VARIABLEPERCENTAGE = "VARIABLE_PERCENTAGE",
    VARIABLEAMOUNT = "VARIABLE_AMOUNT"
}
/**
 * A [CatalogModifier](#type-catalogmodifier).
 * @export
 * @interface OrderLineItemModifier
 */
export interface OrderLineItemModifier {
    /**
     * Unique ID that identifies the modifier only within this order.
     * @type {string}
     * @memberof OrderLineItemModifier
     */
    uid?: string;
    /**
     * The catalog object id referencing `CatalogModifier`.
     * @type {string}
     * @memberof OrderLineItemModifier
     */
    catalog_object_id?: string;
    /**
     * The name of the item modifier.
     * @type {string}
     * @memberof OrderLineItemModifier
     */
    name?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItemModifier
     */
    base_price_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderLineItemModifier
     */
    total_price_money?: Money;
}
/**
 * Represents a tax that applies to one or more line item in the order.  Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals. The amount distributed to each line item is relative to the amount the item contributes to the order subtotal.
 * @export
 * @interface OrderLineItemTax
 */
export interface OrderLineItemTax {
    /**
     * Unique ID that identifies the tax only within this order.
     * @type {string}
     * @memberof OrderLineItemTax
     */
    uid?: string;
    /**
     * The catalog object id referencing `CatalogTax`.
     * @type {string}
     * @memberof OrderLineItemTax
     */
    catalog_object_id?: string;
    /**
     * The tax\'s name.
     * @type {string}
     * @memberof OrderLineItemTax
     */
    name?: string;
    /**
     * Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values
     * @type {string}
     * @memberof OrderLineItemTax
     */
    type?: string;
    /**
     * The percentage of the tax, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.
     * @type {string}
     * @memberof OrderLineItemTax
     */
    percentage?: string;
    /**
     * Application-defined data attached to this tax. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (personally identifiable information, card details, etc.).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a \':\' character.  Values have a max length of 255 characters.  An application may have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
     * @type {{ [key: string]: string; }}
     * @memberof OrderLineItemTax
     */
    metadata?: {
        [key: string]: string;
    };
    /**
     *
     * @type {Money}
     * @memberof OrderLineItemTax
     */
    applied_money?: Money;
    /**
     * Indicates the level at which the tax applies. For `ORDER` scoped taxes, Square generates references in `applied_taxes` on all order line items that do not have them. For `LINE_ITEM` scoped taxes, the tax will only apply to line items with references in their `applied_taxes` field.  This field is immutable. To change the scope, you must delete the tax and re-add it as a new tax. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values
     * @type {string}
     * @memberof OrderLineItemTax
     */
    scope?: string;
}
/**
 * Indicates whether this is a line item or order level tax.
 * @export
 * @enum {string}
 */
export declare enum OrderLineItemTaxScope {
    OTHERTAXSCOPE = "OTHER_TAX_SCOPE",
    LINEITEM = "LINE_ITEM",
    ORDER = "ORDER"
}
/**
 * Indicates how the tax is applied to the associated line item or order.
 * @export
 * @enum {string}
 */
export declare enum OrderLineItemTaxType {
    UNKNOWNTAX = "UNKNOWN_TAX",
    ADDITIVE = "ADDITIVE",
    INCLUSIVE = "INCLUSIVE"
}
/**
 * A collection of various money amounts.
 * @export
 * @interface OrderMoneyAmounts
 */
export interface OrderMoneyAmounts {
    /**
     *
     * @type {Money}
     * @memberof OrderMoneyAmounts
     */
    total_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderMoneyAmounts
     */
    tax_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderMoneyAmounts
     */
    discount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderMoneyAmounts
     */
    tip_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderMoneyAmounts
     */
    service_charge_money?: Money;
}
/**
 * Pricing options for an order. The options affect how the order\'s price is calculated. They can be used, for example, to apply automatic price adjustments that are based on pre-configured [pricing rules](/reference/square/objects/CatalogPricingRule).
 * @export
 * @interface OrderPricingOptions
 */
export interface OrderPricingOptions {
    /**
     * The option to determine whether or not pricing rule-based discounts are automatically applied to an order.
     * @type {boolean}
     * @memberof OrderPricingOptions
     */
    auto_apply_discounts?: boolean;
}
/**
 * Contains the measurement unit for a quantity and a precision which specifies the number of digits after the decimal point for decimal quantities.
 * @export
 * @interface OrderQuantityUnit
 */
export interface OrderQuantityUnit {
    /**
     *
     * @type {MeasurementUnit}
     * @memberof OrderQuantityUnit
     */
    measurement_unit?: MeasurementUnit;
    /**
     * For non-integer quantities, represents the number of digits after the decimal point that are recorded for this quantity.  For example, a precision of 1 allows quantities like `\"1.0\"` and `\"1.1\"`, but not `\"1.01\"`.  Min: 0. Max: 5.
     * @type {number}
     * @memberof OrderQuantityUnit
     */
    precision?: number;
}
/**
 * The set of line items, service charges, taxes, discounts, tips, etc. being returned in an Order.
 * @export
 * @interface OrderReturn
 */
export interface OrderReturn {
    /**
     * Unique ID that identifies the return only within this order.
     * @type {string}
     * @memberof OrderReturn
     */
    uid?: string;
    /**
     * Order which contains the original sale of these returned line items. This will be unset for unlinked returns.
     * @type {string}
     * @memberof OrderReturn
     */
    source_order_id?: string;
    /**
     * Collection of line items which are being returned.
     * @type {Array<OrderReturnLineItem>}
     * @memberof OrderReturn
     */
    return_line_items?: Array<OrderReturnLineItem>;
    /**
     * Collection of service charges which are being returned.
     * @type {Array<OrderReturnServiceCharge>}
     * @memberof OrderReturn
     */
    return_service_charges?: Array<OrderReturnServiceCharge>;
    /**
     * Collection of references to taxes being returned for an order, including the total applied tax amount to be returned. The taxes must reference a top-level tax ID from the source order.
     * @type {Array<OrderReturnTax>}
     * @memberof OrderReturn
     */
    return_taxes?: Array<OrderReturnTax>;
    /**
     * Collection of references to discounts being returned for an order, including the total applied discount amount to be returned. The discounts must reference a top-level discount ID from the source order.
     * @type {Array<OrderReturnDiscount>}
     * @memberof OrderReturn
     */
    return_discounts?: Array<OrderReturnDiscount>;
    /**
     *
     * @type {OrderRoundingAdjustment}
     * @memberof OrderReturn
     */
    rounding_adjustment?: OrderRoundingAdjustment;
    /**
     *
     * @type {OrderMoneyAmounts}
     * @memberof OrderReturn
     */
    return_amounts?: OrderMoneyAmounts;
}
/**
 * Represents a discount being returned that applies to one or more return line items in an order.  Fixed-amount, order-scoped discounts are distributed across all non-zero return line item totals. The amount distributed to each return line item is relative to that itemâ€™s contribution to the order subtotal.
 * @export
 * @interface OrderReturnDiscount
 */
export interface OrderReturnDiscount {
    /**
     * Unique ID that identifies the return discount only within this order.
     * @type {string}
     * @memberof OrderReturnDiscount
     */
    uid?: string;
    /**
     * `uid` of the Discount from the Order which contains the original application of this discount.
     * @type {string}
     * @memberof OrderReturnDiscount
     */
    source_discount_uid?: string;
    /**
     * The catalog object id referencing `CatalogDiscount`.
     * @type {string}
     * @memberof OrderReturnDiscount
     */
    catalog_object_id?: string;
    /**
     * The discount\'s name.
     * @type {string}
     * @memberof OrderReturnDiscount
     */
    name?: string;
    /**
     * The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  Discounts that don\'t reference a catalog object ID must have a type of `FIXED_PERCENTAGE` or `FIXED_AMOUNT`. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values
     * @type {string}
     * @memberof OrderReturnDiscount
     */
    type?: string;
    /**
     * The percentage of the tax, as a string representation of a decimal number. A value of `7.25` corresponds to a percentage of 7.25%.  `percentage` is not set for amount-based discounts.
     * @type {string}
     * @memberof OrderReturnDiscount
     */
    percentage?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnDiscount
     */
    amount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnDiscount
     */
    applied_money?: Money;
    /**
     * Indicates the level at which the `OrderReturnDiscount` applies. For `ORDER` scoped discounts, the server will generate references in `applied_discounts` on all `OrderReturnLineItem`s. For `LINE_ITEM` scoped discounts, the discount will only apply to `OrderReturnLineItem`s with references in their `applied_discounts` field. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values
     * @type {string}
     * @memberof OrderReturnDiscount
     */
    scope?: string;
}
/**
 * The line item being returned in an Order.
 * @export
 * @interface OrderReturnLineItem
 */
export interface OrderReturnLineItem {
    /**
     * Unique identifier for this return line item entry.
     * @type {string}
     * @memberof OrderReturnLineItem
     */
    uid?: string;
    /**
     * `uid` of the LineItem in the original sale Order.
     * @type {string}
     * @memberof OrderReturnLineItem
     */
    source_line_item_uid?: string;
    /**
     * The name of the line item.
     * @type {string}
     * @memberof OrderReturnLineItem
     */
    name?: string;
    /**
     * The quantity returned, formatted as a decimal number. For example: `\"3\"`.  Line items with a `quantity_unit` can have non-integer quantities. For example: `\"1.70000\"`.
     * @type {string}
     * @memberof OrderReturnLineItem
     */
    quantity: string;
    /**
     *
     * @type {OrderQuantityUnit}
     * @memberof OrderReturnLineItem
     */
    quantity_unit?: OrderQuantityUnit;
    /**
     * The note of the returned line item.
     * @type {string}
     * @memberof OrderReturnLineItem
     */
    note?: string;
    /**
     * The `CatalogItemVariation` id applied to this returned line item.
     * @type {string}
     * @memberof OrderReturnLineItem
     */
    catalog_object_id?: string;
    /**
     * The name of the variation applied to this returned line item.
     * @type {string}
     * @memberof OrderReturnLineItem
     */
    variation_name?: string;
    /**
     * The `CatalogModifier`s applied to this line item.
     * @type {Array<OrderReturnLineItemModifier>}
     * @memberof OrderReturnLineItem
     */
    return_modifiers?: Array<OrderReturnLineItemModifier>;
    /**
     * The list of references to `OrderReturnTax` entities applied to the returned line item. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderReturnTax` applied to the returned line item. On reads, the amount applied is populated.
     * @type {Array<OrderLineItemAppliedTax>}
     * @memberof OrderReturnLineItem
     */
    applied_taxes?: Array<OrderLineItemAppliedTax>;
    /**
     * The list of references to `OrderReturnDiscount` entities applied to the returned line item. Each `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level `OrderReturnDiscount` applied to the returned line item. On reads, the amount applied is populated.
     * @type {Array<OrderLineItemAppliedDiscount>}
     * @memberof OrderReturnLineItem
     */
    applied_discounts?: Array<OrderLineItemAppliedDiscount>;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnLineItem
     */
    base_price_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnLineItem
     */
    variation_total_price_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnLineItem
     */
    gross_return_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnLineItem
     */
    total_tax_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnLineItem
     */
    total_discount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnLineItem
     */
    total_money?: Money;
}
/**
 * A line item modifier being returned.
 * @export
 * @interface OrderReturnLineItemModifier
 */
export interface OrderReturnLineItemModifier {
    /**
     * Unique ID that identifies the return modifier only within this order.
     * @type {string}
     * @memberof OrderReturnLineItemModifier
     */
    uid?: string;
    /**
     * `uid` of the Modifier from the LineItem from the Order which contains the original sale of this line item modifier.
     * @type {string}
     * @memberof OrderReturnLineItemModifier
     */
    source_modifier_uid?: string;
    /**
     * The catalog object id referencing `CatalogModifier`.
     * @type {string}
     * @memberof OrderReturnLineItemModifier
     */
    catalog_object_id?: string;
    /**
     * The name of the item modifier.
     * @type {string}
     * @memberof OrderReturnLineItemModifier
     */
    name?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnLineItemModifier
     */
    base_price_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnLineItemModifier
     */
    total_price_money?: Money;
}
/**
 * Represents the service charge applied to the original order.
 * @export
 * @interface OrderReturnServiceCharge
 */
export interface OrderReturnServiceCharge {
    /**
     * Unique ID that identifies the return service charge only within this order.
     * @type {string}
     * @memberof OrderReturnServiceCharge
     */
    uid?: string;
    /**
     * `uid` of the Service Charge from the Order containing the original charge of the service charge. `source_service_charge_uid` is `null` for unlinked returns.
     * @type {string}
     * @memberof OrderReturnServiceCharge
     */
    source_service_charge_uid?: string;
    /**
     * The name of the service charge.
     * @type {string}
     * @memberof OrderReturnServiceCharge
     */
    name?: string;
    /**
     * The catalog object ID of the associated `CatalogServiceCharge`.
     * @type {string}
     * @memberof OrderReturnServiceCharge
     */
    catalog_object_id?: string;
    /**
     * The percentage of the service charge, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.  Exactly one of `percentage` or `amount_money` should be set.
     * @type {string}
     * @memberof OrderReturnServiceCharge
     */
    percentage?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnServiceCharge
     */
    amount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnServiceCharge
     */
    applied_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnServiceCharge
     */
    total_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnServiceCharge
     */
    total_tax_money?: Money;
    /**
     * The calculation phase after which to apply the service charge. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values
     * @type {string}
     * @memberof OrderReturnServiceCharge
     */
    calculation_phase?: string;
    /**
     * Indicates whether the surcharge can be taxed. Service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
     * @type {boolean}
     * @memberof OrderReturnServiceCharge
     */
    taxable?: boolean;
    /**
     * The list of references to `OrderReturnTax` entities applied to the `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderReturnTax` that is being applied to the `OrderReturnServiceCharge`. On reads, the amount applied is populated.
     * @type {Array<OrderLineItemAppliedTax>}
     * @memberof OrderReturnServiceCharge
     */
    applied_taxes?: Array<OrderLineItemAppliedTax>;
}
/**
 * Represents a tax being returned that applies to one or more return line items in an order.  Fixed-amount, order-scoped taxes are distributed across all non-zero return line item totals. The amount distributed to each return line item is relative to that itemâ€™s contribution to the order subtotal.
 * @export
 * @interface OrderReturnTax
 */
export interface OrderReturnTax {
    /**
     * Unique ID that identifies the return tax only within this order.
     * @type {string}
     * @memberof OrderReturnTax
     */
    uid?: string;
    /**
     * `uid` of the Tax from the Order which contains the original charge of this tax.
     * @type {string}
     * @memberof OrderReturnTax
     */
    source_tax_uid?: string;
    /**
     * The catalog object id referencing `CatalogTax`.
     * @type {string}
     * @memberof OrderReturnTax
     */
    catalog_object_id?: string;
    /**
     * The tax\'s name.
     * @type {string}
     * @memberof OrderReturnTax
     */
    name?: string;
    /**
     * Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values
     * @type {string}
     * @memberof OrderReturnTax
     */
    type?: string;
    /**
     * The percentage of the tax, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.
     * @type {string}
     * @memberof OrderReturnTax
     */
    percentage?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderReturnTax
     */
    applied_money?: Money;
    /**
     * Indicates the level at which the `OrderReturnTax` applies. For `ORDER` scoped taxes, Square generates references in `applied_taxes` on all `OrderReturnLineItem`s. For `LINE_ITEM` scoped taxes, the tax will only apply to `OrderReturnLineItem`s with references in their `applied_discounts` field. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values
     * @type {string}
     * @memberof OrderReturnTax
     */
    scope?: string;
}
/**
 * Represents a reward that may be applied to an order if the necessary reward tier criteria are met. Rewards are created through the Loyalty API.
 * @export
 * @interface OrderReward
 */
export interface OrderReward {
    /**
     * The identifier of the reward.
     * @type {string}
     * @memberof OrderReward
     */
    id: string;
    /**
     * The identifier of the reward tier corresponding to this reward.
     * @type {string}
     * @memberof OrderReward
     */
    reward_tier_id: string;
}
/**
 * A rounding adjustment of the money being returned. Commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.
 * @export
 * @interface OrderRoundingAdjustment
 */
export interface OrderRoundingAdjustment {
    /**
     * Unique ID that identifies the rounding adjustment only within this order.
     * @type {string}
     * @memberof OrderRoundingAdjustment
     */
    uid?: string;
    /**
     * The name of the rounding adjustment from the original sale Order.
     * @type {string}
     * @memberof OrderRoundingAdjustment
     */
    name?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderRoundingAdjustment
     */
    amount_money?: Money;
}
/**
 * Represents a service charge applied to an order.
 * @export
 * @interface OrderServiceCharge
 */
export interface OrderServiceCharge {
    /**
     * Unique ID that identifies the service charge only within this order.
     * @type {string}
     * @memberof OrderServiceCharge
     */
    uid?: string;
    /**
     * The name of the service charge.
     * @type {string}
     * @memberof OrderServiceCharge
     */
    name?: string;
    /**
     * The catalog object ID referencing the service charge `CatalogObject`.
     * @type {string}
     * @memberof OrderServiceCharge
     */
    catalog_object_id?: string;
    /**
     * The service charge percentage as a string representation of a decimal number. For example, `\"7.25\"` indicates a service charge of 7.25%.  Exactly 1 of `percentage` or `amount_money` should be set.
     * @type {string}
     * @memberof OrderServiceCharge
     */
    percentage?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderServiceCharge
     */
    amount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderServiceCharge
     */
    applied_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderServiceCharge
     */
    total_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderServiceCharge
     */
    total_tax_money?: Money;
    /**
     * The calculation phase at which to apply the service charge. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values
     * @type {string}
     * @memberof OrderServiceCharge
     */
    calculation_phase?: string;
    /**
     * Indicates whether the service charge can be taxed. If set to `true`, order-level taxes automatically apply to the service charge. Note that service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
     * @type {boolean}
     * @memberof OrderServiceCharge
     */
    taxable?: boolean;
    /**
     * The list of references to taxes applied to this service charge. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderLineItemTax` that is being applied to this service charge. On reads, the amount applied is populated.  An `OrderLineItemAppliedTax` will be automatically created on every taxable service charge for all `ORDER` scoped taxes that are added to the order. `OrderLineItemAppliedTax` records for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any taxable service charge.  Taxable service charges have the `taxable` field set to true and calculated in the `SUBTOTAL_PHASE`.  To change the amount of a tax, modify the referenced top-level tax.
     * @type {Array<OrderLineItemAppliedTax>}
     * @memberof OrderServiceCharge
     */
    applied_taxes?: Array<OrderLineItemAppliedTax>;
    /**
     * Application-defined data attached to this service charge. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (personally identifiable information, card details, etc.).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a \':\' character.  Values have a max length of 255 characters.  An application may have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
     * @type {{ [key: string]: string; }}
     * @memberof OrderServiceCharge
     */
    metadata?: {
        [key: string]: string;
    };
}
/**
 * Represents a phase in the process of calculating order totals. Service charges are applied __after__ the indicated phase.  [Read more about how order totals are calculated.](https://developer.squareup.com/docs/docs/orders-api/how-it-works#how-totals-are-calculated)
 * @export
 * @enum {string}
 */
export declare enum OrderServiceChargeCalculationPhase {
    SUBTOTALPHASE = "SUBTOTAL_PHASE",
    TOTALPHASE = "TOTAL_PHASE"
}
/**
 * Represents the origination details of an order.
 * @export
 * @interface OrderSource
 */
export interface OrderSource {
    /**
     * The name used to identify the place (physical or digital) that an order originates. If unset, the name defaults to the name of the application that created the order.
     * @type {string}
     * @memberof OrderSource
     */
    name?: string;
}
/**
 * The state of the order.
 * @export
 * @enum {string}
 */
export declare enum OrderState {
    OPEN = "OPEN",
    COMPLETED = "COMPLETED",
    CANCELED = "CANCELED"
}
/**
 *
 * @export
 * @interface OrderUpdated
 */
export interface OrderUpdated {
    /**
     * The order\'s unique ID.
     * @type {string}
     * @memberof OrderUpdated
     */
    order_id?: string;
    /**
     * Version number which is incremented each time an update is committed to the order. Orders that were not created through the API will not include a version and thus cannot be updated.  [Read more about working with versions](https://developer.squareup.com/docs/docs/orders-api/manage-orders#update-orders)
     * @type {number}
     * @memberof OrderUpdated
     */
    version?: number;
    /**
     * The ID of the merchant location this order is associated with.
     * @type {string}
     * @memberof OrderUpdated
     */
    location_id?: string;
    /**
     * The state of the order. See [OrderState](#type-orderstate) for possible values
     * @type {string}
     * @memberof OrderUpdated
     */
    state?: string;
    /**
     * Timestamp for when the order was created in RFC 3339 format.
     * @type {string}
     * @memberof OrderUpdated
     */
    created_at?: string;
    /**
     * Timestamp for when the order was last updated in RFC 3339 format.
     * @type {string}
     * @memberof OrderUpdated
     */
    updated_at?: string;
}
/**
 *
 * @export
 * @interface OrderUpdatedObject
 */
export interface OrderUpdatedObject {
    /**
     *
     * @type {OrderUpdated}
     * @memberof OrderUpdatedObject
     */
    order_updated?: OrderUpdated;
}
/**
 * Defines the fields that are included in requests to the [PayOrder](#endpoint-payorder) endpoint.
 * @export
 * @interface PayOrderRequest
 */
export interface PayOrderRequest {
    /**
     * A value you specify that uniquely identifies this request among requests you\'ve sent. If you\'re unsure whether a particular payment request was completed successfully, you can reattempt it with the same idempotency key without worrying about duplicate payments.  See [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
     * @type {string}
     * @memberof PayOrderRequest
     */
    idempotency_key: string;
    /**
     * The version of the order being paid. If not supplied, the latest version will be paid.
     * @type {number}
     * @memberof PayOrderRequest
     */
    order_version?: number;
    /**
     * The IDs of the `payments` to collect. The payment total must match the order total.
     * @type {Array<string>}
     * @memberof PayOrderRequest
     */
    payment_ids?: Array<string>;
}
/**
 * Defines the fields that are included in the response body of a request to the [PayOrder](#endpoint-payorder) endpoint.
 * @export
 * @interface PayOrderResponse
 */
export interface PayOrderResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof PayOrderResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Order}
     * @memberof PayOrderResponse
     */
    order?: Order;
}
/**
 * Represents a payment processed by the Square API.
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * Unique ID for the payment.
     * @type {string}
     * @memberof Payment
     */
    id?: string;
    /**
     * Timestamp of when the payment was created, in RFC 3339 format.
     * @type {string}
     * @memberof Payment
     */
    created_at?: string;
    /**
     * Timestamp of when the payment was last updated, in RFC 3339 format.
     * @type {string}
     * @memberof Payment
     */
    updated_at?: string;
    /**
     *
     * @type {Money}
     * @memberof Payment
     */
    amount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof Payment
     */
    tip_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof Payment
     */
    total_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof Payment
     */
    app_fee_money?: Money;
    /**
     * Processing fees and fee adjustments assessed by Square on this payment.
     * @type {Array<ProcessingFee>}
     * @memberof Payment
     */
    processing_fee?: Array<ProcessingFee>;
    /**
     *
     * @type {Money}
     * @memberof Payment
     */
    refunded_money?: Money;
    /**
     * Indicates whether the payment is `APPROVED`, `COMPLETED`, `CANCELED`, or `FAILED`.
     * @type {string}
     * @memberof Payment
     */
    status?: string;
    /**
     * The duration of time after the payment\'s creation when Square automatically applies the `delay_action` to the payment. This automatic `delay_action` applies only to payments that don\'t reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.  This field is specified as a time duration, in RFC 3339 format.  Notes: This feature is only supported for card payments.  Default:  - Card Present payments: \"PT36H\" (36 hours) from the creation time. - Card Not Present payments: \"P7D\" (7 days) from the creation time.
     * @type {string}
     * @memberof Payment
     */
    delay_duration?: string;
    /**
     * The action to be applied to the payment when the `delay_duration` has elapsed. This field is read only.  Current values include: `CANCEL`
     * @type {string}
     * @memberof Payment
     */
    delay_action?: string;
    /**
     * Read only timestamp of when the `delay_action` will automatically be applied, in RFC 3339 format.  Note that this field is calculated by summing the payment\'s `delay_duration` and `created_at` fields. The `created_at` field is generated by Square and may not exactly match the time on your local machine.
     * @type {string}
     * @memberof Payment
     */
    delayed_until?: string;
    /**
     * The source type for this payment  Current values include: `CARD`.
     * @type {string}
     * @memberof Payment
     */
    source_type?: string;
    /**
     *
     * @type {CardPaymentDetails}
     * @memberof Payment
     */
    card_details?: CardPaymentDetails;
    /**
     * ID of the location associated with the payment.
     * @type {string}
     * @memberof Payment
     */
    location_id?: string;
    /**
     * ID of the order associated with this payment.
     * @type {string}
     * @memberof Payment
     */
    order_id?: string;
    /**
     * An optional ID that associates this payment with an entity in another system.
     * @type {string}
     * @memberof Payment
     */
    reference_id?: string;
    /**
     * The `Customer` ID of the customer associated with the payment.
     * @type {string}
     * @memberof Payment
     */
    customer_id?: string;
    /**
     * An optional ID of the employee associated with taking this payment.
     * @type {string}
     * @memberof Payment
     */
    employee_id?: string;
    /**
     * List of `refund_id`s identifying refunds for this payment.
     * @type {Array<string>}
     * @memberof Payment
     */
    refund_ids?: Array<string>;
    /**
     * The buyer\'s e-mail address
     * @type {string}
     * @memberof Payment
     */
    buyer_email_address?: string;
    /**
     *
     * @type {Address}
     * @memberof Payment
     */
    billing_address?: Address;
    /**
     *
     * @type {Address}
     * @memberof Payment
     */
    shipping_address?: Address;
    /**
     * An optional note to include when creating a payment
     * @type {string}
     * @memberof Payment
     */
    note?: string;
    /**
     * Additional payment information that gets added on the customer\'s card statement as part of the statement description.  Note that the `statement_description_identifier` may get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the merchant taking the payment.
     * @type {string}
     * @memberof Payment
     */
    statement_description_identifier?: string;
    /**
     * The payment\'s receipt number. The field will be missing if a payment is CANCELED
     * @type {string}
     * @memberof Payment
     */
    receipt_number?: string;
    /**
     * The URL for the payment\'s receipt. The field will only be populated for COMPLETED payments.
     * @type {string}
     * @memberof Payment
     */
    receipt_url?: string;
}
/**
 *
 * @export
 * @interface PaymentOptions
 */
export interface PaymentOptions {
    /**
     * Indicates whether the Payment objects created from this `TerminalCheckout` will automatically be `COMPLETED` or left in an `APPROVED` state for later modification.
     * @type {boolean}
     * @memberof PaymentOptions
     */
    autocomplete?: boolean;
}
/**
 * Represents a refund of a payment made using Square. Contains information on the original payment and the amount of money refunded.
 * @export
 * @interface PaymentRefund
 */
export interface PaymentRefund {
    /**
     * Unique ID for this refund, generated by Square.
     * @type {string}
     * @memberof PaymentRefund
     */
    id: string;
    /**
     * The refund\'s status: - `PENDING` - awaiting approval - `COMPLETED` - successfully completed - `REJECTED` - the refund was rejected - `FAILED` - an error occurred
     * @type {string}
     * @memberof PaymentRefund
     */
    status?: string;
    /**
     * Location ID associated with the payment this refund is attached to.
     * @type {string}
     * @memberof PaymentRefund
     */
    location_id?: string;
    /**
     *
     * @type {Money}
     * @memberof PaymentRefund
     */
    amount_money: Money;
    /**
     *
     * @type {Money}
     * @memberof PaymentRefund
     */
    app_fee_money?: Money;
    /**
     * Processing fees and fee adjustments assessed by Square on this refund.
     * @type {Array<ProcessingFee>}
     * @memberof PaymentRefund
     */
    processing_fee?: Array<ProcessingFee>;
    /**
     * The ID of the payment assocated with this refund.
     * @type {string}
     * @memberof PaymentRefund
     */
    payment_id?: string;
    /**
     * The ID of the order associated with the refund.
     * @type {string}
     * @memberof PaymentRefund
     */
    order_id?: string;
    /**
     * The reason for the refund.
     * @type {string}
     * @memberof PaymentRefund
     */
    reason?: string;
    /**
     * Timestamp of when the refund was created, in RFC 3339 format.
     * @type {string}
     * @memberof PaymentRefund
     */
    created_at?: string;
    /**
     * Timestamp of when the refund was last updated, in RFC 3339 format.
     * @type {string}
     * @memberof PaymentRefund
     */
    updated_at?: string;
}
/**
 * Represents Square processing fee.
 * @export
 * @interface ProcessingFee
 */
export interface ProcessingFee {
    /**
     * Timestamp of when the fee takes effect, in RFC 3339 format.
     * @type {string}
     * @memberof ProcessingFee
     */
    effective_at?: string;
    /**
     * The type of fee assessed or adjusted. Can be one of: `INITIAL`, `ADJUSTMENT`.
     * @type {string}
     * @memberof ProcessingFee
     */
    type?: string;
    /**
     *
     * @type {Money}
     * @memberof ProcessingFee
     */
    amount_money?: Money;
}
/**
 * Indicates the Square product used to generate an inventory change.
 * @export
 * @enum {string}
 */
export declare enum Product {
    SQUAREPOS = "SQUARE_POS",
    EXTERNALAPI = "EXTERNAL_API",
    BILLING = "BILLING",
    APPOINTMENTS = "APPOINTMENTS",
    INVOICES = "INVOICES",
    ONLINESTORE = "ONLINE_STORE",
    PAYROLL = "PAYROLL",
    DASHBOARD = "DASHBOARD",
    ITEMLIBRARYIMPORT = "ITEM_LIBRARY_IMPORT",
    OTHER = "OTHER"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ProductType {
    TERMINALAPI = "TERMINAL_API"
}
/**
 * Describes a `PublishInvoice` request.
 * @export
 * @interface PublishInvoiceRequest
 */
export interface PublishInvoiceRequest {
    /**
     * The version of the `Invoice` to publish. This must match the current version of the invoice, otherwise the request is rejected.
     * @type {number}
     * @memberof PublishInvoiceRequest
     */
    version: number;
    /**
     * A unique string that identifies the `PublishInvoice` request. If you do not  provide `idempotency_key` (or provide an empty string as the value), the endpoint  treats each request as independent.  For more information, see [Idempotency](https://developer.squareup.com/docs/docs/working-with-apis/idempotency).
     * @type {string}
     * @memberof PublishInvoiceRequest
     */
    idempotency_key?: string;
}
/**
 * Describes a `PublishInvoice` response.
 * @export
 * @interface PublishInvoiceResponse
 */
export interface PublishInvoiceResponse {
    /**
     *
     * @type {Invoice}
     * @memberof PublishInvoiceResponse
     */
    invoice?: Invoice;
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof PublishInvoiceResponse
     */
    errors?: Array<Error>;
}
/**
 * The range of a number value between the specified lower and upper bounds.
 * @export
 * @interface Range
 */
export interface Range {
    /**
     * The lower bound of the number range.
     * @type {string}
     * @memberof Range
     */
    min?: string;
    /**
     * The upper bound of the number range.
     * @type {string}
     * @memberof Range
     */
    max?: string;
}
/**
 * A request to redeem a loyalty reward.
 * @export
 * @interface RedeemLoyaltyRewardRequest
 */
export interface RedeemLoyaltyRewardRequest {
    /**
     * A unique string that identifies this `RedeemLoyaltyReward` request.  Keys can be any valid string, but must be unique for every request.
     * @type {string}
     * @memberof RedeemLoyaltyRewardRequest
     */
    idempotency_key: string;
    /**
     * The ID of the `location` where the reward is redeemed.
     * @type {string}
     * @memberof RedeemLoyaltyRewardRequest
     */
    location_id: string;
}
/**
 * A response that includes the `LoyaltyEvent` published for redeeming the reward.
 * @export
 * @interface RedeemLoyaltyRewardResponse
 */
export interface RedeemLoyaltyRewardResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RedeemLoyaltyRewardResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {LoyaltyEvent}
     * @memberof RedeemLoyaltyRewardResponse
     */
    event?: LoyaltyEvent;
}
/**
 * Represents a refund processed for a Square transaction.
 * @export
 * @interface Refund
 */
export interface Refund {
    /**
     * The refund\'s unique ID.
     * @type {string}
     * @memberof Refund
     */
    id: string;
    /**
     * The ID of the refund\'s associated location.
     * @type {string}
     * @memberof Refund
     */
    location_id: string;
    /**
     * The ID of the transaction that the refunded tender is part of.
     * @type {string}
     * @memberof Refund
     */
    transaction_id: string;
    /**
     * The ID of the refunded tender.
     * @type {string}
     * @memberof Refund
     */
    tender_id: string;
    /**
     * The timestamp for when the refund was created, in RFC 3339 format.
     * @type {string}
     * @memberof Refund
     */
    created_at?: string;
    /**
     * The reason for the refund being issued.
     * @type {string}
     * @memberof Refund
     */
    reason: string;
    /**
     *
     * @type {Money}
     * @memberof Refund
     */
    amount_money: Money;
    /**
     * The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`). See [RefundStatus](#type-refundstatus) for possible values
     * @type {string}
     * @memberof Refund
     */
    status: string;
    /**
     *
     * @type {Money}
     * @memberof Refund
     */
    processing_fee_money?: Money;
    /**
     * Additional recipients (other than the merchant) receiving a portion of this refund. For example, fees assessed on a refund of a purchase by a third party integration.
     * @type {Array<AdditionalRecipient>}
     * @memberof Refund
     */
    additional_recipients?: Array<AdditionalRecipient>;
}
/**
 * Refunds a payment.
 * @export
 * @interface RefundPaymentRequest
 */
export interface RefundPaymentRequest {
    /**
     *  A unique string that identifies this RefundPayment request. Key can be any valid string but must be unique for every RefundPayment request.  For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).
     * @type {string}
     * @memberof RefundPaymentRequest
     */
    idempotency_key: string;
    /**
     *
     * @type {Money}
     * @memberof RefundPaymentRequest
     */
    amount_money: Money;
    /**
     *
     * @type {Money}
     * @memberof RefundPaymentRequest
     */
    app_fee_money?: Money;
    /**
     * Unique ID of the payment being refunded.
     * @type {string}
     * @memberof RefundPaymentRequest
     */
    payment_id: string;
    /**
     * A description of the reason for the refund.
     * @type {string}
     * @memberof RefundPaymentRequest
     */
    reason?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the [RefundPayment](#endpoint-refunds-refundpayment) endpoint.  Note: if there are errors processing the request, the refund field may not be present, or it may be present in a FAILED state.
 * @export
 * @interface RefundPaymentResponse
 */
export interface RefundPaymentResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof RefundPaymentResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {PaymentRefund}
     * @memberof RefundPaymentResponse
     */
    refund?: PaymentRefund;
}
/**
 * Indicates a refund\'s current status.
 * @export
 * @enum {string}
 */
export declare enum RefundStatus {
    PENDING = "PENDING",
    APPROVED = "APPROVED",
    REJECTED = "REJECTED",
    FAILED = "FAILED"
}
/**
 * Defines the parameters that can be included in the body of a request to the [RegisterDomain](#endpoint-registerdomain) endpoint.
 * @export
 * @interface RegisterDomainRequest
 */
export interface RegisterDomainRequest {
    /**
     * A domain name as described in RFC-1034 that will be registered with ApplePay
     * @type {string}
     * @memberof RegisterDomainRequest
     */
    domain_name: string;
}
/**
 * Defines the fields that are included in the response body of a request to the [RegisterDomain](#endpoint-registerdomain) endpoint.  Either `errors` or `status` will be present in a given response (never both).
 * @export
 * @interface RegisterDomainResponse
 */
export interface RegisterDomainResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RegisterDomainResponse
     */
    errors?: Array<Error>;
    /**
     * Status of the domain registration.  See `RegisterDomainResponseStatus` for possible values. See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values
     * @type {string}
     * @memberof RegisterDomainResponse
     */
    status?: string;
}
/**
 * The status of domain registration.
 * @export
 * @enum {string}
 */
export declare enum RegisterDomainResponseStatus {
    PENDING = "PENDING",
    VERIFIED = "VERIFIED"
}
/**
 * Defines fields in a RemoveDisputeEvidence response.
 * @export
 * @interface RemoveDisputeEvidenceResponse
 */
export interface RemoveDisputeEvidenceResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof RemoveDisputeEvidenceResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines the fields that are included in the response body of a request to the [RemoveGroupFromCustomer](#endpoint-removegroupfromcustomer) endpoint.
 * @export
 * @interface RemoveGroupFromCustomerResponse
 */
export interface RemoveGroupFromCustomerResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RemoveGroupFromCustomerResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface RenewTokenRequest
 */
export interface RenewTokenRequest {
    /**
     * The token you want to renew.
     * @type {string}
     * @memberof RenewTokenRequest
     */
    access_token?: string;
}
/**
 *
 * @export
 * @interface RenewTokenResponse
 */
export interface RenewTokenResponse {
    /**
     * The renewed access token. This value might be different from the `access_token` you provided in your request. You provide this token in a header with every request to Connect API endpoints. See [Request and response headers](https://developer.squareup.com/docs/api/connect/v2/#requestandresponseheaders) for the format of this header.
     * @type {string}
     * @memberof RenewTokenResponse
     */
    access_token?: string;
    /**
     * This value is always _bearer_.
     * @type {string}
     * @memberof RenewTokenResponse
     */
    token_type?: string;
    /**
     * The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
     * @type {string}
     * @memberof RenewTokenResponse
     */
    expires_at?: string;
    /**
     * The ID of the authorizing merchant\'s business.
     * @type {string}
     * @memberof RenewTokenResponse
     */
    merchant_id?: string;
    /**
     * __LEGACY FIELD__. The ID of the merchant subscription associated with the authorization. Only present if the merchant signed up for a subscription during authorization..
     * @type {string}
     * @memberof RenewTokenResponse
     */
    subscription_id?: string;
    /**
     * __LEGACY FIELD__. The ID of the subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.
     * @type {string}
     * @memberof RenewTokenResponse
     */
    plan_id?: string;
}
/**
 *
 * @export
 * @interface RetrieveCashDrawerShiftRequest
 */
export interface RetrieveCashDrawerShiftRequest {
    /**
     * The ID of the location to retrieve cash drawer shifts from.
     * @type {string}
     * @memberof RetrieveCashDrawerShiftRequest
     */
    location_id: string;
}
/**
 *
 * @export
 * @interface RetrieveCashDrawerShiftResponse
 */
export interface RetrieveCashDrawerShiftResponse {
    /**
     *
     * @type {CashDrawerShift}
     * @memberof RetrieveCashDrawerShiftResponse
     */
    cash_drawer_shift?: CashDrawerShift;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveCashDrawerShiftResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface RetrieveCatalogObjectRequest
 */
export interface RetrieveCatalogObjectRequest {
    /**
     * If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a `CatalogItem`, its associated `CatalogCategory`, `CatalogTax`, `CatalogImage` and `CatalogModifierList` objects will be returned in the `related_objects` field of the response. If the `object` field of the response contains a `CatalogItemVariation`, its parent `CatalogItem` will be returned in the `related_objects` field of the response.  Default value: `false`
     * @type {boolean}
     * @memberof RetrieveCatalogObjectRequest
     */
    include_related_objects?: boolean;
}
/**
 *
 * @export
 * @interface RetrieveCatalogObjectResponse
 */
export interface RetrieveCatalogObjectResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveCatalogObjectResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {CatalogObject}
     * @memberof RetrieveCatalogObjectResponse
     */
    object?: CatalogObject;
    /**
     * A list of `CatalogObject`s referenced by the object in the `object` field.
     * @type {Array<CatalogObject>}
     * @memberof RetrieveCatalogObjectResponse
     */
    related_objects?: Array<CatalogObject>;
}
/**
 * Defines the fields that are included in the response body of a request to the [RetrieveCustomerGroup](#endpoint-retrievecustomergroup) endpoint.  One of `errors` or `group` is present in a given response (never both).
 * @export
 * @interface RetrieveCustomerGroupResponse
 */
export interface RetrieveCustomerGroupResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveCustomerGroupResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {CustomerGroup}
     * @memberof RetrieveCustomerGroupResponse
     */
    group?: CustomerGroup;
}
/**
 * Defines the fields that are included in the response body of a request to the RetrieveCustomer endpoint.  One of `errors` or `customer` is present in a given response (never both).
 * @export
 * @interface RetrieveCustomerResponse
 */
export interface RetrieveCustomerResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveCustomerResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Customer}
     * @memberof RetrieveCustomerResponse
     */
    customer?: Customer;
}
/**
 * Defines the fields included in the response body for requests to __RetrieveCustomerSegment__.  One of `errors` or `segment` is present in a given response (never both).
 * @export
 * @interface RetrieveCustomerSegmentResponse
 */
export interface RetrieveCustomerSegmentResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveCustomerSegmentResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {CustomerSegment}
     * @memberof RetrieveCustomerSegmentResponse
     */
    segment?: CustomerSegment;
}
/**
 * Defines fields in a RetrieveDisputeEvidence response.
 * @export
 * @interface RetrieveDisputeEvidenceResponse
 */
export interface RetrieveDisputeEvidenceResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveDisputeEvidenceResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {DisputeEvidence}
     * @memberof RetrieveDisputeEvidenceResponse
     */
    evidence?: DisputeEvidence;
}
/**
 * Defines fields in a RetrieveDispute response.
 * @export
 * @interface RetrieveDisputeResponse
 */
export interface RetrieveDisputeResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof RetrieveDisputeResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Dispute}
     * @memberof RetrieveDisputeResponse
     */
    dispute?: Dispute;
}
/**
 *
 * @export
 * @interface RetrieveEmployeeResponse
 */
export interface RetrieveEmployeeResponse {
    /**
     *
     * @type {Employee}
     * @memberof RetrieveEmployeeResponse
     */
    employee?: Employee;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveEmployeeResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface RetrieveInventoryAdjustmentResponse
 */
export interface RetrieveInventoryAdjustmentResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveInventoryAdjustmentResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {InventoryAdjustment}
     * @memberof RetrieveInventoryAdjustmentResponse
     */
    adjustment?: InventoryAdjustment;
}
/**
 *
 * @export
 * @interface RetrieveInventoryChangesRequest
 */
export interface RetrieveInventoryChangesRequest {
    /**
     * The `Location` IDs to look up as a comma-separated list. An empty list queries all locations.
     * @type {string}
     * @memberof RetrieveInventoryChangesRequest
     */
    location_ids?: string;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @type {string}
     * @memberof RetrieveInventoryChangesRequest
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface RetrieveInventoryChangesResponse
 */
export interface RetrieveInventoryChangesResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveInventoryChangesResponse
     */
    errors?: Array<Error>;
    /**
     * The set of inventory changes for the requested object and locations.
     * @type {Array<InventoryChange>}
     * @memberof RetrieveInventoryChangesResponse
     */
    changes?: Array<InventoryChange>;
    /**
     * The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @type {string}
     * @memberof RetrieveInventoryChangesResponse
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface RetrieveInventoryCountRequest
 */
export interface RetrieveInventoryCountRequest {
    /**
     * The `Location` IDs to look up as a comma-separated list. An empty list queries all locations.
     * @type {string}
     * @memberof RetrieveInventoryCountRequest
     */
    location_ids?: string;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @type {string}
     * @memberof RetrieveInventoryCountRequest
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface RetrieveInventoryCountResponse
 */
export interface RetrieveInventoryCountResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveInventoryCountResponse
     */
    errors?: Array<Error>;
    /**
     * The current calculated inventory counts for the requested object and locations.
     * @type {Array<InventoryCount>}
     * @memberof RetrieveInventoryCountResponse
     */
    counts?: Array<InventoryCount>;
    /**
     * The pagination cursor to be used in a subsequent request. If unset, this is the final response.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @type {string}
     * @memberof RetrieveInventoryCountResponse
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface RetrieveInventoryPhysicalCountResponse
 */
export interface RetrieveInventoryPhysicalCountResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveInventoryPhysicalCountResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {InventoryPhysicalCount}
     * @memberof RetrieveInventoryPhysicalCountResponse
     */
    count?: InventoryPhysicalCount;
}
/**
 * Defines the fields that the [RetrieveLocation](#endpoint-retrievelocation) endpoint returns in a response.
 * @export
 * @interface RetrieveLocationResponse
 */
export interface RetrieveLocationResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof RetrieveLocationResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Location}
     * @memberof RetrieveLocationResponse
     */
    location?: Location;
}
/**
 * A response that includes the loyalty account.
 * @export
 * @interface RetrieveLoyaltyAccountResponse
 */
export interface RetrieveLoyaltyAccountResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveLoyaltyAccountResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {LoyaltyAccount}
     * @memberof RetrieveLoyaltyAccountResponse
     */
    loyalty_account?: LoyaltyAccount;
}
/**
 * A response that includes the loyalty reward.
 * @export
 * @interface RetrieveLoyaltyRewardResponse
 */
export interface RetrieveLoyaltyRewardResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveLoyaltyRewardResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {LoyaltyReward}
     * @memberof RetrieveLoyaltyRewardResponse
     */
    reward?: LoyaltyReward;
}
/**
 * The response object returned by the [RetrieveMerchant](#endpoint-retrieveMerchant) endpoint.
 * @export
 * @interface RetrieveMerchantResponse
 */
export interface RetrieveMerchantResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof RetrieveMerchantResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Merchant}
     * @memberof RetrieveMerchantResponse
     */
    merchant?: Merchant;
}
/**
 *
 * @export
 * @interface RetrieveOrderResponse
 */
export interface RetrieveOrderResponse {
    /**
     *
     * @type {Order}
     * @memberof RetrieveOrderResponse
     */
    order?: Order;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines the fields that are included in the response from the [RetrieveSubscription](#endpoint-subscriptions-retrievesubscription) endpoint.
 * @export
 * @interface RetrieveSubscriptionResponse
 */
export interface RetrieveSubscriptionResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof RetrieveSubscriptionResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Subscription}
     * @memberof RetrieveSubscriptionResponse
     */
    subscription?: Subscription;
}
/**
 * Represents a response from a retrieve request, containing a `TeamMember` object or error messages.
 * @export
 * @interface RetrieveTeamMemberResponse
 */
export interface RetrieveTeamMemberResponse {
    /**
     *
     * @type {TeamMember}
     * @memberof RetrieveTeamMemberResponse
     */
    team_member?: TeamMember;
    /**
     * The errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveTeamMemberResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines the fields that are included in the response body of a request to the [RetrieveTransaction](#endpont-retrievetransaction) endpoint.  One of `errors` or `transaction` is present in a given response (never both).
 * @export
 * @interface RetrieveTransactionResponse
 */
export interface RetrieveTransactionResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveTransactionResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Transaction}
     * @memberof RetrieveTransactionResponse
     */
    transaction?: Transaction;
}
/**
 * Represents a response from a retrieve request, containing the specified `WageSetting` object or error messages.
 * @export
 * @interface RetrieveWageSettingResponse
 */
export interface RetrieveWageSettingResponse {
    /**
     *
     * @type {WageSetting}
     * @memberof RetrieveWageSettingResponse
     */
    wage_setting?: WageSetting;
    /**
     * The errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof RetrieveWageSettingResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface RevokeTokenRequest
 */
export interface RevokeTokenRequest {
    /**
     * The Square issued ID for your application, available from the [application dashboard](https://connect.squareup.com/apps).
     * @type {string}
     * @memberof RevokeTokenRequest
     */
    client_id?: string;
    /**
     * The access token of the merchant whose token you want to revoke. Do not provide a value for merchant_id if you provide this parameter.
     * @type {string}
     * @memberof RevokeTokenRequest
     */
    access_token?: string;
    /**
     * The ID of the merchant whose token you want to revoke. Do not provide a value for access_token if you provide this parameter.
     * @type {string}
     * @memberof RevokeTokenRequest
     */
    merchant_id?: string;
    /**
     * If `true`, terminate the given single access token, but do not terminate the entire authorization. Default: `false`
     * @type {boolean}
     * @memberof RevokeTokenRequest
     */
    revoke_only_access_token?: boolean;
}
/**
 *
 * @export
 * @interface RevokeTokenResponse
 */
export interface RevokeTokenResponse {
    /**
     * If the request is successful, this is true.
     * @type {boolean}
     * @memberof RevokeTokenResponse
     */
    success?: boolean;
}
/**
 * Defines the request body for the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint.
 * @export
 * @interface SearchCatalogItemsRequest
 */
export interface SearchCatalogItemsRequest {
    /**
     * The text filter expression to return items or item variations containing specified text in the `name`, `description`, or `abbreviation` attribute value of an item, or in the `name`, `sku`, or `upc` attribute value of an item variation.
     * @type {string}
     * @memberof SearchCatalogItemsRequest
     */
    text_filter?: string;
    /**
     * The category id query expression to return items containing the specified category IDs.
     * @type {Array<string>}
     * @memberof SearchCatalogItemsRequest
     */
    category_ids?: Array<string>;
    /**
     * The stock-level query expression to return item variations with the specified stock levels. See [SearchCatalogItemsRequestStockLevel](#type-searchcatalogitemsrequeststocklevel) for possible values
     * @type {Array<string>}
     * @memberof SearchCatalogItemsRequest
     */
    stock_levels?: Array<string>;
    /**
     * The enabled-location query expression to return items and item variations having specified enabled locations.
     * @type {Array<string>}
     * @memberof SearchCatalogItemsRequest
     */
    enabled_location_ids?: Array<string>;
    /**
     * The pagination token, returned in the previous response, used to fetch the next batch of pending results.
     * @type {string}
     * @memberof SearchCatalogItemsRequest
     */
    cursor?: string;
    /**
     * The maximum number of results to return per page. The default value is 100.
     * @type {number}
     * @memberof SearchCatalogItemsRequest
     */
    limit?: number;
    /**
     * The order to sort the results by item names. The default sort order is ascending (`ASC`). See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof SearchCatalogItemsRequest
     */
    sort_order?: string;
    /**
     * The product types query expression to return items or item variations having the specified product types. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values
     * @type {Array<string>}
     * @memberof SearchCatalogItemsRequest
     */
    product_types?: Array<string>;
    /**
     * The customer-attribute filter to return items or item variations matching the specified custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in a single call to the `SearchCatalogItems` endpoint.
     * @type {Array<CustomAttributeFilter>}
     * @memberof SearchCatalogItemsRequest
     */
    custom_attribute_filters?: Array<CustomAttributeFilter>;
}
/**
 * Defines supported stock levels of the item inventory.
 * @export
 * @enum {string}
 */
export declare enum SearchCatalogItemsRequestStockLevel {
    OUT = "OUT",
    LOW = "LOW"
}
/**
 * Defines the response body returned from the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint.
 * @export
 * @interface SearchCatalogItemsResponse
 */
export interface SearchCatalogItemsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof SearchCatalogItemsResponse
     */
    errors?: Array<Error>;
    /**
     * Returned items matching the specified query expressions.
     * @type {Array<CatalogObject>}
     * @memberof SearchCatalogItemsResponse
     */
    items?: Array<CatalogObject>;
    /**
     * Pagination token used in the next request to return more of the search result.
     * @type {string}
     * @memberof SearchCatalogItemsResponse
     */
    cursor?: string;
    /**
     * Ids of returned item variations matching the specified query expression.
     * @type {Array<string>}
     * @memberof SearchCatalogItemsResponse
     */
    matched_variation_ids?: Array<string>;
}
/**
 *
 * @export
 * @interface SearchCatalogObjectsRequest
 */
export interface SearchCatalogObjectsRequest {
    /**
     * The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof SearchCatalogObjectsRequest
     */
    cursor?: string;
    /**
     * The desired set of object types to appear in the search results. The legal values are taken from the CatalogObjectType enum: `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. See [CatalogObjectType](#type-catalogobjecttype) for possible values
     * @type {Array<string>}
     * @memberof SearchCatalogObjectsRequest
     */
    object_types?: Array<string>;
    /**
     * If `true`, deleted objects will be included in the results. Deleted objects will have their `is_deleted` field set to `true`.
     * @type {boolean}
     * @memberof SearchCatalogObjectsRequest
     */
    include_deleted_objects?: boolean;
    /**
     * If `true`, the response will include additional objects that are related to the requested object, as follows:  If a CatalogItem is returned in the object field of the response, its associated CatalogCategory, CatalogTax objects, CatalogImage objects and CatalogModifierList objects will be included in the `related_objects` field of the response.  If a CatalogItemVariation is returned in the object field of the response, its parent CatalogItem will be included in the `related_objects` field of the response.
     * @type {boolean}
     * @memberof SearchCatalogObjectsRequest
     */
    include_related_objects?: boolean;
    /**
     * Return objects modified after this [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`. The timestamp is exclusive - objects with a timestamp equal to `begin_time` will not be included in the response.
     * @type {string}
     * @memberof SearchCatalogObjectsRequest
     */
    begin_time?: string;
    /**
     *
     * @type {CatalogQuery}
     * @memberof SearchCatalogObjectsRequest
     */
    query?: CatalogQuery;
    /**
     * A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored.
     * @type {number}
     * @memberof SearchCatalogObjectsRequest
     */
    limit?: number;
}
/**
 *
 * @export
 * @interface SearchCatalogObjectsResponse
 */
export interface SearchCatalogObjectsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof SearchCatalogObjectsResponse
     */
    errors?: Array<Error>;
    /**
     * The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof SearchCatalogObjectsResponse
     */
    cursor?: string;
    /**
     * The CatalogObjects returned.
     * @type {Array<CatalogObject>}
     * @memberof SearchCatalogObjectsResponse
     */
    objects?: Array<CatalogObject>;
    /**
     * A list of CatalogObjects referenced by the objects in the `objects` field.
     * @type {Array<CatalogObject>}
     * @memberof SearchCatalogObjectsResponse
     */
    related_objects?: Array<CatalogObject>;
    /**
     * When the associated product catalog was last updated. Will match the value for `end_time` or `cursor` if either field is included in the `SearchCatalog` request.
     * @type {string}
     * @memberof SearchCatalogObjectsResponse
     */
    latest_time?: string;
}
/**
 * Defines the fields included in the request body for the SearchCustomers endpoint.
 * @export
 * @interface SearchCustomersRequest
 */
export interface SearchCustomersRequest {
    /**
     * Include the pagination cursor in subsequent calls to this endpoint to retrieve the next set of results associated with the original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @type {string}
     * @memberof SearchCustomersRequest
     */
    cursor?: string;
    /**
     * A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 100, it will be ignored.
     * @type {number}
     * @memberof SearchCustomersRequest
     */
    limit?: number;
    /**
     *
     * @type {CustomerQuery}
     * @memberof SearchCustomersRequest
     */
    query?: CustomerQuery;
}
/**
 * Defines the fields that are included in the response body of a request to the SearchCustomers endpoint.  One of `errors` or `customers` is present in a given response (never both).
 * @export
 * @interface SearchCustomersResponse
 */
export interface SearchCustomersResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof SearchCustomersResponse
     */
    errors?: Array<Error>;
    /**
     * An array of `Customer` objects that match a query.
     * @type {Array<Customer>}
     * @memberof SearchCustomersResponse
     */
    customers?: Array<Customer>;
    /**
     * A pagination cursor that can be used during subsequent calls to SearchCustomers to retrieve the next set of results associated with the original query. Pagination cursors are only present when a request succeeds and additional results are available.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @type {string}
     * @memberof SearchCustomersResponse
     */
    cursor?: string;
}
/**
 * Describes a `SearchInvoices` request.
 * @export
 * @interface SearchInvoicesRequest
 */
export interface SearchInvoicesRequest {
    /**
     *
     * @type {InvoiceQuery}
     * @memberof SearchInvoicesRequest
     */
    query: InvoiceQuery;
    /**
     * The maximum number of invoices to return (200 is the maximum `limit`).  If not provided, the server  uses a default limit of 100 invoices.
     * @type {number}
     * @memberof SearchInvoicesRequest
     */
    limit?: number;
    /**
     * A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @type {string}
     * @memberof SearchInvoicesRequest
     */
    cursor?: string;
}
/**
 * Describes a `SearchInvoices` response.
 * @export
 * @interface SearchInvoicesResponse
 */
export interface SearchInvoicesResponse {
    /**
     * The list of invoices returned by the search.
     * @type {Array<Invoice>}
     * @memberof SearchInvoicesResponse
     */
    invoices?: Array<Invoice>;
    /**
     * When a response is truncated, it includes a cursor that you can use in a  subsequent request to fetch the next set of invoices. If empty, this is the final  response.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @type {string}
     * @memberof SearchInvoicesResponse
     */
    cursor?: string;
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof SearchInvoicesResponse
     */
    errors?: Array<Error>;
}
/**
 * A request to search for loyalty accounts.
 * @export
 * @interface SearchLoyaltyAccountsRequest
 */
export interface SearchLoyaltyAccountsRequest {
    /**
     *
     * @type {SearchLoyaltyAccountsRequestLoyaltyAccountQuery}
     * @memberof SearchLoyaltyAccountsRequest
     */
    query?: SearchLoyaltyAccountsRequestLoyaltyAccountQuery;
    /**
     * The maximum number of results to include in the response.
     * @type {number}
     * @memberof SearchLoyaltyAccountsRequest
     */
    limit?: number;
    /**
     * A pagination cursor returned by a previous call to  this endpoint. Provide this to retrieve the next set of  results for the original query.  For more information,  see [Pagination](https://developer.squareup.com/docs/docs/basics/api101/pagination).
     * @type {string}
     * @memberof SearchLoyaltyAccountsRequest
     */
    cursor?: string;
}
/**
 * The search criteria for the loyalty accounts.
 * @export
 * @interface SearchLoyaltyAccountsRequestLoyaltyAccountQuery
 */
export interface SearchLoyaltyAccountsRequestLoyaltyAccountQuery {
    /**
     * The set of mappings to use in the loyalty account search.    This cannot be combined with `customer_ids`.    Max: 30 mappings
     * @type {Array<LoyaltyAccountMapping>}
     * @memberof SearchLoyaltyAccountsRequestLoyaltyAccountQuery
     */
    mappings?: Array<LoyaltyAccountMapping>;
    /**
     * The set of customer IDs to use in the loyalty account search.    This cannot be combined with `mappings`.    Max: 30 customer IDs
     * @type {Array<string>}
     * @memberof SearchLoyaltyAccountsRequestLoyaltyAccountQuery
     */
    customer_ids?: Array<string>;
}
/**
 * A response that includes loyalty accounts that satisfy the search criteria.
 * @export
 * @interface SearchLoyaltyAccountsResponse
 */
export interface SearchLoyaltyAccountsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof SearchLoyaltyAccountsResponse
     */
    errors?: Array<Error>;
    /**
     * The loyalty accounts that met the search criteria,   in order of creation date.
     * @type {Array<LoyaltyAccount>}
     * @memberof SearchLoyaltyAccountsResponse
     */
    loyalty_accounts?: Array<LoyaltyAccount>;
    /**
     * The pagination cursor to use in a subsequent  request. If empty, this is the final response. For more information,  see [Pagination](https://developer.squareup.com/docs/docs/basics/api101/pagination).
     * @type {string}
     * @memberof SearchLoyaltyAccountsResponse
     */
    cursor?: string;
}
/**
 * A request to search for loyalty events.
 * @export
 * @interface SearchLoyaltyEventsRequest
 */
export interface SearchLoyaltyEventsRequest {
    /**
     *
     * @type {LoyaltyEventQuery}
     * @memberof SearchLoyaltyEventsRequest
     */
    query?: LoyaltyEventQuery;
    /**
     * The maximum number of results to include in the response.  The last page might contain fewer events.  The default is 30 events.
     * @type {number}
     * @memberof SearchLoyaltyEventsRequest
     */
    limit?: number;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query. For more information, see [Pagination](https://developer.squareup.com/docs/docs/basics/api101/pagination).
     * @type {string}
     * @memberof SearchLoyaltyEventsRequest
     */
    cursor?: string;
}
/**
 * A response that contains loyalty events that satisfy the search  criteria, in order by the `created_at` date.
 * @export
 * @interface SearchLoyaltyEventsResponse
 */
export interface SearchLoyaltyEventsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof SearchLoyaltyEventsResponse
     */
    errors?: Array<Error>;
    /**
     * The loyalty events that satisfy the search criteria.
     * @type {Array<LoyaltyEvent>}
     * @memberof SearchLoyaltyEventsResponse
     */
    events?: Array<LoyaltyEvent>;
    /**
     * The pagination cursor to be used in a subsequent  request. If empty, this is the final response.  For more information,  see [Pagination](https://developer.squareup.com/docs/docs/basics/api101/pagination).
     * @type {string}
     * @memberof SearchLoyaltyEventsResponse
     */
    cursor?: string;
}
/**
 * A request to search for loyalty rewards.
 * @export
 * @interface SearchLoyaltyRewardsRequest
 */
export interface SearchLoyaltyRewardsRequest {
    /**
     *
     * @type {SearchLoyaltyRewardsRequestLoyaltyRewardQuery}
     * @memberof SearchLoyaltyRewardsRequest
     */
    query?: SearchLoyaltyRewardsRequestLoyaltyRewardQuery;
    /**
     * The maximum number of results to return in the response.
     * @type {number}
     * @memberof SearchLoyaltyRewardsRequest
     */
    limit?: number;
    /**
     * A pagination cursor returned by a previous call to  this endpoint. Provide this to retrieve the next set of  results for the original query. For more information,  see [Pagination](https://developer.squareup.com/docs/docs/basics/api101/pagination).
     * @type {string}
     * @memberof SearchLoyaltyRewardsRequest
     */
    cursor?: string;
}
/**
 * The set of search requirements.
 * @export
 * @interface SearchLoyaltyRewardsRequestLoyaltyRewardQuery
 */
export interface SearchLoyaltyRewardsRequestLoyaltyRewardQuery {
    /**
     * The ID of the `loyalty account` to which the loyalty reward belongs.
     * @type {string}
     * @memberof SearchLoyaltyRewardsRequestLoyaltyRewardQuery
     */
    loyalty_account_id: string;
    /**
     * The status of the loyalty reward. See [LoyaltyRewardStatus](#type-loyaltyrewardstatus) for possible values
     * @type {string}
     * @memberof SearchLoyaltyRewardsRequestLoyaltyRewardQuery
     */
    status?: string;
}
/**
 * A response that includes the loyalty rewards satisfying the search criteria.
 * @export
 * @interface SearchLoyaltyRewardsResponse
 */
export interface SearchLoyaltyRewardsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof SearchLoyaltyRewardsResponse
     */
    errors?: Array<Error>;
    /**
     * The loyalty rewards that satisfy the search criteria. These are returned in descending order by `updated_at`.
     * @type {Array<LoyaltyReward>}
     * @memberof SearchLoyaltyRewardsResponse
     */
    rewards?: Array<LoyaltyReward>;
    /**
     * The pagination cursor to be used in a subsequent  request. If empty, this is the final response.
     * @type {string}
     * @memberof SearchLoyaltyRewardsResponse
     */
    cursor?: string;
}
/**
 * Filter based on Order `customer_id` and any Tender `customer_id` associated with the Order. Does not filter based on the [FulfillmentRecipient](#type-orderfulfillmentrecipient) `customer_id`.
 * @export
 * @interface SearchOrdersCustomerFilter
 */
export interface SearchOrdersCustomerFilter {
    /**
     * List of customer IDs to filter by.  Max: 10 customer IDs.
     * @type {Array<string>}
     * @memberof SearchOrdersCustomerFilter
     */
    customer_ids?: Array<string>;
}
/**
 * Filter for `Order` objects based on whether their `CREATED_AT`, `CLOSED_AT` or `UPDATED_AT` timestamps fall within a specified time range. You can specify the time range and which timestamp to filter for. You can filter for only one time range at a time.  For each time range, the start time and end time are inclusive. If the end time is absent, it defaults to the time of the first request for the cursor.  __Important:__ If you use the DateTimeFilter in a SearchOrders query, you must also set the `sort_field` in [OrdersSort](#type-searchorderordersort) to the same field you filter for. For example, if you set the `CLOSED_AT` field in DateTimeFilter, you must also set the `sort_field` in SearchOrdersSort to `CLOSED_AT`. Otherwise, SearchOrders will throw an error. [Learn more about filtering orders by time range](/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range).
 * @export
 * @interface SearchOrdersDateTimeFilter
 */
export interface SearchOrdersDateTimeFilter {
    /**
     *
     * @type {TimeRange}
     * @memberof SearchOrdersDateTimeFilter
     */
    created_at?: TimeRange;
    /**
     *
     * @type {TimeRange}
     * @memberof SearchOrdersDateTimeFilter
     */
    updated_at?: TimeRange;
    /**
     *
     * @type {TimeRange}
     * @memberof SearchOrdersDateTimeFilter
     */
    closed_at?: TimeRange;
}
/**
 * Filtering criteria to use for a SearchOrders request. Multiple filters will be ANDed together.
 * @export
 * @interface SearchOrdersFilter
 */
export interface SearchOrdersFilter {
    /**
     *
     * @type {SearchOrdersStateFilter}
     * @memberof SearchOrdersFilter
     */
    state_filter?: SearchOrdersStateFilter;
    /**
     *
     * @type {SearchOrdersDateTimeFilter}
     * @memberof SearchOrdersFilter
     */
    date_time_filter?: SearchOrdersDateTimeFilter;
    /**
     *
     * @type {SearchOrdersFulfillmentFilter}
     * @memberof SearchOrdersFilter
     */
    fulfillment_filter?: SearchOrdersFulfillmentFilter;
    /**
     *
     * @type {SearchOrdersSourceFilter}
     * @memberof SearchOrdersFilter
     */
    source_filter?: SearchOrdersSourceFilter;
    /**
     *
     * @type {SearchOrdersCustomerFilter}
     * @memberof SearchOrdersFilter
     */
    customer_filter?: SearchOrdersCustomerFilter;
}
/**
 * Filter based on [Order Fulfillment](#type-orderfulfillment) information.
 * @export
 * @interface SearchOrdersFulfillmentFilter
 */
export interface SearchOrdersFulfillmentFilter {
    /**
     * List of `fulfillment types` to filter for. Will return orders if any of its fulfillments match any of the fulfillment types listed in this field. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values
     * @type {Array<string>}
     * @memberof SearchOrdersFulfillmentFilter
     */
    fulfillment_types?: Array<string>;
    /**
     * List of `fulfillment states` to filter for. Will return orders if any of its fulfillments match any of the fulfillment states listed in this field. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values
     * @type {Array<string>}
     * @memberof SearchOrdersFulfillmentFilter
     */
    fulfillment_states?: Array<string>;
}
/**
 * Contains query criteria for the search.
 * @export
 * @interface SearchOrdersQuery
 */
export interface SearchOrdersQuery {
    /**
     *
     * @type {SearchOrdersFilter}
     * @memberof SearchOrdersQuery
     */
    filter?: SearchOrdersFilter;
    /**
     *
     * @type {SearchOrdersSort}
     * @memberof SearchOrdersQuery
     */
    sort?: SearchOrdersSort;
}
/**
 * The request does not have any required fields. When given no query criteria, SearchOrders will return all results for all of the merchantâ€™s locations. When fetching additional pages using a `cursor`, the `query` must be equal to the `query` used to fetch the first page of results.
 * @export
 * @interface SearchOrdersRequest
 */
export interface SearchOrdersRequest {
    /**
     * The location IDs for the orders to query. All locations must belong to the same merchant.  Min: 1 location IDs.  Max: 10 location IDs.
     * @type {Array<string>}
     * @memberof SearchOrdersRequest
     */
    location_ids?: Array<string>;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof SearchOrdersRequest
     */
    cursor?: string;
    /**
     *
     * @type {SearchOrdersQuery}
     * @memberof SearchOrdersRequest
     */
    query?: SearchOrdersQuery;
    /**
     * Maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  Default: `500`
     * @type {number}
     * @memberof SearchOrdersRequest
     */
    limit?: number;
    /**
     * Boolean that controls the format of the search results. If `true`, SearchOrders will return ``OrderEntry`` objects. If `false`, SearchOrders will return complete Order objects.  Default: `false`.
     * @type {boolean}
     * @memberof SearchOrdersRequest
     */
    return_entries?: boolean;
}
/**
 * Only one of `order_entries` or `orders` fields will be set, depending on whether `return_entries` was set on the [SearchOrdersRequest](#type-searchorderrequest).
 * @export
 * @interface SearchOrdersResponse
 */
export interface SearchOrdersResponse {
    /**
     * List of `OrderEntries` that fit the query conditions. Populated only if `return_entries` was set to `true` in the request.
     * @type {Array<OrderEntry>}
     * @memberof SearchOrdersResponse
     */
    order_entries?: Array<OrderEntry>;
    /**
     * List of `Order` objects that match query conditions. Populated only if `return_entries` in the request is set to `false`.
     * @type {Array<Order>}
     * @memberof SearchOrdersResponse
     */
    orders?: Array<Order>;
    /**
     * The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof SearchOrdersResponse
     */
    cursor?: string;
    /**
     * `Errors` encountered during the search.
     * @type {Array<Error>}
     * @memberof SearchOrdersResponse
     */
    errors?: Array<Error>;
}
/**
 * Sorting criteria for a SearchOrders request. Results can only be sorted by a timestamp field.
 * @export
 * @interface SearchOrdersSort
 */
export interface SearchOrdersSort {
    /**
     * The field to sort by.  __Important:__ When using a `DateTimeFilter`, `sort_field` must match the timestamp field that the DateTimeFilter uses to filter. For example, If you set your `sort_field` to `CLOSED_AT` and you use a DateTimeFilter, your DateTimeFilter must filter for orders by their `CLOSED_AT` date. If this field does not match the timestamp field in `DateTimeFilter`, SearchOrders will return an error.  Default: `CREATED_AT`. See [SearchOrdersSortField](#type-searchorderssortfield) for possible values
     * @type {string}
     * @memberof SearchOrdersSort
     */
    sort_field: string;
    /**
     * The chronological order in which results are returned. Defaults to `DESC`. See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof SearchOrdersSort
     */
    sort_order?: string;
}
/**
 * Specifies which timestamp to use to sort SearchOrder results.
 * @export
 * @enum {string}
 */
export declare enum SearchOrdersSortField {
    CREATEDAT = "CREATED_AT",
    UPDATEDAT = "UPDATED_AT",
    CLOSEDAT = "CLOSED_AT"
}
/**
 * Filter based on order `source` information.
 * @export
 * @interface SearchOrdersSourceFilter
 */
export interface SearchOrdersSourceFilter {
    /**
     * Filters by `Source` `name`. Will return any orders with with a `source.name` that matches any of the listed source names.  Max: 10 source names.
     * @type {Array<string>}
     * @memberof SearchOrdersSourceFilter
     */
    source_names?: Array<string>;
}
/**
 * Filter by current Order `state`.
 * @export
 * @interface SearchOrdersStateFilter
 */
export interface SearchOrdersStateFilter {
    /**
     * States to filter for. See [OrderState](#type-orderstate) for possible values
     * @type {Array<string>}
     * @memberof SearchOrdersStateFilter
     */
    states: Array<string>;
}
/**
 * A request for a filtered and sorted set of `Shift` objects.
 * @export
 * @interface SearchShiftsRequest
 */
export interface SearchShiftsRequest {
    /**
     *
     * @type {ShiftQuery}
     * @memberof SearchShiftsRequest
     */
    query?: ShiftQuery;
    /**
     * number of resources in a page (200 by default).
     * @type {number}
     * @memberof SearchShiftsRequest
     */
    limit?: number;
    /**
     * opaque cursor for fetching the next page.
     * @type {string}
     * @memberof SearchShiftsRequest
     */
    cursor?: string;
}
/**
 * The response to a request for `Shift` objects. Contains the requested `Shift` objects. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface SearchShiftsResponse
 */
export interface SearchShiftsResponse {
    /**
     * Shifts
     * @type {Array<Shift>}
     * @memberof SearchShiftsResponse
     */
    shifts?: Array<Shift>;
    /**
     * Opaque cursor for fetching the next page.
     * @type {string}
     * @memberof SearchShiftsResponse
     */
    cursor?: string;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof SearchShiftsResponse
     */
    errors?: Array<Error>;
}
/**
 * Represents a set of SearchSubscriptionsQuery filters used to limit the set of Subscriptions returned by SearchSubscriptions.
 * @export
 * @interface SearchSubscriptionsFilter
 */
export interface SearchSubscriptionsFilter {
    /**
     * A filter to select subscriptions based on the customer.
     * @type {Array<string>}
     * @memberof SearchSubscriptionsFilter
     */
    customer_ids?: Array<string>;
    /**
     * A filter to select subscriptions based the location.
     * @type {Array<string>}
     * @memberof SearchSubscriptionsFilter
     */
    location_ids?: Array<string>;
}
/**
 * Represents a query (including filtering criteria) used to search for subscriptions.
 * @export
 * @interface SearchSubscriptionsQuery
 */
export interface SearchSubscriptionsQuery {
    /**
     *
     * @type {SearchSubscriptionsFilter}
     * @memberof SearchSubscriptionsQuery
     */
    filter?: SearchSubscriptionsFilter;
}
/**
 * Defines parameters in a [SearchSubscriptions](#endpoint-subscriptions-searchsubscriptions) endpoint  request.
 * @export
 * @interface SearchSubscriptionsRequest
 */
export interface SearchSubscriptionsRequest {
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @type {string}
     * @memberof SearchSubscriptionsRequest
     */
    cursor?: string;
    /**
     * The upper limit on the number of subscriptions to return  in the response.   Default: `200`
     * @type {number}
     * @memberof SearchSubscriptionsRequest
     */
    limit?: number;
    /**
     *
     * @type {SearchSubscriptionsQuery}
     * @memberof SearchSubscriptionsRequest
     */
    query?: SearchSubscriptionsQuery;
}
/**
 * Defines the fields that are included in the response from the [SearchSubscriptions](#endpoint-subscriptions-searchsubscriptions) endpoint.
 * @export
 * @interface SearchSubscriptionsResponse
 */
export interface SearchSubscriptionsResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof SearchSubscriptionsResponse
     */
    errors?: Array<Error>;
    /**
     * The search result.
     * @type {Array<Subscription>}
     * @memberof SearchSubscriptionsResponse
     */
    subscriptions?: Array<Subscription>;
    /**
     * When a response is truncated, it includes a cursor that you can  use in a subsequent request to fetch the next set of subscriptions.  If empty, this is the final response.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @type {string}
     * @memberof SearchSubscriptionsResponse
     */
    cursor?: string;
}
/**
 * Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied between the individual fields, and `OR` logic is applied within list-based fields. For example, setting this filter value, ``` filter = (locations_ids = [\"A\", \"B\"], status = ACTIVE) ``` returns only active team members assigned to either location \"A\" or \"B\".
 * @export
 * @interface SearchTeamMembersFilter
 */
export interface SearchTeamMembersFilter {
    /**
     * When present, filter by team members assigned to the specified locations. When empty, include team members assigned to any location.
     * @type {Array<string>}
     * @memberof SearchTeamMembersFilter
     */
    location_ids?: Array<string>;
    /**
     * When present, filter by team members who match the given status. When empty, include team members of all statuses. See [TeamMemberStatus](#type-teammemberstatus) for possible values
     * @type {string}
     * @memberof SearchTeamMembersFilter
     */
    status?: string;
}
/**
 * Represents the parameters in a search for `TeamMember` objects.
 * @export
 * @interface SearchTeamMembersQuery
 */
export interface SearchTeamMembersQuery {
    /**
     *
     * @type {SearchTeamMembersFilter}
     * @memberof SearchTeamMembersQuery
     */
    filter?: SearchTeamMembersFilter;
}
/**
 * Represents a search request for a filtered list of `TeamMember` objects.
 * @export
 * @interface SearchTeamMembersRequest
 */
export interface SearchTeamMembersRequest {
    /**
     *
     * @type {SearchTeamMembersQuery}
     * @memberof SearchTeamMembersRequest
     */
    query?: SearchTeamMembersQuery;
    /**
     * The maximum number of `TeamMember` objects in a page (25 by default).
     * @type {number}
     * @memberof SearchTeamMembersRequest
     */
    limit?: number;
    /**
     * The opaque cursor for fetching the next page. Read about [pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) with Square APIs for more information.
     * @type {string}
     * @memberof SearchTeamMembersRequest
     */
    cursor?: string;
}
/**
 * Represents a response from a search request, containing a filtered list of `TeamMember` objects.
 * @export
 * @interface SearchTeamMembersResponse
 */
export interface SearchTeamMembersResponse {
    /**
     * The filtered list of `TeamMember` objects.
     * @type {Array<TeamMember>}
     * @memberof SearchTeamMembersResponse
     */
    team_members?: Array<TeamMember>;
    /**
     * The opaque cursor for fetching the next page. Read about [pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) with Square APIs for more information.
     * @type {string}
     * @memberof SearchTeamMembersResponse
     */
    cursor?: string;
    /**
     * The errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof SearchTeamMembersResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface SearchTerminalCheckoutsRequest
 */
export interface SearchTerminalCheckoutsRequest {
    /**
     *
     * @type {TerminalCheckoutQuery}
     * @memberof SearchTerminalCheckoutsRequest
     */
    query?: TerminalCheckoutQuery;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof SearchTerminalCheckoutsRequest
     */
    cursor?: string;
    /**
     * Limit the number of results returned for a single request.
     * @type {number}
     * @memberof SearchTerminalCheckoutsRequest
     */
    limit?: number;
}
/**
 *
 * @export
 * @interface SearchTerminalCheckoutsResponse
 */
export interface SearchTerminalCheckoutsResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof SearchTerminalCheckoutsResponse
     */
    errors?: Array<Error>;
    /**
     * The requested search result of `TerminalCheckout`s.
     * @type {Array<TerminalCheckout>}
     * @memberof SearchTerminalCheckoutsResponse
     */
    checkouts?: Array<TerminalCheckout>;
    /**
     * The pagination cursor to be used in a subsequent request. If empty, this is the final response.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof SearchTerminalCheckoutsResponse
     */
    cursor?: string;
}
/**
 *
 * @export
 * @interface SearchTerminalRefundsRequest
 */
export interface SearchTerminalRefundsRequest {
    /**
     *
     * @type {TerminalRefundQuery}
     * @memberof SearchTerminalRefundsRequest
     */
    query?: TerminalRefundQuery;
    /**
     * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.
     * @type {string}
     * @memberof SearchTerminalRefundsRequest
     */
    cursor?: string;
    /**
     * Limit the number of results returned for a single request.
     * @type {number}
     * @memberof SearchTerminalRefundsRequest
     */
    limit?: number;
}
/**
 *
 * @export
 * @interface SearchTerminalRefundsResponse
 */
export interface SearchTerminalRefundsResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof SearchTerminalRefundsResponse
     */
    errors?: Array<Error>;
    /**
     * The requested search result of `TerminalRefund`s.
     * @type {Array<TerminalRefund>}
     * @memberof SearchTerminalRefundsResponse
     */
    refunds?: Array<TerminalRefund>;
    /**
     * The pagination cursor to be used in a subsequent request. If empty, this is the final response.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @type {string}
     * @memberof SearchTerminalRefundsResponse
     */
    cursor?: string;
}
/**
 * A record of the hourly rate, start, and end times for a single work shift for an employee. May include a record of the start and end times for breaks taken during the shift.
 * @export
 * @interface Shift
 */
export interface Shift {
    /**
     * UUID for this object
     * @type {string}
     * @memberof Shift
     */
    id?: string;
    /**
     * The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead
     * @type {string}
     * @memberof Shift
     */
    employee_id?: string;
    /**
     * The ID of the location this shift occurred at. Should be based on where the employee clocked in.
     * @type {string}
     * @memberof Shift
     */
    location_id?: string;
    /**
     * Read-only convenience value that is calculated from the location based on `location_id`. Format: the IANA Timezone Database identifier for the location timezone.
     * @type {string}
     * @memberof Shift
     */
    timezone?: string;
    /**
     * RFC 3339; shifted to location timezone + offset. Precision up to the minute is respected; seconds are truncated.
     * @type {string}
     * @memberof Shift
     */
    start_at: string;
    /**
     * RFC 3339; shifted to timezone + offset. Precision up to the minute is respected; seconds are truncated.
     * @type {string}
     * @memberof Shift
     */
    end_at?: string;
    /**
     *
     * @type {ShiftWage}
     * @memberof Shift
     */
    wage?: ShiftWage;
    /**
     * A list of any paid or unpaid breaks that were taken during this shift.
     * @type {Array<Break>}
     * @memberof Shift
     */
    breaks?: Array<Break>;
    /**
     * Describes working state of the current `Shift`. See [ShiftStatus](#type-shiftstatus) for possible values
     * @type {string}
     * @memberof Shift
     */
    status?: string;
    /**
     * Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write.
     * @type {number}
     * @memberof Shift
     */
    version?: number;
    /**
     * A read-only timestamp in RFC 3339 format; presented in UTC.
     * @type {string}
     * @memberof Shift
     */
    created_at?: string;
    /**
     * A read-only timestamp in RFC 3339 format; presented in UTC.
     * @type {string}
     * @memberof Shift
     */
    updated_at?: string;
    /**
     * The ID of the team member this shift belongs to. Replaced `employee_id` at version \"2020-08-26\"
     * @type {string}
     * @memberof Shift
     */
    team_member_id?: string;
}
/**
 * Defines a filter used in a search for `Shift` records. `AND` logic is used by Square\'s servers to apply each filter property specified.
 * @export
 * @interface ShiftFilter
 */
export interface ShiftFilter {
    /**
     * Fetch shifts for the specified location.
     * @type {Array<string>}
     * @memberof ShiftFilter
     */
    location_ids: Array<string>;
    /**
     * Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use `team_member_ids` instead
     * @type {Array<string>}
     * @memberof ShiftFilter
     */
    employee_ids?: Array<string>;
    /**
     * Fetch a `Shift` instance by `Shift.status`. See [ShiftFilterStatus](#type-shiftfilterstatus) for possible values
     * @type {string}
     * @memberof ShiftFilter
     */
    status?: string;
    /**
     *
     * @type {TimeRange}
     * @memberof ShiftFilter
     */
    start?: TimeRange;
    /**
     *
     * @type {TimeRange}
     * @memberof ShiftFilter
     */
    end?: TimeRange;
    /**
     *
     * @type {ShiftWorkday}
     * @memberof ShiftFilter
     */
    workday?: ShiftWorkday;
    /**
     * Fetch shifts for the specified team members. Replaced `employee_ids` at version \"2020-08-26\"
     * @type {Array<string>}
     * @memberof ShiftFilter
     */
    team_member_ids: Array<string>;
}
/**
 * Specifies the `status` of `Shift` records to be returned.
 * @export
 * @enum {string}
 */
export declare enum ShiftFilterStatus {
    OPEN = "OPEN",
    CLOSED = "CLOSED"
}
/**
 * The parameters of a `Shift` search query. Includes filter and sort options.
 * @export
 * @interface ShiftQuery
 */
export interface ShiftQuery {
    /**
     *
     * @type {ShiftFilter}
     * @memberof ShiftQuery
     */
    filter?: ShiftFilter;
    /**
     *
     * @type {ShiftSort}
     * @memberof ShiftQuery
     */
    sort?: ShiftSort;
}
/**
 * Sets the sort order of search results.
 * @export
 * @interface ShiftSort
 */
export interface ShiftSort {
    /**
     * The field to sort on. See [ShiftSortField](#type-shiftsortfield) for possible values
     * @type {string}
     * @memberof ShiftSort
     */
    field?: string;
    /**
     * The order in which results are returned. Defaults to DESC. See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof ShiftSort
     */
    order?: string;
}
/**
 * Enumerates the `Shift` fields to sort on.
 * @export
 * @enum {string}
 */
export declare enum ShiftSortField {
    STARTAT = "START_AT",
    ENDAT = "END_AT",
    CREATEDAT = "CREATED_AT",
    UPDATEDAT = "UPDATED_AT"
}
/**
 * Enumerates the possible status of a `Shift`
 * @export
 * @enum {string}
 */
export declare enum ShiftStatus {
    OPEN = "OPEN",
    CLOSED = "CLOSED"
}
/**
 * The hourly wage rate used to compensate an employee for this shift.
 * @export
 * @interface ShiftWage
 */
export interface ShiftWage {
    /**
     * The name of the job performed during this shift. Square labor-reporting UIs may group shifts together by title.
     * @type {string}
     * @memberof ShiftWage
     */
    title?: string;
    /**
     *
     * @type {Money}
     * @memberof ShiftWage
     */
    hourly_rate?: Money;
}
/**
 * A `Shift` search query filter parameter that sets a range of days that a `Shift` must start or end in before passing the filter condition.
 * @export
 * @interface ShiftWorkday
 */
export interface ShiftWorkday {
    /**
     *
     * @type {DateRange}
     * @memberof ShiftWorkday
     */
    date_range?: DateRange;
    /**
     * The strategy on which the dates are applied. See [ShiftWorkdayMatcher](#type-shiftworkdaymatcher) for possible values
     * @type {string}
     * @memberof ShiftWorkday
     */
    match_shifts_by?: string;
    /**
     * Location-specific timezones convert workdays to datetime filters. Every location included in the query must have a timezone, or this field must be provided as a fallback. Format: the IANA timezone database identifier for the relevant timezone.
     * @type {string}
     * @memberof ShiftWorkday
     */
    default_timezone?: string;
}
/**
 * Defines the logic used to apply a workday filter.
 * @export
 * @enum {string}
 */
export declare enum ShiftWorkdayMatcher {
    STARTAT = "START_AT",
    ENDAT = "END_AT",
    INTERSECTION = "INTERSECTION"
}
/**
 * The order (e.g., chronological or alphabetical) in which results from a request are returned.
 * @export
 * @enum {string}
 */
export declare enum SortOrder {
    DESC = "DESC",
    ASC = "ASC"
}
/**
 * Provides information about the application used to generate a change.
 * @export
 * @interface SourceApplication
 */
export interface SourceApplication {
    /**
     * Read-only `Product` type for the application. See [Product](#type-product) for possible values
     * @type {string}
     * @memberof SourceApplication
     */
    product?: string;
    /**
     * Read-only Square ID assigned to the application. Only used for `Product` type `EXTERNAL_API`.
     * @type {string}
     * @memberof SourceApplication
     */
    application_id?: string;
    /**
     * Read-only display name assigned to the application (e.g. `\"Custom Application\"`, `\"Square POS 4.74 for Android\"`).
     * @type {string}
     * @memberof SourceApplication
     */
    name?: string;
}
/**
 * Contains the name and abbreviation for standard measurement unit.
 * @export
 * @interface StandardUnitDescription
 */
export interface StandardUnitDescription {
    /**
     *
     * @type {MeasurementUnit}
     * @memberof StandardUnitDescription
     */
    unit?: MeasurementUnit;
    /**
     * UI display name of the measurement unit. For example, \'Pound\'.
     * @type {string}
     * @memberof StandardUnitDescription
     */
    name?: string;
    /**
     * UI display abbreviation for the measurement unit. For example, \'lb\'.
     * @type {string}
     * @memberof StandardUnitDescription
     */
    abbreviation?: string;
}
/**
 * Group of standard measurement units.
 * @export
 * @interface StandardUnitDescriptionGroup
 */
export interface StandardUnitDescriptionGroup {
    /**
     * List of standard (non-custom) measurement units in this description group.
     * @type {Array<StandardUnitDescription>}
     * @memberof StandardUnitDescriptionGroup
     */
    standard_unit_descriptions?: Array<StandardUnitDescription>;
    /**
     * IETF language tag.
     * @type {string}
     * @memberof StandardUnitDescriptionGroup
     */
    language_code?: string;
}
/**
 * Defines fields in a SubmitEvidence response.
 * @export
 * @interface SubmitEvidenceResponse
 */
export interface SubmitEvidenceResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof SubmitEvidenceResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Dispute}
     * @memberof SubmitEvidenceResponse
     */
    dispute?: Dispute;
}
/**
 * Represents a customer subscription to a subscription plan. For an overview of the `Subscription` type, see  [Subscription object](/docs/subscriptions-api/overview#subscription-object-overview).
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * The Square-assigned ID of the subscription.
     * @type {string}
     * @memberof Subscription
     */
    id?: string;
    /**
     * The ID of the location associated with the subscription.
     * @type {string}
     * @memberof Subscription
     */
    location_id?: string;
    /**
     * The ID of the associated `subscription plan`.
     * @type {string}
     * @memberof Subscription
     */
    plan_id?: string;
    /**
     * The ID of the associated `customer` profile.
     * @type {string}
     * @memberof Subscription
     */
    customer_id?: string;
    /**
     * The start date of the subscription, in YYYY-MM-DD format (for example, 2013-01-15).
     * @type {string}
     * @memberof Subscription
     */
    start_date?: string;
    /**
     * The subscription cancellation date, in YYYY-MM-DD format (for example, 2013-01-15). On this date, the subscription status changes  to `CANCELED` and the subscription billing stops.  If you don\'t set this field, the subscription plan dictates if and  when subscription ends.   You cannot update this field, you can only clear it.
     * @type {string}
     * @memberof Subscription
     */
    canceled_date?: string;
    /**
     * The current status of the subscription. See [SubscriptionStatus](#type-subscriptionstatus) for possible values
     * @type {string}
     * @memberof Subscription
     */
    status?: string;
    /**
     * The tax amount applied when billing the subscription. The percentage is expressed in decimal form, using a `\'.\'` as the decimal separator and without a `\'%\'` sign. For example, a value of `7.5` corresponds to 7.5%.
     * @type {string}
     * @memberof Subscription
     */
    tax_percentage?: string;
    /**
     * The IDs of the `invoices` created for the  subscription, listed in order when the invoices were created  (oldest invoices appear first).
     * @type {Array<string>}
     * @memberof Subscription
     */
    invoice_ids?: Array<string>;
    /**
     *
     * @type {Money}
     * @memberof Subscription
     */
    price_override_money?: Money;
    /**
     * The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.
     * @type {number}
     * @memberof Subscription
     */
    version?: number;
    /**
     * The timestamp when the subscription was created, in RFC 3339 format.
     * @type {string}
     * @memberof Subscription
     */
    created_at?: string;
    /**
     * The ID of the `customer](#type-customer) [card` that is charged for the subscription.
     * @type {string}
     * @memberof Subscription
     */
    card_id?: string;
    /**
     * The date up to which the customer is invoiced for the subscription, in YYYY-MM-DD format (for example, 2013-01-15).  After the invoice is paid for a given billing period, this date will be the last day of the billing period. For example, suppose for the month of May a customer gets an invoice (or charged the card) on May 1. For the monthly billing scenario, this date is then set to May 31.
     * @type {string}
     * @memberof Subscription
     */
    paid_until_date?: string;
    /**
     * Timezone that will be used in date calculations for the subscription. Defaults to the timezone of the location based on `location_id`. Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).
     * @type {string}
     * @memberof Subscription
     */
    timezone?: string;
}
/**
 * Determines the billing cadence of a `Subscription`
 * @export
 * @enum {string}
 */
export declare enum SubscriptionCadence {
    DAILY = "DAILY",
    WEEKLY = "WEEKLY",
    EVERYTWOWEEKS = "EVERY_TWO_WEEKS",
    THIRTYDAYS = "THIRTY_DAYS",
    SIXTYDAYS = "SIXTY_DAYS",
    NINETYDAYS = "NINETY_DAYS",
    MONTHLY = "MONTHLY",
    EVERYTWOMONTHS = "EVERY_TWO_MONTHS",
    QUARTERLY = "QUARTERLY",
    EVERYFOURMONTHS = "EVERY_FOUR_MONTHS",
    EVERYSIXMONTHS = "EVERY_SIX_MONTHS",
    ANNUAL = "ANNUAL",
    EVERYTWOYEARS = "EVERY_TWO_YEARS"
}
/**
 * Describes changes to subscription and billing states.
 * @export
 * @interface SubscriptionEvent
 */
export interface SubscriptionEvent {
    /**
     * The ID of the subscription event.
     * @type {string}
     * @memberof SubscriptionEvent
     */
    id: string;
    /**
     * Type of the subscription event. See [SubscriptionEventSubscriptionEventType](#type-subscriptioneventsubscriptioneventtype) for possible values
     * @type {string}
     * @memberof SubscriptionEvent
     */
    subscription_event_type: string;
    /**
     * The date, in YYYY-MM-DD format (for example, 2013-01-15), when the subscription event went into effect.
     * @type {string}
     * @memberof SubscriptionEvent
     */
    effective_date: string;
    /**
     * The ID of the subscription plan associated with the subscription.
     * @type {string}
     * @memberof SubscriptionEvent
     */
    plan_id: string;
}
/**
 * The possible subscription event types.
 * @export
 * @enum {string}
 */
export declare enum SubscriptionEventSubscriptionEventType {
    STARTSUBSCRIPTION = "START_SUBSCRIPTION",
    PLANCHANGE = "PLAN_CHANGE",
    STOPSUBSCRIPTION = "STOP_SUBSCRIPTION"
}
/**
 * Describes a phase in a subscription plan. For more information, see [Set Up and Manage a Subscription Plan](/docs/subscriptions-api/setup-plan).
 * @export
 * @interface SubscriptionPhase
 */
export interface SubscriptionPhase {
    /**
     * The Square-assigned ID of the subscription phase. This field cannot be changed after a `SubscriptionPhase` is created.
     * @type {string}
     * @memberof SubscriptionPhase
     */
    uid?: string;
    /**
     * The billing cadence of the phase. For example, weekly or monthly. This field cannot be changed after a `SubscriptionPhase` is created. See [SubscriptionCadence](#type-subscriptioncadence) for possible values
     * @type {string}
     * @memberof SubscriptionPhase
     */
    cadence: string;
    /**
     * The number of `cadence`s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a `SubscriptionPhase` is created.
     * @type {number}
     * @memberof SubscriptionPhase
     */
    periods?: number;
    /**
     *
     * @type {Money}
     * @memberof SubscriptionPhase
     */
    recurring_price_money: Money;
    /**
     * The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a `SubscriptionPhase` is created.
     * @type {number}
     * @memberof SubscriptionPhase
     */
    ordinal?: number;
}
/**
 * Possible subscription status values.
 * @export
 * @enum {string}
 */
export declare enum SubscriptionStatus {
    DEFAULTSUBSCRIPTIONSTATUSDONOTUSE = "DEFAULT_SUBSCRIPTION_STATUS_DO_NOT_USE",
    PENDING = "PENDING",
    ACTIVE = "ACTIVE",
    CANCELED = "CANCELED"
}
/**
 * When to calculate the taxes due on a cart.
 * @export
 * @enum {string}
 */
export declare enum TaxCalculationPhase {
    SUBTOTALPHASE = "TAX_SUBTOTAL_PHASE",
    TOTALPHASE = "TAX_TOTAL_PHASE"
}
/**
 * Whether to the tax amount should be additional to or included in the CatalogItem price.
 * @export
 * @enum {string}
 */
export declare enum TaxInclusionType {
    ADDITIVE = "ADDITIVE",
    INCLUSIVE = "INCLUSIVE"
}
/**
 * A record representing an individual team member for a business.
 * @export
 * @interface TeamMember
 */
export interface TeamMember {
    /**
     * The unique ID for the team member.
     * @type {string}
     * @memberof TeamMember
     */
    id?: string;
    /**
     * A second ID used to associate the team member with an entity in another system.
     * @type {string}
     * @memberof TeamMember
     */
    reference_id?: string;
    /**
     * Whether the team member is the owner of the Square account.
     * @type {boolean}
     * @memberof TeamMember
     */
    is_owner?: boolean;
    /**
     * Describes the status of the team member. See [TeamMemberStatus](#type-teammemberstatus) for possible values
     * @type {string}
     * @memberof TeamMember
     */
    status?: string;
    /**
     * The given (i.e., first) name associated with the team member.
     * @type {string}
     * @memberof TeamMember
     */
    given_name?: string;
    /**
     * The family (i.e., last) name associated with the team member.
     * @type {string}
     * @memberof TeamMember
     */
    family_name?: string;
    /**
     * The email address associated with the team member.
     * @type {string}
     * @memberof TeamMember
     */
    email_address?: string;
    /**
     * The team member\'s phone number in E.164 format. Examples: +14155552671 - the country code is 1 for US +551155256325 - the country code is 55 for BR
     * @type {string}
     * @memberof TeamMember
     */
    phone_number?: string;
    /**
     * The timestamp in RFC 3339 format describing when the team member was created. Ex: \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\"
     * @type {string}
     * @memberof TeamMember
     */
    created_at?: string;
    /**
     * The timestamp in RFC 3339 format describing when the team member was last updated. Ex: \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\"
     * @type {string}
     * @memberof TeamMember
     */
    updated_at?: string;
    /**
     *
     * @type {TeamMemberAssignedLocations}
     * @memberof TeamMember
     */
    assigned_locations?: TeamMemberAssignedLocations;
}
/**
 * An object that represents a team member\'s assignment to locations.
 * @export
 * @interface TeamMemberAssignedLocations
 */
export interface TeamMemberAssignedLocations {
    /**
     * The current assignment type of the team member. See [TeamMemberAssignedLocationsAssignmentType](#type-teammemberassignedlocationsassignmenttype) for possible values
     * @type {string}
     * @memberof TeamMemberAssignedLocations
     */
    assignment_type?: string;
    /**
     * The locations that the team member is assigned to.
     * @type {Array<string>}
     * @memberof TeamMemberAssignedLocations
     */
    location_ids?: Array<string>;
}
/**
 * Enumerates the possible assignment types the team member can have
 * @export
 * @enum {string}
 */
export declare enum TeamMemberAssignedLocationsAssignmentType {
    ALLCURRENTANDFUTURELOCATIONS = "ALL_CURRENT_AND_FUTURE_LOCATIONS",
    EXPLICITLOCATIONS = "EXPLICIT_LOCATIONS"
}
/**
 * Enumerates the possible statuses the team member can have within a business.
 * @export
 * @enum {string}
 */
export declare enum TeamMemberStatus {
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
/**
 * The hourly wage rate that a team member will earn on a `Shift` for doing the job specified by the `title` property of this object.
 * @export
 * @interface TeamMemberWage
 */
export interface TeamMemberWage {
    /**
     * UUID for this object.
     * @type {string}
     * @memberof TeamMemberWage
     */
    id?: string;
    /**
     * The `Team Member` that this wage is assigned to.
     * @type {string}
     * @memberof TeamMemberWage
     */
    team_member_id?: string;
    /**
     * The job title that this wage relates to.
     * @type {string}
     * @memberof TeamMemberWage
     */
    title?: string;
    /**
     *
     * @type {Money}
     * @memberof TeamMemberWage
     */
    hourly_rate?: Money;
}
/**
 * Represents a tender (i.e., a method of payment) used in a Square transaction.
 * @export
 * @interface Tender
 */
export interface Tender {
    /**
     * The tender\'s unique ID.
     * @type {string}
     * @memberof Tender
     */
    id?: string;
    /**
     * The ID of the transaction\'s associated location.
     * @type {string}
     * @memberof Tender
     */
    location_id?: string;
    /**
     * The ID of the tender\'s associated transaction.
     * @type {string}
     * @memberof Tender
     */
    transaction_id?: string;
    /**
     * The timestamp for when the tender was created, in RFC 3339 format.
     * @type {string}
     * @memberof Tender
     */
    created_at?: string;
    /**
     * An optional note associated with the tender at the time of payment.
     * @type {string}
     * @memberof Tender
     */
    note?: string;
    /**
     *
     * @type {Money}
     * @memberof Tender
     */
    amount_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof Tender
     */
    tip_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof Tender
     */
    processing_fee_money?: Money;
    /**
     * If the tender is associated with a customer or represents a customer\'s card on file, this is the ID of the associated customer.
     * @type {string}
     * @memberof Tender
     */
    customer_id?: string;
    /**
     * The type of tender, such as `CARD` or `CASH`. See [TenderType](#type-tendertype) for possible values
     * @type {string}
     * @memberof Tender
     */
    type: string;
    /**
     *
     * @type {TenderCardDetails}
     * @memberof Tender
     */
    card_details?: TenderCardDetails;
    /**
     *
     * @type {TenderCashDetails}
     * @memberof Tender
     */
    cash_details?: TenderCashDetails;
    /**
     * Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration.
     * @type {Array<AdditionalRecipient>}
     * @memberof Tender
     */
    additional_recipients?: Array<AdditionalRecipient>;
    /**
     * The ID of the `Payment` that corresponds to this tender. This value is only present for payments created with the v2 Payments API.
     * @type {string}
     * @memberof Tender
     */
    payment_id?: string;
}
/**
 * Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
 * @export
 * @interface TenderCardDetails
 */
export interface TenderCardDetails {
    /**
     * The credit card payment\'s current state (such as `AUTHORIZED` or `CAPTURED`). See `TenderCardDetailsStatus` for possible values. See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values
     * @type {string}
     * @memberof TenderCardDetails
     */
    status?: string;
    /**
     *
     * @type {Card}
     * @memberof TenderCardDetails
     */
    card?: Card;
    /**
     * The method used to enter the card\'s details for the transaction. See [TenderCardDetailsEntryMethod](#type-tendercarddetailsentrymethod) for possible values
     * @type {string}
     * @memberof TenderCardDetails
     */
    entry_method?: string;
}
/**
 * Indicates the method used to enter the card\'s details.
 * @export
 * @enum {string}
 */
export declare enum TenderCardDetailsEntryMethod {
    SWIPED = "SWIPED",
    KEYED = "KEYED",
    EMV = "EMV",
    ONFILE = "ON_FILE",
    CONTACTLESS = "CONTACTLESS"
}
/**
 * Indicates the card transaction\'s current status.
 * @export
 * @enum {string}
 */
export declare enum TenderCardDetailsStatus {
    AUTHORIZED = "AUTHORIZED",
    CAPTURED = "CAPTURED",
    VOIDED = "VOIDED",
    FAILED = "FAILED"
}
/**
 * Represents the details of a tender with `type` `CASH`.
 * @export
 * @interface TenderCashDetails
 */
export interface TenderCashDetails {
    /**
     *
     * @type {Money}
     * @memberof TenderCashDetails
     */
    buyer_tendered_money?: Money;
    /**
     *
     * @type {Money}
     * @memberof TenderCashDetails
     */
    change_back_money?: Money;
}
/**
 * Indicates a tender\'s type.
 * @export
 * @enum {string}
 */
export declare enum TenderType {
    CARD = "CARD",
    CASH = "CASH",
    THIRDPARTYCARD = "THIRD_PARTY_CARD",
    SQUAREGIFTCARD = "SQUARE_GIFT_CARD",
    NOSALE = "NO_SALE",
    WALLET = "WALLET",
    OTHER = "OTHER"
}
/**
 *
 * @export
 * @interface TerminalCheckout
 */
export interface TerminalCheckout {
    /**
     * A unique ID for this `TerminalCheckout`
     * @type {string}
     * @memberof TerminalCheckout
     */
    id?: string;
    /**
     *
     * @type {Money}
     * @memberof TerminalCheckout
     */
    amount_money: Money;
    /**
     * An optional user-defined reference ID which can be used to associate this `TerminalCheckout` to another entity in an external system. For example, an order ID generated by a third-party shopping cart. Will also be associated with any payments used to complete the checkout.
     * @type {string}
     * @memberof TerminalCheckout
     */
    reference_id?: string;
    /**
     * An optional note to associate with the checkout, as well any payments used to complete the checkout.
     * @type {string}
     * @memberof TerminalCheckout
     */
    note?: string;
    /**
     *
     * @type {DeviceCheckoutOptions}
     * @memberof TerminalCheckout
     */
    device_options: DeviceCheckoutOptions;
    /**
     * The duration as an RFC 3339 duration, after which the checkout will be automatically canceled. TerminalCheckouts that are `PENDING` will be automatically `CANCELED` and have a cancellation reason of `TIMED\\_OUT`.  Default: 5 minutes from creation  Maximum: 5 minutes
     * @type {string}
     * @memberof TerminalCheckout
     */
    deadline_duration?: string;
    /**
     * The status of the `TerminalCheckout`. Options: `PENDING`, `IN\\_PROGRESS`, `CANCEL\\_REQUESTED`, `CANCELED`, `COMPLETED`
     * @type {string}
     * @memberof TerminalCheckout
     */
    status?: string;
    /**
     * Present if the status is `CANCELED`. See [ActionCancelReason](#type-actioncancelreason) for possible values
     * @type {string}
     * @memberof TerminalCheckout
     */
    cancel_reason?: string;
    /**
     * A list of ids for payments created by this `TerminalCheckout`.
     * @type {Array<string>}
     * @memberof TerminalCheckout
     */
    payment_ids?: Array<string>;
    /**
     * The time when the `TerminalCheckout` was created as an RFC 3339 timestamp.
     * @type {string}
     * @memberof TerminalCheckout
     */
    created_at?: string;
    /**
     * The time when the `TerminalCheckout` was last updated as an RFC 3339 timestamp.
     * @type {string}
     * @memberof TerminalCheckout
     */
    updated_at?: string;
}
/**
 *
 * @export
 * @interface TerminalCheckoutQuery
 */
export interface TerminalCheckoutQuery {
    /**
     *
     * @type {TerminalCheckoutQueryFilter}
     * @memberof TerminalCheckoutQuery
     */
    filter?: TerminalCheckoutQueryFilter;
    /**
     *
     * @type {TerminalCheckoutQuerySort}
     * @memberof TerminalCheckoutQuery
     */
    sort?: TerminalCheckoutQuerySort;
}
/**
 *
 * @export
 * @interface TerminalCheckoutQueryFilter
 */
export interface TerminalCheckoutQueryFilter {
    /**
     * `TerminalCheckout`s associated with a specific device. If no device is specified then all `TerminalCheckout`s for the merchant will be displayed.
     * @type {string}
     * @memberof TerminalCheckoutQueryFilter
     */
    device_id?: string;
    /**
     *
     * @type {TimeRange}
     * @memberof TerminalCheckoutQueryFilter
     */
    created_at?: TimeRange;
    /**
     * Filtered results with the desired status of the `TerminalCheckout` Options: PENDING, IN\\_PROGRESS, CANCELED, COMPLETED
     * @type {string}
     * @memberof TerminalCheckoutQueryFilter
     */
    status?: string;
}
/**
 *
 * @export
 * @interface TerminalCheckoutQuerySort
 */
export interface TerminalCheckoutQuerySort {
    /**
     * The order in which results are listed. - `ASC` - oldest to newest - `DESC` - newest to oldest (default).
     * @type {string}
     * @memberof TerminalCheckoutQuerySort
     */
    sort_order?: string;
}
/**
 *
 * @export
 * @interface TerminalRefund
 */
export interface TerminalRefund {
    /**
     * A unique ID for this `TerminalRefund`
     * @type {string}
     * @memberof TerminalRefund
     */
    id?: string;
    /**
     * The reference to the payment refund created by completing this `TerminalRefund`.
     * @type {string}
     * @memberof TerminalRefund
     */
    refund_id?: string;
    /**
     * Unique ID of the payment being refunded.
     * @type {string}
     * @memberof TerminalRefund
     */
    payment_id: string;
    /**
     * The reference to the Square order id for the payment identified by the `payment_id`.
     * @type {string}
     * @memberof TerminalRefund
     */
    order_id?: string;
    /**
     *
     * @type {Money}
     * @memberof TerminalRefund
     */
    amount_money: Money;
    /**
     * A description of the reason for the refund. Note: maximum 192 characters
     * @type {string}
     * @memberof TerminalRefund
     */
    reason?: string;
    /**
     * The unique Id of the device intended for this `TerminalRefund`. The Id can be retrieved from /v2/devices api.
     * @type {string}
     * @memberof TerminalRefund
     */
    device_id?: string;
    /**
     * The duration as an RFC 3339 duration, after which the refund will be automatically canceled. TerminalRefunds that are `PENDING` will be automatically `CANCELED` and have a cancellation reason of `TIMED_OUT`  Default: 5 minutes from creation  Maximum: 5 minutes
     * @type {string}
     * @memberof TerminalRefund
     */
    deadline_duration?: string;
    /**
     * The status of the `TerminalRefund`. Options: `PENDING`, `IN\\_PROGRESS`, `CANCELED`, `COMPLETED`
     * @type {string}
     * @memberof TerminalRefund
     */
    status?: string;
    /**
     * Present if the status is `CANCELED`. See [ActionCancelReason](#type-actioncancelreason) for possible values
     * @type {string}
     * @memberof TerminalRefund
     */
    cancel_reason?: string;
    /**
     * The time when the `TerminalRefund` was created as an RFC 3339 timestamp.
     * @type {string}
     * @memberof TerminalRefund
     */
    created_at?: string;
    /**
     * The time when the `TerminalRefund` was last updated as an RFC 3339 timestamp.
     * @type {string}
     * @memberof TerminalRefund
     */
    updated_at?: string;
}
/**
 *
 * @export
 * @interface TerminalRefundQuery
 */
export interface TerminalRefundQuery {
    /**
     *
     * @type {TerminalRefundQueryFilter}
     * @memberof TerminalRefundQuery
     */
    filter?: TerminalRefundQueryFilter;
    /**
     *
     * @type {TerminalRefundQuerySort}
     * @memberof TerminalRefundQuery
     */
    sort?: TerminalRefundQuerySort;
}
/**
 *
 * @export
 * @interface TerminalRefundQueryFilter
 */
export interface TerminalRefundQueryFilter {
    /**
     * `TerminalRefund`s associated with a specific device. If no device is specified then all `TerminalRefund`s for the signed in account will be displayed.
     * @type {string}
     * @memberof TerminalRefundQueryFilter
     */
    device_id?: string;
    /**
     *
     * @type {TimeRange}
     * @memberof TerminalRefundQueryFilter
     */
    created_at?: TimeRange;
    /**
     * Filtered results with the desired status of the `TerminalRefund` Options: `PENDING`, `IN\\_PROGRESS`, `CANCEL\\_REQUESTED`, `CANCELED`, `COMPLETED`
     * @type {string}
     * @memberof TerminalRefundQueryFilter
     */
    status?: string;
}
/**
 *
 * @export
 * @interface TerminalRefundQuerySort
 */
export interface TerminalRefundQuerySort {
    /**
     * The order in which results are listed. - `ASC` - oldest to newest - `DESC` - newest to oldest (default).
     * @type {string}
     * @memberof TerminalRefundQuerySort
     */
    sort_order?: string;
}
/**
 * Represents a generic time range. The start and end values are represented in RFC 3339 format. Time ranges are customized to be inclusive or exclusive based on the needs of a particular endpoint. Refer to the relevant endpoint-specific documentation to determine how time ranges are handled.
 * @export
 * @interface TimeRange
 */
export interface TimeRange {
    /**
     * A datetime value in RFC 3339 format indicating when the time range starts.
     * @type {string}
     * @memberof TimeRange
     */
    start_at?: string;
    /**
     * A datetime value in RFC 3339 format indicating when the time range ends.
     * @type {string}
     * @memberof TimeRange
     */
    end_at?: string;
}
/**
 *
 * @export
 * @interface TipSettings
 */
export interface TipSettings {
    /**
     * Indicates whether tipping is enabled for this checkout. Defaults to false.
     * @type {boolean}
     * @memberof TipSettings
     */
    allow_tipping?: boolean;
    /**
     * Indicates whether tip options should be presented on their own screen before presenting the signature screen during card payment. Defaults to false.
     * @type {boolean}
     * @memberof TipSettings
     */
    separate_tip_screen?: boolean;
    /**
     * Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false.
     * @type {boolean}
     * @memberof TipSettings
     */
    custom_tip_field?: boolean;
}
/**
 * Represents a transaction processed with Square, either with the Connect API or with Square Point of Sale.  The `tenders` field of this object lists all methods of payment used to pay in the transaction.
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * The transaction\'s unique ID, issued by Square payments servers.
     * @type {string}
     * @memberof Transaction
     */
    id?: string;
    /**
     * The ID of the transaction\'s associated location.
     * @type {string}
     * @memberof Transaction
     */
    location_id?: string;
    /**
     * The timestamp for when the transaction was created, in RFC 3339 format.
     * @type {string}
     * @memberof Transaction
     */
    created_at?: string;
    /**
     * The tenders used to pay in the transaction.
     * @type {Array<Tender>}
     * @memberof Transaction
     */
    tenders?: Array<Tender>;
    /**
     * Refunds that have been applied to any tender in the transaction.
     * @type {Array<Refund>}
     * @memberof Transaction
     */
    refunds?: Array<Refund>;
    /**
     * If the transaction was created with the `Charge` endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set.
     * @type {string}
     * @memberof Transaction
     */
    reference_id?: string;
    /**
     * The Square product that processed the transaction. See [TransactionProduct](#type-transactionproduct) for possible values
     * @type {string}
     * @memberof Transaction
     */
    product?: string;
    /**
     * If the transaction was created in the Square Point of Sale app, this value is the ID generated for the transaction by Square Point of Sale.  This ID has no relationship to the transaction\'s canonical `id`, which is generated by Square\'s backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.
     * @type {string}
     * @memberof Transaction
     */
    client_id?: string;
    /**
     *
     * @type {Address}
     * @memberof Transaction
     */
    shipping_address?: Address;
    /**
     * The order_id is an identifier for the order associated with this transaction, if any.
     * @type {string}
     * @memberof Transaction
     */
    order_id?: string;
}
/**
 * Indicates the Square product used to process a transaction.
 * @export
 * @enum {string}
 */
export declare enum TransactionProduct {
    REGISTER = "REGISTER",
    EXTERNALAPI = "EXTERNAL_API",
    BILLING = "BILLING",
    APPOINTMENTS = "APPOINTMENTS",
    INVOICES = "INVOICES",
    ONLINESTORE = "ONLINE_STORE",
    PAYROLL = "PAYROLL",
    OTHER = "OTHER"
}
/**
 * Transaction type used in the disputed payment.
 * @export
 * @enum {string}
 */
export declare enum TransactionType {
    DEBIT = "DEBIT",
    CREDIT = "CREDIT"
}
/**
 * A request to update a `BreakType`
 * @export
 * @interface UpdateBreakTypeRequest
 */
export interface UpdateBreakTypeRequest {
    /**
     *
     * @type {BreakType}
     * @memberof UpdateBreakTypeRequest
     */
    break_type: BreakType;
}
/**
 * A response to a request to update a `BreakType`. Contains the requested `BreakType` objects. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface UpdateBreakTypeResponse
 */
export interface UpdateBreakTypeResponse {
    /**
     *
     * @type {BreakType}
     * @memberof UpdateBreakTypeResponse
     */
    break_type?: BreakType;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpdateBreakTypeResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines the body parameters that can be provided in a request to the [UpdateCustomerGroup](#endpoint-updatecustomergroup) endpoint.
 * @export
 * @interface UpdateCustomerGroupRequest
 */
export interface UpdateCustomerGroupRequest {
    /**
     *
     * @type {CustomerGroup}
     * @memberof UpdateCustomerGroupRequest
     */
    group: CustomerGroup;
}
/**
 * Defines the fields that are included in the response body of a request to the [UpdateCustomerGroup](#endpoint-updatecustomergroup) endpoint.  One of `errors` or `group` is present in a given response (never both).
 * @export
 * @interface UpdateCustomerGroupResponse
 */
export interface UpdateCustomerGroupResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpdateCustomerGroupResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {CustomerGroup}
     * @memberof UpdateCustomerGroupResponse
     */
    group?: CustomerGroup;
}
/**
 * Defines the body parameters that can be provided in a request to the UpdateCustomer endpoint.
 * @export
 * @interface UpdateCustomerRequest
 */
export interface UpdateCustomerRequest {
    /**
     * The given (i.e., first) name associated with the customer profile.
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    given_name?: string;
    /**
     * The family (i.e., last) name associated with the customer profile.
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    family_name?: string;
    /**
     * A business name associated with the customer profile.
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    company_name?: string;
    /**
     * A nickname for the customer profile.
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    nickname?: string;
    /**
     * The email address associated with the customer profile.
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    email_address?: string;
    /**
     *
     * @type {Address}
     * @memberof UpdateCustomerRequest
     */
    address?: Address;
    /**
     * The 11-digit phone number associated with the customer profile.
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    phone_number?: string;
    /**
     * An optional, second ID used to associate the customer profile with an entity in another system.
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    reference_id?: string;
    /**
     * A custom note associated with the customer profile.
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    note?: string;
    /**
     * The birthday associated with the customer profile, in RFC 3339 format. Year is optional, timezone and times are not allowed. For example: `0000-09-01T00:00:00-00:00` indicates a birthday on September 1st. `1998-09-01T00:00:00-00:00` indications a birthday on September 1st __1998__.
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    birthday?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the UpdateCustomer endpoint.  One of `errors` or `customer` is present in a given response (never both).
 * @export
 * @interface UpdateCustomerResponse
 */
export interface UpdateCustomerResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpdateCustomerResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Customer}
     * @memberof UpdateCustomerResponse
     */
    customer?: Customer;
}
/**
 * Describes a `UpdateInvoice` request.
 * @export
 * @interface UpdateInvoiceRequest
 */
export interface UpdateInvoiceRequest {
    /**
     *
     * @type {Invoice}
     * @memberof UpdateInvoiceRequest
     */
    invoice: Invoice;
    /**
     * A unique string that identifies the `UpdateInvoice` request. If you do not provide `idempotency_key` (or provide an empty string as the value), the endpoint treats each request as independent.  For more information, see [Idempotency](https://developer.squareup.com/docs/docs/working-with-apis/idempotency).
     * @type {string}
     * @memberof UpdateInvoiceRequest
     */
    idempotency_key?: string;
    /**
     * List of fields to clear. For examples, see [Update an invoice](https://developer.squareup.com/docs/docs/invoices-api/overview#update-an-invoice).
     * @type {Array<string>}
     * @memberof UpdateInvoiceRequest
     */
    fields_to_clear?: Array<string>;
}
/**
 * Describes a `UpdateInvoice` response.
 * @export
 * @interface UpdateInvoiceResponse
 */
export interface UpdateInvoiceResponse {
    /**
     *
     * @type {Invoice}
     * @memberof UpdateInvoiceResponse
     */
    invoice?: Invoice;
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof UpdateInvoiceResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface UpdateItemModifierListsRequest
 */
export interface UpdateItemModifierListsRequest {
    /**
     * The IDs of the catalog items associated with the CatalogModifierList objects being updated.
     * @type {Array<string>}
     * @memberof UpdateItemModifierListsRequest
     */
    item_ids: Array<string>;
    /**
     * The IDs of the CatalogModifierList objects to enable for the CatalogItem.
     * @type {Array<string>}
     * @memberof UpdateItemModifierListsRequest
     */
    modifier_lists_to_enable?: Array<string>;
    /**
     * The IDs of the CatalogModifierList objects to disable for the CatalogItem.
     * @type {Array<string>}
     * @memberof UpdateItemModifierListsRequest
     */
    modifier_lists_to_disable?: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateItemModifierListsResponse
 */
export interface UpdateItemModifierListsResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpdateItemModifierListsResponse
     */
    errors?: Array<Error>;
    /**
     * The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-date) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
     * @type {string}
     * @memberof UpdateItemModifierListsResponse
     */
    updated_at?: string;
}
/**
 *
 * @export
 * @interface UpdateItemTaxesRequest
 */
export interface UpdateItemTaxesRequest {
    /**
     * IDs for the CatalogItems associated with the CatalogTax objects being updated.
     * @type {Array<string>}
     * @memberof UpdateItemTaxesRequest
     */
    item_ids: Array<string>;
    /**
     * IDs of the CatalogTax objects to enable.
     * @type {Array<string>}
     * @memberof UpdateItemTaxesRequest
     */
    taxes_to_enable?: Array<string>;
    /**
     * IDs of the CatalogTax objects to disable.
     * @type {Array<string>}
     * @memberof UpdateItemTaxesRequest
     */
    taxes_to_disable?: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateItemTaxesResponse
 */
export interface UpdateItemTaxesResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpdateItemTaxesResponse
     */
    errors?: Array<Error>;
    /**
     * The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
     * @type {string}
     * @memberof UpdateItemTaxesResponse
     */
    updated_at?: string;
}
/**
 * Request object for the [UpdateLocation](#endpoint-updatelocation) endpoint.
 * @export
 * @interface UpdateLocationRequest
 */
export interface UpdateLocationRequest {
    /**
     *
     * @type {Location}
     * @memberof UpdateLocationRequest
     */
    location?: Location;
}
/**
 * Response object returned by the [UpdateLocation](#endpoint-updatelocation) endpoint.
 * @export
 * @interface UpdateLocationResponse
 */
export interface UpdateLocationResponse {
    /**
     * Information on errors encountered during the request.
     * @type {Array<Error>}
     * @memberof UpdateLocationResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Location}
     * @memberof UpdateLocationResponse
     */
    location?: Location;
}
/**
 * Defines the fields that are included in requests to the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
 * @export
 * @interface UpdateOrderRequest
 */
export interface UpdateOrderRequest {
    /**
     *
     * @type {Order}
     * @memberof UpdateOrderRequest
     */
    order?: Order;
    /**
     * The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation) fields to clear. For example, `line_items[uid].note` [Read more about Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders#delete-fields).
     * @type {Array<string>}
     * @memberof UpdateOrderRequest
     */
    fields_to_clear?: Array<string>;
    /**
     * A value you specify that uniquely identifies this update request  If you\'re unsure whether a particular update was applied to an order successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate updates to the order. The latest order version will be returned.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
     * @type {string}
     * @memberof UpdateOrderRequest
     */
    idempotency_key?: string;
}
/**
 * Defines the fields that are included in the response body of a request to the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
 * @export
 * @interface UpdateOrderResponse
 */
export interface UpdateOrderResponse {
    /**
     *
     * @type {Order}
     * @memberof UpdateOrderResponse
     */
    order?: Order;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpdateOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * A request to update a `Shift` object.
 * @export
 * @interface UpdateShiftRequest
 */
export interface UpdateShiftRequest {
    /**
     *
     * @type {Shift}
     * @memberof UpdateShiftRequest
     */
    shift: Shift;
}
/**
 * The response to a request to update a `Shift`. Contains the updated `Shift` object. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface UpdateShiftResponse
 */
export interface UpdateShiftResponse {
    /**
     *
     * @type {Shift}
     * @memberof UpdateShiftResponse
     */
    shift?: Shift;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpdateShiftResponse
     */
    errors?: Array<Error>;
}
/**
 * Defines parameters in a [UpdateSubscription](#endpoint-subscriptions-updatesubscription) endpoint  request.
 * @export
 * @interface UpdateSubscriptionRequest
 */
export interface UpdateSubscriptionRequest {
    /**
     *
     * @type {Subscription}
     * @memberof UpdateSubscriptionRequest
     */
    subscription?: Subscription;
}
/**
 * Defines the fields that are included in the response from the [UpdateSubscription](#endpoint-subscriptions-updatesubscription) endpoint.
 * @export
 * @interface UpdateSubscriptionResponse
 */
export interface UpdateSubscriptionResponse {
    /**
     * Information about errors encountered during the request.
     * @type {Array<Error>}
     * @memberof UpdateSubscriptionResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {Subscription}
     * @memberof UpdateSubscriptionResponse
     */
    subscription?: Subscription;
}
/**
 * Represents an update request for a `TeamMember` object.
 * @export
 * @interface UpdateTeamMemberRequest
 */
export interface UpdateTeamMemberRequest {
    /**
     *
     * @type {TeamMember}
     * @memberof UpdateTeamMemberRequest
     */
    team_member?: TeamMember;
}
/**
 * Represents a response from an update request, containing the updated `TeamMember` object or error messages.
 * @export
 * @interface UpdateTeamMemberResponse
 */
export interface UpdateTeamMemberResponse {
    /**
     *
     * @type {TeamMember}
     * @memberof UpdateTeamMemberResponse
     */
    team_member?: TeamMember;
    /**
     * The errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpdateTeamMemberResponse
     */
    errors?: Array<Error>;
}
/**
 * Represents an update request for the `WageSetting` object describing a `TeamMember`.
 * @export
 * @interface UpdateWageSettingRequest
 */
export interface UpdateWageSettingRequest {
    /**
     *
     * @type {WageSetting}
     * @memberof UpdateWageSettingRequest
     */
    wage_setting: WageSetting;
}
/**
 * Represents a response from an update request, containing the updated `WageSetting` object or error messages.
 * @export
 * @interface UpdateWageSettingResponse
 */
export interface UpdateWageSettingResponse {
    /**
     *
     * @type {WageSetting}
     * @memberof UpdateWageSettingResponse
     */
    wage_setting?: WageSetting;
    /**
     * The errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpdateWageSettingResponse
     */
    errors?: Array<Error>;
}
/**
 * A request to update a `WorkweekConfig` object
 * @export
 * @interface UpdateWorkweekConfigRequest
 */
export interface UpdateWorkweekConfigRequest {
    /**
     *
     * @type {WorkweekConfig}
     * @memberof UpdateWorkweekConfigRequest
     */
    workweek_config: WorkweekConfig;
}
/**
 * The response to a request to update a `WorkweekConfig` object. Contains the updated `WorkweekConfig` object. May contain a set of `Error` objects if the request resulted in errors.
 * @export
 * @interface UpdateWorkweekConfigResponse
 */
export interface UpdateWorkweekConfigResponse {
    /**
     *
     * @type {WorkweekConfig}
     * @memberof UpdateWorkweekConfigResponse
     */
    workweek_config?: WorkweekConfig;
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpdateWorkweekConfigResponse
     */
    errors?: Array<Error>;
}
/**
 *
 * @export
 * @interface UpsertCatalogObjectRequest
 */
export interface UpsertCatalogObjectRequest {
    /**
     * A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you\'re unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
     * @type {string}
     * @memberof UpsertCatalogObjectRequest
     */
    idempotency_key: string;
    /**
     *
     * @type {CatalogObject}
     * @memberof UpsertCatalogObjectRequest
     */
    object: CatalogObject;
}
/**
 *
 * @export
 * @interface UpsertCatalogObjectResponse
 */
export interface UpsertCatalogObjectResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof UpsertCatalogObjectResponse
     */
    errors?: Array<Error>;
    /**
     *
     * @type {CatalogObject}
     * @memberof UpsertCatalogObjectResponse
     */
    catalog_object?: CatalogObject;
    /**
     * The mapping between client and server IDs for this upsert.
     * @type {Array<CatalogIdMapping>}
     * @memberof UpsertCatalogObjectResponse
     */
    id_mappings?: Array<CatalogIdMapping>;
}
/**
 * V1AdjustInventoryRequest
 * @export
 * @interface V1AdjustInventoryRequest
 */
export interface V1AdjustInventoryRequest {
    /**
     * The number to adjust the variation\'s quantity by.
     * @type {number}
     * @memberof V1AdjustInventoryRequest
     */
    quantity_delta?: number;
    /**
     * The reason for the inventory adjustment. See [V1AdjustInventoryRequestAdjustmentType](#type-v1adjustinventoryrequestadjustmenttype) for possible values
     * @type {string}
     * @memberof V1AdjustInventoryRequest
     */
    adjustment_type?: string;
    /**
     * A note about the inventory adjustment.
     * @type {string}
     * @memberof V1AdjustInventoryRequest
     */
    memo?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1AdjustInventoryRequestAdjustmentType {
    SALE = "SALE",
    RECEIVESTOCK = "RECEIVE_STOCK",
    MANUALADJUST = "MANUAL_ADJUST"
}
/**
 * V1BankAccount
 * @export
 * @interface V1BankAccount
 */
export interface V1BankAccount {
    /**
     * The bank account\'s Square-issued ID.
     * @type {string}
     * @memberof V1BankAccount
     */
    id?: string;
    /**
     * The Square-issued ID of the merchant associated with the bank account.
     * @type {string}
     * @memberof V1BankAccount
     */
    merchant_id?: string;
    /**
     * The name of the bank that manages the account.
     * @type {string}
     * @memberof V1BankAccount
     */
    bank_name?: string;
    /**
     * The name associated with the bank account.
     * @type {string}
     * @memberof V1BankAccount
     */
    name?: string;
    /**
     * The bank account\'s routing number.
     * @type {string}
     * @memberof V1BankAccount
     */
    routing_number?: string;
    /**
     * The last few digits of the bank account number.
     * @type {string}
     * @memberof V1BankAccount
     */
    account_number_suffix?: string;
    /**
     * The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD.
     * @type {string}
     * @memberof V1BankAccount
     */
    currency_code?: string;
    /**
     * The bank account\'s type (for example, savings or checking). See [V1BankAccountType](#type-v1bankaccounttype) for possible values
     * @type {string}
     * @memberof V1BankAccount
     */
    type?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1BankAccountType {
    BUSINESSCHECKING = "BUSINESS_CHECKING",
    CHECKING = "CHECKING",
    INVESTMENT = "INVESTMENT",
    LOAN = "LOAN",
    SAVINGS = "SAVINGS",
    OTHER = "OTHER"
}
/**
 * V1CashDrawerEvent
 * @export
 * @interface V1CashDrawerEvent
 */
export interface V1CashDrawerEvent {
    /**
     * The event\'s unique ID.
     * @type {string}
     * @memberof V1CashDrawerEvent
     */
    id?: string;
    /**
     * The ID of the employee that created the event.
     * @type {string}
     * @memberof V1CashDrawerEvent
     */
    employee_id?: string;
    /**
     * The type of event that occurred. See [V1CashDrawerEventEventType](#type-v1cashdrawereventeventtype) for possible values
     * @type {string}
     * @memberof V1CashDrawerEvent
     */
    event_type?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1CashDrawerEvent
     */
    event_money?: V1Money;
    /**
     * The time when the event occurred, in ISO 8601 format.
     * @type {string}
     * @memberof V1CashDrawerEvent
     */
    created_at?: string;
    /**
     * An optional description of the event, entered by the employee that created it.
     * @type {string}
     * @memberof V1CashDrawerEvent
     */
    description?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1CashDrawerEventEventType {
    NOSALE = "NO_SALE",
    CASHTENDERPAYMENT = "CASH_TENDER_PAYMENT",
    OTHERTENDERPAYMENT = "OTHER_TENDER_PAYMENT",
    CASHTENDERCANCELEDPAYMENT = "CASH_TENDER_CANCELED_PAYMENT",
    OTHERTENDERCANCELEDPAYMENT = "OTHER_TENDER_CANCELED_PAYMENT",
    CASHTENDERREFUND = "CASH_TENDER_REFUND",
    OTHERTENDERREFUND = "OTHER_TENDER_REFUND",
    PAIDIN = "PAID_IN",
    PAIDOUT = "PAID_OUT"
}
/**
 * Contains details for a single cash drawer shift.
 * @export
 * @interface V1CashDrawerShift
 */
export interface V1CashDrawerShift {
    /**
     * The shift\'s unique ID.
     * @type {string}
     * @memberof V1CashDrawerShift
     */
    id?: string;
    /**
     * The shift\'s current state. See [V1CashDrawerShiftEventType](#type-v1cashdrawershifteventtype) for possible values
     * @type {string}
     * @memberof V1CashDrawerShift
     */
    event_type?: string;
    /**
     * The time when the shift began, in ISO 8601 format.
     * @type {string}
     * @memberof V1CashDrawerShift
     */
    opened_at?: string;
    /**
     * The time when the shift ended, in ISO 8601 format.
     * @type {string}
     * @memberof V1CashDrawerShift
     */
    ended_at?: string;
    /**
     * The time when the shift was closed, in ISO 8601 format.
     * @type {string}
     * @memberof V1CashDrawerShift
     */
    closed_at?: string;
    /**
     * The IDs of all employees that were logged into Square Register at some point during the cash drawer shift.
     * @type {Array<string>}
     * @memberof V1CashDrawerShift
     */
    employee_ids?: Array<string>;
    /**
     * The ID of the employee that started the cash drawer shift.
     * @type {string}
     * @memberof V1CashDrawerShift
     */
    opening_employee_id?: string;
    /**
     * The ID of the employee that ended the cash drawer shift.
     * @type {string}
     * @memberof V1CashDrawerShift
     */
    ending_employee_id?: string;
    /**
     * The ID of the employee that closed the cash drawer shift by auditing the cash drawer\'s contents.
     * @type {string}
     * @memberof V1CashDrawerShift
     */
    closing_employee_id?: string;
    /**
     * A description of the cash drawer shift.
     * @type {string}
     * @memberof V1CashDrawerShift
     */
    description?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1CashDrawerShift
     */
    starting_cash_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1CashDrawerShift
     */
    cash_payment_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1CashDrawerShift
     */
    cash_refunds_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1CashDrawerShift
     */
    cash_paid_in_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1CashDrawerShift
     */
    cash_paid_out_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1CashDrawerShift
     */
    expected_cash_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1CashDrawerShift
     */
    closed_cash_money?: V1Money;
    /**
     *
     * @type {Device}
     * @memberof V1CashDrawerShift
     */
    device?: Device;
    /**
     * All of the events (payments, refunds, and so on) that involved the cash drawer during the shift.
     * @type {Array<V1CashDrawerEvent>}
     * @memberof V1CashDrawerShift
     */
    events?: Array<V1CashDrawerEvent>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1CashDrawerShiftEventType {
    OPEN = "OPEN",
    ENDED = "ENDED",
    CLOSED = "CLOSED"
}
/**
 * V1Category
 * @export
 * @interface V1Category
 */
export interface V1Category {
    /**
     * The category\'s unique ID.
     * @type {string}
     * @memberof V1Category
     */
    id?: string;
    /**
     * The category\'s name.
     * @type {string}
     * @memberof V1Category
     */
    name?: string;
    /**
     * The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
     * @type {string}
     * @memberof V1Category
     */
    v2_id?: string;
}
/**
 *
 * @export
 * @interface V1CreateCategoryRequest
 */
export interface V1CreateCategoryRequest {
    /**
     *
     * @type {V1Category}
     * @memberof V1CreateCategoryRequest
     */
    body?: V1Category;
}
/**
 *
 * @export
 * @interface V1CreateDiscountRequest
 */
export interface V1CreateDiscountRequest {
    /**
     *
     * @type {V1Discount}
     * @memberof V1CreateDiscountRequest
     */
    body?: V1Discount;
}
/**
 *
 * @export
 * @interface V1CreateEmployeeRoleRequest
 */
export interface V1CreateEmployeeRoleRequest {
    /**
     *
     * @type {V1EmployeeRole}
     * @memberof V1CreateEmployeeRoleRequest
     */
    employee_role?: V1EmployeeRole;
}
/**
 *
 * @export
 * @interface V1CreateFeeRequest
 */
export interface V1CreateFeeRequest {
    /**
     *
     * @type {V1Fee}
     * @memberof V1CreateFeeRequest
     */
    body?: V1Fee;
}
/**
 *
 * @export
 * @interface V1CreateItemRequest
 */
export interface V1CreateItemRequest {
    /**
     *
     * @type {V1Item}
     * @memberof V1CreateItemRequest
     */
    body?: V1Item;
}
/**
 *
 * @export
 * @interface V1CreateModifierListRequest
 */
export interface V1CreateModifierListRequest {
    /**
     *
     * @type {V1ModifierList}
     * @memberof V1CreateModifierListRequest
     */
    body?: V1ModifierList;
}
/**
 *
 * @export
 * @interface V1CreateModifierOptionRequest
 */
export interface V1CreateModifierOptionRequest {
    /**
     *
     * @type {V1ModifierOption}
     * @memberof V1CreateModifierOptionRequest
     */
    body?: V1ModifierOption;
}
/**
 *
 * @export
 * @interface V1CreatePageRequest
 */
export interface V1CreatePageRequest {
    /**
     *
     * @type {V1Page}
     * @memberof V1CreatePageRequest
     */
    body?: V1Page;
}
/**
 * V1CreateRefundRequest
 * @export
 * @interface V1CreateRefundRequest
 */
export interface V1CreateRefundRequest {
    /**
     * The ID of the payment to refund. If you are creating a `PARTIAL` refund for a split tender payment, instead provide the id of the particular tender you want to refund.
     * @type {string}
     * @memberof V1CreateRefundRequest
     */
    payment_id: string;
    /**
     * TThe type of refund (FULL or PARTIAL). See [V1CreateRefundRequestType](#type-v1createrefundrequesttype) for possible values
     * @type {string}
     * @memberof V1CreateRefundRequest
     */
    type: string;
    /**
     * The reason for the refund.
     * @type {string}
     * @memberof V1CreateRefundRequest
     */
    reason: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1CreateRefundRequest
     */
    refunded_money?: V1Money;
    /**
     * An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.
     * @type {string}
     * @memberof V1CreateRefundRequest
     */
    request_idempotence_key?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1CreateRefundRequestType {
    FULL = "FULL",
    PARTIAL = "PARTIAL"
}
/**
 *
 * @export
 * @interface V1CreateVariationRequest
 */
export interface V1CreateVariationRequest {
    /**
     *
     * @type {V1Variation}
     * @memberof V1CreateVariationRequest
     */
    body?: V1Variation;
}
/**
 *
 * @export
 * @interface V1DeletePageCellRequest
 */
export interface V1DeletePageCellRequest {
    /**
     * The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @type {string}
     * @memberof V1DeletePageCellRequest
     */
    row?: string;
    /**
     * The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @type {string}
     * @memberof V1DeletePageCellRequest
     */
    column?: string;
}
/**
 * V1Discount
 * @export
 * @interface V1Discount
 */
export interface V1Discount {
    /**
     * The discount\'s unique ID.
     * @type {string}
     * @memberof V1Discount
     */
    id?: string;
    /**
     * The discount\'s name.
     * @type {string}
     * @memberof V1Discount
     */
    name?: string;
    /**
     * The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE.
     * @type {string}
     * @memberof V1Discount
     */
    rate?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1Discount
     */
    amount_money?: V1Money;
    /**
     * Indicates whether the discount is a FIXED value or entered at the time of sale. See [V1DiscountDiscountType](#type-v1discountdiscounttype) for possible values
     * @type {string}
     * @memberof V1Discount
     */
    discount_type?: string;
    /**
     * Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.
     * @type {boolean}
     * @memberof V1Discount
     */
    pin_required?: boolean;
    /**
     * The color of the discount\'s display label in Square Point of Sale, if not the default color. The default color is 9da2a6. See [V1DiscountColor](#type-v1discountcolor) for possible values
     * @type {string}
     * @memberof V1Discount
     */
    color?: string;
    /**
     * The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
     * @type {string}
     * @memberof V1Discount
     */
    v2_id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1DiscountColor {
    _9da2a6 = "9da2a6",
    _4ab200 = "4ab200",
    _0b8000 = "0b8000",
    _2952cc = "2952cc",
    A82ee5 = "a82ee5",
    E5457a = "e5457a",
    B21212 = "b21212",
    _593c00 = "593c00",
    E5BF00 = "e5BF00"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1DiscountDiscountType {
    FIXED = "FIXED",
    VARIABLEPERCENTAGE = "VARIABLE_PERCENTAGE",
    VARIABLEAMOUNT = "VARIABLE_AMOUNT"
}
/**
 * Represents one of a business\'s employees.
 * @export
 * @interface V1Employee
 */
export interface V1Employee {
    /**
     * The employee\'s unique ID.
     * @type {string}
     * @memberof V1Employee
     */
    id?: string;
    /**
     * The employee\'s first name.
     * @type {string}
     * @memberof V1Employee
     */
    first_name: string;
    /**
     * The employee\'s last name.
     * @type {string}
     * @memberof V1Employee
     */
    last_name: string;
    /**
     * The ids of the employee\'s associated roles. Currently, you can specify only one or zero roles per employee.
     * @type {Array<string>}
     * @memberof V1Employee
     */
    role_ids?: Array<string>;
    /**
     * The IDs of the locations the employee is allowed to clock in at.
     * @type {Array<string>}
     * @memberof V1Employee
     */
    authorized_location_ids?: Array<string>;
    /**
     * The employee\'s email address.
     * @type {string}
     * @memberof V1Employee
     */
    email?: string;
    /**
     * CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. See [V1EmployeeStatus](#type-v1employeestatus) for possible values
     * @type {string}
     * @memberof V1Employee
     */
    status?: string;
    /**
     * An ID the merchant can set to associate the employee with an entity in another system.
     * @type {string}
     * @memberof V1Employee
     */
    external_id?: string;
    /**
     * The time when the employee entity was created, in ISO 8601 format.
     * @type {string}
     * @memberof V1Employee
     */
    created_at?: string;
    /**
     * The time when the employee entity was most recently updated, in ISO 8601 format.
     * @type {string}
     * @memberof V1Employee
     */
    updated_at?: string;
}
/**
 * V1EmployeeRole
 * @export
 * @interface V1EmployeeRole
 */
export interface V1EmployeeRole {
    /**
     * The role\'s unique ID, Can only be set by Square.
     * @type {string}
     * @memberof V1EmployeeRole
     */
    id?: string;
    /**
     * The role\'s merchant-defined name.
     * @type {string}
     * @memberof V1EmployeeRole
     */
    name: string;
    /**
     * The role\'s permissions. See [V1EmployeeRolePermissions](#type-v1employeerolepermissions) for possible values
     * @type {Array<string>}
     * @memberof V1EmployeeRole
     */
    permissions: Array<string>;
    /**
     * If true, employees with this role have all permissions, regardless of the values indicated in permissions.
     * @type {boolean}
     * @memberof V1EmployeeRole
     */
    is_owner?: boolean;
    /**
     * The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.
     * @type {string}
     * @memberof V1EmployeeRole
     */
    created_at?: string;
    /**
     * The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.
     * @type {string}
     * @memberof V1EmployeeRole
     */
    updated_at?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1EmployeeRolePermissions {
    ACCESSSALESHISTORY = "REGISTER_ACCESS_SALES_HISTORY",
    APPLYRESTRICTEDDISCOUNTS = "REGISTER_APPLY_RESTRICTED_DISCOUNTS",
    CHANGESETTINGS = "REGISTER_CHANGE_SETTINGS",
    EDITITEM = "REGISTER_EDIT_ITEM",
    ISSUEREFUNDS = "REGISTER_ISSUE_REFUNDS",
    OPENCASHDRAWEROUTSIDESALE = "REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE",
    VIEWSUMMARYREPORTS = "REGISTER_VIEW_SUMMARY_REPORTS"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1EmployeeStatus {
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
/**
 * V1Fee
 * @export
 * @interface V1Fee
 */
export interface V1Fee {
    /**
     * The fee\'s unique ID.
     * @type {string}
     * @memberof V1Fee
     */
    id?: string;
    /**
     * The fee\'s name.
     * @type {string}
     * @memberof V1Fee
     */
    name?: string;
    /**
     * The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
     * @type {string}
     * @memberof V1Fee
     */
    rate?: string;
    /**
     * Forthcoming See [V1FeeCalculationPhase](#type-v1feecalculationphase) for possible values
     * @type {string}
     * @memberof V1Fee
     */
    calculation_phase?: string;
    /**
     * The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees. See [V1FeeAdjustmentType](#type-v1feeadjustmenttype) for possible values
     * @type {string}
     * @memberof V1Fee
     */
    adjustment_type?: string;
    /**
     * If true, the fee applies to custom amounts entered into Square Point of Sale that are not associated with a particular item.
     * @type {boolean}
     * @memberof V1Fee
     */
    applies_to_custom_amounts?: boolean;
    /**
     * If true, the fee is applied to all appropriate items. If false, the fee is not applied at all.
     * @type {boolean}
     * @memberof V1Fee
     */
    enabled?: boolean;
    /**
     * Whether the fee is ADDITIVE or INCLUSIVE. See [V1FeeInclusionType](#type-v1feeinclusiontype) for possible values
     * @type {string}
     * @memberof V1Fee
     */
    inclusion_type?: string;
    /**
     * In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants. See [V1FeeType](#type-v1feetype) for possible values
     * @type {string}
     * @memberof V1Fee
     */
    type?: string;
    /**
     * The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
     * @type {string}
     * @memberof V1Fee
     */
    v2_id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1FeeAdjustmentType {
    TAX = "TAX"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1FeeCalculationPhase {
    FEESUBTOTALPHASE = "FEE_SUBTOTAL_PHASE",
    OTHER = "OTHER",
    FEETOTALPHASE = "FEE_TOTAL_PHASE"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1FeeInclusionType {
    ADDITIVE = "ADDITIVE",
    INCLUSIVE = "INCLUSIVE"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1FeeType {
    CAGST = "CA_GST",
    CAHST = "CA_HST",
    CAPST = "CA_PST",
    CAQST = "CA_QST",
    JPCONSUMPTIONTAX = "JP_CONSUMPTION_TAX",
    CAPEIPST = "CA_PEI_PST",
    USSALESTAX = "US_SALES_TAX",
    OTHER = "OTHER"
}
/**
 * V1InventoryEntry
 * @export
 * @interface V1InventoryEntry
 */
export interface V1InventoryEntry {
    /**
     * The variation that the entry corresponds to.
     * @type {string}
     * @memberof V1InventoryEntry
     */
    variation_id?: string;
    /**
     * The current available quantity of the item variation.
     * @type {number}
     * @memberof V1InventoryEntry
     */
    quantity_on_hand?: number;
}
/**
 * V1Item
 * @export
 * @interface V1Item
 */
export interface V1Item {
    /**
     * The item\'s ID. Must be unique among all entity IDs ever provided on behalf of the merchant. You can never reuse an ID. This value can include alphanumeric characters, dashes (-), and underscores (_).
     * @type {string}
     * @memberof V1Item
     */
    id?: string;
    /**
     * The item\'s name.
     * @type {string}
     * @memberof V1Item
     */
    name?: string;
    /**
     * The item\'s description.
     * @type {string}
     * @memberof V1Item
     */
    description?: string;
    /**
     * The item\'s type. This value is NORMAL for almost all items. See [V1ItemType](#type-v1itemtype) for possible values
     * @type {string}
     * @memberof V1Item
     */
    type?: string;
    /**
     * The color of the discount\'s display label in Square Point of Sale, if not the default color. The default color is 9da2a6. See [V1ItemColor](#type-v1itemcolor) for possible values
     * @type {string}
     * @memberof V1Item
     */
    color?: string;
    /**
     * The text of the item\'s display label in Square Point of Sale. Only up to the first five characters of the string are used.
     * @type {string}
     * @memberof V1Item
     */
    abbreviation?: string;
    /**
     * Indicates whether the item is viewable from the merchant\'s online store (PUBLIC) or PRIVATE. See [V1ItemVisibility](#type-v1itemvisibility) for possible values
     * @type {string}
     * @memberof V1Item
     */
    visibility?: string;
    /**
     * If true, the item can be added to shipping orders from the merchant\'s online store.
     * @type {boolean}
     * @memberof V1Item
     */
    available_online?: boolean;
    /**
     *
     * @type {V1ItemImage}
     * @memberof V1Item
     */
    master_image?: V1ItemImage;
    /**
     *
     * @type {V1Category}
     * @memberof V1Item
     */
    category?: V1Category;
    /**
     * The item\'s variations. You must specify at least one variation.
     * @type {Array<V1Variation>}
     * @memberof V1Item
     */
    variations?: Array<V1Variation>;
    /**
     * The modifier lists that apply to the item, if any.
     * @type {Array<V1ModifierList>}
     * @memberof V1Item
     */
    modifier_lists?: Array<V1ModifierList>;
    /**
     * The fees that apply to the item, if any.
     * @type {Array<V1Fee>}
     * @memberof V1Item
     */
    fees?: Array<V1Fee>;
    /**
     * Deprecated. This field is not used.
     * @type {boolean}
     * @memberof V1Item
     */
    taxable?: boolean;
    /**
     * The ID of the item\'s category, if any.
     * @type {string}
     * @memberof V1Item
     */
    category_id?: string;
    /**
     * If true, the item can be added to pickup orders from the merchant\'s online store. Default value: false
     * @type {boolean}
     * @memberof V1Item
     */
    available_for_pickup?: boolean;
    /**
     * The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
     * @type {string}
     * @memberof V1Item
     */
    v2_id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1ItemColor {
    _9da2a6 = "9da2a6",
    _4ab200 = "4ab200",
    _0b8000 = "0b8000",
    _2952cc = "2952cc",
    A82ee5 = "a82ee5",
    E5457a = "e5457a",
    B21212 = "b21212",
    _593c00 = "593c00",
    E5BF00 = "e5BF00"
}
/**
 * V1ItemImage
 * @export
 * @interface V1ItemImage
 */
export interface V1ItemImage {
    /**
     * The image\'s unique ID.
     * @type {string}
     * @memberof V1ItemImage
     */
    id?: string;
    /**
     * The image\'s publicly accessible URL.
     * @type {string}
     * @memberof V1ItemImage
     */
    url?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1ItemType {
    NORMAL = "NORMAL",
    GIFTCARD = "GIFT_CARD",
    OTHER = "OTHER"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1ItemVisibility {
    PUBLIC = "PUBLIC",
    PRIVATE = "PRIVATE"
}
/**
 *
 * @export
 * @interface V1ListBankAccountsResponse
 */
export interface V1ListBankAccountsResponse {
    /**
     *
     * @type {Array<V1BankAccount>}
     * @memberof V1ListBankAccountsResponse
     */
    items?: Array<V1BankAccount>;
}
/**
 *
 * @export
 * @interface V1ListCashDrawerShiftsRequest
 */
export interface V1ListCashDrawerShiftsRequest {
    /**
     * The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof V1ListCashDrawerShiftsRequest
     */
    order?: string;
    /**
     * The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
     * @type {string}
     * @memberof V1ListCashDrawerShiftsRequest
     */
    begin_time?: string;
    /**
     * The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
     * @type {string}
     * @memberof V1ListCashDrawerShiftsRequest
     */
    end_time?: string;
}
/**
 *
 * @export
 * @interface V1ListCashDrawerShiftsResponse
 */
export interface V1ListCashDrawerShiftsResponse {
    /**
     *
     * @type {Array<V1CashDrawerShift>}
     * @memberof V1ListCashDrawerShiftsResponse
     */
    items?: Array<V1CashDrawerShift>;
}
/**
 *
 * @export
 * @interface V1ListCategoriesResponse
 */
export interface V1ListCategoriesResponse {
    /**
     *
     * @type {Array<V1Category>}
     * @memberof V1ListCategoriesResponse
     */
    items?: Array<V1Category>;
}
/**
 *
 * @export
 * @interface V1ListDiscountsResponse
 */
export interface V1ListDiscountsResponse {
    /**
     *
     * @type {Array<V1Discount>}
     * @memberof V1ListDiscountsResponse
     */
    items?: Array<V1Discount>;
}
/**
 *
 * @export
 * @interface V1ListEmployeeRolesRequest
 */
export interface V1ListEmployeeRolesRequest {
    /**
     * The order in which employees are listed in the response, based on their created_at field.Default value: ASC See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof V1ListEmployeeRolesRequest
     */
    order?: string;
    /**
     * The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @type {number}
     * @memberof V1ListEmployeeRolesRequest
     */
    limit?: number;
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @type {string}
     * @memberof V1ListEmployeeRolesRequest
     */
    batch_token?: string;
}
/**
 *
 * @export
 * @interface V1ListEmployeeRolesResponse
 */
export interface V1ListEmployeeRolesResponse {
    /**
     *
     * @type {Array<V1EmployeeRole>}
     * @memberof V1ListEmployeeRolesResponse
     */
    items?: Array<V1EmployeeRole>;
}
/**
 *
 * @export
 * @interface V1ListEmployeesRequest
 */
export interface V1ListEmployeesRequest {
    /**
     * The order in which employees are listed in the response, based on their created_at field.      Default value: ASC See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof V1ListEmployeesRequest
     */
    order?: string;
    /**
     * If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @type {string}
     * @memberof V1ListEmployeesRequest
     */
    begin_updated_at?: string;
    /**
     * If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @type {string}
     * @memberof V1ListEmployeesRequest
     */
    end_updated_at?: string;
    /**
     * If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @type {string}
     * @memberof V1ListEmployeesRequest
     */
    begin_created_at?: string;
    /**
     * If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @type {string}
     * @memberof V1ListEmployeesRequest
     */
    end_created_at?: string;
    /**
     * If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). See [V1ListEmployeesRequestStatus](#type-v1listemployeesrequeststatus) for possible values
     * @type {string}
     * @memberof V1ListEmployeesRequest
     */
    status?: string;
    /**
     * If provided, the endpoint returns only employee entities with the specified external_id.
     * @type {string}
     * @memberof V1ListEmployeesRequest
     */
    external_id?: string;
    /**
     * The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @type {number}
     * @memberof V1ListEmployeesRequest
     */
    limit?: number;
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @type {string}
     * @memberof V1ListEmployeesRequest
     */
    batch_token?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1ListEmployeesRequestStatus {
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
/**
 *
 * @export
 * @interface V1ListEmployeesResponse
 */
export interface V1ListEmployeesResponse {
    /**
     *
     * @type {Array<V1Employee>}
     * @memberof V1ListEmployeesResponse
     */
    items?: Array<V1Employee>;
}
/**
 *
 * @export
 * @interface V1ListFeesResponse
 */
export interface V1ListFeesResponse {
    /**
     *
     * @type {Array<V1Fee>}
     * @memberof V1ListFeesResponse
     */
    items?: Array<V1Fee>;
}
/**
 *
 * @export
 * @interface V1ListInventoryRequest
 */
export interface V1ListInventoryRequest {
    /**
     * The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @type {number}
     * @memberof V1ListInventoryRequest
     */
    limit?: number;
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @type {string}
     * @memberof V1ListInventoryRequest
     */
    batch_token?: string;
}
/**
 *
 * @export
 * @interface V1ListInventoryResponse
 */
export interface V1ListInventoryResponse {
    /**
     *
     * @type {Array<V1InventoryEntry>}
     * @memberof V1ListInventoryResponse
     */
    items?: Array<V1InventoryEntry>;
}
/**
 *
 * @export
 * @interface V1ListItemsRequest
 */
export interface V1ListItemsRequest {
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @type {string}
     * @memberof V1ListItemsRequest
     */
    batch_token?: string;
}
/**
 *
 * @export
 * @interface V1ListItemsResponse
 */
export interface V1ListItemsResponse {
    /**
     *
     * @type {Array<V1Item>}
     * @memberof V1ListItemsResponse
     */
    items?: Array<V1Item>;
}
/**
 *
 * @export
 * @interface V1ListLocationsResponse
 */
export interface V1ListLocationsResponse {
    /**
     *
     * @type {Array<V1Merchant>}
     * @memberof V1ListLocationsResponse
     */
    items?: Array<V1Merchant>;
}
/**
 *
 * @export
 * @interface V1ListModifierListsResponse
 */
export interface V1ListModifierListsResponse {
    /**
     *
     * @type {Array<V1ModifierList>}
     * @memberof V1ListModifierListsResponse
     */
    items?: Array<V1ModifierList>;
}
/**
 *
 * @export
 * @interface V1ListOrdersRequest
 */
export interface V1ListOrdersRequest {
    /**
     * TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof V1ListOrdersRequest
     */
    order?: string;
    /**
     * The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @type {number}
     * @memberof V1ListOrdersRequest
     */
    limit?: number;
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @type {string}
     * @memberof V1ListOrdersRequest
     */
    batch_token?: string;
}
/**
 *
 * @export
 * @interface V1ListOrdersResponse
 */
export interface V1ListOrdersResponse {
    /**
     *
     * @type {Array<V1Order>}
     * @memberof V1ListOrdersResponse
     */
    items?: Array<V1Order>;
}
/**
 *
 * @export
 * @interface V1ListPagesResponse
 */
export interface V1ListPagesResponse {
    /**
     *
     * @type {Array<V1Page>}
     * @memberof V1ListPagesResponse
     */
    items?: Array<V1Page>;
}
/**
 *
 * @export
 * @interface V1ListPaymentsRequest
 */
export interface V1ListPaymentsRequest {
    /**
     * The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof V1ListPaymentsRequest
     */
    order?: string;
    /**
     * The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @type {string}
     * @memberof V1ListPaymentsRequest
     */
    begin_time?: string;
    /**
     * The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @type {string}
     * @memberof V1ListPaymentsRequest
     */
    end_time?: string;
    /**
     * The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @type {number}
     * @memberof V1ListPaymentsRequest
     */
    limit?: number;
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @type {string}
     * @memberof V1ListPaymentsRequest
     */
    batch_token?: string;
    /**
     * Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
     * @type {boolean}
     * @memberof V1ListPaymentsRequest
     */
    include_partial?: boolean;
}
/**
 *
 * @export
 * @interface V1ListPaymentsResponse
 */
export interface V1ListPaymentsResponse {
    /**
     *
     * @type {Array<V1Payment>}
     * @memberof V1ListPaymentsResponse
     */
    items?: Array<V1Payment>;
}
/**
 *
 * @export
 * @interface V1ListRefundsRequest
 */
export interface V1ListRefundsRequest {
    /**
     * TThe order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof V1ListRefundsRequest
     */
    order?: string;
    /**
     * The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @type {string}
     * @memberof V1ListRefundsRequest
     */
    begin_time?: string;
    /**
     * The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @type {string}
     * @memberof V1ListRefundsRequest
     */
    end_time?: string;
    /**
     * The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
     * @type {number}
     * @memberof V1ListRefundsRequest
     */
    limit?: number;
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @type {string}
     * @memberof V1ListRefundsRequest
     */
    batch_token?: string;
}
/**
 *
 * @export
 * @interface V1ListRefundsResponse
 */
export interface V1ListRefundsResponse {
    /**
     *
     * @type {Array<V1Refund>}
     * @memberof V1ListRefundsResponse
     */
    items?: Array<V1Refund>;
}
/**
 *
 * @export
 * @interface V1ListSettlementsRequest
 */
export interface V1ListSettlementsRequest {
    /**
     * The order in which settlements are listed in the response. See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof V1ListSettlementsRequest
     */
    order?: string;
    /**
     * The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @type {string}
     * @memberof V1ListSettlementsRequest
     */
    begin_time?: string;
    /**
     * The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @type {string}
     * @memberof V1ListSettlementsRequest
     */
    end_time?: string;
    /**
     * The maximum number of settlements to return in a single response. This value cannot exceed 200.
     * @type {number}
     * @memberof V1ListSettlementsRequest
     */
    limit?: number;
    /**
     * Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). See [V1ListSettlementsRequestStatus](#type-v1listsettlementsrequeststatus) for possible values
     * @type {string}
     * @memberof V1ListSettlementsRequest
     */
    status?: string;
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @type {string}
     * @memberof V1ListSettlementsRequest
     */
    batch_token?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1ListSettlementsRequestStatus {
    SENT = "SENT",
    FAILED = "FAILED"
}
/**
 *
 * @export
 * @interface V1ListSettlementsResponse
 */
export interface V1ListSettlementsResponse {
    /**
     *
     * @type {Array<V1Settlement>}
     * @memberof V1ListSettlementsResponse
     */
    items?: Array<V1Settlement>;
}
/**
 *
 * @export
 * @interface V1ListTimecardEventsResponse
 */
export interface V1ListTimecardEventsResponse {
    /**
     *
     * @type {Array<V1TimecardEvent>}
     * @memberof V1ListTimecardEventsResponse
     */
    items?: Array<V1TimecardEvent>;
}
/**
 *
 * @export
 * @interface V1ListTimecardsRequest
 */
export interface V1ListTimecardsRequest {
    /**
     * The order in which timecards are listed in the response, based on their created_at field. See [SortOrder](#type-sortorder) for possible values
     * @type {string}
     * @memberof V1ListTimecardsRequest
     */
    order?: string;
    /**
     * If provided, the endpoint returns only timecards for the employee with the specified ID.
     * @type {string}
     * @memberof V1ListTimecardsRequest
     */
    employee_id?: string;
    /**
     * If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @type {string}
     * @memberof V1ListTimecardsRequest
     */
    begin_clockin_time?: string;
    /**
     * If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
     * @type {string}
     * @memberof V1ListTimecardsRequest
     */
    end_clockin_time?: string;
    /**
     * If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @type {string}
     * @memberof V1ListTimecardsRequest
     */
    begin_clockout_time?: string;
    /**
     * If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
     * @type {string}
     * @memberof V1ListTimecardsRequest
     */
    end_clockout_time?: string;
    /**
     * If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @type {string}
     * @memberof V1ListTimecardsRequest
     */
    begin_updated_at?: string;
    /**
     * If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @type {string}
     * @memberof V1ListTimecardsRequest
     */
    end_updated_at?: string;
    /**
     * If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\'t provide this parameter, both valid and deleted timecards are returned.
     * @type {boolean}
     * @memberof V1ListTimecardsRequest
     */
    deleted?: boolean;
    /**
     * The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @type {number}
     * @memberof V1ListTimecardsRequest
     */
    limit?: number;
    /**
     * A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @type {string}
     * @memberof V1ListTimecardsRequest
     */
    batch_token?: string;
}
/**
 *
 * @export
 * @interface V1ListTimecardsResponse
 */
export interface V1ListTimecardsResponse {
    /**
     *
     * @type {Array<V1Timecard>}
     * @memberof V1ListTimecardsResponse
     */
    items?: Array<V1Timecard>;
}
/**
 * Defines the fields that are included in the response body of a request to the **RetrieveBusiness** endpoint.
 * @export
 * @interface V1Merchant
 */
export interface V1Merchant {
    /**
     * The merchant account\'s unique identifier.
     * @type {string}
     * @memberof V1Merchant
     */
    id?: string;
    /**
     * The name associated with the merchant account.
     * @type {string}
     * @memberof V1Merchant
     */
    name?: string;
    /**
     * The email address associated with the merchant account.
     * @type {string}
     * @memberof V1Merchant
     */
    email?: string;
    /**
     * Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION. See [V1MerchantAccountType](#type-v1merchantaccounttype) for possible values
     * @type {string}
     * @memberof V1Merchant
     */
    account_type?: string;
    /**
     * Capabilities that are enabled for the merchant\'s Square account. Capabilities that are not listed in this array are not enabled for the account.
     * @type {Array<string>}
     * @memberof V1Merchant
     */
    account_capabilities?: Array<string>;
    /**
     * The country associated with the merchant account, in ISO 3166-1-alpha-2 format.
     * @type {string}
     * @memberof V1Merchant
     */
    country_code?: string;
    /**
     * The language associated with the merchant account, in BCP 47 format.
     * @type {string}
     * @memberof V1Merchant
     */
    language_code?: string;
    /**
     * The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.
     * @type {string}
     * @memberof V1Merchant
     */
    currency_code?: string;
    /**
     * The name of the merchant\'s business.
     * @type {string}
     * @memberof V1Merchant
     */
    business_name?: string;
    /**
     *
     * @type {Address}
     * @memberof V1Merchant
     */
    business_address?: Address;
    /**
     *
     * @type {V1PhoneNumber}
     * @memberof V1Merchant
     */
    business_phone?: V1PhoneNumber;
    /**
     * The type of business operated by the merchant. See [V1MerchantBusinessType](#type-v1merchantbusinesstype) for possible values
     * @type {string}
     * @memberof V1Merchant
     */
    business_type?: string;
    /**
     *
     * @type {Address}
     * @memberof V1Merchant
     */
    shipping_address?: Address;
    /**
     *
     * @type {V1MerchantLocationDetails}
     * @memberof V1Merchant
     */
    location_details?: V1MerchantLocationDetails;
    /**
     * The URL of the merchant\'s online store.
     * @type {string}
     * @memberof V1Merchant
     */
    market_url?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1MerchantAccountType {
    LOCATION = "LOCATION",
    BUSINESS = "BUSINESS"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1MerchantBusinessType {
    ACCOUNTING = "ACCOUNTING",
    APPARELANDACCESSORYSHOPS = "APPAREL_AND_ACCESSORY_SHOPS",
    ARTDEALERSGALLERIES = "ART_DEALERS_GALLERIES",
    ARTDESIGNANDPHOTOGRAPHY = "ART_DESIGN_AND_PHOTOGRAPHY",
    BARCLUBLOUNGE = "BAR_CLUB_LOUNGE",
    BEAUTYANDBARBERSHOPS = "BEAUTY_AND_BARBER_SHOPS",
    BOOKSTORES = "BOOK_STORES",
    BUSINESSSERVICES = "BUSINESS_SERVICES",
    CATERING = "CATERING",
    CHARITABLESOCIALSERVICEORGANIZATIONS = "CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS",
    CHARITIBLEORGS = "CHARITIBLE_ORGS",
    CLEANINGSERVICES = "CLEANING_SERVICES",
    COMPUTEREQUIPMENTSOFTWAREMAINTENANCEREPAIRSERVICES = "COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES",
    CONSULTANT = "CONSULTANT",
    CONTRACTORS = "CONTRACTORS",
    DELIVERYSERVICES = "DELIVERY_SERVICES",
    DENTISTRY = "DENTISTRY",
    EDUCATION = "EDUCATION",
    FOODSTORESCONVENIENCESTORESANDSPECIALTYMARKETS = "FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS",
    FOODTRUCKCART = "FOOD_TRUCK_CART",
    FURNITUREHOMEANDOFFICEEQUIPMENT = "FURNITURE_HOME_AND_OFFICE_EQUIPMENT",
    FURNITUREHOMEGOODS = "FURNITURE_HOME_GOODS",
    HOTELSANDLODGING = "HOTELS_AND_LODGING",
    INDIVIDUALUSE = "INDIVIDUAL_USE",
    JEWELRYANDWATCHES = "JEWELRY_AND_WATCHES",
    LANDSCAPINGANDHORTICULTURALSERVICES = "LANDSCAPING_AND_HORTICULTURAL_SERVICES",
    LANGUAGESCHOOLS = "LANGUAGE_SCHOOLS",
    LEGALSERVICES = "LEGAL_SERVICES",
    MEDICALPRACTITIONERS = "MEDICAL_PRACTITIONERS",
    MEDICALSERVICESANDHEALTHPRACTITIONERS = "MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS",
    MEMBERSHIPORGANIZATIONS = "MEMBERSHIP_ORGANIZATIONS",
    MUSICANDENTERTAINMENT = "MUSIC_AND_ENTERTAINMENT",
    OTHER = "OTHER",
    OUTDOORMARKETS = "OUTDOOR_MARKETS",
    PERSONALSERVICES = "PERSONAL_SERVICES",
    POLITICALORGANIZATIONS = "POLITICAL_ORGANIZATIONS",
    PROFESSIONALSERVICES = "PROFESSIONAL_SERVICES",
    REALESTATE = "REAL_ESTATE",
    RECREATIONSERVICES = "RECREATION_SERVICES",
    REPAIRSHOPSANDRELATEDSERVICES = "REPAIR_SHOPS_AND_RELATED_SERVICES",
    RESTAURANTS = "RESTAURANTS",
    RETAILSHOPS = "RETAIL_SHOPS",
    SCHOOLSANDEDUCATIONALSERVICES = "SCHOOLS_AND_EDUCATIONAL_SERVICES",
    SPORTINGGOODS = "SPORTING_GOODS",
    TAXICABSANDLIMOUSINES = "TAXICABS_AND_LIMOUSINES",
    TICKETSALES = "TICKET_SALES",
    TOURISM = "TOURISM",
    TRAVELTOURISM = "TRAVEL_TOURISM",
    VETERINARYSERVICES = "VETERINARY_SERVICES",
    WEBDEVDESIGN = "WEB_DEV_DESIGN"
}
/**
 * Additional information for a single-location account specified by its associated business account, if it has one.
 * @export
 * @interface V1MerchantLocationDetails
 */
export interface V1MerchantLocationDetails {
    /**
     * The nickname assigned to the single-location account by the parent business. This value appears in the parent business\'s multi-location dashboard.
     * @type {string}
     * @memberof V1MerchantLocationDetails
     */
    nickname?: string;
}
/**
 * V1ModifierList
 * @export
 * @interface V1ModifierList
 */
export interface V1ModifierList {
    /**
     * The modifier list\'s unique ID.
     * @type {string}
     * @memberof V1ModifierList
     */
    id?: string;
    /**
     * The modifier list\'s name.
     * @type {string}
     * @memberof V1ModifierList
     */
    name?: string;
    /**
     * Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item. See [V1ModifierListSelectionType](#type-v1modifierlistselectiontype) for possible values
     * @type {string}
     * @memberof V1ModifierList
     */
    selection_type?: string;
    /**
     * The options included in the modifier list.
     * @type {Array<V1ModifierOption>}
     * @memberof V1ModifierList
     */
    modifier_options?: Array<V1ModifierOption>;
    /**
     * The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
     * @type {string}
     * @memberof V1ModifierList
     */
    v2_id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1ModifierListSelectionType {
    SINGLE = "SINGLE",
    MULTIPLE = "MULTIPLE"
}
/**
 * V1ModifierOption
 * @export
 * @interface V1ModifierOption
 */
export interface V1ModifierOption {
    /**
     * The modifier option\'s unique ID.
     * @type {string}
     * @memberof V1ModifierOption
     */
    id?: string;
    /**
     * The modifier option\'s name.
     * @type {string}
     * @memberof V1ModifierOption
     */
    name?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1ModifierOption
     */
    price_money?: V1Money;
    /**
     * If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE.
     * @type {boolean}
     * @memberof V1ModifierOption
     */
    on_by_default?: boolean;
    /**
     * Indicates the modifier option\'s list position when displayed in Square Point of Sale and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order.
     * @type {number}
     * @memberof V1ModifierOption
     */
    ordinal?: number;
    /**
     * The ID of the modifier list the option belongs to.
     * @type {string}
     * @memberof V1ModifierOption
     */
    modifier_list_id?: string;
    /**
     * The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
     * @type {string}
     * @memberof V1ModifierOption
     */
    v2_id?: string;
}
/**
 *
 * @export
 * @interface V1Money
 */
export interface V1Money {
    /**
     * Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a \'cent\' concept).
     * @type {number}
     * @memberof V1Money
     */
    amount?: number;
    /**
     *  See [Currency](#type-currency) for possible values
     * @type {string}
     * @memberof V1Money
     */
    currency_code?: string;
}
/**
 * V1Order
 * @export
 * @interface V1Order
 */
export interface V1Order {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof V1Order
     */
    errors?: Array<Error>;
    /**
     * The order\'s unique identifier.
     * @type {string}
     * @memberof V1Order
     */
    id?: string;
    /**
     * The email address of the order\'s buyer.
     * @type {string}
     * @memberof V1Order
     */
    buyer_email?: string;
    /**
     * The name of the order\'s buyer.
     * @type {string}
     * @memberof V1Order
     */
    recipient_name?: string;
    /**
     * The phone number to use for the order\'s delivery.
     * @type {string}
     * @memberof V1Order
     */
    recipient_phone_number?: string;
    /**
     * Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1OrderState](#type-v1orderstate) for possible values
     * @type {string}
     * @memberof V1Order
     */
    state?: string;
    /**
     *
     * @type {Address}
     * @memberof V1Order
     */
    shipping_address?: Address;
    /**
     *
     * @type {V1Money}
     * @memberof V1Order
     */
    subtotal_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Order
     */
    total_shipping_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Order
     */
    total_tax_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Order
     */
    total_price_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Order
     */
    total_discount_money?: V1Money;
    /**
     * The time when the order was created, in ISO 8601 format.
     * @type {string}
     * @memberof V1Order
     */
    created_at?: string;
    /**
     * The time when the order was last modified, in ISO 8601 format.
     * @type {string}
     * @memberof V1Order
     */
    updated_at?: string;
    /**
     * The time when the order expires if no action is taken, in ISO 8601 format.
     * @type {string}
     * @memberof V1Order
     */
    expires_at?: string;
    /**
     * The unique identifier of the payment associated with the order.
     * @type {string}
     * @memberof V1Order
     */
    payment_id?: string;
    /**
     * A note provided by the buyer when the order was created, if any.
     * @type {string}
     * @memberof V1Order
     */
    buyer_note?: string;
    /**
     * A note provided by the merchant when the order\'s state was set to COMPLETED, if any
     * @type {string}
     * @memberof V1Order
     */
    completed_note?: string;
    /**
     * A note provided by the merchant when the order\'s state was set to REFUNDED, if any.
     * @type {string}
     * @memberof V1Order
     */
    refunded_note?: string;
    /**
     * A note provided by the merchant when the order\'s state was set to CANCELED, if any.
     * @type {string}
     * @memberof V1Order
     */
    canceled_note?: string;
    /**
     *
     * @type {V1Tender}
     * @memberof V1Order
     */
    tender?: V1Tender;
    /**
     * The history of actions associated with the order.
     * @type {Array<V1OrderHistoryEntry>}
     * @memberof V1Order
     */
    order_history?: Array<V1OrderHistoryEntry>;
    /**
     * The promo code provided by the buyer, if any.
     * @type {string}
     * @memberof V1Order
     */
    promo_code?: string;
    /**
     * For Bitcoin transactions, the address that the buyer sent Bitcoin to.
     * @type {string}
     * @memberof V1Order
     */
    btc_receive_address?: string;
    /**
     * For Bitcoin transactions, the price of the buyer\'s order in satoshi (100 million satoshi equals 1 BTC).
     * @type {number}
     * @memberof V1Order
     */
    btc_price_satoshi?: number;
}
/**
 * V1OrderHistoryEntry
 * @export
 * @interface V1OrderHistoryEntry
 */
export interface V1OrderHistoryEntry {
    /**
     * The type of action performed on the order. See [V1OrderHistoryEntryAction](#type-v1orderhistoryentryaction) for possible values
     * @type {string}
     * @memberof V1OrderHistoryEntry
     */
    action?: string;
    /**
     * The time when the action was performed, in ISO 8601 format.
     * @type {string}
     * @memberof V1OrderHistoryEntry
     */
    created_at?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1OrderHistoryEntryAction {
    ORDERPLACED = "ORDER_PLACED",
    DECLINED = "DECLINED",
    PAYMENTRECEIVED = "PAYMENT_RECEIVED",
    CANCELED = "CANCELED",
    COMPLETED = "COMPLETED",
    REFUNDED = "REFUNDED",
    EXPIRED = "EXPIRED"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1OrderState {
    PENDING = "PENDING",
    OPEN = "OPEN",
    COMPLETED = "COMPLETED",
    CANCELED = "CANCELED",
    REFUNDED = "REFUNDED",
    REJECTED = "REJECTED"
}
/**
 * V1Page
 * @export
 * @interface V1Page
 */
export interface V1Page {
    /**
     * The page\'s unique identifier.
     * @type {string}
     * @memberof V1Page
     */
    id?: string;
    /**
     * The page\'s name, if any.
     * @type {string}
     * @memberof V1Page
     */
    name?: string;
    /**
     * The page\'s position in the merchant\'s list of pages. Always an integer between 0 and 6, inclusive.
     * @type {number}
     * @memberof V1Page
     */
    page_index?: number;
    /**
     * The cells included on the page.
     * @type {Array<V1PageCell>}
     * @memberof V1Page
     */
    cells?: Array<V1PageCell>;
}
/**
 * V1PageCell
 * @export
 * @interface V1PageCell
 */
export interface V1PageCell {
    /**
     * The unique identifier of the page the cell is included on.
     * @type {string}
     * @memberof V1PageCell
     */
    page_id?: string;
    /**
     * The row of the cell. Always an integer between 0 and 4, inclusive.
     * @type {number}
     * @memberof V1PageCell
     */
    row?: number;
    /**
     * The column of the cell. Always an integer between 0 and 4, inclusive.
     * @type {number}
     * @memberof V1PageCell
     */
    column?: number;
    /**
     * The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER). See [V1PageCellObjectType](#type-v1pagecellobjecttype) for possible values
     * @type {string}
     * @memberof V1PageCell
     */
    object_type?: string;
    /**
     * The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER.
     * @type {string}
     * @memberof V1PageCell
     */
    object_id?: string;
    /**
     * For a cell with an object_type of PLACEHOLDER, this value indicates the cell\'s special behavior. See [V1PageCellPlaceholderType](#type-v1pagecellplaceholdertype) for possible values
     * @type {string}
     * @memberof V1PageCell
     */
    placeholder_type?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1PageCellObjectType {
    ITEM = "ITEM",
    DISCOUNT = "DISCOUNT",
    CATEGORY = "CATEGORY",
    PLACEHOLDER = "PLACEHOLDER"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1PageCellPlaceholderType {
    ALLITEMS = "ALL_ITEMS",
    DISCOUNTSCATEGORY = "DISCOUNTS_CATEGORY",
    REWARDSFINDER = "REWARDS_FINDER"
}
/**
 * A payment represents a paid transaction between a Square merchant and a customer. Payment details are usually available from Connect API endpoints within a few minutes after the transaction completes.  Each Payment object includes several fields that end in `_money`. These fields describe the various amounts of money that contribute to the payment total:  <ul> <li> Monetary values are <b>positive</b> if they represent an <em>increase</em> in the amount of money the merchant receives (e.g., <code>tax_money</code>, <code>tip_money</code>). </li> <li> Monetary values are <b>negative</b> if they represent an <em>decrease</em> in the amount of money the merchant receives (e.g., <code>discount_money</code>, <code>refunded_money</code>). </li> </ul>
 * @export
 * @interface V1Payment
 */
export interface V1Payment {
    /**
     * The payment\'s unique identifier.
     * @type {string}
     * @memberof V1Payment
     */
    id?: string;
    /**
     * The unique identifier of the merchant that took the payment.
     * @type {string}
     * @memberof V1Payment
     */
    merchant_id?: string;
    /**
     * The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise.
     * @type {string}
     * @memberof V1Payment
     */
    created_at?: string;
    /**
     * The unique identifier of the Square account that took the payment.
     * @type {string}
     * @memberof V1Payment
     */
    creator_id?: string;
    /**
     *
     * @type {Device}
     * @memberof V1Payment
     */
    device?: Device;
    /**
     * The URL of the payment\'s detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.
     * @type {string}
     * @memberof V1Payment
     */
    payment_url?: string;
    /**
     * The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment\'s tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.
     * @type {string}
     * @memberof V1Payment
     */
    receipt_url?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    inclusive_tax_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    additive_tax_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    tax_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    tip_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    discount_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    total_collected_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    processing_fee_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    net_total_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    refunded_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    swedish_rounding_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    gross_sales_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    net_sales_money?: V1Money;
    /**
     * All of the inclusive taxes associated with the payment.
     * @type {Array<V1PaymentTax>}
     * @memberof V1Payment
     */
    inclusive_tax?: Array<V1PaymentTax>;
    /**
     * All of the additive taxes associated with the payment.
     * @type {Array<V1PaymentTax>}
     * @memberof V1Payment
     */
    additive_tax?: Array<V1PaymentTax>;
    /**
     * All of the tenders associated with the payment.
     * @type {Array<V1Tender>}
     * @memberof V1Payment
     */
    tender?: Array<V1Tender>;
    /**
     * All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange.
     * @type {Array<V1Refund>}
     * @memberof V1Payment
     */
    refunds?: Array<V1Refund>;
    /**
     * The items purchased in the payment.
     * @type {Array<V1PaymentItemization>}
     * @memberof V1Payment
     */
    itemizations?: Array<V1PaymentItemization>;
    /**
     *
     * @type {V1Money}
     * @memberof V1Payment
     */
    surcharge_money?: V1Money;
    /**
     * A list of all surcharges associated with the payment.
     * @type {Array<V1PaymentSurcharge>}
     * @memberof V1Payment
     */
    surcharges?: Array<V1PaymentSurcharge>;
    /**
     * Indicates whether or not the payment is only partially paid for. If true, this payment will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
     * @type {boolean}
     * @memberof V1Payment
     */
    is_partial?: boolean;
}
/**
 * V1PaymentDiscount
 * @export
 * @interface V1PaymentDiscount
 */
export interface V1PaymentDiscount {
    /**
     * The discount\'s name.
     * @type {string}
     * @memberof V1PaymentDiscount
     */
    name?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1PaymentDiscount
     */
    applied_money?: V1Money;
    /**
     * The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.
     * @type {string}
     * @memberof V1PaymentDiscount
     */
    discount_id?: string;
}
/**
 * V1PaymentItemDetail
 * @export
 * @interface V1PaymentItemDetail
 */
export interface V1PaymentItemDetail {
    /**
     * The name of the item\'s merchant-defined category, if any.
     * @type {string}
     * @memberof V1PaymentItemDetail
     */
    category_name?: string;
    /**
     *  The item\'s merchant-defined SKU, if any.
     * @type {string}
     * @memberof V1PaymentItemDetail
     */
    sku?: string;
    /**
     * The unique ID of the item purchased, if any.
     * @type {string}
     * @memberof V1PaymentItemDetail
     */
    item_id?: string;
    /**
     * The unique ID of the item variation purchased, if any.
     * @type {string}
     * @memberof V1PaymentItemDetail
     */
    item_variation_id?: string;
}
/**
 * Payment include an` itemizations` field that lists the items purchased, along with associated fees, modifiers, and discounts. Each itemization has an `itemization_type` field that indicates which of the following the itemization represents:  <ul> <li>An item variation from the merchant\'s item library</li> <li>A custom monetary amount</li> <li> An action performed on a Square gift card, such as activating or reloading it. </li> </ul>  *Note**: itemization information included in a `Payment` object reflects details collected **at the time of the payment**. Details such as the name or price of items might have changed since the payment was processed.
 * @export
 * @interface V1PaymentItemization
 */
export interface V1PaymentItemization {
    /**
     * The item\'s name.
     * @type {string}
     * @memberof V1PaymentItemization
     */
    name?: string;
    /**
     * The quantity of the item purchased. This can be a decimal value.
     * @type {number}
     * @memberof V1PaymentItemization
     */
    quantity?: number;
    /**
     * The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT See [V1PaymentItemizationItemizationType](#type-v1paymentitemizationitemizationtype) for possible values
     * @type {string}
     * @memberof V1PaymentItemization
     */
    itemization_type?: string;
    /**
     *
     * @type {V1PaymentItemDetail}
     * @memberof V1PaymentItemization
     */
    item_detail?: V1PaymentItemDetail;
    /**
     * Notes entered by the merchant about the item at the time of payment, if any.
     * @type {string}
     * @memberof V1PaymentItemization
     */
    notes?: string;
    /**
     * The name of the item variation purchased, if any.
     * @type {string}
     * @memberof V1PaymentItemization
     */
    item_variation_name?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1PaymentItemization
     */
    total_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1PaymentItemization
     */
    single_quantity_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1PaymentItemization
     */
    gross_sales_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1PaymentItemization
     */
    discount_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1PaymentItemization
     */
    net_sales_money?: V1Money;
    /**
     * All taxes applied to this itemization.
     * @type {Array<V1PaymentTax>}
     * @memberof V1PaymentItemization
     */
    taxes?: Array<V1PaymentTax>;
    /**
     * All discounts applied to this itemization.
     * @type {Array<V1PaymentDiscount>}
     * @memberof V1PaymentItemization
     */
    discounts?: Array<V1PaymentDiscount>;
    /**
     * All modifier options applied to this itemization.
     * @type {Array<V1PaymentModifier>}
     * @memberof V1PaymentItemization
     */
    modifiers?: Array<V1PaymentModifier>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1PaymentItemizationItemizationType {
    ITEM = "ITEM",
    CUSTOMAMOUNT = "CUSTOM_AMOUNT",
    GIFTCARDACTIVATION = "GIFT_CARD_ACTIVATION",
    GIFTCARDRELOAD = "GIFT_CARD_RELOAD",
    GIFTCARDUNKNOWN = "GIFT_CARD_UNKNOWN",
    OTHER = "OTHER"
}
/**
 * V1PaymentModifier
 * @export
 * @interface V1PaymentModifier
 */
export interface V1PaymentModifier {
    /**
     * The modifier option\'s name.
     * @type {string}
     * @memberof V1PaymentModifier
     */
    name?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1PaymentModifier
     */
    applied_money?: V1Money;
    /**
     * TThe ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID.
     * @type {string}
     * @memberof V1PaymentModifier
     */
    modifier_option_id?: string;
}
/**
 * V1PaymentSurcharge
 * @export
 * @interface V1PaymentSurcharge
 */
export interface V1PaymentSurcharge {
    /**
     * The name of the surcharge.
     * @type {string}
     * @memberof V1PaymentSurcharge
     */
    name?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1PaymentSurcharge
     */
    applied_money?: V1Money;
    /**
     * The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, \"0.7\" corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set.
     * @type {string}
     * @memberof V1PaymentSurcharge
     */
    rate?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1PaymentSurcharge
     */
    amount_money?: V1Money;
    /**
     * Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group. See [V1PaymentSurchargeType](#type-v1paymentsurchargetype) for possible values
     * @type {string}
     * @memberof V1PaymentSurcharge
     */
    type?: string;
    /**
     * Indicates whether the surcharge is taxable.
     * @type {boolean}
     * @memberof V1PaymentSurcharge
     */
    taxable?: boolean;
    /**
     * The list of taxes that should be applied to the surcharge.
     * @type {Array<V1PaymentTax>}
     * @memberof V1PaymentSurcharge
     */
    taxes?: Array<V1PaymentTax>;
    /**
     * A Square-issued unique identifier associated with the surcharge.
     * @type {string}
     * @memberof V1PaymentSurcharge
     */
    surcharge_id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1PaymentSurchargeType {
    UNKNOWN = "UNKNOWN",
    AUTOGRATUITY = "AUTO_GRATUITY",
    CUSTOM = "CUSTOM"
}
/**
 * V1PaymentTax
 * @export
 * @interface V1PaymentTax
 */
export interface V1PaymentTax {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof V1PaymentTax
     */
    errors?: Array<Error>;
    /**
     * The merchant-defined name of the tax.
     * @type {string}
     * @memberof V1PaymentTax
     */
    name?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1PaymentTax
     */
    applied_money?: V1Money;
    /**
     * The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
     * @type {string}
     * @memberof V1PaymentTax
     */
    rate?: string;
    /**
     * Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1PaymentTaxInclusionType](#type-v1paymenttaxinclusiontype) for possible values
     * @type {string}
     * @memberof V1PaymentTax
     */
    inclusion_type?: string;
    /**
     * The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
     * @type {string}
     * @memberof V1PaymentTax
     */
    fee_id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1PaymentTaxInclusionType {
    ADDITIVE = "ADDITIVE",
    INCLUSIVE = "INCLUSIVE"
}
/**
 * Represents a phone number.
 * @export
 * @interface V1PhoneNumber
 */
export interface V1PhoneNumber {
    /**
     * The phone number\'s international calling code. For US phone numbers, this value is +1.
     * @type {string}
     * @memberof V1PhoneNumber
     */
    calling_code: string;
    /**
     * The phone number.
     * @type {string}
     * @memberof V1PhoneNumber
     */
    number: string;
}
/**
 * V1Refund
 * @export
 * @interface V1Refund
 */
export interface V1Refund {
    /**
     * The type of refund See [V1RefundType](#type-v1refundtype) for possible values
     * @type {string}
     * @memberof V1Refund
     */
    type?: string;
    /**
     * The merchant-specified reason for the refund.
     * @type {string}
     * @memberof V1Refund
     */
    reason?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1Refund
     */
    refunded_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Refund
     */
    refunded_processing_fee_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Refund
     */
    refunded_tax_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Refund
     */
    refunded_additive_tax_money?: V1Money;
    /**
     * All of the additive taxes associated with the refund.
     * @type {Array<V1PaymentTax>}
     * @memberof V1Refund
     */
    refunded_additive_tax?: Array<V1PaymentTax>;
    /**
     *
     * @type {V1Money}
     * @memberof V1Refund
     */
    refunded_inclusive_tax_money?: V1Money;
    /**
     * All of the inclusive taxes associated with the refund.
     * @type {Array<V1PaymentTax>}
     * @memberof V1Refund
     */
    refunded_inclusive_tax?: Array<V1PaymentTax>;
    /**
     *
     * @type {V1Money}
     * @memberof V1Refund
     */
    refunded_tip_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Refund
     */
    refunded_discount_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Refund
     */
    refunded_surcharge_money?: V1Money;
    /**
     * A list of all surcharges associated with the refund.
     * @type {Array<V1PaymentSurcharge>}
     * @memberof V1Refund
     */
    refunded_surcharges?: Array<V1PaymentSurcharge>;
    /**
     * The time when the merchant initiated the refund for Square to process, in ISO 8601 format.
     * @type {string}
     * @memberof V1Refund
     */
    created_at?: string;
    /**
     * The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.
     * @type {string}
     * @memberof V1Refund
     */
    processed_at?: string;
    /**
     * A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange == true), payment_id is the ID of the original payment ID even if the payment includes other tenders.
     * @type {string}
     * @memberof V1Refund
     */
    payment_id?: string;
    /**
     *
     * @type {string}
     * @memberof V1Refund
     */
    merchant_id?: string;
    /**
     * Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded.
     * @type {boolean}
     * @memberof V1Refund
     */
    is_exchange?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1RefundType {
    FULL = "FULL",
    PARTIAL = "PARTIAL"
}
/**
 * V1Settlement
 * @export
 * @interface V1Settlement
 */
export interface V1Settlement {
    /**
     * The settlement\'s unique identifier.
     * @type {string}
     * @memberof V1Settlement
     */
    id?: string;
    /**
     * The settlement\'s current status. See [V1SettlementStatus](#type-v1settlementstatus) for possible values
     * @type {string}
     * @memberof V1Settlement
     */
    status?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1Settlement
     */
    total_money?: V1Money;
    /**
     * The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
     * @type {string}
     * @memberof V1Settlement
     */
    initiated_at?: string;
    /**
     * The Square-issued unique identifier for the bank account associated with the settlement.
     * @type {string}
     * @memberof V1Settlement
     */
    bank_account_id?: string;
    /**
     * The entries included in this settlement.
     * @type {Array<V1SettlementEntry>}
     * @memberof V1Settlement
     */
    entries?: Array<V1SettlementEntry>;
}
/**
 * V1SettlementEntry
 * @export
 * @interface V1SettlementEntry
 */
export interface V1SettlementEntry {
    /**
     * The settlement\'s unique identifier.
     * @type {string}
     * @memberof V1SettlementEntry
     */
    payment_id?: string;
    /**
     * The settlement\'s current status. See [V1SettlementEntryType](#type-v1settlemententrytype) for possible values
     * @type {string}
     * @memberof V1SettlementEntry
     */
    type?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1SettlementEntry
     */
    amount_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1SettlementEntry
     */
    fee_money?: V1Money;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1SettlementEntryType {
    ADJUSTMENT = "ADJUSTMENT",
    BALANCECHARGE = "BALANCE_CHARGE",
    CHARGE = "CHARGE",
    FREEPROCESSING = "FREE_PROCESSING",
    HOLDADJUSTMENT = "HOLD_ADJUSTMENT",
    PAIDSERVICEFEE = "PAID_SERVICE_FEE",
    PAIDSERVICEFEEREFUND = "PAID_SERVICE_FEE_REFUND",
    REDEMPTIONCODE = "REDEMPTION_CODE",
    REFUND = "REFUND",
    RETURNEDPAYOUT = "RETURNED_PAYOUT",
    SQUARECAPITALADVANCE = "SQUARE_CAPITAL_ADVANCE",
    SQUARECAPITALPAYMENT = "SQUARE_CAPITAL_PAYMENT",
    SQUARECAPITALREVERSEDPAYMENT = "SQUARE_CAPITAL_REVERSED_PAYMENT",
    SUBSCRIPTIONFEE = "SUBSCRIPTION_FEE",
    SUBSCRIPTIONFEEREFUND = "SUBSCRIPTION_FEE_REFUND",
    OTHER = "OTHER",
    INCENTEDPAYMENT = "INCENTED_PAYMENT",
    RETURNEDACHENTRY = "RETURNED_ACH_ENTRY",
    RETURNEDSQUARE275 = "RETURNED_SQUARE_275",
    SQUARE275 = "SQUARE_275",
    SQUARECARD = "SQUARE_CARD"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1SettlementStatus {
    FAILED = "FAILED",
    SENT = "SENT"
}
/**
 * A tender represents a discrete monetary exchange. Square represents this exchange as a money object with a specific currency and amount, where the amount is given in the smallest denomination of the given currency.  Square POS can accept more than one form of tender for a single payment (such as by splitting a bill between a credit card and a gift card). The `tender` field of the Payment object lists all forms of tender used for the payment.  Split tender payments behave slightly differently from single tender payments:  The receipt_url for a split tender corresponds only to the first tender listed in the tender field. To get the receipt URLs for the remaining tenders, use the receipt_url fields of the corresponding Tender objects.  *A note on gift cards**: when a customer purchases a Square gift card from a merchant, the merchant receives the full amount of the gift card in the associated payment.  When that gift card is used as a tender, the balance of the gift card is reduced and the merchant receives no funds. A `Tender` object with a type of `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the associated payment.
 * @export
 * @interface V1Tender
 */
export interface V1Tender {
    /**
     * The tender\'s unique ID.
     * @type {string}
     * @memberof V1Tender
     */
    id?: string;
    /**
     * The type of tender. See [V1TenderType](#type-v1tendertype) for possible values
     * @type {string}
     * @memberof V1Tender
     */
    type?: string;
    /**
     * A human-readable description of the tender.
     * @type {string}
     * @memberof V1Tender
     */
    name?: string;
    /**
     * The ID of the employee that processed the tender.
     * @type {string}
     * @memberof V1Tender
     */
    employee_id?: string;
    /**
     * The URL of the receipt for the tender.
     * @type {string}
     * @memberof V1Tender
     */
    receipt_url?: string;
    /**
     * The brand of credit card provided. See [V1TenderCardBrand](#type-v1tendercardbrand) for possible values
     * @type {string}
     * @memberof V1Tender
     */
    card_brand?: string;
    /**
     * The last four digits of the provided credit card\'s account number.
     * @type {string}
     * @memberof V1Tender
     */
    pan_suffix?: string;
    /**
     * The tender\'s unique ID. See [V1TenderEntryMethod](#type-v1tenderentrymethod) for possible values
     * @type {string}
     * @memberof V1Tender
     */
    entry_method?: string;
    /**
     * Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
     * @type {string}
     * @memberof V1Tender
     */
    payment_note?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1Tender
     */
    total_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Tender
     */
    tendered_money?: V1Money;
    /**
     * The time when the tender was created, in ISO 8601 format.
     * @type {string}
     * @memberof V1Tender
     */
    tendered_at?: string;
    /**
     * The time when the tender was settled, in ISO 8601 format.
     * @type {string}
     * @memberof V1Tender
     */
    settled_at?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1Tender
     */
    change_back_money?: V1Money;
    /**
     *
     * @type {V1Money}
     * @memberof V1Tender
     */
    refunded_money?: V1Money;
    /**
     * Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.
     * @type {boolean}
     * @memberof V1Tender
     */
    is_exchange?: boolean;
}
/**
 * The brand of a credit card.
 * @export
 * @enum {string}
 */
export declare enum V1TenderCardBrand {
    OTHERBRAND = "OTHER_BRAND",
    VISA = "VISA",
    MASTERCARD = "MASTER_CARD",
    AMERICANEXPRESS = "AMERICAN_EXPRESS",
    DISCOVER = "DISCOVER",
    DISCOVERDINERS = "DISCOVER_DINERS",
    JCB = "JCB",
    CHINAUNIONPAY = "CHINA_UNIONPAY",
    SQUAREGIFTCARD = "SQUARE_GIFT_CARD"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1TenderEntryMethod {
    MANUAL = "MANUAL",
    SCANNED = "SCANNED",
    SQUARECASH = "SQUARE_CASH",
    SQUAREWALLET = "SQUARE_WALLET",
    SWIPED = "SWIPED",
    WEBFORM = "WEB_FORM",
    OTHER = "OTHER"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1TenderType {
    CREDITCARD = "CREDIT_CARD",
    CASH = "CASH",
    THIRDPARTYCARD = "THIRD_PARTY_CARD",
    NOSALE = "NO_SALE",
    SQUAREWALLET = "SQUARE_WALLET",
    SQUAREGIFTCARD = "SQUARE_GIFT_CARD",
    UNKNOWN = "UNKNOWN",
    OTHER = "OTHER"
}
/**
 * Represents a timecard for an employee.
 * @export
 * @interface V1Timecard
 */
export interface V1Timecard {
    /**
     * The timecard\'s unique ID.
     * @type {string}
     * @memberof V1Timecard
     */
    id?: string;
    /**
     * The ID of the employee the timecard is associated with.
     * @type {string}
     * @memberof V1Timecard
     */
    employee_id: string;
    /**
     * If true, the timecard was deleted by the merchant, and it is no longer valid.
     * @type {boolean}
     * @memberof V1Timecard
     */
    deleted?: boolean;
    /**
     * The clock-in time for the timecard, in ISO 8601 format.
     * @type {string}
     * @memberof V1Timecard
     */
    clockin_time?: string;
    /**
     * The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.
     * @type {string}
     * @memberof V1Timecard
     */
    clockout_time?: string;
    /**
     * The ID of the location the employee clocked in from. We strongly reccomend providing a clockin_location_id. Square uses the clockin_location_id to determine a timecardâ€™s timezone and overtime rules.
     * @type {string}
     * @memberof V1Timecard
     */
    clockin_location_id?: string;
    /**
     * The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.
     * @type {string}
     * @memberof V1Timecard
     */
    clockout_location_id?: string;
    /**
     * The time when the timecard was created, in ISO 8601 format.
     * @type {string}
     * @memberof V1Timecard
     */
    created_at?: string;
    /**
     * The time when the timecard was most recently updated, in ISO 8601 format.
     * @type {string}
     * @memberof V1Timecard
     */
    updated_at?: string;
    /**
     * The total number of regular (non-overtime) seconds worked in the timecard.
     * @type {number}
     * @memberof V1Timecard
     */
    regular_seconds_worked?: number;
    /**
     * The total number of overtime seconds worked in the timecard.
     * @type {number}
     * @memberof V1Timecard
     */
    overtime_seconds_worked?: number;
    /**
     * The total number of doubletime seconds worked in the timecard.
     * @type {number}
     * @memberof V1Timecard
     */
    doubletime_seconds_worked?: number;
}
/**
 * V1TimecardEvent
 * @export
 * @interface V1TimecardEvent
 */
export interface V1TimecardEvent {
    /**
     * The event\'s unique ID.
     * @type {string}
     * @memberof V1TimecardEvent
     */
    id?: string;
    /**
     * The ID of the timecard to list events for. See [V1TimecardEventEventType](#type-v1timecardeventeventtype) for possible values
     * @type {string}
     * @memberof V1TimecardEvent
     */
    event_type?: string;
    /**
     * The time the employee clocked in, in ISO 8601 format.
     * @type {string}
     * @memberof V1TimecardEvent
     */
    clockin_time?: string;
    /**
     * The time the employee clocked out, in ISO 8601 format.
     * @type {string}
     * @memberof V1TimecardEvent
     */
    clockout_time?: string;
    /**
     * The time when the event was created, in ISO 8601 format.
     * @type {string}
     * @memberof V1TimecardEvent
     */
    created_at?: string;
}
/**
 * Actions that resulted in a change to a timecard. All timecard events created with the Connect API have an event type that begins with `API`.
 * @export
 * @enum {string}
 */
export declare enum V1TimecardEventEventType {
    APICREATE = "API_CREATE",
    APIEDIT = "API_EDIT",
    APIDELETE = "API_DELETE",
    REGISTERCLOCKIN = "REGISTER_CLOCKIN",
    REGISTERCLOCKOUT = "REGISTER_CLOCKOUT",
    DASHBOARDSUPERVISORCLOSE = "DASHBOARD_SUPERVISOR_CLOSE",
    DASHBOARDEDIT = "DASHBOARD_EDIT",
    DASHBOARDDELETE = "DASHBOARD_DELETE"
}
/**
 *
 * @export
 * @interface V1UpdateCategoryRequest
 */
export interface V1UpdateCategoryRequest {
    /**
     *
     * @type {V1Category}
     * @memberof V1UpdateCategoryRequest
     */
    body: V1Category;
}
/**
 *
 * @export
 * @interface V1UpdateDiscountRequest
 */
export interface V1UpdateDiscountRequest {
    /**
     *
     * @type {V1Discount}
     * @memberof V1UpdateDiscountRequest
     */
    body: V1Discount;
}
/**
 *
 * @export
 * @interface V1UpdateEmployeeRequest
 */
export interface V1UpdateEmployeeRequest {
    /**
     *
     * @type {V1Employee}
     * @memberof V1UpdateEmployeeRequest
     */
    body: V1Employee;
}
/**
 *
 * @export
 * @interface V1UpdateEmployeeRoleRequest
 */
export interface V1UpdateEmployeeRoleRequest {
    /**
     *
     * @type {V1EmployeeRole}
     * @memberof V1UpdateEmployeeRoleRequest
     */
    body: V1EmployeeRole;
}
/**
 *
 * @export
 * @interface V1UpdateFeeRequest
 */
export interface V1UpdateFeeRequest {
    /**
     *
     * @type {V1Fee}
     * @memberof V1UpdateFeeRequest
     */
    body: V1Fee;
}
/**
 *
 * @export
 * @interface V1UpdateItemRequest
 */
export interface V1UpdateItemRequest {
    /**
     *
     * @type {V1Item}
     * @memberof V1UpdateItemRequest
     */
    body: V1Item;
}
/**
 * V1UpdateModifierListRequest
 * @export
 * @interface V1UpdateModifierListRequest
 */
export interface V1UpdateModifierListRequest {
    /**
     * The modifier list\'s name.
     * @type {string}
     * @memberof V1UpdateModifierListRequest
     */
    name?: string;
    /**
     * Indicates whether multiple options from the modifier list can be applied to a single item. See [V1UpdateModifierListRequestSelectionType](#type-v1updatemodifierlistrequestselectiontype) for possible values
     * @type {string}
     * @memberof V1UpdateModifierListRequest
     */
    selection_type?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1UpdateModifierListRequestSelectionType {
    SINGLE = "SINGLE",
    MULTIPLE = "MULTIPLE"
}
/**
 *
 * @export
 * @interface V1UpdateModifierOptionRequest
 */
export interface V1UpdateModifierOptionRequest {
    /**
     *
     * @type {V1ModifierOption}
     * @memberof V1UpdateModifierOptionRequest
     */
    body: V1ModifierOption;
}
/**
 * V1UpdateOrderRequest
 * @export
 * @interface V1UpdateOrderRequest
 */
export interface V1UpdateOrderRequest {
    /**
     * The action to perform on the order (COMPLETE, CANCEL, or REFUND). See [V1UpdateOrderRequestAction](#type-v1updateorderrequestaction) for possible values
     * @type {string}
     * @memberof V1UpdateOrderRequest
     */
    action: string;
    /**
     * The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
     * @type {string}
     * @memberof V1UpdateOrderRequest
     */
    shipped_tracking_number?: string;
    /**
     * A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
     * @type {string}
     * @memberof V1UpdateOrderRequest
     */
    completed_note?: string;
    /**
     * A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
     * @type {string}
     * @memberof V1UpdateOrderRequest
     */
    refunded_note?: string;
    /**
     * A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
     * @type {string}
     * @memberof V1UpdateOrderRequest
     */
    canceled_note?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1UpdateOrderRequestAction {
    COMPLETE = "COMPLETE",
    CANCEL = "CANCEL",
    REFUND = "REFUND"
}
/**
 *
 * @export
 * @interface V1UpdatePageCellRequest
 */
export interface V1UpdatePageCellRequest {
    /**
     *
     * @type {V1PageCell}
     * @memberof V1UpdatePageCellRequest
     */
    body: V1PageCell;
}
/**
 *
 * @export
 * @interface V1UpdatePageRequest
 */
export interface V1UpdatePageRequest {
    /**
     *
     * @type {V1Page}
     * @memberof V1UpdatePageRequest
     */
    body: V1Page;
}
/**
 *
 * @export
 * @interface V1UpdateTimecardRequest
 */
export interface V1UpdateTimecardRequest {
    /**
     *
     * @type {V1Timecard}
     * @memberof V1UpdateTimecardRequest
     */
    body: V1Timecard;
}
/**
 *
 * @export
 * @interface V1UpdateVariationRequest
 */
export interface V1UpdateVariationRequest {
    /**
     *
     * @type {V1Variation}
     * @memberof V1UpdateVariationRequest
     */
    body: V1Variation;
}
/**
 * V1Variation
 * @export
 * @interface V1Variation
 */
export interface V1Variation {
    /**
     * The item variation\'s unique ID.
     * @type {string}
     * @memberof V1Variation
     */
    id?: string;
    /**
     * The item variation\'s name.
     * @type {string}
     * @memberof V1Variation
     */
    name?: string;
    /**
     * The ID of the variation\'s associated item.
     * @type {string}
     * @memberof V1Variation
     */
    item_id?: string;
    /**
     * Indicates the variation\'s list position when displayed in Square Point of Sale and the merchant dashboard. If more than one variation for the same item has the same ordinal value, those variations are displayed in alphabetical order
     * @type {number}
     * @memberof V1Variation
     */
    ordinal?: number;
    /**
     * Indicates whether the item variation\'s price is fixed or determined at the time of sale. See [V1VariationPricingType](#type-v1variationpricingtype) for possible values
     * @type {string}
     * @memberof V1Variation
     */
    pricing_type?: string;
    /**
     *
     * @type {V1Money}
     * @memberof V1Variation
     */
    price_money?: V1Money;
    /**
     * The item variation\'s SKU, if any.
     * @type {string}
     * @memberof V1Variation
     */
    sku?: string;
    /**
     * If true, inventory tracking is active for the variation.
     * @type {boolean}
     * @memberof V1Variation
     */
    track_inventory?: boolean;
    /**
     * Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold. See [V1VariationInventoryAlertType](#type-v1variationinventoryalerttype) for possible values
     * @type {string}
     * @memberof V1Variation
     */
    inventory_alert_type?: string;
    /**
     * If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard.
     * @type {number}
     * @memberof V1Variation
     */
    inventory_alert_threshold?: number;
    /**
     * Arbitrary metadata associated with the variation. Cannot exceed 255 characters.
     * @type {string}
     * @memberof V1Variation
     */
    user_data?: string;
    /**
     * The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
     * @type {string}
     * @memberof V1Variation
     */
    v2_id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1VariationInventoryAlertType {
    LOWQUANTITY = "LOW_QUANTITY",
    NONE = "NONE",
    INVESTMENT = "INVESTMENT",
    LOAN = "LOAN",
    SAVINGS = "SAVINGS",
    OTHER = "OTHER"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum V1VariationPricingType {
    FIXEDPRICING = "FIXED_PRICING",
    VARIABLEPRICING = "VARIABLE_PRICING"
}
/**
 * A reference to a Catalog object at a specific version. In general this is used as an entry point into a graph of catalog objects, where the objects exist at a specific version.
 * @export
 * @interface VersionedCatalogObject
 */
export interface VersionedCatalogObject {
    /**
     * The ID of the referenced object.
     * @type {string}
     * @memberof VersionedCatalogObject
     */
    object_id?: string;
    /**
     * The version of the object.
     * @type {number}
     * @memberof VersionedCatalogObject
     */
    catalog_version?: number;
}
/**
 * Defines the fields that are included in the response body of a request to the [VoidTransaction](#endpoint-voidtransaction) endpoint.
 * @export
 * @interface VoidTransactionResponse
 */
export interface VoidTransactionResponse {
    /**
     * Any errors that occurred during the request.
     * @type {Array<Error>}
     * @memberof VoidTransactionResponse
     */
    errors?: Array<Error>;
}
/**
 * An object representing a team member\'s wage information.
 * @export
 * @interface WageSetting
 */
export interface WageSetting {
    /**
     * The unique ID of the `TeamMember` whom this wage setting describes.
     * @type {string}
     * @memberof WageSetting
     */
    team_member_id?: string;
    /**
     * <b>Required</b> The ordered list of jobs that the team member is assigned to. The first job assignment is considered the team member\'s \"Primary Job\". <br> <b>Min Length 1    Max Length 12</b>
     * @type {Array<JobAssignment>}
     * @memberof WageSetting
     */
    job_assignments?: Array<JobAssignment>;
    /**
     * Whether the team member is exempt from the overtime rules of the seller country.
     * @type {boolean}
     * @memberof WageSetting
     */
    is_overtime_exempt?: boolean;
    /**
     * Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write, potentially overwriting data from another write. Read about [optimistic concurrency](https://developer.squareup.com/docs/docs/working-with-apis/optimistic-concurrency) in Square APIs for more information.
     * @type {number}
     * @memberof WageSetting
     */
    version?: number;
    /**
     * The timestamp in RFC 3339 format describing when the wage setting object was created. Ex: \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\"
     * @type {string}
     * @memberof WageSetting
     */
    created_at?: string;
    /**
     * The timestamp in RFC 3339 format describing when the wage setting object was last updated. Ex: \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\"
     * @type {string}
     * @memberof WageSetting
     */
    updated_at?: string;
}
/**
 * The days of the week.
 * @export
 * @enum {string}
 */
export declare enum Weekday {
    MON = "MON",
    TUE = "TUE",
    WED = "WED",
    THU = "THU",
    FRI = "FRI",
    SAT = "SAT",
    SUN = "SUN"
}
/**
 * Sets the Day of the week and hour of the day that a business starts a work week. Used for the calculation of overtime pay.
 * @export
 * @interface WorkweekConfig
 */
export interface WorkweekConfig {
    /**
     * UUID for this object
     * @type {string}
     * @memberof WorkweekConfig
     */
    id?: string;
    /**
     * The day of the week on which a business week cuts over for compensation purposes. See [Weekday](#type-weekday) for possible values
     * @type {string}
     * @memberof WorkweekConfig
     */
    start_of_week: string;
    /**
     * The local time at which a business week cuts over. Represented as a string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are truncated).
     * @type {string}
     * @memberof WorkweekConfig
     */
    start_of_day_local_time: string;
    /**
     * Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write.
     * @type {number}
     * @memberof WorkweekConfig
     */
    version?: number;
    /**
     * A read-only timestamp in RFC 3339 format; presented in UTC
     * @type {string}
     * @memberof WorkweekConfig
     */
    created_at?: string;
    /**
     * A read-only timestamp in RFC 3339 format; presented in UTC
     * @type {string}
     * @memberof WorkweekConfig
     */
    updated_at?: string;
}
/**
 * ApplePayApi - axios parameter creator
 * @export
 */
export declare const ApplePayApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Square Payment Form Walkthrough](/docs/payment-form/payment-form-walkthrough).
     * @summary RegisterDomain
     * @param {RegisterDomainRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerDomain: (body: RegisterDomainRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * ApplePayApi - functional programming interface
 * @export
 */
export declare const ApplePayApiFp: (configuration?: Configuration) => {
    /**
     * Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Square Payment Form Walkthrough](/docs/payment-form/payment-form-walkthrough).
     * @summary RegisterDomain
     * @param {RegisterDomainRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerDomain(body: RegisterDomainRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterDomainResponse>>;
};
/**
 * ApplePayApi - factory interface
 * @export
 */
export declare const ApplePayApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Square Payment Form Walkthrough](/docs/payment-form/payment-form-walkthrough).
     * @summary RegisterDomain
     * @param {RegisterDomainRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerDomain(body: RegisterDomainRequest, options?: any): AxiosPromise<RegisterDomainResponse>;
};
/**
 * ApplePayApi - object-oriented interface
 * @export
 * @class ApplePayApi
 * @extends {BaseAPI}
 */
export declare class ApplePayApi extends BaseAPI {
    /**
     * Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Square Payment Form Walkthrough](/docs/payment-form/payment-form-walkthrough).
     * @summary RegisterDomain
     * @param {RegisterDomainRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplePayApi
     */
    registerDomain(body: RegisterDomainRequest, options?: any): Promise<import("axios").AxiosResponse<RegisterDomainResponse>>;
}
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
export declare const BankAccountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns details of a [BankAccount](#type-bankaccount)  linked to a Square account.
     * @summary GetBankAccount
     * @param {string} bankAccountId Square-issued ID of the desired &#x60;BankAccount&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBankAccount: (bankAccountId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns details of a [BankAccount](#type-bankaccount) identified by V1 bank account ID.
     * @summary GetBankAccountByV1Id
     * @param {string} v1BankAccountId Connect V1 ID of the desired &#x60;BankAccount&#x60;. For more information, see  [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https://developer.squareup.com/docs/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-v1-bank-accounts-api).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBankAccountByV1Id: (v1BankAccountId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of [BankAccount](#type-bankaccount) objects linked to a Square account.
     * @summary ListBankAccounts
     * @param {string} [cursor] The pagination cursor returned by a previous call to this endpoint. Use it in the next &#x60;ListBankAccounts&#x60; request to retrieve the next set  of results.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {number} [limit] Upper limit on the number of bank accounts to return in the response.  Currently, 1000 is the largest supported limit. You can specify a limit  of up to 1000 bank accounts. This is also the default limit.
     * @param {string} [locationId] Location ID. You can specify this optional filter  to retrieve only the linked bank accounts belonging to a specific location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBankAccounts: (cursor?: string, limit?: number, locationId?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * BankAccountsApi - functional programming interface
 * @export
 */
export declare const BankAccountsApiFp: (configuration?: Configuration) => {
    /**
     * Returns details of a [BankAccount](#type-bankaccount)  linked to a Square account.
     * @summary GetBankAccount
     * @param {string} bankAccountId Square-issued ID of the desired &#x60;BankAccount&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBankAccount(bankAccountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBankAccountResponse>>;
    /**
     * Returns details of a [BankAccount](#type-bankaccount) identified by V1 bank account ID.
     * @summary GetBankAccountByV1Id
     * @param {string} v1BankAccountId Connect V1 ID of the desired &#x60;BankAccount&#x60;. For more information, see  [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https://developer.squareup.com/docs/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-v1-bank-accounts-api).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBankAccountByV1Id(v1BankAccountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBankAccountByV1IdResponse>>;
    /**
     * Returns a list of [BankAccount](#type-bankaccount) objects linked to a Square account.
     * @summary ListBankAccounts
     * @param {string} [cursor] The pagination cursor returned by a previous call to this endpoint. Use it in the next &#x60;ListBankAccounts&#x60; request to retrieve the next set  of results.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {number} [limit] Upper limit on the number of bank accounts to return in the response.  Currently, 1000 is the largest supported limit. You can specify a limit  of up to 1000 bank accounts. This is also the default limit.
     * @param {string} [locationId] Location ID. You can specify this optional filter  to retrieve only the linked bank accounts belonging to a specific location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBankAccounts(cursor?: string, limit?: number, locationId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBankAccountsResponse>>;
};
/**
 * BankAccountsApi - factory interface
 * @export
 */
export declare const BankAccountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns details of a [BankAccount](#type-bankaccount)  linked to a Square account.
     * @summary GetBankAccount
     * @param {string} bankAccountId Square-issued ID of the desired &#x60;BankAccount&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBankAccount(bankAccountId: string, options?: any): AxiosPromise<GetBankAccountResponse>;
    /**
     * Returns details of a [BankAccount](#type-bankaccount) identified by V1 bank account ID.
     * @summary GetBankAccountByV1Id
     * @param {string} v1BankAccountId Connect V1 ID of the desired &#x60;BankAccount&#x60;. For more information, see  [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https://developer.squareup.com/docs/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-v1-bank-accounts-api).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBankAccountByV1Id(v1BankAccountId: string, options?: any): AxiosPromise<GetBankAccountByV1IdResponse>;
    /**
     * Returns a list of [BankAccount](#type-bankaccount) objects linked to a Square account.
     * @summary ListBankAccounts
     * @param {string} [cursor] The pagination cursor returned by a previous call to this endpoint. Use it in the next &#x60;ListBankAccounts&#x60; request to retrieve the next set  of results.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {number} [limit] Upper limit on the number of bank accounts to return in the response.  Currently, 1000 is the largest supported limit. You can specify a limit  of up to 1000 bank accounts. This is also the default limit.
     * @param {string} [locationId] Location ID. You can specify this optional filter  to retrieve only the linked bank accounts belonging to a specific location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBankAccounts(cursor?: string, limit?: number, locationId?: string, options?: any): AxiosPromise<ListBankAccountsResponse>;
};
/**
 * BankAccountsApi - object-oriented interface
 * @export
 * @class BankAccountsApi
 * @extends {BaseAPI}
 */
export declare class BankAccountsApi extends BaseAPI {
    /**
     * Returns details of a [BankAccount](#type-bankaccount)  linked to a Square account.
     * @summary GetBankAccount
     * @param {string} bankAccountId Square-issued ID of the desired &#x60;BankAccount&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    getBankAccount(bankAccountId: string, options?: any): Promise<import("axios").AxiosResponse<GetBankAccountResponse>>;
    /**
     * Returns details of a [BankAccount](#type-bankaccount) identified by V1 bank account ID.
     * @summary GetBankAccountByV1Id
     * @param {string} v1BankAccountId Connect V1 ID of the desired &#x60;BankAccount&#x60;. For more information, see  [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https://developer.squareup.com/docs/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-v1-bank-accounts-api).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    getBankAccountByV1Id(v1BankAccountId: string, options?: any): Promise<import("axios").AxiosResponse<GetBankAccountByV1IdResponse>>;
    /**
     * Returns a list of [BankAccount](#type-bankaccount) objects linked to a Square account.
     * @summary ListBankAccounts
     * @param {string} [cursor] The pagination cursor returned by a previous call to this endpoint. Use it in the next &#x60;ListBankAccounts&#x60; request to retrieve the next set  of results.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {number} [limit] Upper limit on the number of bank accounts to return in the response.  Currently, 1000 is the largest supported limit. You can specify a limit  of up to 1000 bank accounts. This is also the default limit.
     * @param {string} [locationId] Location ID. You can specify this optional filter  to retrieve only the linked bank accounts belonging to a specific location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    listBankAccounts(cursor?: string, limit?: number, locationId?: string, options?: any): Promise<import("axios").AxiosResponse<ListBankAccountsResponse>>;
}
/**
 * CashDrawersApi - axios parameter creator
 * @export
 */
export declare const CashDrawersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Provides a paginated list of events for a single cash drawer shift.
     * @summary ListCashDrawerShiftEvents
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift ID.
     * @param {number} [limit] Number of resources to be returned in a page of results (200 by default, 1000 max).
     * @param {string} [cursor] Opaque cursor for fetching the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShiftEvents: (locationId: string, shiftId: string, limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for all of the cash drawer shifts for a location in a date range.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to query for a list of cash drawer shifts.
     * @param {string} [sortOrder] The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC
     * @param {string} [beginTime] The inclusive start time of the query on opened_at, in ISO 8601 format.
     * @param {string} [endTime] The exclusive end date of the query on opened_at, in ISO 8601 format.
     * @param {number} [limit] Number of cash drawer shift events in a page of results (200 by default, 1000 max).
     * @param {string} [cursor] Opaque cursor for fetching the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShifts: (locationId: string, sortOrder?: string, beginTime?: string, endTime?: string, limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the summary details for a single cash drawer shift. See RetrieveCashDrawerShiftEvents for a list of cash drawer shift events.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to retrieve cash drawer shifts from.
     * @param {string} shiftId The shift ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCashDrawerShift: (locationId: string, shiftId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * CashDrawersApi - functional programming interface
 * @export
 */
export declare const CashDrawersApiFp: (configuration?: Configuration) => {
    /**
     * Provides a paginated list of events for a single cash drawer shift.
     * @summary ListCashDrawerShiftEvents
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift ID.
     * @param {number} [limit] Number of resources to be returned in a page of results (200 by default, 1000 max).
     * @param {string} [cursor] Opaque cursor for fetching the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShiftEvents(locationId: string, shiftId: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCashDrawerShiftEventsResponse>>;
    /**
     * Provides the details for all of the cash drawer shifts for a location in a date range.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to query for a list of cash drawer shifts.
     * @param {string} [sortOrder] The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC
     * @param {string} [beginTime] The inclusive start time of the query on opened_at, in ISO 8601 format.
     * @param {string} [endTime] The exclusive end date of the query on opened_at, in ISO 8601 format.
     * @param {number} [limit] Number of cash drawer shift events in a page of results (200 by default, 1000 max).
     * @param {string} [cursor] Opaque cursor for fetching the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShifts(locationId: string, sortOrder?: string, beginTime?: string, endTime?: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCashDrawerShiftsResponse>>;
    /**
     * Provides the summary details for a single cash drawer shift. See RetrieveCashDrawerShiftEvents for a list of cash drawer shift events.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to retrieve cash drawer shifts from.
     * @param {string} shiftId The shift ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCashDrawerShift(locationId: string, shiftId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveCashDrawerShiftResponse>>;
};
/**
 * CashDrawersApi - factory interface
 * @export
 */
export declare const CashDrawersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Provides a paginated list of events for a single cash drawer shift.
     * @summary ListCashDrawerShiftEvents
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift ID.
     * @param {number} [limit] Number of resources to be returned in a page of results (200 by default, 1000 max).
     * @param {string} [cursor] Opaque cursor for fetching the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShiftEvents(locationId: string, shiftId: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListCashDrawerShiftEventsResponse>;
    /**
     * Provides the details for all of the cash drawer shifts for a location in a date range.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to query for a list of cash drawer shifts.
     * @param {string} [sortOrder] The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC
     * @param {string} [beginTime] The inclusive start time of the query on opened_at, in ISO 8601 format.
     * @param {string} [endTime] The exclusive end date of the query on opened_at, in ISO 8601 format.
     * @param {number} [limit] Number of cash drawer shift events in a page of results (200 by default, 1000 max).
     * @param {string} [cursor] Opaque cursor for fetching the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShifts(locationId: string, sortOrder?: string, beginTime?: string, endTime?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListCashDrawerShiftsResponse>;
    /**
     * Provides the summary details for a single cash drawer shift. See RetrieveCashDrawerShiftEvents for a list of cash drawer shift events.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to retrieve cash drawer shifts from.
     * @param {string} shiftId The shift ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCashDrawerShift(locationId: string, shiftId: string, options?: any): AxiosPromise<RetrieveCashDrawerShiftResponse>;
};
/**
 * CashDrawersApi - object-oriented interface
 * @export
 * @class CashDrawersApi
 * @extends {BaseAPI}
 */
export declare class CashDrawersApi extends BaseAPI {
    /**
     * Provides a paginated list of events for a single cash drawer shift.
     * @summary ListCashDrawerShiftEvents
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift ID.
     * @param {number} [limit] Number of resources to be returned in a page of results (200 by default, 1000 max).
     * @param {string} [cursor] Opaque cursor for fetching the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashDrawersApi
     */
    listCashDrawerShiftEvents(locationId: string, shiftId: string, limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListCashDrawerShiftEventsResponse>>;
    /**
     * Provides the details for all of the cash drawer shifts for a location in a date range.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to query for a list of cash drawer shifts.
     * @param {string} [sortOrder] The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC
     * @param {string} [beginTime] The inclusive start time of the query on opened_at, in ISO 8601 format.
     * @param {string} [endTime] The exclusive end date of the query on opened_at, in ISO 8601 format.
     * @param {number} [limit] Number of cash drawer shift events in a page of results (200 by default, 1000 max).
     * @param {string} [cursor] Opaque cursor for fetching the next page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashDrawersApi
     */
    listCashDrawerShifts(locationId: string, sortOrder?: string, beginTime?: string, endTime?: string, limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListCashDrawerShiftsResponse>>;
    /**
     * Provides the summary details for a single cash drawer shift. See RetrieveCashDrawerShiftEvents for a list of cash drawer shift events.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to retrieve cash drawer shifts from.
     * @param {string} shiftId The shift ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashDrawersApi
     */
    retrieveCashDrawerShift(locationId: string, shiftId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveCashDrawerShiftResponse>>;
}
/**
 * CatalogApi - axios parameter creator
 * @export
 */
export declare const CatalogApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
     * @summary BatchDeleteCatalogObjects
     * @param {BatchDeleteCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchDeleteCatalogObjects: (body: BatchDeleteCatalogObjectsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     * @summary BatchRetrieveCatalogObjects
     * @param {BatchRetrieveCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveCatalogObjects: (body: BatchRetrieveCatalogObjectsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
     * @summary BatchUpsertCatalogObjects
     * @param {BatchUpsertCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchUpsertCatalogObjects: (body: BatchUpsertCatalogObjectsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves information about the Square Catalog API, such as batch size limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
     * @summary CatalogInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    catalogInfo: (options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
     * @summary DeleteCatalogObject
     * @param {string} objectId The ID of the catalog object to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a catalog item will delete its catalog item variations).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalogObject: (objectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The `types` parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set `include_deleted_objects` to `true`.
     * @summary ListCatalog
     * @param {string} [cursor] The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {string} [types] An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the CatalogObjectType enum: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCatalog: (cursor?: string, types?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     * @summary RetrieveCatalogObject
     * @param {string} objectId The object ID of any type of catalog objects to be retrieved.
     * @param {boolean} [includeRelatedObjects] If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItem&#x60;, its associated &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogImage&#x60; and &#x60;CatalogModifierList&#x60; objects will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItemVariation&#x60;, its parent &#x60;CatalogItem&#x60; will be returned in the &#x60;related_objects&#x60; field of the response.  Default value: &#x60;false&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCatalogObject: (objectId: string, includeRelatedObjects?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * Searches for catalog items or item variations by matching supported search attribute values, including custom attribute values, against one or more of the specified query expressions,  This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints use different call conventions, including the query filter formats.
     * @summary SearchCatalogItems
     * @param {SearchCatalogItemsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCatalogItems: (body: SearchCatalogItemsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Searches for [CatalogObject](#type-CatalogObject) of any types against supported search attribute values, excluding custom attribute values on items or item variations, against one or more of the specified query expressions,  This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints have different call conventions, including the query filter formats.
     * @summary SearchCatalogObjects
     * @param {SearchCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCatalogObjects: (body: SearchCatalogObjectsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     * @summary UpdateItemModifierLists
     * @param {UpdateItemModifierListsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemModifierLists: (body: UpdateItemModifierListsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     * @summary UpdateItemTaxes
     * @param {UpdateItemTaxesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemTaxes: (body: UpdateItemTaxesRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates or updates the target [CatalogObject](#type-catalogobject).
     * @summary UpsertCatalogObject
     * @param {UpsertCatalogObjectRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsertCatalogObject: (body: UpsertCatalogObjectRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * CatalogApi - functional programming interface
 * @export
 */
export declare const CatalogApiFp: (configuration?: Configuration) => {
    /**
     * Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
     * @summary BatchDeleteCatalogObjects
     * @param {BatchDeleteCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchDeleteCatalogObjects(body: BatchDeleteCatalogObjectsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchDeleteCatalogObjectsResponse>>;
    /**
     * Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     * @summary BatchRetrieveCatalogObjects
     * @param {BatchRetrieveCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveCatalogObjects(body: BatchRetrieveCatalogObjectsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchRetrieveCatalogObjectsResponse>>;
    /**
     * Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
     * @summary BatchUpsertCatalogObjects
     * @param {BatchUpsertCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchUpsertCatalogObjects(body: BatchUpsertCatalogObjectsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchUpsertCatalogObjectsResponse>>;
    /**
     * Retrieves information about the Square Catalog API, such as batch size limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
     * @summary CatalogInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    catalogInfo(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogInfoResponse>>;
    /**
     * Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
     * @summary DeleteCatalogObject
     * @param {string} objectId The ID of the catalog object to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a catalog item will delete its catalog item variations).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalogObject(objectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCatalogObjectResponse>>;
    /**
     * Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The `types` parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set `include_deleted_objects` to `true`.
     * @summary ListCatalog
     * @param {string} [cursor] The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {string} [types] An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the CatalogObjectType enum: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCatalog(cursor?: string, types?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCatalogResponse>>;
    /**
     * Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     * @summary RetrieveCatalogObject
     * @param {string} objectId The object ID of any type of catalog objects to be retrieved.
     * @param {boolean} [includeRelatedObjects] If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItem&#x60;, its associated &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogImage&#x60; and &#x60;CatalogModifierList&#x60; objects will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItemVariation&#x60;, its parent &#x60;CatalogItem&#x60; will be returned in the &#x60;related_objects&#x60; field of the response.  Default value: &#x60;false&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCatalogObject(objectId: string, includeRelatedObjects?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveCatalogObjectResponse>>;
    /**
     * Searches for catalog items or item variations by matching supported search attribute values, including custom attribute values, against one or more of the specified query expressions,  This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints use different call conventions, including the query filter formats.
     * @summary SearchCatalogItems
     * @param {SearchCatalogItemsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCatalogItems(body: SearchCatalogItemsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchCatalogItemsResponse>>;
    /**
     * Searches for [CatalogObject](#type-CatalogObject) of any types against supported search attribute values, excluding custom attribute values on items or item variations, against one or more of the specified query expressions,  This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints have different call conventions, including the query filter formats.
     * @summary SearchCatalogObjects
     * @param {SearchCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCatalogObjects(body: SearchCatalogObjectsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchCatalogObjectsResponse>>;
    /**
     * Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     * @summary UpdateItemModifierLists
     * @param {UpdateItemModifierListsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemModifierLists(body: UpdateItemModifierListsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateItemModifierListsResponse>>;
    /**
     * Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     * @summary UpdateItemTaxes
     * @param {UpdateItemTaxesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemTaxes(body: UpdateItemTaxesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateItemTaxesResponse>>;
    /**
     * Creates or updates the target [CatalogObject](#type-catalogobject).
     * @summary UpsertCatalogObject
     * @param {UpsertCatalogObjectRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsertCatalogObject(body: UpsertCatalogObjectRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpsertCatalogObjectResponse>>;
};
/**
 * CatalogApi - factory interface
 * @export
 */
export declare const CatalogApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
     * @summary BatchDeleteCatalogObjects
     * @param {BatchDeleteCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchDeleteCatalogObjects(body: BatchDeleteCatalogObjectsRequest, options?: any): AxiosPromise<BatchDeleteCatalogObjectsResponse>;
    /**
     * Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     * @summary BatchRetrieveCatalogObjects
     * @param {BatchRetrieveCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveCatalogObjects(body: BatchRetrieveCatalogObjectsRequest, options?: any): AxiosPromise<BatchRetrieveCatalogObjectsResponse>;
    /**
     * Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
     * @summary BatchUpsertCatalogObjects
     * @param {BatchUpsertCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchUpsertCatalogObjects(body: BatchUpsertCatalogObjectsRequest, options?: any): AxiosPromise<BatchUpsertCatalogObjectsResponse>;
    /**
     * Retrieves information about the Square Catalog API, such as batch size limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
     * @summary CatalogInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    catalogInfo(options?: any): AxiosPromise<CatalogInfoResponse>;
    /**
     * Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
     * @summary DeleteCatalogObject
     * @param {string} objectId The ID of the catalog object to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a catalog item will delete its catalog item variations).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalogObject(objectId: string, options?: any): AxiosPromise<DeleteCatalogObjectResponse>;
    /**
     * Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The `types` parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set `include_deleted_objects` to `true`.
     * @summary ListCatalog
     * @param {string} [cursor] The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {string} [types] An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the CatalogObjectType enum: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCatalog(cursor?: string, types?: string, options?: any): AxiosPromise<ListCatalogResponse>;
    /**
     * Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     * @summary RetrieveCatalogObject
     * @param {string} objectId The object ID of any type of catalog objects to be retrieved.
     * @param {boolean} [includeRelatedObjects] If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItem&#x60;, its associated &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogImage&#x60; and &#x60;CatalogModifierList&#x60; objects will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItemVariation&#x60;, its parent &#x60;CatalogItem&#x60; will be returned in the &#x60;related_objects&#x60; field of the response.  Default value: &#x60;false&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCatalogObject(objectId: string, includeRelatedObjects?: boolean, options?: any): AxiosPromise<RetrieveCatalogObjectResponse>;
    /**
     * Searches for catalog items or item variations by matching supported search attribute values, including custom attribute values, against one or more of the specified query expressions,  This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints use different call conventions, including the query filter formats.
     * @summary SearchCatalogItems
     * @param {SearchCatalogItemsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCatalogItems(body: SearchCatalogItemsRequest, options?: any): AxiosPromise<SearchCatalogItemsResponse>;
    /**
     * Searches for [CatalogObject](#type-CatalogObject) of any types against supported search attribute values, excluding custom attribute values on items or item variations, against one or more of the specified query expressions,  This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints have different call conventions, including the query filter formats.
     * @summary SearchCatalogObjects
     * @param {SearchCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCatalogObjects(body: SearchCatalogObjectsRequest, options?: any): AxiosPromise<SearchCatalogObjectsResponse>;
    /**
     * Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     * @summary UpdateItemModifierLists
     * @param {UpdateItemModifierListsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemModifierLists(body: UpdateItemModifierListsRequest, options?: any): AxiosPromise<UpdateItemModifierListsResponse>;
    /**
     * Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     * @summary UpdateItemTaxes
     * @param {UpdateItemTaxesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemTaxes(body: UpdateItemTaxesRequest, options?: any): AxiosPromise<UpdateItemTaxesResponse>;
    /**
     * Creates or updates the target [CatalogObject](#type-catalogobject).
     * @summary UpsertCatalogObject
     * @param {UpsertCatalogObjectRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsertCatalogObject(body: UpsertCatalogObjectRequest, options?: any): AxiosPromise<UpsertCatalogObjectResponse>;
};
/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export declare class CatalogApi extends BaseAPI {
    /**
     * Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
     * @summary BatchDeleteCatalogObjects
     * @param {BatchDeleteCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    batchDeleteCatalogObjects(body: BatchDeleteCatalogObjectsRequest, options?: any): Promise<import("axios").AxiosResponse<BatchDeleteCatalogObjectsResponse>>;
    /**
     * Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     * @summary BatchRetrieveCatalogObjects
     * @param {BatchRetrieveCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    batchRetrieveCatalogObjects(body: BatchRetrieveCatalogObjectsRequest, options?: any): Promise<import("axios").AxiosResponse<BatchRetrieveCatalogObjectsResponse>>;
    /**
     * Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
     * @summary BatchUpsertCatalogObjects
     * @param {BatchUpsertCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    batchUpsertCatalogObjects(body: BatchUpsertCatalogObjectsRequest, options?: any): Promise<import("axios").AxiosResponse<BatchUpsertCatalogObjectsResponse>>;
    /**
     * Retrieves information about the Square Catalog API, such as batch size limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
     * @summary CatalogInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    catalogInfo(options?: any): Promise<import("axios").AxiosResponse<CatalogInfoResponse>>;
    /**
     * Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
     * @summary DeleteCatalogObject
     * @param {string} objectId The ID of the catalog object to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a catalog item will delete its catalog item variations).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    deleteCatalogObject(objectId: string, options?: any): Promise<import("axios").AxiosResponse<DeleteCatalogObjectResponse>>;
    /**
     * Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The `types` parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.  __Important:__ ListCatalog does not return deleted catalog items. To retrieve deleted catalog items, use SearchCatalogObjects and set `include_deleted_objects` to `true`.
     * @summary ListCatalog
     * @param {string} [cursor] The pagination cursor returned in the previous response. Leave unset for an initial request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {string} [types] An optional case-insensitive, comma-separated list of object types to retrieve, for example &#x60;ITEM,ITEM_VARIATION,CATEGORY,IMAGE&#x60;.  The legal values are taken from the CatalogObjectType enum: &#x60;ITEM&#x60;, &#x60;ITEM_VARIATION&#x60;, &#x60;CATEGORY&#x60;, &#x60;DISCOUNT&#x60;, &#x60;TAX&#x60;, &#x60;MODIFIER&#x60;, &#x60;MODIFIER_LIST&#x60;, or &#x60;IMAGE&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    listCatalog(cursor?: string, types?: string, options?: any): Promise<import("axios").AxiosResponse<ListCatalogResponse>>;
    /**
     * Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
     * @summary RetrieveCatalogObject
     * @param {string} objectId The object ID of any type of catalog objects to be retrieved.
     * @param {boolean} [includeRelatedObjects] If &#x60;true&#x60;, the response will include additional objects that are related to the requested object, as follows:  If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItem&#x60;, its associated &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogImage&#x60; and &#x60;CatalogModifierList&#x60; objects will be returned in the &#x60;related_objects&#x60; field of the response. If the &#x60;object&#x60; field of the response contains a &#x60;CatalogItemVariation&#x60;, its parent &#x60;CatalogItem&#x60; will be returned in the &#x60;related_objects&#x60; field of the response.  Default value: &#x60;false&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    retrieveCatalogObject(objectId: string, includeRelatedObjects?: boolean, options?: any): Promise<import("axios").AxiosResponse<RetrieveCatalogObjectResponse>>;
    /**
     * Searches for catalog items or item variations by matching supported search attribute values, including custom attribute values, against one or more of the specified query expressions,  This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints use different call conventions, including the query filter formats.
     * @summary SearchCatalogItems
     * @param {SearchCatalogItemsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    searchCatalogItems(body: SearchCatalogItemsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchCatalogItemsResponse>>;
    /**
     * Searches for [CatalogObject](#type-CatalogObject) of any types against supported search attribute values, excluding custom attribute values on items or item variations, against one or more of the specified query expressions,  This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint in the following aspects:  - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects. - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not. - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does. - The both endpoints have different call conventions, including the query filter formats.
     * @summary SearchCatalogObjects
     * @param {SearchCatalogObjectsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    searchCatalogObjects(body: SearchCatalogObjectsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchCatalogObjectsResponse>>;
    /**
     * Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     * @summary UpdateItemModifierLists
     * @param {UpdateItemModifierListsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    updateItemModifierLists(body: UpdateItemModifierListsRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateItemModifierListsResponse>>;
    /**
     * Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
     * @summary UpdateItemTaxes
     * @param {UpdateItemTaxesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    updateItemTaxes(body: UpdateItemTaxesRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateItemTaxesResponse>>;
    /**
     * Creates or updates the target [CatalogObject](#type-catalogobject).
     * @summary UpsertCatalogObject
     * @param {UpsertCatalogObjectRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    upsertCatalogObject(body: UpsertCatalogObjectRequest, options?: any): Promise<import("axios").AxiosResponse<UpsertCatalogObjectResponse>>;
}
/**
 * CheckoutApi - axios parameter creator
 * @export
 */
export declare const CheckoutApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Links a `checkoutId` to a `checkout_page_url` that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
     * @summary CreateCheckout
     * @param {string} locationId The ID of the business location to associate the checkout with.
     * @param {CreateCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckout: (locationId: string, body: CreateCheckoutRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * CheckoutApi - functional programming interface
 * @export
 */
export declare const CheckoutApiFp: (configuration?: Configuration) => {
    /**
     * Links a `checkoutId` to a `checkout_page_url` that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
     * @summary CreateCheckout
     * @param {string} locationId The ID of the business location to associate the checkout with.
     * @param {CreateCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckout(locationId: string, body: CreateCheckoutRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCheckoutResponse>>;
};
/**
 * CheckoutApi - factory interface
 * @export
 */
export declare const CheckoutApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Links a `checkoutId` to a `checkout_page_url` that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
     * @summary CreateCheckout
     * @param {string} locationId The ID of the business location to associate the checkout with.
     * @param {CreateCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckout(locationId: string, body: CreateCheckoutRequest, options?: any): AxiosPromise<CreateCheckoutResponse>;
};
/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
export declare class CheckoutApi extends BaseAPI {
    /**
     * Links a `checkoutId` to a `checkout_page_url` that customers will be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
     * @summary CreateCheckout
     * @param {string} locationId The ID of the business location to associate the checkout with.
     * @param {CreateCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    createCheckout(locationId: string, body: CreateCheckoutRequest, options?: any): Promise<import("axios").AxiosResponse<CreateCheckoutResponse>>;
}
/**
 * CustomerGroupsApi - axios parameter creator
 * @export
 */
export declare const CustomerGroupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new customer group for a business.   The request must include the `name` value of the group.
     * @summary CreateCustomerGroup
     * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerGroup: (body: CreateCustomerGroupRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a customer group as identified by the `group_id` value.
     * @summary DeleteCustomerGroup
     * @param {string} groupId The ID of the customer group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerGroup: (groupId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves the list of customer groups of a business.
     * @summary ListCustomerGroups
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerGroups: (cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a specific customer group as identified by the `group_id` value.
     * @summary RetrieveCustomerGroup
     * @param {string} groupId The ID of the customer group to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCustomerGroup: (groupId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a customer group as identified by the `group_id` value.
     * @summary UpdateCustomerGroup
     * @param {string} groupId The ID of the customer group to update.
     * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerGroup: (groupId: string, body: UpdateCustomerGroupRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * CustomerGroupsApi - functional programming interface
 * @export
 */
export declare const CustomerGroupsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new customer group for a business.   The request must include the `name` value of the group.
     * @summary CreateCustomerGroup
     * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerGroup(body: CreateCustomerGroupRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerGroupResponse>>;
    /**
     * Deletes a customer group as identified by the `group_id` value.
     * @summary DeleteCustomerGroup
     * @param {string} groupId The ID of the customer group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerGroup(groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomerGroupResponse>>;
    /**
     * Retrieves the list of customer groups of a business.
     * @summary ListCustomerGroups
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerGroups(cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerGroupsResponse>>;
    /**
     * Retrieves a specific customer group as identified by the `group_id` value.
     * @summary RetrieveCustomerGroup
     * @param {string} groupId The ID of the customer group to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCustomerGroup(groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveCustomerGroupResponse>>;
    /**
     * Updates a customer group as identified by the `group_id` value.
     * @summary UpdateCustomerGroup
     * @param {string} groupId The ID of the customer group to update.
     * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerGroup(groupId: string, body: UpdateCustomerGroupRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerGroupResponse>>;
};
/**
 * CustomerGroupsApi - factory interface
 * @export
 */
export declare const CustomerGroupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new customer group for a business.   The request must include the `name` value of the group.
     * @summary CreateCustomerGroup
     * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerGroup(body: CreateCustomerGroupRequest, options?: any): AxiosPromise<CreateCustomerGroupResponse>;
    /**
     * Deletes a customer group as identified by the `group_id` value.
     * @summary DeleteCustomerGroup
     * @param {string} groupId The ID of the customer group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerGroup(groupId: string, options?: any): AxiosPromise<DeleteCustomerGroupResponse>;
    /**
     * Retrieves the list of customer groups of a business.
     * @summary ListCustomerGroups
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerGroups(cursor?: string, options?: any): AxiosPromise<ListCustomerGroupsResponse>;
    /**
     * Retrieves a specific customer group as identified by the `group_id` value.
     * @summary RetrieveCustomerGroup
     * @param {string} groupId The ID of the customer group to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCustomerGroup(groupId: string, options?: any): AxiosPromise<RetrieveCustomerGroupResponse>;
    /**
     * Updates a customer group as identified by the `group_id` value.
     * @summary UpdateCustomerGroup
     * @param {string} groupId The ID of the customer group to update.
     * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerGroup(groupId: string, body: UpdateCustomerGroupRequest, options?: any): AxiosPromise<UpdateCustomerGroupResponse>;
};
/**
 * CustomerGroupsApi - object-oriented interface
 * @export
 * @class CustomerGroupsApi
 * @extends {BaseAPI}
 */
export declare class CustomerGroupsApi extends BaseAPI {
    /**
     * Creates a new customer group for a business.   The request must include the `name` value of the group.
     * @summary CreateCustomerGroup
     * @param {CreateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    createCustomerGroup(body: CreateCustomerGroupRequest, options?: any): Promise<import("axios").AxiosResponse<CreateCustomerGroupResponse>>;
    /**
     * Deletes a customer group as identified by the `group_id` value.
     * @summary DeleteCustomerGroup
     * @param {string} groupId The ID of the customer group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    deleteCustomerGroup(groupId: string, options?: any): Promise<import("axios").AxiosResponse<DeleteCustomerGroupResponse>>;
    /**
     * Retrieves the list of customer groups of a business.
     * @summary ListCustomerGroups
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    listCustomerGroups(cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListCustomerGroupsResponse>>;
    /**
     * Retrieves a specific customer group as identified by the `group_id` value.
     * @summary RetrieveCustomerGroup
     * @param {string} groupId The ID of the customer group to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    retrieveCustomerGroup(groupId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveCustomerGroupResponse>>;
    /**
     * Updates a customer group as identified by the `group_id` value.
     * @summary UpdateCustomerGroup
     * @param {string} groupId The ID of the customer group to update.
     * @param {UpdateCustomerGroupRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    updateCustomerGroup(groupId: string, body: UpdateCustomerGroupRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateCustomerGroupResponse>>;
}
/**
 * CustomerSegmentsApi - axios parameter creator
 * @export
 */
export declare const CustomerSegmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieves the list of customer segments of a business.
     * @summary ListCustomerSegments
     * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerSegments: (cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a specific customer segment as identified by the `segment_id` value.
     * @summary RetrieveCustomerSegment
     * @param {string} segmentId The Square-issued ID of the customer segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCustomerSegment: (segmentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * CustomerSegmentsApi - functional programming interface
 * @export
 */
export declare const CustomerSegmentsApiFp: (configuration?: Configuration) => {
    /**
     * Retrieves the list of customer segments of a business.
     * @summary ListCustomerSegments
     * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerSegments(cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerSegmentsResponse>>;
    /**
     * Retrieves a specific customer segment as identified by the `segment_id` value.
     * @summary RetrieveCustomerSegment
     * @param {string} segmentId The Square-issued ID of the customer segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCustomerSegment(segmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveCustomerSegmentResponse>>;
};
/**
 * CustomerSegmentsApi - factory interface
 * @export
 */
export declare const CustomerSegmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieves the list of customer segments of a business.
     * @summary ListCustomerSegments
     * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerSegments(cursor?: string, options?: any): AxiosPromise<ListCustomerSegmentsResponse>;
    /**
     * Retrieves a specific customer segment as identified by the `segment_id` value.
     * @summary RetrieveCustomerSegment
     * @param {string} segmentId The Square-issued ID of the customer segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCustomerSegment(segmentId: string, options?: any): AxiosPromise<RetrieveCustomerSegmentResponse>;
};
/**
 * CustomerSegmentsApi - object-oriented interface
 * @export
 * @class CustomerSegmentsApi
 * @extends {BaseAPI}
 */
export declare class CustomerSegmentsApi extends BaseAPI {
    /**
     * Retrieves the list of customer segments of a business.
     * @summary ListCustomerSegments
     * @param {string} [cursor] A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to retrieve the next set of query results.  See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSegmentsApi
     */
    listCustomerSegments(cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListCustomerSegmentsResponse>>;
    /**
     * Retrieves a specific customer segment as identified by the `segment_id` value.
     * @summary RetrieveCustomerSegment
     * @param {string} segmentId The Square-issued ID of the customer segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSegmentsApi
     */
    retrieveCustomerSegment(segmentId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveCustomerSegmentResponse>>;
}
/**
 * CustomersApi - axios parameter creator
 * @export
 */
export declare const CustomersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a group membership to a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
     * @summary AddGroupToCustomer
     * @param {string} customerId The ID of the customer to add to a group.
     * @param {string} groupId The ID of the customer group to add the customer to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGroupToCustomer: (customerId: string, groupId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`
     * @summary CreateCustomer
     * @param {CreateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer: (body: CreateCustomerRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a card on file to an existing customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
     * @summary CreateCustomerCard
     * @param {string} customerId The Square ID of the customer profile the card is linked to.
     * @param {CreateCustomerCardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerCard: (customerId: string, body: CreateCustomerCardRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to delete merged profiles.
     * @summary DeleteCustomer
     * @param {string} customerId The ID of the customer to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer: (customerId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Removes a card on file from a customer.
     * @summary DeleteCustomerCard
     * @param {string} customerId The ID of the customer that the card on file belongs to.
     * @param {string} cardId The ID of the card on file to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerCard: (customerId: string, cardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists customer profiles associated with a Square account.  Under normal operating conditions, newly created or updated customer profiles become available for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @summary ListCustomers
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {string} [sortField] Indicates how Customers should be sorted.  Default: &#x60;DEFAULT&#x60;.
     * @param {string} [sortOrder] Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order.  Default: &#x60;ASC&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomers: (cursor?: string, sortField?: string, sortOrder?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Removes a group membership from a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
     * @summary RemoveGroupFromCustomer
     * @param {string} customerId The ID of the customer to remove from the group.
     * @param {string} groupId The ID of the customer group to remove the customer from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeGroupFromCustomer: (customerId: string, groupId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns details for a single customer.
     * @summary RetrieveCustomer
     * @param {string} customerId The ID of the customer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCustomer: (customerId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Searches the customer profiles associated with a Square account using a supported query filter.  Calling `SearchCustomers` without any explicit query filter returns all customer profiles ordered alphabetically based on `given_name` and `family_name`.  Under normal operating conditions, newly created or updated customer profiles become available for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @summary SearchCustomers
     * @param {SearchCustomersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCustomers: (body: SearchCustomersRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to update merged profiles.  You cannot edit a customer\'s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-Customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-Customers-createcustomercard) endpoint.
     * @summary UpdateCustomer
     * @param {string} customerId The ID of the customer to update.
     * @param {UpdateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer: (customerId: string, body: UpdateCustomerRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * CustomersApi - functional programming interface
 * @export
 */
export declare const CustomersApiFp: (configuration?: Configuration) => {
    /**
     * Adds a group membership to a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
     * @summary AddGroupToCustomer
     * @param {string} customerId The ID of the customer to add to a group.
     * @param {string} groupId The ID of the customer group to add the customer to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGroupToCustomer(customerId: string, groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddGroupToCustomerResponse>>;
    /**
     * Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`
     * @summary CreateCustomer
     * @param {CreateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(body: CreateCustomerRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerResponse>>;
    /**
     * Adds a card on file to an existing customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
     * @summary CreateCustomerCard
     * @param {string} customerId The Square ID of the customer profile the card is linked to.
     * @param {CreateCustomerCardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerCard(customerId: string, body: CreateCustomerCardRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerCardResponse>>;
    /**
     * Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to delete merged profiles.
     * @summary DeleteCustomer
     * @param {string} customerId The ID of the customer to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer(customerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomerResponse>>;
    /**
     * Removes a card on file from a customer.
     * @summary DeleteCustomerCard
     * @param {string} customerId The ID of the customer that the card on file belongs to.
     * @param {string} cardId The ID of the card on file to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerCard(customerId: string, cardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomerCardResponse>>;
    /**
     * Lists customer profiles associated with a Square account.  Under normal operating conditions, newly created or updated customer profiles become available for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @summary ListCustomers
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {string} [sortField] Indicates how Customers should be sorted.  Default: &#x60;DEFAULT&#x60;.
     * @param {string} [sortOrder] Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order.  Default: &#x60;ASC&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomers(cursor?: string, sortField?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomersResponse>>;
    /**
     * Removes a group membership from a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
     * @summary RemoveGroupFromCustomer
     * @param {string} customerId The ID of the customer to remove from the group.
     * @param {string} groupId The ID of the customer group to remove the customer from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeGroupFromCustomer(customerId: string, groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveGroupFromCustomerResponse>>;
    /**
     * Returns details for a single customer.
     * @summary RetrieveCustomer
     * @param {string} customerId The ID of the customer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCustomer(customerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveCustomerResponse>>;
    /**
     * Searches the customer profiles associated with a Square account using a supported query filter.  Calling `SearchCustomers` without any explicit query filter returns all customer profiles ordered alphabetically based on `given_name` and `family_name`.  Under normal operating conditions, newly created or updated customer profiles become available for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @summary SearchCustomers
     * @param {SearchCustomersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCustomers(body: SearchCustomersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchCustomersResponse>>;
    /**
     * Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to update merged profiles.  You cannot edit a customer\'s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-Customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-Customers-createcustomercard) endpoint.
     * @summary UpdateCustomer
     * @param {string} customerId The ID of the customer to update.
     * @param {UpdateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(customerId: string, body: UpdateCustomerRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerResponse>>;
};
/**
 * CustomersApi - factory interface
 * @export
 */
export declare const CustomersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a group membership to a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
     * @summary AddGroupToCustomer
     * @param {string} customerId The ID of the customer to add to a group.
     * @param {string} groupId The ID of the customer group to add the customer to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGroupToCustomer(customerId: string, groupId: string, options?: any): AxiosPromise<AddGroupToCustomerResponse>;
    /**
     * Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`
     * @summary CreateCustomer
     * @param {CreateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(body: CreateCustomerRequest, options?: any): AxiosPromise<CreateCustomerResponse>;
    /**
     * Adds a card on file to an existing customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
     * @summary CreateCustomerCard
     * @param {string} customerId The Square ID of the customer profile the card is linked to.
     * @param {CreateCustomerCardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerCard(customerId: string, body: CreateCustomerCardRequest, options?: any): AxiosPromise<CreateCustomerCardResponse>;
    /**
     * Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to delete merged profiles.
     * @summary DeleteCustomer
     * @param {string} customerId The ID of the customer to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer(customerId: string, options?: any): AxiosPromise<DeleteCustomerResponse>;
    /**
     * Removes a card on file from a customer.
     * @summary DeleteCustomerCard
     * @param {string} customerId The ID of the customer that the card on file belongs to.
     * @param {string} cardId The ID of the card on file to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerCard(customerId: string, cardId: string, options?: any): AxiosPromise<DeleteCustomerCardResponse>;
    /**
     * Lists customer profiles associated with a Square account.  Under normal operating conditions, newly created or updated customer profiles become available for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @summary ListCustomers
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {string} [sortField] Indicates how Customers should be sorted.  Default: &#x60;DEFAULT&#x60;.
     * @param {string} [sortOrder] Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order.  Default: &#x60;ASC&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomers(cursor?: string, sortField?: string, sortOrder?: string, options?: any): AxiosPromise<ListCustomersResponse>;
    /**
     * Removes a group membership from a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
     * @summary RemoveGroupFromCustomer
     * @param {string} customerId The ID of the customer to remove from the group.
     * @param {string} groupId The ID of the customer group to remove the customer from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeGroupFromCustomer(customerId: string, groupId: string, options?: any): AxiosPromise<RemoveGroupFromCustomerResponse>;
    /**
     * Returns details for a single customer.
     * @summary RetrieveCustomer
     * @param {string} customerId The ID of the customer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCustomer(customerId: string, options?: any): AxiosPromise<RetrieveCustomerResponse>;
    /**
     * Searches the customer profiles associated with a Square account using a supported query filter.  Calling `SearchCustomers` without any explicit query filter returns all customer profiles ordered alphabetically based on `given_name` and `family_name`.  Under normal operating conditions, newly created or updated customer profiles become available for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @summary SearchCustomers
     * @param {SearchCustomersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCustomers(body: SearchCustomersRequest, options?: any): AxiosPromise<SearchCustomersResponse>;
    /**
     * Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to update merged profiles.  You cannot edit a customer\'s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-Customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-Customers-createcustomercard) endpoint.
     * @summary UpdateCustomer
     * @param {string} customerId The ID of the customer to update.
     * @param {UpdateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(customerId: string, body: UpdateCustomerRequest, options?: any): AxiosPromise<UpdateCustomerResponse>;
};
/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export declare class CustomersApi extends BaseAPI {
    /**
     * Adds a group membership to a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
     * @summary AddGroupToCustomer
     * @param {string} customerId The ID of the customer to add to a group.
     * @param {string} groupId The ID of the customer group to add the customer to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    addGroupToCustomer(customerId: string, groupId: string, options?: any): Promise<import("axios").AxiosResponse<AddGroupToCustomerResponse>>;
    /**
     * Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`
     * @summary CreateCustomer
     * @param {CreateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    createCustomer(body: CreateCustomerRequest, options?: any): Promise<import("axios").AxiosResponse<CreateCustomerResponse>>;
    /**
     * Adds a card on file to an existing customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
     * @summary CreateCustomerCard
     * @param {string} customerId The Square ID of the customer profile the card is linked to.
     * @param {CreateCustomerCardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    createCustomerCard(customerId: string, body: CreateCustomerCardRequest, options?: any): Promise<import("axios").AxiosResponse<CreateCustomerCardResponse>>;
    /**
     * Deletes a customer from a business, along with any linked cards on file. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to delete merged profiles.
     * @summary DeleteCustomer
     * @param {string} customerId The ID of the customer to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    deleteCustomer(customerId: string, options?: any): Promise<import("axios").AxiosResponse<DeleteCustomerResponse>>;
    /**
     * Removes a card on file from a customer.
     * @summary DeleteCustomerCard
     * @param {string} customerId The ID of the customer that the card on file belongs to.
     * @param {string} cardId The ID of the card on file to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    deleteCustomerCard(customerId: string, cardId: string, options?: any): Promise<import("axios").AxiosResponse<DeleteCustomerCardResponse>>;
    /**
     * Lists customer profiles associated with a Square account.  Under normal operating conditions, newly created or updated customer profiles become available for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @summary ListCustomers
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {string} [sortField] Indicates how Customers should be sorted.  Default: &#x60;DEFAULT&#x60;.
     * @param {string} [sortOrder] Indicates whether Customers should be sorted in ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order.  Default: &#x60;ASC&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    listCustomers(cursor?: string, sortField?: string, sortOrder?: string, options?: any): Promise<import("axios").AxiosResponse<ListCustomersResponse>>;
    /**
     * Removes a group membership from a customer.   The customer is identified by the `customer_id` value  and the customer group is identified by the `group_id` value.
     * @summary RemoveGroupFromCustomer
     * @param {string} customerId The ID of the customer to remove from the group.
     * @param {string} groupId The ID of the customer group to remove the customer from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    removeGroupFromCustomer(customerId: string, groupId: string, options?: any): Promise<import("axios").AxiosResponse<RemoveGroupFromCustomerResponse>>;
    /**
     * Returns details for a single customer.
     * @summary RetrieveCustomer
     * @param {string} customerId The ID of the customer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    retrieveCustomer(customerId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveCustomerResponse>>;
    /**
     * Searches the customer profiles associated with a Square account using a supported query filter.  Calling `SearchCustomers` without any explicit query filter returns all customer profiles ordered alphabetically based on `given_name` and `family_name`.  Under normal operating conditions, newly created or updated customer profiles become available for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @summary SearchCustomers
     * @param {SearchCustomersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    searchCustomers(body: SearchCustomersRequest, options?: any): Promise<import("axios").AxiosResponse<SearchCustomersResponse>>;
    /**
     * Updates the details of an existing customer. When two profiles are merged into a single profile, that profile is assigned a new `customer_id`. You must use the new `customer_id` to update merged profiles.  You cannot edit a customer\'s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-Customers-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-Customers-createcustomercard) endpoint.
     * @summary UpdateCustomer
     * @param {string} customerId The ID of the customer to update.
     * @param {UpdateCustomerRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    updateCustomer(customerId: string, body: UpdateCustomerRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateCustomerResponse>>;
}
/**
 * DevicesApi - axios parameter creator
 * @export
 */
export declare const DevicesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
     * @summary CreateDeviceCode
     * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceCode: (body: CreateDeviceCodeRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves DeviceCode with the associated ID.
     * @summary GetDeviceCode
     * @param {string} id The unique identifier for the device code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeviceCode: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all DeviceCodes associated with the merchant.
     * @summary ListDeviceCodes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
     * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
     * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDeviceCodes: (cursor?: string, locationId?: string, productType?: string, status?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * DevicesApi - functional programming interface
 * @export
 */
export declare const DevicesApiFp: (configuration?: Configuration) => {
    /**
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
     * @summary CreateDeviceCode
     * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceCode(body: CreateDeviceCodeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDeviceCodeResponse>>;
    /**
     * Retrieves DeviceCode with the associated ID.
     * @summary GetDeviceCode
     * @param {string} id The unique identifier for the device code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeviceCode(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeviceCodeResponse>>;
    /**
     * Lists all DeviceCodes associated with the merchant.
     * @summary ListDeviceCodes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
     * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
     * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDeviceCodes(cursor?: string, locationId?: string, productType?: string, status?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDeviceCodesResponse>>;
};
/**
 * DevicesApi - factory interface
 * @export
 */
export declare const DevicesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
     * @summary CreateDeviceCode
     * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceCode(body: CreateDeviceCodeRequest, options?: any): AxiosPromise<CreateDeviceCodeResponse>;
    /**
     * Retrieves DeviceCode with the associated ID.
     * @summary GetDeviceCode
     * @param {string} id The unique identifier for the device code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeviceCode(id: string, options?: any): AxiosPromise<GetDeviceCodeResponse>;
    /**
     * Lists all DeviceCodes associated with the merchant.
     * @summary ListDeviceCodes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
     * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
     * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDeviceCodes(cursor?: string, locationId?: string, productType?: string, status?: string, options?: any): AxiosPromise<ListDeviceCodesResponse>;
};
/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export declare class DevicesApi extends BaseAPI {
    /**
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
     * @summary CreateDeviceCode
     * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    createDeviceCode(body: CreateDeviceCodeRequest, options?: any): Promise<import("axios").AxiosResponse<CreateDeviceCodeResponse>>;
    /**
     * Retrieves DeviceCode with the associated ID.
     * @summary GetDeviceCode
     * @param {string} id The unique identifier for the device code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    getDeviceCode(id: string, options?: any): Promise<import("axios").AxiosResponse<GetDeviceCodeResponse>>;
    /**
     * Lists all DeviceCodes associated with the merchant.
     * @summary ListDeviceCodes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
     * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
     * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    listDeviceCodes(cursor?: string, locationId?: string, productType?: string, status?: string, options?: any): Promise<import("axios").AxiosResponse<ListDeviceCodesResponse>>;
}
/**
 * DisputesApi - axios parameter creator
 * @export
 */
export declare const DisputesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the sellerâ€™s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
     * @summary AcceptDispute
     * @param {string} disputeId ID of the dispute you want to accept.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptDispute: (disputeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Uploads text to use as evidence for a dispute challenge.
     * @summary CreateDisputeEvidenceText
     * @param {string} disputeId The ID of the dispute you want to upload evidence for.
     * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDisputeEvidenceText: (disputeId: string, body: CreateDisputeEvidenceTextRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of evidence associated with a dispute.
     * @summary ListDisputeEvidence
     * @param {string} disputeId The ID of the dispute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputeEvidence: (disputeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of disputes associated with a particular account.
     * @summary ListDisputes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
     * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputes: (cursor?: string, states?: string, locationId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
     * @summary RemoveDisputeEvidence
     * @param {string} disputeId The ID of the dispute you want to remove evidence from.
     * @param {string} evidenceId The ID of the evidence you want to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDisputeEvidence: (disputeId: string, evidenceId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns details of a specific dispute.
     * @summary RetrieveDispute
     * @param {string} disputeId The ID of the dispute you want more details about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDispute: (disputeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @summary RetrieveDisputeEvidence
     * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
     * @param {string} evidenceId The ID of the evidence to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDisputeEvidence: (disputeId: string, evidenceId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
     * @summary SubmitEvidence
     * @param {string} disputeId The ID of the dispute you want to submit evidence for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitEvidence: (disputeId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * DisputesApi - functional programming interface
 * @export
 */
export declare const DisputesApiFp: (configuration?: Configuration) => {
    /**
     * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the sellerâ€™s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
     * @summary AcceptDispute
     * @param {string} disputeId ID of the dispute you want to accept.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptDispute(disputeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcceptDisputeResponse>>;
    /**
     * Uploads text to use as evidence for a dispute challenge.
     * @summary CreateDisputeEvidenceText
     * @param {string} disputeId The ID of the dispute you want to upload evidence for.
     * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDisputeEvidenceText(disputeId: string, body: CreateDisputeEvidenceTextRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDisputeEvidenceTextResponse>>;
    /**
     * Returns a list of evidence associated with a dispute.
     * @summary ListDisputeEvidence
     * @param {string} disputeId The ID of the dispute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputeEvidence(disputeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDisputeEvidenceResponse>>;
    /**
     * Returns a list of disputes associated with a particular account.
     * @summary ListDisputes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
     * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputes(cursor?: string, states?: string, locationId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDisputesResponse>>;
    /**
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
     * @summary RemoveDisputeEvidence
     * @param {string} disputeId The ID of the dispute you want to remove evidence from.
     * @param {string} evidenceId The ID of the evidence you want to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDisputeEvidence(disputeId: string, evidenceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveDisputeEvidenceResponse>>;
    /**
     * Returns details of a specific dispute.
     * @summary RetrieveDispute
     * @param {string} disputeId The ID of the dispute you want more details about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDispute(disputeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveDisputeResponse>>;
    /**
     * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @summary RetrieveDisputeEvidence
     * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
     * @param {string} evidenceId The ID of the evidence to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDisputeEvidence(disputeId: string, evidenceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveDisputeEvidenceResponse>>;
    /**
     * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
     * @summary SubmitEvidence
     * @param {string} disputeId The ID of the dispute you want to submit evidence for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitEvidence(disputeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitEvidenceResponse>>;
};
/**
 * DisputesApi - factory interface
 * @export
 */
export declare const DisputesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the sellerâ€™s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
     * @summary AcceptDispute
     * @param {string} disputeId ID of the dispute you want to accept.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptDispute(disputeId: string, options?: any): AxiosPromise<AcceptDisputeResponse>;
    /**
     * Uploads text to use as evidence for a dispute challenge.
     * @summary CreateDisputeEvidenceText
     * @param {string} disputeId The ID of the dispute you want to upload evidence for.
     * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDisputeEvidenceText(disputeId: string, body: CreateDisputeEvidenceTextRequest, options?: any): AxiosPromise<CreateDisputeEvidenceTextResponse>;
    /**
     * Returns a list of evidence associated with a dispute.
     * @summary ListDisputeEvidence
     * @param {string} disputeId The ID of the dispute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputeEvidence(disputeId: string, options?: any): AxiosPromise<ListDisputeEvidenceResponse>;
    /**
     * Returns a list of disputes associated with a particular account.
     * @summary ListDisputes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
     * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputes(cursor?: string, states?: string, locationId?: string, options?: any): AxiosPromise<ListDisputesResponse>;
    /**
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
     * @summary RemoveDisputeEvidence
     * @param {string} disputeId The ID of the dispute you want to remove evidence from.
     * @param {string} evidenceId The ID of the evidence you want to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDisputeEvidence(disputeId: string, evidenceId: string, options?: any): AxiosPromise<RemoveDisputeEvidenceResponse>;
    /**
     * Returns details of a specific dispute.
     * @summary RetrieveDispute
     * @param {string} disputeId The ID of the dispute you want more details about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDispute(disputeId: string, options?: any): AxiosPromise<RetrieveDisputeResponse>;
    /**
     * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @summary RetrieveDisputeEvidence
     * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
     * @param {string} evidenceId The ID of the evidence to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDisputeEvidence(disputeId: string, evidenceId: string, options?: any): AxiosPromise<RetrieveDisputeEvidenceResponse>;
    /**
     * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
     * @summary SubmitEvidence
     * @param {string} disputeId The ID of the dispute you want to submit evidence for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitEvidence(disputeId: string, options?: any): AxiosPromise<SubmitEvidenceResponse>;
};
/**
 * DisputesApi - object-oriented interface
 * @export
 * @class DisputesApi
 * @extends {BaseAPI}
 */
export declare class DisputesApi extends BaseAPI {
    /**
     * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the sellerâ€™s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
     * @summary AcceptDispute
     * @param {string} disputeId ID of the dispute you want to accept.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    acceptDispute(disputeId: string, options?: any): Promise<import("axios").AxiosResponse<AcceptDisputeResponse>>;
    /**
     * Uploads text to use as evidence for a dispute challenge.
     * @summary CreateDisputeEvidenceText
     * @param {string} disputeId The ID of the dispute you want to upload evidence for.
     * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    createDisputeEvidenceText(disputeId: string, body: CreateDisputeEvidenceTextRequest, options?: any): Promise<import("axios").AxiosResponse<CreateDisputeEvidenceTextResponse>>;
    /**
     * Returns a list of evidence associated with a dispute.
     * @summary ListDisputeEvidence
     * @param {string} disputeId The ID of the dispute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    listDisputeEvidence(disputeId: string, options?: any): Promise<import("axios").AxiosResponse<ListDisputeEvidenceResponse>>;
    /**
     * Returns a list of disputes associated with a particular account.
     * @summary ListDisputes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
     * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    listDisputes(cursor?: string, states?: string, locationId?: string, options?: any): Promise<import("axios").AxiosResponse<ListDisputesResponse>>;
    /**
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
     * @summary RemoveDisputeEvidence
     * @param {string} disputeId The ID of the dispute you want to remove evidence from.
     * @param {string} evidenceId The ID of the evidence you want to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    removeDisputeEvidence(disputeId: string, evidenceId: string, options?: any): Promise<import("axios").AxiosResponse<RemoveDisputeEvidenceResponse>>;
    /**
     * Returns details of a specific dispute.
     * @summary RetrieveDispute
     * @param {string} disputeId The ID of the dispute you want more details about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    retrieveDispute(disputeId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveDisputeResponse>>;
    /**
     * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @summary RetrieveDisputeEvidence
     * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
     * @param {string} evidenceId The ID of the evidence to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    retrieveDisputeEvidence(disputeId: string, evidenceId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveDisputeEvidenceResponse>>;
    /**
     * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
     * @summary SubmitEvidence
     * @param {string} disputeId The ID of the dispute you want to submit evidence for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    submitEvidence(disputeId: string, options?: any): Promise<import("axios").AxiosResponse<SubmitEvidenceResponse>>;
}
/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export declare const EmployeesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary ListEmployees
     * @param {string} [locationId]
     * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {number} [limit] The number of employees to be returned on each page.
     * @param {string} [cursor] The token required to retrieve the specified page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees: (locationId?: string, status?: string, limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary RetrieveEmployee
     * @param {string} id UUID for the employee that was requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee: (id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * EmployeesApi - functional programming interface
 * @export
 */
export declare const EmployeesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary ListEmployees
     * @param {string} [locationId]
     * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {number} [limit] The number of employees to be returned on each page.
     * @param {string} [cursor] The token required to retrieve the specified page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees(locationId?: string, status?: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEmployeesResponse>>;
    /**
     *
     * @summary RetrieveEmployee
     * @param {string} id UUID for the employee that was requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveEmployeeResponse>>;
};
/**
 * EmployeesApi - factory interface
 * @export
 */
export declare const EmployeesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary ListEmployees
     * @param {string} [locationId]
     * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {number} [limit] The number of employees to be returned on each page.
     * @param {string} [cursor] The token required to retrieve the specified page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees(locationId?: string, status?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListEmployeesResponse>;
    /**
     *
     * @summary RetrieveEmployee
     * @param {string} id UUID for the employee that was requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee(id: string, options?: any): AxiosPromise<RetrieveEmployeeResponse>;
};
/**
 * EmployeesApi - object-oriented interface
 * @export
 * @class EmployeesApi
 * @extends {BaseAPI}
 */
export declare class EmployeesApi extends BaseAPI {
    /**
     *
     * @summary ListEmployees
     * @param {string} [locationId]
     * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {number} [limit] The number of employees to be returned on each page.
     * @param {string} [cursor] The token required to retrieve the specified page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    listEmployees(locationId?: string, status?: string, limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListEmployeesResponse>>;
    /**
     *
     * @summary RetrieveEmployee
     * @param {string} id UUID for the employee that was requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    retrieveEmployee(id: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveEmployeeResponse>>;
}
/**
 * InventoryApi - axios parameter creator
 * @export
 */
export declare const InventoryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
     * @summary BatchChangeInventory
     * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchChangeInventory: (body: BatchChangeInventoryRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
     * @summary BatchRetrieveInventoryChanges
     * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveInventoryChanges: (body: BatchRetrieveInventoryChangesRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
     * @summary BatchRetrieveInventoryCounts
     * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveInventoryCounts: (body: BatchRetrieveInventoryCountsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
     * @summary RetrieveInventoryAdjustment
     * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryAdjustment: (adjustmentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryChanges
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryChanges: (catalogObjectId: string, locationIds?: string, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryCount
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryCount: (catalogObjectId: string, locationIds?: string, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
     * @summary RetrieveInventoryPhysicalCount
     * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryPhysicalCount: (physicalCountId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * InventoryApi - functional programming interface
 * @export
 */
export declare const InventoryApiFp: (configuration?: Configuration) => {
    /**
     * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
     * @summary BatchChangeInventory
     * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchChangeInventory(body: BatchChangeInventoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchChangeInventoryResponse>>;
    /**
     * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
     * @summary BatchRetrieveInventoryChanges
     * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveInventoryChanges(body: BatchRetrieveInventoryChangesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchRetrieveInventoryChangesResponse>>;
    /**
     * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
     * @summary BatchRetrieveInventoryCounts
     * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveInventoryCounts(body: BatchRetrieveInventoryCountsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchRetrieveInventoryCountsResponse>>;
    /**
     * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
     * @summary RetrieveInventoryAdjustment
     * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryAdjustment(adjustmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveInventoryAdjustmentResponse>>;
    /**
     * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryChanges
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryChanges(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveInventoryChangesResponse>>;
    /**
     * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryCount
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryCount(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveInventoryCountResponse>>;
    /**
     * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
     * @summary RetrieveInventoryPhysicalCount
     * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryPhysicalCount(physicalCountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveInventoryPhysicalCountResponse>>;
};
/**
 * InventoryApi - factory interface
 * @export
 */
export declare const InventoryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
     * @summary BatchChangeInventory
     * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchChangeInventory(body: BatchChangeInventoryRequest, options?: any): AxiosPromise<BatchChangeInventoryResponse>;
    /**
     * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
     * @summary BatchRetrieveInventoryChanges
     * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveInventoryChanges(body: BatchRetrieveInventoryChangesRequest, options?: any): AxiosPromise<BatchRetrieveInventoryChangesResponse>;
    /**
     * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
     * @summary BatchRetrieveInventoryCounts
     * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveInventoryCounts(body: BatchRetrieveInventoryCountsRequest, options?: any): AxiosPromise<BatchRetrieveInventoryCountsResponse>;
    /**
     * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
     * @summary RetrieveInventoryAdjustment
     * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryAdjustment(adjustmentId: string, options?: any): AxiosPromise<RetrieveInventoryAdjustmentResponse>;
    /**
     * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryChanges
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryChanges(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any): AxiosPromise<RetrieveInventoryChangesResponse>;
    /**
     * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryCount
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryCount(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any): AxiosPromise<RetrieveInventoryCountResponse>;
    /**
     * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
     * @summary RetrieveInventoryPhysicalCount
     * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveInventoryPhysicalCount(physicalCountId: string, options?: any): AxiosPromise<RetrieveInventoryPhysicalCountResponse>;
};
/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
export declare class InventoryApi extends BaseAPI {
    /**
     * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
     * @summary BatchChangeInventory
     * @param {BatchChangeInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    batchChangeInventory(body: BatchChangeInventoryRequest, options?: any): Promise<import("axios").AxiosResponse<BatchChangeInventoryResponse>>;
    /**
     * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their `occurred_at` timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
     * @summary BatchRetrieveInventoryChanges
     * @param {BatchRetrieveInventoryChangesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    batchRetrieveInventoryChanges(body: BatchRetrieveInventoryChangesRequest, options?: any): Promise<import("axios").AxiosResponse<BatchRetrieveInventoryChangesResponse>>;
    /**
     * Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `calculated_at` timestamp (newest first).  When `updated_after` is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \"sync\" operation, for example in response to receiving a Webhook notification.
     * @summary BatchRetrieveInventoryCounts
     * @param {BatchRetrieveInventoryCountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    batchRetrieveInventoryCounts(body: BatchRetrieveInventoryCountsRequest, options?: any): Promise<import("axios").AxiosResponse<BatchRetrieveInventoryCountsResponse>>;
    /**
     * Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided `adjustment_id`.
     * @summary RetrieveInventoryAdjustment
     * @param {string} adjustmentId ID of the &#x60;InventoryAdjustment&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    retrieveInventoryAdjustment(adjustmentId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveInventoryAdjustmentResponse>>;
    /**
     * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their `occurred_at` timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryChanges
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    retrieveInventoryChanges(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveInventoryChangesResponse>>;
    /**
     * Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
     * @summary RetrieveInventoryCount
     * @param {string} catalogObjectId ID of the &#x60;CatalogObject&#x60; to retrieve.
     * @param {string} [locationIds] The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination) guide for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    retrieveInventoryCount(catalogObjectId: string, locationIds?: string, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveInventoryCountResponse>>;
    /**
     * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided `physical_count_id`.
     * @summary RetrieveInventoryPhysicalCount
     * @param {string} physicalCountId ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    retrieveInventoryPhysicalCount(physicalCountId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveInventoryPhysicalCountResponse>>;
}
/**
 * InvoicesApi - axios parameter creator
 * @export
 */
export declare const InvoicesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
     * @summary CancelInvoice
     * @param {string} invoiceId The ID of the &#x60;invoice&#x60; to cancel.
     * @param {CancelInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelInvoice: (invoiceId: string, body: CancelInvoiceRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a draft [invoice](#type-invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer\'s email address or charge the customerâ€™s card on file).
     * @summary CreateInvoice
     * @param {CreateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoice: (body: CreateInvoiceRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes the specified invoice. When an invoice is deleted, the  associated Order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete an invoice scheduled for publication, or a  published invoice).
     * @summary DeleteInvoice
     * @param {string} invoiceId The ID of the invoice to delete.
     * @param {number} [version] The version of the &#x60;invoice&#x60; to delete. If you do not know the version, you can call &#x60;GetInvoice&#x60; or  &#x60;ListInvoices&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoice: (invoiceId: string, version?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves an invoice by invoice ID.
     * @summary GetInvoice
     * @param {string} invoiceId The id of the invoice to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice: (invoiceId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a `cursor` that you     use in a subsequent request to fetch the next set of invoices.
     * @summary ListInvoices
     * @param {string} locationId The ID of the location for which to list invoices.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {number} [limit] The maximum number of invoices to return (200 is the maximum &#x60;limit&#x60;).  If not provided, the server  uses a default limit of 100 invoices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvoices: (locationId: string, cursor?: string, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer\'s email address, charges the customer\'s card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice `status` also changes from `DRAFT` to a status  based on the invoice configuration. For example, the status changes to `UNPAID` if  Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the  invoice amount).
     * @summary PublishInvoice
     * @param {string} invoiceId The id of the invoice to publish.
     * @param {PublishInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishInvoice: (invoiceId: string, body: PublishInvoiceRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a `cursor`  that you use in a subsequent request to fetch the next set of invoices.
     * @summary SearchInvoices
     * @param {SearchInvoicesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchInvoices: (body: SearchInvoicesRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates an invoice by modifying field values, clearing field values, or both  as specified in the request.  There are no restrictions to updating an invoice in a draft state.  However, there are guidelines for updating a published invoice.
     * @summary UpdateInvoice
     * @param {string} invoiceId The id of the invoice to update.
     * @param {UpdateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInvoice: (invoiceId: string, body: UpdateInvoiceRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * InvoicesApi - functional programming interface
 * @export
 */
export declare const InvoicesApiFp: (configuration?: Configuration) => {
    /**
     * Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
     * @summary CancelInvoice
     * @param {string} invoiceId The ID of the &#x60;invoice&#x60; to cancel.
     * @param {CancelInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelInvoice(invoiceId: string, body: CancelInvoiceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelInvoiceResponse>>;
    /**
     * Creates a draft [invoice](#type-invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer\'s email address or charge the customerâ€™s card on file).
     * @summary CreateInvoice
     * @param {CreateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoice(body: CreateInvoiceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateInvoiceResponse>>;
    /**
     * Deletes the specified invoice. When an invoice is deleted, the  associated Order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete an invoice scheduled for publication, or a  published invoice).
     * @summary DeleteInvoice
     * @param {string} invoiceId The ID of the invoice to delete.
     * @param {number} [version] The version of the &#x60;invoice&#x60; to delete. If you do not know the version, you can call &#x60;GetInvoice&#x60; or  &#x60;ListInvoices&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoice(invoiceId: string, version?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteInvoiceResponse>>;
    /**
     * Retrieves an invoice by invoice ID.
     * @summary GetInvoice
     * @param {string} invoiceId The id of the invoice to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice(invoiceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvoiceResponse>>;
    /**
     * Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a `cursor` that you     use in a subsequent request to fetch the next set of invoices.
     * @summary ListInvoices
     * @param {string} locationId The ID of the location for which to list invoices.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {number} [limit] The maximum number of invoices to return (200 is the maximum &#x60;limit&#x60;).  If not provided, the server  uses a default limit of 100 invoices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvoices(locationId: string, cursor?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInvoicesResponse>>;
    /**
     * Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer\'s email address, charges the customer\'s card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice `status` also changes from `DRAFT` to a status  based on the invoice configuration. For example, the status changes to `UNPAID` if  Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the  invoice amount).
     * @summary PublishInvoice
     * @param {string} invoiceId The id of the invoice to publish.
     * @param {PublishInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishInvoice(invoiceId: string, body: PublishInvoiceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishInvoiceResponse>>;
    /**
     * Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a `cursor`  that you use in a subsequent request to fetch the next set of invoices.
     * @summary SearchInvoices
     * @param {SearchInvoicesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchInvoices(body: SearchInvoicesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchInvoicesResponse>>;
    /**
     * Updates an invoice by modifying field values, clearing field values, or both  as specified in the request.  There are no restrictions to updating an invoice in a draft state.  However, there are guidelines for updating a published invoice.
     * @summary UpdateInvoice
     * @param {string} invoiceId The id of the invoice to update.
     * @param {UpdateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInvoice(invoiceId: string, body: UpdateInvoiceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateInvoiceResponse>>;
};
/**
 * InvoicesApi - factory interface
 * @export
 */
export declare const InvoicesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
     * @summary CancelInvoice
     * @param {string} invoiceId The ID of the &#x60;invoice&#x60; to cancel.
     * @param {CancelInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelInvoice(invoiceId: string, body: CancelInvoiceRequest, options?: any): AxiosPromise<CancelInvoiceResponse>;
    /**
     * Creates a draft [invoice](#type-invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer\'s email address or charge the customerâ€™s card on file).
     * @summary CreateInvoice
     * @param {CreateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoice(body: CreateInvoiceRequest, options?: any): AxiosPromise<CreateInvoiceResponse>;
    /**
     * Deletes the specified invoice. When an invoice is deleted, the  associated Order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete an invoice scheduled for publication, or a  published invoice).
     * @summary DeleteInvoice
     * @param {string} invoiceId The ID of the invoice to delete.
     * @param {number} [version] The version of the &#x60;invoice&#x60; to delete. If you do not know the version, you can call &#x60;GetInvoice&#x60; or  &#x60;ListInvoices&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoice(invoiceId: string, version?: number, options?: any): AxiosPromise<DeleteInvoiceResponse>;
    /**
     * Retrieves an invoice by invoice ID.
     * @summary GetInvoice
     * @param {string} invoiceId The id of the invoice to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice(invoiceId: string, options?: any): AxiosPromise<GetInvoiceResponse>;
    /**
     * Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a `cursor` that you     use in a subsequent request to fetch the next set of invoices.
     * @summary ListInvoices
     * @param {string} locationId The ID of the location for which to list invoices.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {number} [limit] The maximum number of invoices to return (200 is the maximum &#x60;limit&#x60;).  If not provided, the server  uses a default limit of 100 invoices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvoices(locationId: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListInvoicesResponse>;
    /**
     * Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer\'s email address, charges the customer\'s card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice `status` also changes from `DRAFT` to a status  based on the invoice configuration. For example, the status changes to `UNPAID` if  Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the  invoice amount).
     * @summary PublishInvoice
     * @param {string} invoiceId The id of the invoice to publish.
     * @param {PublishInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishInvoice(invoiceId: string, body: PublishInvoiceRequest, options?: any): AxiosPromise<PublishInvoiceResponse>;
    /**
     * Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a `cursor`  that you use in a subsequent request to fetch the next set of invoices.
     * @summary SearchInvoices
     * @param {SearchInvoicesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchInvoices(body: SearchInvoicesRequest, options?: any): AxiosPromise<SearchInvoicesResponse>;
    /**
     * Updates an invoice by modifying field values, clearing field values, or both  as specified in the request.  There are no restrictions to updating an invoice in a draft state.  However, there are guidelines for updating a published invoice.
     * @summary UpdateInvoice
     * @param {string} invoiceId The id of the invoice to update.
     * @param {UpdateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInvoice(invoiceId: string, body: UpdateInvoiceRequest, options?: any): AxiosPromise<UpdateInvoiceResponse>;
};
/**
 * InvoicesApi - object-oriented interface
 * @export
 * @class InvoicesApi
 * @extends {BaseAPI}
 */
export declare class InvoicesApi extends BaseAPI {
    /**
     * Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
     * @summary CancelInvoice
     * @param {string} invoiceId The ID of the &#x60;invoice&#x60; to cancel.
     * @param {CancelInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    cancelInvoice(invoiceId: string, body: CancelInvoiceRequest, options?: any): Promise<import("axios").AxiosResponse<CancelInvoiceResponse>>;
    /**
     * Creates a draft [invoice](#type-invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer\'s email address or charge the customerâ€™s card on file).
     * @summary CreateInvoice
     * @param {CreateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    createInvoice(body: CreateInvoiceRequest, options?: any): Promise<import("axios").AxiosResponse<CreateInvoiceResponse>>;
    /**
     * Deletes the specified invoice. When an invoice is deleted, the  associated Order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete an invoice scheduled for publication, or a  published invoice).
     * @summary DeleteInvoice
     * @param {string} invoiceId The ID of the invoice to delete.
     * @param {number} [version] The version of the &#x60;invoice&#x60; to delete. If you do not know the version, you can call &#x60;GetInvoice&#x60; or  &#x60;ListInvoices&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    deleteInvoice(invoiceId: string, version?: number, options?: any): Promise<import("axios").AxiosResponse<DeleteInvoiceResponse>>;
    /**
     * Retrieves an invoice by invoice ID.
     * @summary GetInvoice
     * @param {string} invoiceId The id of the invoice to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    getInvoice(invoiceId: string, options?: any): Promise<import("axios").AxiosResponse<GetInvoiceResponse>>;
    /**
     * Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a `cursor` that you     use in a subsequent request to fetch the next set of invoices.
     * @summary ListInvoices
     * @param {string} locationId The ID of the location for which to list invoices.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {number} [limit] The maximum number of invoices to return (200 is the maximum &#x60;limit&#x60;).  If not provided, the server  uses a default limit of 100 invoices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    listInvoices(locationId: string, cursor?: string, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ListInvoicesResponse>>;
    /**
     * Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer\'s email address, charges the customer\'s card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice `status` also changes from `DRAFT` to a status  based on the invoice configuration. For example, the status changes to `UNPAID` if  Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the  invoice amount).
     * @summary PublishInvoice
     * @param {string} invoiceId The id of the invoice to publish.
     * @param {PublishInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    publishInvoice(invoiceId: string, body: PublishInvoiceRequest, options?: any): Promise<import("axios").AxiosResponse<PublishInvoiceResponse>>;
    /**
     * Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a `cursor`  that you use in a subsequent request to fetch the next set of invoices.
     * @summary SearchInvoices
     * @param {SearchInvoicesRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    searchInvoices(body: SearchInvoicesRequest, options?: any): Promise<import("axios").AxiosResponse<SearchInvoicesResponse>>;
    /**
     * Updates an invoice by modifying field values, clearing field values, or both  as specified in the request.  There are no restrictions to updating an invoice in a draft state.  However, there are guidelines for updating a published invoice.
     * @summary UpdateInvoice
     * @param {string} invoiceId The id of the invoice to update.
     * @param {UpdateInvoiceRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    updateInvoice(invoiceId: string, body: UpdateInvoiceRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateInvoiceResponse>>;
}
/**
 * LaborApi - axios parameter creator
 * @export
 */
export declare const LaborApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     * @summary CreateBreakType
     * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBreakType: (body: CreateBreakTypeRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
     * @summary CreateShift
     * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShift: (body: CreateShiftRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * @summary DeleteBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBreakType: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a `Shift`.
     * @summary DeleteShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShift: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single `BreakType` specified by id.
     * @summary GetBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBreakType: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single `EmployeeWage` specified by id.
     * @summary GetEmployeeWage
     * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeWage: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single `Shift` specified by id.
     * @summary GetShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShift: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single `TeamMemberWage` specified by id.
     * @summary GetTeamMemberWage
     * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeamMemberWage: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of `BreakType` instances for a business.
     * @summary ListBreakTypes
     * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
     * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBreakTypes: (locationId?: string, limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * @summary ListEmployeeWages
     * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
     * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeWages: (employeeId?: string, limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * @summary ListTeamMemberWages
     * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
     * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamMemberWages: (teamMemberId?: string, limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of `WorkweekConfig` instances for a business.
     * @summary ListWorkweekConfigs
     * @param {number} [limit] Maximum number of Workweek Configs to return per page.
     * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkweekConfigs: (limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
     * @summary SearchShifts
     * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchShifts: (body: SearchShiftsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates an existing `BreakType`.
     * @summary UpdateBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
     * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBreakType: (id: string, body: UpdateBreakTypeRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
     * @summary UpdateShift
     * @param {string} id ID of the object being updated.
     * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShift: (id: string, body: UpdateShiftRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a `WorkweekConfig`.
     * @summary UpdateWorkweekConfig
     * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
     * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkweekConfig: (id: string, body: UpdateWorkweekConfigRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * LaborApi - functional programming interface
 * @export
 */
export declare const LaborApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     * @summary CreateBreakType
     * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBreakType(body: CreateBreakTypeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBreakTypeResponse>>;
    /**
     * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
     * @summary CreateShift
     * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShift(body: CreateShiftRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShiftResponse>>;
    /**
     * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * @summary DeleteBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBreakType(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteBreakTypeResponse>>;
    /**
     * Deletes a `Shift`.
     * @summary DeleteShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShift(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteShiftResponse>>;
    /**
     * Returns a single `BreakType` specified by id.
     * @summary GetBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBreakType(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBreakTypeResponse>>;
    /**
     * Returns a single `EmployeeWage` specified by id.
     * @summary GetEmployeeWage
     * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeWage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmployeeWageResponse>>;
    /**
     * Returns a single `Shift` specified by id.
     * @summary GetShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShift(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShiftResponse>>;
    /**
     * Returns a single `TeamMemberWage` specified by id.
     * @summary GetTeamMemberWage
     * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeamMemberWage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTeamMemberWageResponse>>;
    /**
     * Returns a paginated list of `BreakType` instances for a business.
     * @summary ListBreakTypes
     * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
     * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBreakTypes(locationId?: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBreakTypesResponse>>;
    /**
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * @summary ListEmployeeWages
     * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
     * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeWages(employeeId?: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEmployeeWagesResponse>>;
    /**
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * @summary ListTeamMemberWages
     * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
     * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamMemberWages(teamMemberId?: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTeamMemberWagesResponse>>;
    /**
     * Returns a list of `WorkweekConfig` instances for a business.
     * @summary ListWorkweekConfigs
     * @param {number} [limit] Maximum number of Workweek Configs to return per page.
     * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkweekConfigs(limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkweekConfigsResponse>>;
    /**
     * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
     * @summary SearchShifts
     * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchShifts(body: SearchShiftsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchShiftsResponse>>;
    /**
     * Updates an existing `BreakType`.
     * @summary UpdateBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
     * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBreakType(id: string, body: UpdateBreakTypeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBreakTypeResponse>>;
    /**
     * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
     * @summary UpdateShift
     * @param {string} id ID of the object being updated.
     * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShift(id: string, body: UpdateShiftRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateShiftResponse>>;
    /**
     * Updates a `WorkweekConfig`.
     * @summary UpdateWorkweekConfig
     * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
     * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkweekConfig(id: string, body: UpdateWorkweekConfigRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkweekConfigResponse>>;
};
/**
 * LaborApi - factory interface
 * @export
 */
export declare const LaborApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     * @summary CreateBreakType
     * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBreakType(body: CreateBreakTypeRequest, options?: any): AxiosPromise<CreateBreakTypeResponse>;
    /**
     * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
     * @summary CreateShift
     * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShift(body: CreateShiftRequest, options?: any): AxiosPromise<CreateShiftResponse>;
    /**
     * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * @summary DeleteBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBreakType(id: string, options?: any): AxiosPromise<DeleteBreakTypeResponse>;
    /**
     * Deletes a `Shift`.
     * @summary DeleteShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShift(id: string, options?: any): AxiosPromise<DeleteShiftResponse>;
    /**
     * Returns a single `BreakType` specified by id.
     * @summary GetBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBreakType(id: string, options?: any): AxiosPromise<GetBreakTypeResponse>;
    /**
     * Returns a single `EmployeeWage` specified by id.
     * @summary GetEmployeeWage
     * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeWage(id: string, options?: any): AxiosPromise<GetEmployeeWageResponse>;
    /**
     * Returns a single `Shift` specified by id.
     * @summary GetShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShift(id: string, options?: any): AxiosPromise<GetShiftResponse>;
    /**
     * Returns a single `TeamMemberWage` specified by id.
     * @summary GetTeamMemberWage
     * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeamMemberWage(id: string, options?: any): AxiosPromise<GetTeamMemberWageResponse>;
    /**
     * Returns a paginated list of `BreakType` instances for a business.
     * @summary ListBreakTypes
     * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
     * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBreakTypes(locationId?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListBreakTypesResponse>;
    /**
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * @summary ListEmployeeWages
     * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
     * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeWages(employeeId?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListEmployeeWagesResponse>;
    /**
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * @summary ListTeamMemberWages
     * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
     * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamMemberWages(teamMemberId?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListTeamMemberWagesResponse>;
    /**
     * Returns a list of `WorkweekConfig` instances for a business.
     * @summary ListWorkweekConfigs
     * @param {number} [limit] Maximum number of Workweek Configs to return per page.
     * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkweekConfigs(limit?: number, cursor?: string, options?: any): AxiosPromise<ListWorkweekConfigsResponse>;
    /**
     * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
     * @summary SearchShifts
     * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchShifts(body: SearchShiftsRequest, options?: any): AxiosPromise<SearchShiftsResponse>;
    /**
     * Updates an existing `BreakType`.
     * @summary UpdateBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
     * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBreakType(id: string, body: UpdateBreakTypeRequest, options?: any): AxiosPromise<UpdateBreakTypeResponse>;
    /**
     * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
     * @summary UpdateShift
     * @param {string} id ID of the object being updated.
     * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShift(id: string, body: UpdateShiftRequest, options?: any): AxiosPromise<UpdateShiftResponse>;
    /**
     * Updates a `WorkweekConfig`.
     * @summary UpdateWorkweekConfig
     * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
     * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkweekConfig(id: string, body: UpdateWorkweekConfigRequest, options?: any): AxiosPromise<UpdateWorkweekConfigResponse>;
};
/**
 * LaborApi - object-oriented interface
 * @export
 * @class LaborApi
 * @extends {BaseAPI}
 */
export declare class LaborApi extends BaseAPI {
    /**
     * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     * @summary CreateBreakType
     * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    createBreakType(body: CreateBreakTypeRequest, options?: any): Promise<import("axios").AxiosResponse<CreateBreakTypeResponse>>;
    /**
     * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
     * @summary CreateShift
     * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    createShift(body: CreateShiftRequest, options?: any): Promise<import("axios").AxiosResponse<CreateShiftResponse>>;
    /**
     * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * @summary DeleteBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    deleteBreakType(id: string, options?: any): Promise<import("axios").AxiosResponse<DeleteBreakTypeResponse>>;
    /**
     * Deletes a `Shift`.
     * @summary DeleteShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    deleteShift(id: string, options?: any): Promise<import("axios").AxiosResponse<DeleteShiftResponse>>;
    /**
     * Returns a single `BreakType` specified by id.
     * @summary GetBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    getBreakType(id: string, options?: any): Promise<import("axios").AxiosResponse<GetBreakTypeResponse>>;
    /**
     * Returns a single `EmployeeWage` specified by id.
     * @summary GetEmployeeWage
     * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    getEmployeeWage(id: string, options?: any): Promise<import("axios").AxiosResponse<GetEmployeeWageResponse>>;
    /**
     * Returns a single `Shift` specified by id.
     * @summary GetShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    getShift(id: string, options?: any): Promise<import("axios").AxiosResponse<GetShiftResponse>>;
    /**
     * Returns a single `TeamMemberWage` specified by id.
     * @summary GetTeamMemberWage
     * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    getTeamMemberWage(id: string, options?: any): Promise<import("axios").AxiosResponse<GetTeamMemberWageResponse>>;
    /**
     * Returns a paginated list of `BreakType` instances for a business.
     * @summary ListBreakTypes
     * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
     * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    listBreakTypes(locationId?: string, limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListBreakTypesResponse>>;
    /**
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * @summary ListEmployeeWages
     * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
     * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    listEmployeeWages(employeeId?: string, limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListEmployeeWagesResponse>>;
    /**
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * @summary ListTeamMemberWages
     * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
     * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    listTeamMemberWages(teamMemberId?: string, limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListTeamMemberWagesResponse>>;
    /**
     * Returns a list of `WorkweekConfig` instances for a business.
     * @summary ListWorkweekConfigs
     * @param {number} [limit] Maximum number of Workweek Configs to return per page.
     * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    listWorkweekConfigs(limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListWorkweekConfigsResponse>>;
    /**
     * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
     * @summary SearchShifts
     * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    searchShifts(body: SearchShiftsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchShiftsResponse>>;
    /**
     * Updates an existing `BreakType`.
     * @summary UpdateBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
     * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    updateBreakType(id: string, body: UpdateBreakTypeRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateBreakTypeResponse>>;
    /**
     * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
     * @summary UpdateShift
     * @param {string} id ID of the object being updated.
     * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    updateShift(id: string, body: UpdateShiftRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateShiftResponse>>;
    /**
     * Updates a `WorkweekConfig`.
     * @summary UpdateWorkweekConfig
     * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
     * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    updateWorkweekConfig(id: string, body: UpdateWorkweekConfigRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateWorkweekConfigResponse>>;
}
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export declare const LocationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a location.
     * @summary CreateLocation
     * @param {CreateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation: (body: CreateLocationRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Provides information of all locations of a business.  Many Square API endpoints require a `location_id` parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
     * @summary ListLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLocations: (options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves details of a location. You can specify \"main\"  as the location ID to retrieve details of the  main location.
     * @summary RetrieveLocation
     * @param {string} locationId The ID of the location to retrieve. If you specify the string \&quot;main\&quot;, then the endpoint returns the main location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLocation: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a location.
     * @summary UpdateLocation
     * @param {string} locationId The ID of the location to update.
     * @param {UpdateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation: (locationId: string, body: UpdateLocationRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * LocationsApi - functional programming interface
 * @export
 */
export declare const LocationsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a location.
     * @summary CreateLocation
     * @param {CreateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation(body: CreateLocationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLocationResponse>>;
    /**
     * Provides information of all locations of a business.  Many Square API endpoints require a `location_id` parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
     * @summary ListLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLocations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLocationsResponse>>;
    /**
     * Retrieves details of a location. You can specify \"main\"  as the location ID to retrieve details of the  main location.
     * @summary RetrieveLocation
     * @param {string} locationId The ID of the location to retrieve. If you specify the string \&quot;main\&quot;, then the endpoint returns the main location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLocation(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveLocationResponse>>;
    /**
     * Updates a location.
     * @summary UpdateLocation
     * @param {string} locationId The ID of the location to update.
     * @param {UpdateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation(locationId: string, body: UpdateLocationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateLocationResponse>>;
};
/**
 * LocationsApi - factory interface
 * @export
 */
export declare const LocationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a location.
     * @summary CreateLocation
     * @param {CreateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation(body: CreateLocationRequest, options?: any): AxiosPromise<CreateLocationResponse>;
    /**
     * Provides information of all locations of a business.  Many Square API endpoints require a `location_id` parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
     * @summary ListLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLocations(options?: any): AxiosPromise<ListLocationsResponse>;
    /**
     * Retrieves details of a location. You can specify \"main\"  as the location ID to retrieve details of the  main location.
     * @summary RetrieveLocation
     * @param {string} locationId The ID of the location to retrieve. If you specify the string \&quot;main\&quot;, then the endpoint returns the main location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLocation(locationId: string, options?: any): AxiosPromise<RetrieveLocationResponse>;
    /**
     * Updates a location.
     * @summary UpdateLocation
     * @param {string} locationId The ID of the location to update.
     * @param {UpdateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation(locationId: string, body: UpdateLocationRequest, options?: any): AxiosPromise<UpdateLocationResponse>;
};
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export declare class LocationsApi extends BaseAPI {
    /**
     * Creates a location.
     * @summary CreateLocation
     * @param {CreateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    createLocation(body: CreateLocationRequest, options?: any): Promise<import("axios").AxiosResponse<CreateLocationResponse>>;
    /**
     * Provides information of all locations of a business.  Many Square API endpoints require a `location_id` parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
     * @summary ListLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    listLocations(options?: any): Promise<import("axios").AxiosResponse<ListLocationsResponse>>;
    /**
     * Retrieves details of a location. You can specify \"main\"  as the location ID to retrieve details of the  main location.
     * @summary RetrieveLocation
     * @param {string} locationId The ID of the location to retrieve. If you specify the string \&quot;main\&quot;, then the endpoint returns the main location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    retrieveLocation(locationId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveLocationResponse>>;
    /**
     * Updates a location.
     * @summary UpdateLocation
     * @param {string} locationId The ID of the location to update.
     * @param {UpdateLocationRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    updateLocation(locationId: string, body: UpdateLocationRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateLocationResponse>>;
}
/**
 * LoyaltyApi - axios parameter creator
 * @export
 */
export declare const LoyaltyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
     * @summary AccumulateLoyaltyPoints
     * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
     * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accumulateLoyaltyPoints: (accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
     * @summary AdjustLoyaltyPoints
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
     * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustLoyaltyPoints: (accountId: string, body: AdjustLoyaltyPointsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
     * @summary CalculateLoyaltyPoints
     * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
     * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateLoyaltyPoints: (programId: string, body: CalculateLoyaltyPointsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a loyalty account.
     * @summary CreateLoyaltyAccount
     * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyAccount: (body: CreateLoyaltyAccountRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @summary CreateLoyaltyReward
     * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyReward: (body: CreateLoyaltyRewardRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @summary DeleteLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLoyaltyReward: (rewardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
     * @summary ListLoyaltyPrograms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLoyaltyPrograms: (options?: any) => Promise<RequestArgs>;
    /**
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @summary RedeemLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
     * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemLoyaltyReward: (rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a loyalty account.
     * @summary RetrieveLoyaltyAccount
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyAccount: (accountId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a loyalty reward.
     * @summary RetrieveLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyReward: (rewardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @summary SearchLoyaltyAccounts
     * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyAccounts: (body: SearchLoyaltyAccountsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * @summary SearchLoyaltyEvents
     * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyEvents: (body: SearchLoyaltyEventsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
     * @summary SearchLoyaltyRewards
     * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyRewards: (body: SearchLoyaltyRewardsRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * LoyaltyApi - functional programming interface
 * @export
 */
export declare const LoyaltyApiFp: (configuration?: Configuration) => {
    /**
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
     * @summary AccumulateLoyaltyPoints
     * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
     * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accumulateLoyaltyPoints(accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccumulateLoyaltyPointsResponse>>;
    /**
     * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
     * @summary AdjustLoyaltyPoints
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
     * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustLoyaltyPoints(accountId: string, body: AdjustLoyaltyPointsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdjustLoyaltyPointsResponse>>;
    /**
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
     * @summary CalculateLoyaltyPoints
     * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
     * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateLoyaltyPoints(programId: string, body: CalculateLoyaltyPointsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculateLoyaltyPointsResponse>>;
    /**
     * Creates a loyalty account.
     * @summary CreateLoyaltyAccount
     * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyAccount(body: CreateLoyaltyAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoyaltyAccountResponse>>;
    /**
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @summary CreateLoyaltyReward
     * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyReward(body: CreateLoyaltyRewardRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoyaltyRewardResponse>>;
    /**
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @summary DeleteLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLoyaltyReward(rewardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteLoyaltyRewardResponse>>;
    /**
     * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
     * @summary ListLoyaltyPrograms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLoyaltyPrograms(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLoyaltyProgramsResponse>>;
    /**
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @summary RedeemLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
     * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemLoyaltyReward(rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedeemLoyaltyRewardResponse>>;
    /**
     * Retrieves a loyalty account.
     * @summary RetrieveLoyaltyAccount
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyAccount(accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveLoyaltyAccountResponse>>;
    /**
     * Retrieves a loyalty reward.
     * @summary RetrieveLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyReward(rewardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveLoyaltyRewardResponse>>;
    /**
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @summary SearchLoyaltyAccounts
     * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyAccounts(body: SearchLoyaltyAccountsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLoyaltyAccountsResponse>>;
    /**
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * @summary SearchLoyaltyEvents
     * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyEvents(body: SearchLoyaltyEventsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLoyaltyEventsResponse>>;
    /**
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
     * @summary SearchLoyaltyRewards
     * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyRewards(body: SearchLoyaltyRewardsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLoyaltyRewardsResponse>>;
};
/**
 * LoyaltyApi - factory interface
 * @export
 */
export declare const LoyaltyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
     * @summary AccumulateLoyaltyPoints
     * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
     * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accumulateLoyaltyPoints(accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any): AxiosPromise<AccumulateLoyaltyPointsResponse>;
    /**
     * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
     * @summary AdjustLoyaltyPoints
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
     * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustLoyaltyPoints(accountId: string, body: AdjustLoyaltyPointsRequest, options?: any): AxiosPromise<AdjustLoyaltyPointsResponse>;
    /**
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
     * @summary CalculateLoyaltyPoints
     * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
     * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateLoyaltyPoints(programId: string, body: CalculateLoyaltyPointsRequest, options?: any): AxiosPromise<CalculateLoyaltyPointsResponse>;
    /**
     * Creates a loyalty account.
     * @summary CreateLoyaltyAccount
     * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyAccount(body: CreateLoyaltyAccountRequest, options?: any): AxiosPromise<CreateLoyaltyAccountResponse>;
    /**
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @summary CreateLoyaltyReward
     * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyReward(body: CreateLoyaltyRewardRequest, options?: any): AxiosPromise<CreateLoyaltyRewardResponse>;
    /**
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @summary DeleteLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLoyaltyReward(rewardId: string, options?: any): AxiosPromise<DeleteLoyaltyRewardResponse>;
    /**
     * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
     * @summary ListLoyaltyPrograms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLoyaltyPrograms(options?: any): AxiosPromise<ListLoyaltyProgramsResponse>;
    /**
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @summary RedeemLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
     * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemLoyaltyReward(rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any): AxiosPromise<RedeemLoyaltyRewardResponse>;
    /**
     * Retrieves a loyalty account.
     * @summary RetrieveLoyaltyAccount
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyAccount(accountId: string, options?: any): AxiosPromise<RetrieveLoyaltyAccountResponse>;
    /**
     * Retrieves a loyalty reward.
     * @summary RetrieveLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyReward(rewardId: string, options?: any): AxiosPromise<RetrieveLoyaltyRewardResponse>;
    /**
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @summary SearchLoyaltyAccounts
     * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyAccounts(body: SearchLoyaltyAccountsRequest, options?: any): AxiosPromise<SearchLoyaltyAccountsResponse>;
    /**
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * @summary SearchLoyaltyEvents
     * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyEvents(body: SearchLoyaltyEventsRequest, options?: any): AxiosPromise<SearchLoyaltyEventsResponse>;
    /**
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
     * @summary SearchLoyaltyRewards
     * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyRewards(body: SearchLoyaltyRewardsRequest, options?: any): AxiosPromise<SearchLoyaltyRewardsResponse>;
};
/**
 * LoyaltyApi - object-oriented interface
 * @export
 * @class LoyaltyApi
 * @extends {BaseAPI}
 */
export declare class LoyaltyApi extends BaseAPI {
    /**
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
     * @summary AccumulateLoyaltyPoints
     * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
     * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    accumulateLoyaltyPoints(accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any): Promise<import("axios").AxiosResponse<AccumulateLoyaltyPointsResponse>>;
    /**
     * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
     * @summary AdjustLoyaltyPoints
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
     * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    adjustLoyaltyPoints(accountId: string, body: AdjustLoyaltyPointsRequest, options?: any): Promise<import("axios").AxiosResponse<AdjustLoyaltyPointsResponse>>;
    /**
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
     * @summary CalculateLoyaltyPoints
     * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
     * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    calculateLoyaltyPoints(programId: string, body: CalculateLoyaltyPointsRequest, options?: any): Promise<import("axios").AxiosResponse<CalculateLoyaltyPointsResponse>>;
    /**
     * Creates a loyalty account.
     * @summary CreateLoyaltyAccount
     * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    createLoyaltyAccount(body: CreateLoyaltyAccountRequest, options?: any): Promise<import("axios").AxiosResponse<CreateLoyaltyAccountResponse>>;
    /**
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @summary CreateLoyaltyReward
     * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    createLoyaltyReward(body: CreateLoyaltyRewardRequest, options?: any): Promise<import("axios").AxiosResponse<CreateLoyaltyRewardResponse>>;
    /**
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @summary DeleteLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    deleteLoyaltyReward(rewardId: string, options?: any): Promise<import("axios").AxiosResponse<DeleteLoyaltyRewardResponse>>;
    /**
     * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
     * @summary ListLoyaltyPrograms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    listLoyaltyPrograms(options?: any): Promise<import("axios").AxiosResponse<ListLoyaltyProgramsResponse>>;
    /**
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @summary RedeemLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
     * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    redeemLoyaltyReward(rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any): Promise<import("axios").AxiosResponse<RedeemLoyaltyRewardResponse>>;
    /**
     * Retrieves a loyalty account.
     * @summary RetrieveLoyaltyAccount
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    retrieveLoyaltyAccount(accountId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveLoyaltyAccountResponse>>;
    /**
     * Retrieves a loyalty reward.
     * @summary RetrieveLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    retrieveLoyaltyReward(rewardId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveLoyaltyRewardResponse>>;
    /**
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @summary SearchLoyaltyAccounts
     * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    searchLoyaltyAccounts(body: SearchLoyaltyAccountsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchLoyaltyAccountsResponse>>;
    /**
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * @summary SearchLoyaltyEvents
     * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    searchLoyaltyEvents(body: SearchLoyaltyEventsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchLoyaltyEventsResponse>>;
    /**
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
     * @summary SearchLoyaltyRewards
     * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    searchLoyaltyRewards(body: SearchLoyaltyRewardsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchLoyaltyRewardsResponse>>;
}
/**
 * MerchantsApi - axios parameter creator
 * @export
 */
export declare const MerchantsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns `Merchant` information for a given access token.  If you don\'t know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token. You can specify your personal access token to get your own merchant information or specify an OAuth token to get the information for the  merchant that granted you access.  If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-retrievemerchant) endpoint to get the merchant information.
     * @summary ListMerchants
     * @param {number} [cursor] The cursor generated by the previous response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMerchants: (cursor?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve a `Merchant` object for the given `merchant_id`.
     * @summary RetrieveMerchant
     * @param {string} merchantId The ID of the merchant to retrieve. If the string \&quot;me\&quot; is supplied as the ID, then retrieve the merchant that is currently accessible to this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveMerchant: (merchantId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * MerchantsApi - functional programming interface
 * @export
 */
export declare const MerchantsApiFp: (configuration?: Configuration) => {
    /**
     * Returns `Merchant` information for a given access token.  If you don\'t know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token. You can specify your personal access token to get your own merchant information or specify an OAuth token to get the information for the  merchant that granted you access.  If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-retrievemerchant) endpoint to get the merchant information.
     * @summary ListMerchants
     * @param {number} [cursor] The cursor generated by the previous response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMerchants(cursor?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMerchantsResponse>>;
    /**
     * Retrieve a `Merchant` object for the given `merchant_id`.
     * @summary RetrieveMerchant
     * @param {string} merchantId The ID of the merchant to retrieve. If the string \&quot;me\&quot; is supplied as the ID, then retrieve the merchant that is currently accessible to this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveMerchant(merchantId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveMerchantResponse>>;
};
/**
 * MerchantsApi - factory interface
 * @export
 */
export declare const MerchantsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns `Merchant` information for a given access token.  If you don\'t know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token. You can specify your personal access token to get your own merchant information or specify an OAuth token to get the information for the  merchant that granted you access.  If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-retrievemerchant) endpoint to get the merchant information.
     * @summary ListMerchants
     * @param {number} [cursor] The cursor generated by the previous response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMerchants(cursor?: number, options?: any): AxiosPromise<ListMerchantsResponse>;
    /**
     * Retrieve a `Merchant` object for the given `merchant_id`.
     * @summary RetrieveMerchant
     * @param {string} merchantId The ID of the merchant to retrieve. If the string \&quot;me\&quot; is supplied as the ID, then retrieve the merchant that is currently accessible to this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveMerchant(merchantId: string, options?: any): AxiosPromise<RetrieveMerchantResponse>;
};
/**
 * MerchantsApi - object-oriented interface
 * @export
 * @class MerchantsApi
 * @extends {BaseAPI}
 */
export declare class MerchantsApi extends BaseAPI {
    /**
     * Returns `Merchant` information for a given access token.  If you don\'t know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token. You can specify your personal access token to get your own merchant information or specify an OAuth token to get the information for the  merchant that granted you access.  If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-retrievemerchant) endpoint to get the merchant information.
     * @summary ListMerchants
     * @param {number} [cursor] The cursor generated by the previous response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    listMerchants(cursor?: number, options?: any): Promise<import("axios").AxiosResponse<ListMerchantsResponse>>;
    /**
     * Retrieve a `Merchant` object for the given `merchant_id`.
     * @summary RetrieveMerchant
     * @param {string} merchantId The ID of the merchant to retrieve. If the string \&quot;me\&quot; is supplied as the ID, then retrieve the merchant that is currently accessible to this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    retrieveMerchant(merchantId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveMerchantResponse>>;
}
/**
 * MobileAuthorizationApi - axios parameter creator
 * @export
 */
export declare const MobileAuthorizationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The `Authorization` header you provide to this endpoint must have the following format:  ``` Authorization: Bearer ACCESS_TOKEN ```  Replace `ACCESS_TOKEN` with a [valid production authorization credential](/docs/build-basics/access-tokens).
     * @summary CreateMobileAuthorizationCode
     * @param {CreateMobileAuthorizationCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMobileAuthorizationCode: (body: CreateMobileAuthorizationCodeRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * MobileAuthorizationApi - functional programming interface
 * @export
 */
export declare const MobileAuthorizationApiFp: (configuration?: Configuration) => {
    /**
     * Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The `Authorization` header you provide to this endpoint must have the following format:  ``` Authorization: Bearer ACCESS_TOKEN ```  Replace `ACCESS_TOKEN` with a [valid production authorization credential](/docs/build-basics/access-tokens).
     * @summary CreateMobileAuthorizationCode
     * @param {CreateMobileAuthorizationCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMobileAuthorizationCode(body: CreateMobileAuthorizationCodeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMobileAuthorizationCodeResponse>>;
};
/**
 * MobileAuthorizationApi - factory interface
 * @export
 */
export declare const MobileAuthorizationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The `Authorization` header you provide to this endpoint must have the following format:  ``` Authorization: Bearer ACCESS_TOKEN ```  Replace `ACCESS_TOKEN` with a [valid production authorization credential](/docs/build-basics/access-tokens).
     * @summary CreateMobileAuthorizationCode
     * @param {CreateMobileAuthorizationCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMobileAuthorizationCode(body: CreateMobileAuthorizationCodeRequest, options?: any): AxiosPromise<CreateMobileAuthorizationCodeResponse>;
};
/**
 * MobileAuthorizationApi - object-oriented interface
 * @export
 * @class MobileAuthorizationApi
 * @extends {BaseAPI}
 */
export declare class MobileAuthorizationApi extends BaseAPI {
    /**
     * Generates code to authorize a mobile application to connect to a Square card reader  Authorization codes are one-time-use and expire __60 minutes__ after being issued.  __Important:__ The `Authorization` header you provide to this endpoint must have the following format:  ``` Authorization: Bearer ACCESS_TOKEN ```  Replace `ACCESS_TOKEN` with a [valid production authorization credential](/docs/build-basics/access-tokens).
     * @summary CreateMobileAuthorizationCode
     * @param {CreateMobileAuthorizationCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobileAuthorizationApi
     */
    createMobileAuthorizationCode(body: CreateMobileAuthorizationCodeRequest, options?: any): Promise<import("axios").AxiosResponse<CreateMobileAuthorizationCodeResponse>>;
}
/**
 * OAuthApi - axios parameter creator
 * @export
 */
export declare const OAuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns an OAuth access token.  The endpoint supports distinct methods of obtaining OAuth access tokens. Applications specify a method by adding the `grant_type` parameter in the request and also provide relevant information. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).  __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and a refresh token in the response.  __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
     * @summary ObtainToken
     * @param {ObtainTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    obtainToken: (body: ObtainTokenRequest, options?: any) => Promise<RequestArgs>;
    /**
     * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application\'s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
     * @summary RenewToken
     * @param {string} clientId Your application ID, available from the [application dashboard](https://connect.squareup.com/apps).
     * @param {RenewTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renewToken: (clientId: string, body: RenewTokenRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
     * @summary RevokeToken
     * @param {RevokeTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeToken: (body: RevokeTokenRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * OAuthApi - functional programming interface
 * @export
 */
export declare const OAuthApiFp: (configuration?: Configuration) => {
    /**
     * Returns an OAuth access token.  The endpoint supports distinct methods of obtaining OAuth access tokens. Applications specify a method by adding the `grant_type` parameter in the request and also provide relevant information. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).  __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and a refresh token in the response.  __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
     * @summary ObtainToken
     * @param {ObtainTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    obtainToken(body: ObtainTokenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObtainTokenResponse>>;
    /**
     * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application\'s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
     * @summary RenewToken
     * @param {string} clientId Your application ID, available from the [application dashboard](https://connect.squareup.com/apps).
     * @param {RenewTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renewToken(clientId: string, body: RenewTokenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RenewTokenResponse>>;
    /**
     * Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
     * @summary RevokeToken
     * @param {RevokeTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeToken(body: RevokeTokenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RevokeTokenResponse>>;
};
/**
 * OAuthApi - factory interface
 * @export
 */
export declare const OAuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns an OAuth access token.  The endpoint supports distinct methods of obtaining OAuth access tokens. Applications specify a method by adding the `grant_type` parameter in the request and also provide relevant information. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).  __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and a refresh token in the response.  __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
     * @summary ObtainToken
     * @param {ObtainTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    obtainToken(body: ObtainTokenRequest, options?: any): AxiosPromise<ObtainTokenResponse>;
    /**
     * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application\'s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
     * @summary RenewToken
     * @param {string} clientId Your application ID, available from the [application dashboard](https://connect.squareup.com/apps).
     * @param {RenewTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renewToken(clientId: string, body: RenewTokenRequest, options?: any): AxiosPromise<RenewTokenResponse>;
    /**
     * Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
     * @summary RevokeToken
     * @param {RevokeTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeToken(body: RevokeTokenRequest, options?: any): AxiosPromise<RevokeTokenResponse>;
};
/**
 * OAuthApi - object-oriented interface
 * @export
 * @class OAuthApi
 * @extends {BaseAPI}
 */
export declare class OAuthApi extends BaseAPI {
    /**
     * Returns an OAuth access token.  The endpoint supports distinct methods of obtaining OAuth access tokens. Applications specify a method by adding the `grant_type` parameter in the request and also provide relevant information. For more information, see [OAuth access token management](/authz/oauth/how-it-works#oauth-access-token-management).  __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and a refresh token in the response.  __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
     * @summary ObtainToken
     * @param {ObtainTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    obtainToken(body: ObtainTokenRequest, options?: any): Promise<import("axios").AxiosResponse<ObtainTokenResponse>>;
    /**
     * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application\'s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
     * @summary RenewToken
     * @param {string} clientId Your application ID, available from the [application dashboard](https://connect.squareup.com/apps).
     * @param {RenewTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    renewToken(clientId: string, body: RenewTokenRequest, options?: any): Promise<import("axios").AxiosResponse<RenewTokenResponse>>;
    /**
     * Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [application dashboard](https://connect.squareup.com/apps).
     * @summary RevokeToken
     * @param {RevokeTokenRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    revokeToken(body: RevokeTokenRequest, options?: any): Promise<import("axios").AxiosResponse<RevokeTokenResponse>>;
}
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export declare const OrdersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
     * @summary BatchRetrieveOrders
     * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveOrders: (body: BatchRetrieveOrdersRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Calculates an [Order](#type-order).
     * @summary CalculateOrder
     * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateOrder: (body: CalculateOrderRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
     * @summary CreateOrder
     * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder: (body: CreateOrderRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
     * @summary PayOrder
     * @param {string} orderId The ID of the order being paid.
     * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payOrder: (orderId: string, body: PayOrderRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves an [Order](#type-order) by ID.
     * @summary RetrieveOrder
     * @param {string} orderId The ID of the order to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrder: (orderId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @summary SearchOrders
     * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOrders: (body: SearchOrdersRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
     * @summary UpdateOrder
     * @param {string} orderId The ID of the order to update.
     * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder: (orderId: string, body: UpdateOrderRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
export declare const OrdersApiFp: (configuration?: Configuration) => {
    /**
     * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
     * @summary BatchRetrieveOrders
     * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveOrders(body: BatchRetrieveOrdersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchRetrieveOrdersResponse>>;
    /**
     * Calculates an [Order](#type-order).
     * @summary CalculateOrder
     * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateOrder(body: CalculateOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculateOrderResponse>>;
    /**
     * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
     * @summary CreateOrder
     * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(body: CreateOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrderResponse>>;
    /**
     * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
     * @summary PayOrder
     * @param {string} orderId The ID of the order being paid.
     * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payOrder(orderId: string, body: PayOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayOrderResponse>>;
    /**
     * Retrieves an [Order](#type-order) by ID.
     * @summary RetrieveOrder
     * @param {string} orderId The ID of the order to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrder(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveOrderResponse>>;
    /**
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @summary SearchOrders
     * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOrders(body: SearchOrdersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchOrdersResponse>>;
    /**
     * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
     * @summary UpdateOrder
     * @param {string} orderId The ID of the order to update.
     * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(orderId: string, body: UpdateOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateOrderResponse>>;
};
/**
 * OrdersApi - factory interface
 * @export
 */
export declare const OrdersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
     * @summary BatchRetrieveOrders
     * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveOrders(body: BatchRetrieveOrdersRequest, options?: any): AxiosPromise<BatchRetrieveOrdersResponse>;
    /**
     * Calculates an [Order](#type-order).
     * @summary CalculateOrder
     * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateOrder(body: CalculateOrderRequest, options?: any): AxiosPromise<CalculateOrderResponse>;
    /**
     * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
     * @summary CreateOrder
     * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(body: CreateOrderRequest, options?: any): AxiosPromise<CreateOrderResponse>;
    /**
     * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
     * @summary PayOrder
     * @param {string} orderId The ID of the order being paid.
     * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payOrder(orderId: string, body: PayOrderRequest, options?: any): AxiosPromise<PayOrderResponse>;
    /**
     * Retrieves an [Order](#type-order) by ID.
     * @summary RetrieveOrder
     * @param {string} orderId The ID of the order to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrder(orderId: string, options?: any): AxiosPromise<RetrieveOrderResponse>;
    /**
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @summary SearchOrders
     * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOrders(body: SearchOrdersRequest, options?: any): AxiosPromise<SearchOrdersResponse>;
    /**
     * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
     * @summary UpdateOrder
     * @param {string} orderId The ID of the order to update.
     * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(orderId: string, body: UpdateOrderRequest, options?: any): AxiosPromise<UpdateOrderResponse>;
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export declare class OrdersApi extends BaseAPI {
    /**
     * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
     * @summary BatchRetrieveOrders
     * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    batchRetrieveOrders(body: BatchRetrieveOrdersRequest, options?: any): Promise<import("axios").AxiosResponse<BatchRetrieveOrdersResponse>>;
    /**
     * Calculates an [Order](#type-order).
     * @summary CalculateOrder
     * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    calculateOrder(body: CalculateOrderRequest, options?: any): Promise<import("axios").AxiosResponse<CalculateOrderResponse>>;
    /**
     * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
     * @summary CreateOrder
     * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    createOrder(body: CreateOrderRequest, options?: any): Promise<import("axios").AxiosResponse<CreateOrderResponse>>;
    /**
     * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
     * @summary PayOrder
     * @param {string} orderId The ID of the order being paid.
     * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    payOrder(orderId: string, body: PayOrderRequest, options?: any): Promise<import("axios").AxiosResponse<PayOrderResponse>>;
    /**
     * Retrieves an [Order](#type-order) by ID.
     * @summary RetrieveOrder
     * @param {string} orderId The ID of the order to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    retrieveOrder(orderId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveOrderResponse>>;
    /**
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @summary SearchOrders
     * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    searchOrders(body: SearchOrdersRequest, options?: any): Promise<import("axios").AxiosResponse<SearchOrdersResponse>>;
    /**
     * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
     * @summary UpdateOrder
     * @param {string} orderId The ID of the order to update.
     * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    updateOrder(orderId: string, body: UpdateOrderRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateOrderResponse>>;
}
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export declare const PaymentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancels (voids) a payment. If you set `autocomplete` to `false` when creating a payment,  you can cancel the payment using this endpoint.
     * @summary CancelPayment
     * @param {string} paymentId The &#x60;payment_id&#x60; identifying the payment to be canceled.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPayment: (paymentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Cancels (voids) a payment identified by the idempotency key that is specified in the request.  Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your `CreatePayment` request that you want to cancel. After canceling the payment, you can submit your `CreatePayment` request again.  Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint  returns successfully.
     * @summary CancelPaymentByIdempotencyKey
     * @param {CancelPaymentByIdempotencyKeyRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPaymentByIdempotencyKey: (body: CancelPaymentByIdempotencyKeyRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set `autocomplete` to `false` when creating a payment, you can complete (capture)  the payment using this endpoint.
     * @summary CompletePayment
     * @param {string} paymentId The unique ID identifying the payment to be completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completePayment: (paymentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Charges a payment source (for example, a card  represented by customer\'s card on file or a card nonce). In addition  to the payment source, the request must include the  amount to accept for the payment.  There are several optional parameters that you can include in the request  (for example, tip money, whether to autocomplete the payment, or a reference ID  to correlate this payment with another system).   The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.
     * @summary CreatePayment
     * @param {CreatePaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment: (body: CreatePaymentRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves details for a specific payment.
     * @summary GetPayment
     * @param {string} paymentId A unique ID for the desired payment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment: (paymentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a list of payments taken by the account making the request.  The maximum results per page is 100.
     * @summary ListPayments
     * @param {string} [beginTime] The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
     * @param {string} [endTime] The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.
     * @param {string} [sortOrder] The order in which results are listed: - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default).
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.
     * @param {number} [total] The exact amount in the &#x60;total_money&#x60; for a payment.
     * @param {string} [last4] The last four digits of a payment card.
     * @param {string} [cardBrand] The brand of the payment card (for example, VISA).
     * @param {number} [limit] The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: &#x60;100&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayments: (beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, locationId?: string, total?: number, last4?: string, cardBrand?: string, limit?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * PaymentsApi - functional programming interface
 * @export
 */
export declare const PaymentsApiFp: (configuration?: Configuration) => {
    /**
     * Cancels (voids) a payment. If you set `autocomplete` to `false` when creating a payment,  you can cancel the payment using this endpoint.
     * @summary CancelPayment
     * @param {string} paymentId The &#x60;payment_id&#x60; identifying the payment to be canceled.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPayment(paymentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelPaymentResponse>>;
    /**
     * Cancels (voids) a payment identified by the idempotency key that is specified in the request.  Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your `CreatePayment` request that you want to cancel. After canceling the payment, you can submit your `CreatePayment` request again.  Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint  returns successfully.
     * @summary CancelPaymentByIdempotencyKey
     * @param {CancelPaymentByIdempotencyKeyRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPaymentByIdempotencyKey(body: CancelPaymentByIdempotencyKeyRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelPaymentByIdempotencyKeyResponse>>;
    /**
     * Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set `autocomplete` to `false` when creating a payment, you can complete (capture)  the payment using this endpoint.
     * @summary CompletePayment
     * @param {string} paymentId The unique ID identifying the payment to be completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completePayment(paymentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompletePaymentResponse>>;
    /**
     * Charges a payment source (for example, a card  represented by customer\'s card on file or a card nonce). In addition  to the payment source, the request must include the  amount to accept for the payment.  There are several optional parameters that you can include in the request  (for example, tip money, whether to autocomplete the payment, or a reference ID  to correlate this payment with another system).   The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.
     * @summary CreatePayment
     * @param {CreatePaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment(body: CreatePaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePaymentResponse>>;
    /**
     * Retrieves details for a specific payment.
     * @summary GetPayment
     * @param {string} paymentId A unique ID for the desired payment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(paymentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaymentResponse>>;
    /**
     * Retrieves a list of payments taken by the account making the request.  The maximum results per page is 100.
     * @summary ListPayments
     * @param {string} [beginTime] The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
     * @param {string} [endTime] The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.
     * @param {string} [sortOrder] The order in which results are listed: - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default).
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.
     * @param {number} [total] The exact amount in the &#x60;total_money&#x60; for a payment.
     * @param {string} [last4] The last four digits of a payment card.
     * @param {string} [cardBrand] The brand of the payment card (for example, VISA).
     * @param {number} [limit] The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: &#x60;100&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayments(beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, locationId?: string, total?: number, last4?: string, cardBrand?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPaymentsResponse>>;
};
/**
 * PaymentsApi - factory interface
 * @export
 */
export declare const PaymentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancels (voids) a payment. If you set `autocomplete` to `false` when creating a payment,  you can cancel the payment using this endpoint.
     * @summary CancelPayment
     * @param {string} paymentId The &#x60;payment_id&#x60; identifying the payment to be canceled.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPayment(paymentId: string, options?: any): AxiosPromise<CancelPaymentResponse>;
    /**
     * Cancels (voids) a payment identified by the idempotency key that is specified in the request.  Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your `CreatePayment` request that you want to cancel. After canceling the payment, you can submit your `CreatePayment` request again.  Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint  returns successfully.
     * @summary CancelPaymentByIdempotencyKey
     * @param {CancelPaymentByIdempotencyKeyRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPaymentByIdempotencyKey(body: CancelPaymentByIdempotencyKeyRequest, options?: any): AxiosPromise<CancelPaymentByIdempotencyKeyResponse>;
    /**
     * Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set `autocomplete` to `false` when creating a payment, you can complete (capture)  the payment using this endpoint.
     * @summary CompletePayment
     * @param {string} paymentId The unique ID identifying the payment to be completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completePayment(paymentId: string, options?: any): AxiosPromise<CompletePaymentResponse>;
    /**
     * Charges a payment source (for example, a card  represented by customer\'s card on file or a card nonce). In addition  to the payment source, the request must include the  amount to accept for the payment.  There are several optional parameters that you can include in the request  (for example, tip money, whether to autocomplete the payment, or a reference ID  to correlate this payment with another system).   The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.
     * @summary CreatePayment
     * @param {CreatePaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment(body: CreatePaymentRequest, options?: any): AxiosPromise<CreatePaymentResponse>;
    /**
     * Retrieves details for a specific payment.
     * @summary GetPayment
     * @param {string} paymentId A unique ID for the desired payment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(paymentId: string, options?: any): AxiosPromise<GetPaymentResponse>;
    /**
     * Retrieves a list of payments taken by the account making the request.  The maximum results per page is 100.
     * @summary ListPayments
     * @param {string} [beginTime] The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
     * @param {string} [endTime] The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.
     * @param {string} [sortOrder] The order in which results are listed: - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default).
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.
     * @param {number} [total] The exact amount in the &#x60;total_money&#x60; for a payment.
     * @param {string} [last4] The last four digits of a payment card.
     * @param {string} [cardBrand] The brand of the payment card (for example, VISA).
     * @param {number} [limit] The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: &#x60;100&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayments(beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, locationId?: string, total?: number, last4?: string, cardBrand?: string, limit?: number, options?: any): AxiosPromise<ListPaymentsResponse>;
};
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export declare class PaymentsApi extends BaseAPI {
    /**
     * Cancels (voids) a payment. If you set `autocomplete` to `false` when creating a payment,  you can cancel the payment using this endpoint.
     * @summary CancelPayment
     * @param {string} paymentId The &#x60;payment_id&#x60; identifying the payment to be canceled.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    cancelPayment(paymentId: string, options?: any): Promise<import("axios").AxiosResponse<CancelPaymentResponse>>;
    /**
     * Cancels (voids) a payment identified by the idempotency key that is specified in the request.  Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your `CreatePayment` request that you want to cancel. After canceling the payment, you can submit your `CreatePayment` request again.  Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint  returns successfully.
     * @summary CancelPaymentByIdempotencyKey
     * @param {CancelPaymentByIdempotencyKeyRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    cancelPaymentByIdempotencyKey(body: CancelPaymentByIdempotencyKeyRequest, options?: any): Promise<import("axios").AxiosResponse<CancelPaymentByIdempotencyKeyResponse>>;
    /**
     * Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set `autocomplete` to `false` when creating a payment, you can complete (capture)  the payment using this endpoint.
     * @summary CompletePayment
     * @param {string} paymentId The unique ID identifying the payment to be completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    completePayment(paymentId: string, options?: any): Promise<import("axios").AxiosResponse<CompletePaymentResponse>>;
    /**
     * Charges a payment source (for example, a card  represented by customer\'s card on file or a card nonce). In addition  to the payment source, the request must include the  amount to accept for the payment.  There are several optional parameters that you can include in the request  (for example, tip money, whether to autocomplete the payment, or a reference ID  to correlate this payment with another system).   The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.
     * @summary CreatePayment
     * @param {CreatePaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    createPayment(body: CreatePaymentRequest, options?: any): Promise<import("axios").AxiosResponse<CreatePaymentResponse>>;
    /**
     * Retrieves details for a specific payment.
     * @summary GetPayment
     * @param {string} paymentId A unique ID for the desired payment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    getPayment(paymentId: string, options?: any): Promise<import("axios").AxiosResponse<GetPaymentResponse>>;
    /**
     * Retrieves a list of payments taken by the account making the request.  The maximum results per page is 100.
     * @summary ListPayments
     * @param {string} [beginTime] The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
     * @param {string} [endTime] The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.
     * @param {string} [sortOrder] The order in which results are listed: - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default).
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.
     * @param {number} [total] The exact amount in the &#x60;total_money&#x60; for a payment.
     * @param {string} [last4] The last four digits of a payment card.
     * @param {string} [cardBrand] The brand of the payment card (for example, VISA).
     * @param {number} [limit] The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: &#x60;100&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    listPayments(beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, locationId?: string, total?: number, last4?: string, cardBrand?: string, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ListPaymentsResponse>>;
}
/**
 * RefundsApi - axios parameter creator
 * @export
 */
export declare const RefundsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieves a specific refund using the `refund_id`.
     * @summary GetPaymentRefund
     * @param {string} refundId Unique ID for the desired &#x60;PaymentRefund&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentRefund: (refundId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a list of refunds for the account making the request.  The maximum results per page is 100.
     * @summary ListPaymentRefunds
     * @param {string} [beginTime] Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.
     * @param {string} [endTime] Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
     * @param {string} [sortOrder] The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default).
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for all locations associated with the merchant.
     * @param {string} [status] If provided, only refunds with the given status are returned. For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status.
     * @param {string} [sourceType] If provided, only refunds with the given source type are returned. - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment source.  Default: If omitted refunds are returned regardless of source type.
     * @param {number} [limit] Maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, at most 100 results will be returned.  Default: &#x60;100&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPaymentRefunds: (beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, locationId?: string, status?: string, sourceType?: string, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Refunds a payment. You can refund the entire payment amount or a  portion of it.
     * @summary RefundPayment
     * @param {RefundPaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPayment: (body: RefundPaymentRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * RefundsApi - functional programming interface
 * @export
 */
export declare const RefundsApiFp: (configuration?: Configuration) => {
    /**
     * Retrieves a specific refund using the `refund_id`.
     * @summary GetPaymentRefund
     * @param {string} refundId Unique ID for the desired &#x60;PaymentRefund&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentRefund(refundId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaymentRefundResponse>>;
    /**
     * Retrieves a list of refunds for the account making the request.  The maximum results per page is 100.
     * @summary ListPaymentRefunds
     * @param {string} [beginTime] Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.
     * @param {string} [endTime] Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
     * @param {string} [sortOrder] The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default).
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for all locations associated with the merchant.
     * @param {string} [status] If provided, only refunds with the given status are returned. For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status.
     * @param {string} [sourceType] If provided, only refunds with the given source type are returned. - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment source.  Default: If omitted refunds are returned regardless of source type.
     * @param {number} [limit] Maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, at most 100 results will be returned.  Default: &#x60;100&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPaymentRefunds(beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, locationId?: string, status?: string, sourceType?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPaymentRefundsResponse>>;
    /**
     * Refunds a payment. You can refund the entire payment amount or a  portion of it.
     * @summary RefundPayment
     * @param {RefundPaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPayment(body: RefundPaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundPaymentResponse>>;
};
/**
 * RefundsApi - factory interface
 * @export
 */
export declare const RefundsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieves a specific refund using the `refund_id`.
     * @summary GetPaymentRefund
     * @param {string} refundId Unique ID for the desired &#x60;PaymentRefund&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentRefund(refundId: string, options?: any): AxiosPromise<GetPaymentRefundResponse>;
    /**
     * Retrieves a list of refunds for the account making the request.  The maximum results per page is 100.
     * @summary ListPaymentRefunds
     * @param {string} [beginTime] Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.
     * @param {string} [endTime] Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
     * @param {string} [sortOrder] The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default).
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for all locations associated with the merchant.
     * @param {string} [status] If provided, only refunds with the given status are returned. For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status.
     * @param {string} [sourceType] If provided, only refunds with the given source type are returned. - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment source.  Default: If omitted refunds are returned regardless of source type.
     * @param {number} [limit] Maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, at most 100 results will be returned.  Default: &#x60;100&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPaymentRefunds(beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, locationId?: string, status?: string, sourceType?: string, limit?: number, options?: any): AxiosPromise<ListPaymentRefundsResponse>;
    /**
     * Refunds a payment. You can refund the entire payment amount or a  portion of it.
     * @summary RefundPayment
     * @param {RefundPaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPayment(body: RefundPaymentRequest, options?: any): AxiosPromise<RefundPaymentResponse>;
};
/**
 * RefundsApi - object-oriented interface
 * @export
 * @class RefundsApi
 * @extends {BaseAPI}
 */
export declare class RefundsApi extends BaseAPI {
    /**
     * Retrieves a specific refund using the `refund_id`.
     * @summary GetPaymentRefund
     * @param {string} refundId Unique ID for the desired &#x60;PaymentRefund&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    getPaymentRefund(refundId: string, options?: any): Promise<import("axios").AxiosResponse<GetPaymentRefundResponse>>;
    /**
     * Retrieves a list of refunds for the account making the request.  The maximum results per page is 100.
     * @summary ListPaymentRefunds
     * @param {string} [beginTime] Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.
     * @param {string} [endTime] Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
     * @param {string} [sortOrder] The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default).
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {string} [locationId] Limit results to the location supplied. By default, results are returned for all locations associated with the merchant.
     * @param {string} [status] If provided, only refunds with the given status are returned. For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status.
     * @param {string} [sourceType] If provided, only refunds with the given source type are returned. - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment source.  Default: If omitted refunds are returned regardless of source type.
     * @param {number} [limit] Maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, at most 100 results will be returned.  Default: &#x60;100&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    listPaymentRefunds(beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, locationId?: string, status?: string, sourceType?: string, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ListPaymentRefundsResponse>>;
    /**
     * Refunds a payment. You can refund the entire payment amount or a  portion of it.
     * @summary RefundPayment
     * @param {RefundPaymentRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    refundPayment(body: RefundPaymentRequest, options?: any): Promise<import("axios").AxiosResponse<RefundPaymentResponse>>;
}
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
export declare const SubscriptionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Sets the `canceled_date` field to the end of the active billing period. After this date, the status changes from ACTIVE to CANCELED.
     * @summary CancelSubscription
     * @param {string} subscriptionId The ID of the subscription to cancel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelSubscription: (subscriptionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a subscription for a customer to a subscription plan.  If you provide a card on file in the request, Square charges the card for  the subscription. Otherwise, Square bills an invoice to the customer\'s email  address. The subscription starts immediately, unless the request includes  the optional `start_date`. Each individual subscription is associated with a particular location.
     * @summary CreateSubscription
     * @param {CreateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription: (body: CreateSubscriptionRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all events for a specific subscription. In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
     * @summary ListSubscriptionEvents
     * @param {string} subscriptionId The ID of the subscription to retrieve the events for.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {number} [limit] The upper limit on the number of subscription events to return  in the response.   Default: &#x60;200&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSubscriptionEvents: (subscriptionId: string, cursor?: string, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a subscription.
     * @summary RetrieveSubscription
     * @param {string} subscriptionId The ID of the subscription to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveSubscription: (subscriptionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Searches for subscriptions.  Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID,  the endpoint orders the result  by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify `customer_ids` to search by customer.  If left unset, all customers  associated with the specified locations are returned.  If the request specifies customer IDs, the endpoint orders results  first by location, within location by customer ID, and within  customer by subscription creation date.  For more information, see  [Retrieve subscriptions](/docs/subscriptions-api/overview#retrieve-subscriptions).
     * @summary SearchSubscriptions
     * @param {SearchSubscriptionsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSubscriptions: (body: SearchSubscriptionsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a subscription. You can set, modify, and clear the  `subscription` field values.
     * @summary UpdateSubscription
     * @param {string} subscriptionId The ID for the subscription to update.
     * @param {UpdateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscription: (subscriptionId: string, body: UpdateSubscriptionRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export declare const SubscriptionsApiFp: (configuration?: Configuration) => {
    /**
     * Sets the `canceled_date` field to the end of the active billing period. After this date, the status changes from ACTIVE to CANCELED.
     * @summary CancelSubscription
     * @param {string} subscriptionId The ID of the subscription to cancel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelSubscription(subscriptionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelSubscriptionResponse>>;
    /**
     * Creates a subscription for a customer to a subscription plan.  If you provide a card on file in the request, Square charges the card for  the subscription. Otherwise, Square bills an invoice to the customer\'s email  address. The subscription starts immediately, unless the request includes  the optional `start_date`. Each individual subscription is associated with a particular location.
     * @summary CreateSubscription
     * @param {CreateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription(body: CreateSubscriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubscriptionResponse>>;
    /**
     * Lists all events for a specific subscription. In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
     * @summary ListSubscriptionEvents
     * @param {string} subscriptionId The ID of the subscription to retrieve the events for.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {number} [limit] The upper limit on the number of subscription events to return  in the response.   Default: &#x60;200&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSubscriptionEvents(subscriptionId: string, cursor?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSubscriptionEventsResponse>>;
    /**
     * Retrieves a subscription.
     * @summary RetrieveSubscription
     * @param {string} subscriptionId The ID of the subscription to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveSubscription(subscriptionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveSubscriptionResponse>>;
    /**
     * Searches for subscriptions.  Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID,  the endpoint orders the result  by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify `customer_ids` to search by customer.  If left unset, all customers  associated with the specified locations are returned.  If the request specifies customer IDs, the endpoint orders results  first by location, within location by customer ID, and within  customer by subscription creation date.  For more information, see  [Retrieve subscriptions](/docs/subscriptions-api/overview#retrieve-subscriptions).
     * @summary SearchSubscriptions
     * @param {SearchSubscriptionsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSubscriptions(body: SearchSubscriptionsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchSubscriptionsResponse>>;
    /**
     * Updates a subscription. You can set, modify, and clear the  `subscription` field values.
     * @summary UpdateSubscription
     * @param {string} subscriptionId The ID for the subscription to update.
     * @param {UpdateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscription(subscriptionId: string, body: UpdateSubscriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateSubscriptionResponse>>;
};
/**
 * SubscriptionsApi - factory interface
 * @export
 */
export declare const SubscriptionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Sets the `canceled_date` field to the end of the active billing period. After this date, the status changes from ACTIVE to CANCELED.
     * @summary CancelSubscription
     * @param {string} subscriptionId The ID of the subscription to cancel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelSubscription(subscriptionId: string, options?: any): AxiosPromise<CancelSubscriptionResponse>;
    /**
     * Creates a subscription for a customer to a subscription plan.  If you provide a card on file in the request, Square charges the card for  the subscription. Otherwise, Square bills an invoice to the customer\'s email  address. The subscription starts immediately, unless the request includes  the optional `start_date`. Each individual subscription is associated with a particular location.
     * @summary CreateSubscription
     * @param {CreateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription(body: CreateSubscriptionRequest, options?: any): AxiosPromise<CreateSubscriptionResponse>;
    /**
     * Lists all events for a specific subscription. In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
     * @summary ListSubscriptionEvents
     * @param {string} subscriptionId The ID of the subscription to retrieve the events for.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {number} [limit] The upper limit on the number of subscription events to return  in the response.   Default: &#x60;200&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSubscriptionEvents(subscriptionId: string, cursor?: string, limit?: number, options?: any): AxiosPromise<ListSubscriptionEventsResponse>;
    /**
     * Retrieves a subscription.
     * @summary RetrieveSubscription
     * @param {string} subscriptionId The ID of the subscription to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveSubscription(subscriptionId: string, options?: any): AxiosPromise<RetrieveSubscriptionResponse>;
    /**
     * Searches for subscriptions.  Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID,  the endpoint orders the result  by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify `customer_ids` to search by customer.  If left unset, all customers  associated with the specified locations are returned.  If the request specifies customer IDs, the endpoint orders results  first by location, within location by customer ID, and within  customer by subscription creation date.  For more information, see  [Retrieve subscriptions](/docs/subscriptions-api/overview#retrieve-subscriptions).
     * @summary SearchSubscriptions
     * @param {SearchSubscriptionsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSubscriptions(body: SearchSubscriptionsRequest, options?: any): AxiosPromise<SearchSubscriptionsResponse>;
    /**
     * Updates a subscription. You can set, modify, and clear the  `subscription` field values.
     * @summary UpdateSubscription
     * @param {string} subscriptionId The ID for the subscription to update.
     * @param {UpdateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscription(subscriptionId: string, body: UpdateSubscriptionRequest, options?: any): AxiosPromise<UpdateSubscriptionResponse>;
};
/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
export declare class SubscriptionsApi extends BaseAPI {
    /**
     * Sets the `canceled_date` field to the end of the active billing period. After this date, the status changes from ACTIVE to CANCELED.
     * @summary CancelSubscription
     * @param {string} subscriptionId The ID of the subscription to cancel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    cancelSubscription(subscriptionId: string, options?: any): Promise<import("axios").AxiosResponse<CancelSubscriptionResponse>>;
    /**
     * Creates a subscription for a customer to a subscription plan.  If you provide a card on file in the request, Square charges the card for  the subscription. Otherwise, Square bills an invoice to the customer\'s email  address. The subscription starts immediately, unless the request includes  the optional `start_date`. Each individual subscription is associated with a particular location.
     * @summary CreateSubscription
     * @param {CreateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    createSubscription(body: CreateSubscriptionRequest, options?: any): Promise<import("axios").AxiosResponse<CreateSubscriptionResponse>>;
    /**
     * Lists all events for a specific subscription. In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
     * @summary ListSubscriptionEvents
     * @param {string} subscriptionId The ID of the subscription to retrieve the events for.
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {number} [limit] The upper limit on the number of subscription events to return  in the response.   Default: &#x60;200&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    listSubscriptionEvents(subscriptionId: string, cursor?: string, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ListSubscriptionEventsResponse>>;
    /**
     * Retrieves a subscription.
     * @summary RetrieveSubscription
     * @param {string} subscriptionId The ID of the subscription to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    retrieveSubscription(subscriptionId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveSubscriptionResponse>>;
    /**
     * Searches for subscriptions.  Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID,  the endpoint orders the result  by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify `customer_ids` to search by customer.  If left unset, all customers  associated with the specified locations are returned.  If the request specifies customer IDs, the endpoint orders results  first by location, within location by customer ID, and within  customer by subscription creation date.  For more information, see  [Retrieve subscriptions](/docs/subscriptions-api/overview#retrieve-subscriptions).
     * @summary SearchSubscriptions
     * @param {SearchSubscriptionsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    searchSubscriptions(body: SearchSubscriptionsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchSubscriptionsResponse>>;
    /**
     * Updates a subscription. You can set, modify, and clear the  `subscription` field values.
     * @summary UpdateSubscription
     * @param {string} subscriptionId The ID for the subscription to update.
     * @param {UpdateSubscriptionRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    updateSubscription(subscriptionId: string, body: UpdateSubscriptionRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateSubscriptionResponse>>;
}
/**
 * TeamApi - axios parameter creator
 * @export
 */
export declare const TeamApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates multiple `TeamMember` objects. The created `TeamMember` objects will be returned on successful creates. This process is non-transactional and will process as much of the request as is possible. If one of the creates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular create.  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkcreateteammembers).
     * @summary BulkCreateTeamMembers
     * @param {BulkCreateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateTeamMembers: (body: BulkCreateTeamMembersRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates multiple `TeamMember` objects. The updated `TeamMember` objects will be returned on successful updates. This process is non-transactional and will process as much of the request as is possible. If one of the updates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkupdateteammembers).
     * @summary BulkUpdateTeamMembers
     * @param {BulkUpdateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUpdateTeamMembers: (body: BulkUpdateTeamMembersRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a single `TeamMember` object. The `TeamMember` will be returned on successful creates. You must provide the following values in your request to this endpoint: - `given_name` - `family_name`  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#createteammember).
     * @summary CreateTeamMember
     * @param {CreateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTeamMember: (body: CreateTeamMemberRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve a `TeamMember` object for the given `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrieveteammember).
     * @summary RetrieveTeamMember
     * @param {string} teamMemberId The ID of the team member to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTeamMember: (teamMemberId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve a `WageSetting` object for a team member specified by `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrievewagesetting).
     * @summary RetrieveWageSetting
     * @param {string} teamMemberId The ID of the team member to retrieve wage setting for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveWageSetting: (teamMemberId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of `TeamMember` objects for a business. The list to be returned can be filtered by: - location IDs **and** - `status`
     * @summary SearchTeamMembers
     * @param {SearchTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTeamMembers: (body: SearchTeamMembersRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a single `TeamMember` object. The `TeamMember` will be returned on successful updates. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updateteammember).
     * @summary UpdateTeamMember
     * @param {string} teamMemberId The ID of the team member to update.
     * @param {UpdateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeamMember: (teamMemberId: string, body: UpdateTeamMemberRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates or updates a `WageSetting` object. The object is created if a `WageSetting` with the specified `team_member_id` does not exist. Otherwise, it fully replaces the `WageSetting` object for the team member. The `WageSetting` will be returned upon successful update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updatewagesetting).
     * @summary UpdateWageSetting
     * @param {string} teamMemberId The ID of the team member to update the &#x60;WageSetting&#x60; object for.
     * @param {UpdateWageSettingRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWageSetting: (teamMemberId: string, body: UpdateWageSettingRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * TeamApi - functional programming interface
 * @export
 */
export declare const TeamApiFp: (configuration?: Configuration) => {
    /**
     * Creates multiple `TeamMember` objects. The created `TeamMember` objects will be returned on successful creates. This process is non-transactional and will process as much of the request as is possible. If one of the creates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular create.  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkcreateteammembers).
     * @summary BulkCreateTeamMembers
     * @param {BulkCreateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateTeamMembers(body: BulkCreateTeamMembersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkCreateTeamMembersResponse>>;
    /**
     * Updates multiple `TeamMember` objects. The updated `TeamMember` objects will be returned on successful updates. This process is non-transactional and will process as much of the request as is possible. If one of the updates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkupdateteammembers).
     * @summary BulkUpdateTeamMembers
     * @param {BulkUpdateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUpdateTeamMembers(body: BulkUpdateTeamMembersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkUpdateTeamMembersResponse>>;
    /**
     * Creates a single `TeamMember` object. The `TeamMember` will be returned on successful creates. You must provide the following values in your request to this endpoint: - `given_name` - `family_name`  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#createteammember).
     * @summary CreateTeamMember
     * @param {CreateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTeamMember(body: CreateTeamMemberRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTeamMemberResponse>>;
    /**
     * Retrieve a `TeamMember` object for the given `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrieveteammember).
     * @summary RetrieveTeamMember
     * @param {string} teamMemberId The ID of the team member to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTeamMember(teamMemberId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveTeamMemberResponse>>;
    /**
     * Retrieve a `WageSetting` object for a team member specified by `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrievewagesetting).
     * @summary RetrieveWageSetting
     * @param {string} teamMemberId The ID of the team member to retrieve wage setting for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveWageSetting(teamMemberId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveWageSettingResponse>>;
    /**
     * Returns a paginated list of `TeamMember` objects for a business. The list to be returned can be filtered by: - location IDs **and** - `status`
     * @summary SearchTeamMembers
     * @param {SearchTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTeamMembers(body: SearchTeamMembersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchTeamMembersResponse>>;
    /**
     * Updates a single `TeamMember` object. The `TeamMember` will be returned on successful updates. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updateteammember).
     * @summary UpdateTeamMember
     * @param {string} teamMemberId The ID of the team member to update.
     * @param {UpdateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeamMember(teamMemberId: string, body: UpdateTeamMemberRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateTeamMemberResponse>>;
    /**
     * Creates or updates a `WageSetting` object. The object is created if a `WageSetting` with the specified `team_member_id` does not exist. Otherwise, it fully replaces the `WageSetting` object for the team member. The `WageSetting` will be returned upon successful update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updatewagesetting).
     * @summary UpdateWageSetting
     * @param {string} teamMemberId The ID of the team member to update the &#x60;WageSetting&#x60; object for.
     * @param {UpdateWageSettingRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWageSetting(teamMemberId: string, body: UpdateWageSettingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWageSettingResponse>>;
};
/**
 * TeamApi - factory interface
 * @export
 */
export declare const TeamApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates multiple `TeamMember` objects. The created `TeamMember` objects will be returned on successful creates. This process is non-transactional and will process as much of the request as is possible. If one of the creates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular create.  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkcreateteammembers).
     * @summary BulkCreateTeamMembers
     * @param {BulkCreateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateTeamMembers(body: BulkCreateTeamMembersRequest, options?: any): AxiosPromise<BulkCreateTeamMembersResponse>;
    /**
     * Updates multiple `TeamMember` objects. The updated `TeamMember` objects will be returned on successful updates. This process is non-transactional and will process as much of the request as is possible. If one of the updates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkupdateteammembers).
     * @summary BulkUpdateTeamMembers
     * @param {BulkUpdateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkUpdateTeamMembers(body: BulkUpdateTeamMembersRequest, options?: any): AxiosPromise<BulkUpdateTeamMembersResponse>;
    /**
     * Creates a single `TeamMember` object. The `TeamMember` will be returned on successful creates. You must provide the following values in your request to this endpoint: - `given_name` - `family_name`  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#createteammember).
     * @summary CreateTeamMember
     * @param {CreateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTeamMember(body: CreateTeamMemberRequest, options?: any): AxiosPromise<CreateTeamMemberResponse>;
    /**
     * Retrieve a `TeamMember` object for the given `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrieveteammember).
     * @summary RetrieveTeamMember
     * @param {string} teamMemberId The ID of the team member to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTeamMember(teamMemberId: string, options?: any): AxiosPromise<RetrieveTeamMemberResponse>;
    /**
     * Retrieve a `WageSetting` object for a team member specified by `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrievewagesetting).
     * @summary RetrieveWageSetting
     * @param {string} teamMemberId The ID of the team member to retrieve wage setting for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveWageSetting(teamMemberId: string, options?: any): AxiosPromise<RetrieveWageSettingResponse>;
    /**
     * Returns a paginated list of `TeamMember` objects for a business. The list to be returned can be filtered by: - location IDs **and** - `status`
     * @summary SearchTeamMembers
     * @param {SearchTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTeamMembers(body: SearchTeamMembersRequest, options?: any): AxiosPromise<SearchTeamMembersResponse>;
    /**
     * Updates a single `TeamMember` object. The `TeamMember` will be returned on successful updates. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updateteammember).
     * @summary UpdateTeamMember
     * @param {string} teamMemberId The ID of the team member to update.
     * @param {UpdateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeamMember(teamMemberId: string, body: UpdateTeamMemberRequest, options?: any): AxiosPromise<UpdateTeamMemberResponse>;
    /**
     * Creates or updates a `WageSetting` object. The object is created if a `WageSetting` with the specified `team_member_id` does not exist. Otherwise, it fully replaces the `WageSetting` object for the team member. The `WageSetting` will be returned upon successful update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updatewagesetting).
     * @summary UpdateWageSetting
     * @param {string} teamMemberId The ID of the team member to update the &#x60;WageSetting&#x60; object for.
     * @param {UpdateWageSettingRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWageSetting(teamMemberId: string, body: UpdateWageSettingRequest, options?: any): AxiosPromise<UpdateWageSettingResponse>;
};
/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export declare class TeamApi extends BaseAPI {
    /**
     * Creates multiple `TeamMember` objects. The created `TeamMember` objects will be returned on successful creates. This process is non-transactional and will process as much of the request as is possible. If one of the creates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular create.  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkcreateteammembers).
     * @summary BulkCreateTeamMembers
     * @param {BulkCreateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    bulkCreateTeamMembers(body: BulkCreateTeamMembersRequest, options?: any): Promise<import("axios").AxiosResponse<BulkCreateTeamMembersResponse>>;
    /**
     * Updates multiple `TeamMember` objects. The updated `TeamMember` objects will be returned on successful updates. This process is non-transactional and will process as much of the request as is possible. If one of the updates in the request cannot be successfully processed, the request will NOT be marked as failed, but the body of the response will contain explicit error information for this particular update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#bulkupdateteammembers).
     * @summary BulkUpdateTeamMembers
     * @param {BulkUpdateTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    bulkUpdateTeamMembers(body: BulkUpdateTeamMembersRequest, options?: any): Promise<import("axios").AxiosResponse<BulkUpdateTeamMembersResponse>>;
    /**
     * Creates a single `TeamMember` object. The `TeamMember` will be returned on successful creates. You must provide the following values in your request to this endpoint: - `given_name` - `family_name`  Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#createteammember).
     * @summary CreateTeamMember
     * @param {CreateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    createTeamMember(body: CreateTeamMemberRequest, options?: any): Promise<import("axios").AxiosResponse<CreateTeamMemberResponse>>;
    /**
     * Retrieve a `TeamMember` object for the given `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrieveteammember).
     * @summary RetrieveTeamMember
     * @param {string} teamMemberId The ID of the team member to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    retrieveTeamMember(teamMemberId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveTeamMemberResponse>>;
    /**
     * Retrieve a `WageSetting` object for a team member specified by `TeamMember.id`. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#retrievewagesetting).
     * @summary RetrieveWageSetting
     * @param {string} teamMemberId The ID of the team member to retrieve wage setting for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    retrieveWageSetting(teamMemberId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveWageSettingResponse>>;
    /**
     * Returns a paginated list of `TeamMember` objects for a business. The list to be returned can be filtered by: - location IDs **and** - `status`
     * @summary SearchTeamMembers
     * @param {SearchTeamMembersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    searchTeamMembers(body: SearchTeamMembersRequest, options?: any): Promise<import("axios").AxiosResponse<SearchTeamMembersResponse>>;
    /**
     * Updates a single `TeamMember` object. The `TeamMember` will be returned on successful updates. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updateteammember).
     * @summary UpdateTeamMember
     * @param {string} teamMemberId The ID of the team member to update.
     * @param {UpdateTeamMemberRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    updateTeamMember(teamMemberId: string, body: UpdateTeamMemberRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateTeamMemberResponse>>;
    /**
     * Creates or updates a `WageSetting` object. The object is created if a `WageSetting` with the specified `team_member_id` does not exist. Otherwise, it fully replaces the `WageSetting` object for the team member. The `WageSetting` will be returned upon successful update. Learn about [Troubleshooting the Teams API](/docs/team/troubleshooting#updatewagesetting).
     * @summary UpdateWageSetting
     * @param {string} teamMemberId The ID of the team member to update the &#x60;WageSetting&#x60; object for.
     * @param {UpdateWageSettingRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    updateWageSetting(teamMemberId: string, body: UpdateWageSettingRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateWageSettingResponse>>;
}
/**
 * TerminalApi - axios parameter creator
 * @export
 */
export declare const TerminalApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @summary CancelTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalCheckout: (checkoutId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
     * @summary CancelTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalRefund: (terminalRefundId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @summary CreateTerminalCheckout
     * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalCheckout: (body: CreateTerminalCheckoutRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @summary CreateTerminalRefund
     * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalRefund: (body: CreateTerminalRefundRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a Terminal checkout request by checkout_id.
     * @summary GetTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalCheckout: (checkoutId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves an Interac terminal refund object by ID.
     * @summary GetTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalRefund: (terminalRefundId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @summary SearchTerminalCheckouts
     * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalCheckouts: (body: SearchTerminalCheckoutsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
     * @summary SearchTerminalRefunds
     * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalRefunds: (body: SearchTerminalRefundsRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * TerminalApi - functional programming interface
 * @export
 */
export declare const TerminalApiFp: (configuration?: Configuration) => {
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @summary CancelTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalCheckout(checkoutId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelTerminalCheckoutResponse>>;
    /**
     * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
     * @summary CancelTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalRefund(terminalRefundId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelTerminalRefundResponse>>;
    /**
     * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @summary CreateTerminalCheckout
     * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalCheckout(body: CreateTerminalCheckoutRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTerminalCheckoutResponse>>;
    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @summary CreateTerminalRefund
     * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalRefund(body: CreateTerminalRefundRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTerminalRefundResponse>>;
    /**
     * Retrieves a Terminal checkout request by checkout_id.
     * @summary GetTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalCheckout(checkoutId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTerminalCheckoutResponse>>;
    /**
     * Retrieves an Interac terminal refund object by ID.
     * @summary GetTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalRefund(terminalRefundId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTerminalRefundResponse>>;
    /**
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @summary SearchTerminalCheckouts
     * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalCheckouts(body: SearchTerminalCheckoutsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchTerminalCheckoutsResponse>>;
    /**
     * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
     * @summary SearchTerminalRefunds
     * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalRefunds(body: SearchTerminalRefundsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchTerminalRefundsResponse>>;
};
/**
 * TerminalApi - factory interface
 * @export
 */
export declare const TerminalApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @summary CancelTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalCheckout(checkoutId: string, options?: any): AxiosPromise<CancelTerminalCheckoutResponse>;
    /**
     * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
     * @summary CancelTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalRefund(terminalRefundId: string, options?: any): AxiosPromise<CancelTerminalRefundResponse>;
    /**
     * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @summary CreateTerminalCheckout
     * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalCheckout(body: CreateTerminalCheckoutRequest, options?: any): AxiosPromise<CreateTerminalCheckoutResponse>;
    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @summary CreateTerminalRefund
     * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalRefund(body: CreateTerminalRefundRequest, options?: any): AxiosPromise<CreateTerminalRefundResponse>;
    /**
     * Retrieves a Terminal checkout request by checkout_id.
     * @summary GetTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalCheckout(checkoutId: string, options?: any): AxiosPromise<GetTerminalCheckoutResponse>;
    /**
     * Retrieves an Interac terminal refund object by ID.
     * @summary GetTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalRefund(terminalRefundId: string, options?: any): AxiosPromise<GetTerminalRefundResponse>;
    /**
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @summary SearchTerminalCheckouts
     * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalCheckouts(body: SearchTerminalCheckoutsRequest, options?: any): AxiosPromise<SearchTerminalCheckoutsResponse>;
    /**
     * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
     * @summary SearchTerminalRefunds
     * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalRefunds(body: SearchTerminalRefundsRequest, options?: any): AxiosPromise<SearchTerminalRefundsResponse>;
};
/**
 * TerminalApi - object-oriented interface
 * @export
 * @class TerminalApi
 * @extends {BaseAPI}
 */
export declare class TerminalApi extends BaseAPI {
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @summary CancelTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    cancelTerminalCheckout(checkoutId: string, options?: any): Promise<import("axios").AxiosResponse<CancelTerminalCheckoutResponse>>;
    /**
     * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
     * @summary CancelTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    cancelTerminalRefund(terminalRefundId: string, options?: any): Promise<import("axios").AxiosResponse<CancelTerminalRefundResponse>>;
    /**
     * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @summary CreateTerminalCheckout
     * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    createTerminalCheckout(body: CreateTerminalCheckoutRequest, options?: any): Promise<import("axios").AxiosResponse<CreateTerminalCheckoutResponse>>;
    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @summary CreateTerminalRefund
     * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    createTerminalRefund(body: CreateTerminalRefundRequest, options?: any): Promise<import("axios").AxiosResponse<CreateTerminalRefundResponse>>;
    /**
     * Retrieves a Terminal checkout request by checkout_id.
     * @summary GetTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    getTerminalCheckout(checkoutId: string, options?: any): Promise<import("axios").AxiosResponse<GetTerminalCheckoutResponse>>;
    /**
     * Retrieves an Interac terminal refund object by ID.
     * @summary GetTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    getTerminalRefund(terminalRefundId: string, options?: any): Promise<import("axios").AxiosResponse<GetTerminalRefundResponse>>;
    /**
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @summary SearchTerminalCheckouts
     * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    searchTerminalCheckouts(body: SearchTerminalCheckoutsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchTerminalCheckoutsResponse>>;
    /**
     * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
     * @summary SearchTerminalRefunds
     * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    searchTerminalRefunds(body: SearchTerminalRefundsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchTerminalRefundsResponse>>;
}
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary CaptureTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureTransaction: (locationId: string, transactionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
     * @summary Charge
     * @param {string} locationId The ID of the location to associate the created transaction with.
     * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    charge: (locationId: string, body: ChargeRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     * @summary CreateRefund
     * @param {string} locationId The ID of the original transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
     * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefund: (locationId: string, transactionId: string, body: CreateRefundRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds: (locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
     * @summary ListTransactions
     * @param {string} locationId The ID of the location to list transactions for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions: (locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves details for a single transaction.
     * @summary RetrieveTransaction
     * @param {string} locationId The ID of the transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTransaction: (locationId: string, transactionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary VoidTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidTransaction: (locationId: string, transactionId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export declare const TransactionsApiFp: (configuration?: Configuration) => {
    /**
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary CaptureTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureTransaction(locationId: string, transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaptureTransactionResponse>>;
    /**
     * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
     * @summary Charge
     * @param {string} locationId The ID of the location to associate the created transaction with.
     * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    charge(locationId: string, body: ChargeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeResponse>>;
    /**
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     * @summary CreateRefund
     * @param {string} locationId The ID of the original transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
     * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefund(locationId: string, transactionId: string, body: CreateRefundRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRefundResponse>>;
    /**
     * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRefundsResponse>>;
    /**
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
     * @summary ListTransactions
     * @param {string} locationId The ID of the location to list transactions for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTransactionsResponse>>;
    /**
     * Retrieves details for a single transaction.
     * @summary RetrieveTransaction
     * @param {string} locationId The ID of the transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTransaction(locationId: string, transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveTransactionResponse>>;
    /**
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary VoidTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidTransaction(locationId: string, transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoidTransactionResponse>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export declare const TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary CaptureTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureTransaction(locationId: string, transactionId: string, options?: any): AxiosPromise<CaptureTransactionResponse>;
    /**
     * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
     * @summary Charge
     * @param {string} locationId The ID of the location to associate the created transaction with.
     * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    charge(locationId: string, body: ChargeRequest, options?: any): AxiosPromise<ChargeResponse>;
    /**
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     * @summary CreateRefund
     * @param {string} locationId The ID of the original transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
     * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefund(locationId: string, transactionId: string, body: CreateRefundRequest, options?: any): AxiosPromise<CreateRefundResponse>;
    /**
     * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): AxiosPromise<ListRefundsResponse>;
    /**
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
     * @summary ListTransactions
     * @param {string} locationId The ID of the location to list transactions for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): AxiosPromise<ListTransactionsResponse>;
    /**
     * Retrieves details for a single transaction.
     * @summary RetrieveTransaction
     * @param {string} locationId The ID of the transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTransaction(locationId: string, transactionId: string, options?: any): AxiosPromise<RetrieveTransactionResponse>;
    /**
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary VoidTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidTransaction(locationId: string, transactionId: string, options?: any): AxiosPromise<VoidTransactionResponse>;
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export declare class TransactionsApi extends BaseAPI {
    /**
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary CaptureTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    captureTransaction(locationId: string, transactionId: string, options?: any): Promise<import("axios").AxiosResponse<CaptureTransactionResponse>>;
    /**
     * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
     * @summary Charge
     * @param {string} locationId The ID of the location to associate the created transaction with.
     * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    charge(locationId: string, body: ChargeRequest, options?: any): Promise<import("axios").AxiosResponse<ChargeResponse>>;
    /**
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     * @summary CreateRefund
     * @param {string} locationId The ID of the original transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
     * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createRefund(locationId: string, transactionId: string, body: CreateRefundRequest, options?: any): Promise<import("axios").AxiosResponse<CreateRefundResponse>>;
    /**
     * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    listRefunds(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListRefundsResponse>>;
    /**
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
     * @summary ListTransactions
     * @param {string} locationId The ID of the location to list transactions for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    listTransactions(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListTransactionsResponse>>;
    /**
     * Retrieves details for a single transaction.
     * @summary RetrieveTransaction
     * @param {string} locationId The ID of the transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    retrieveTransaction(locationId: string, transactionId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveTransactionResponse>>;
    /**
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary VoidTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    voidTransaction(locationId: string, transactionId: string, options?: any): Promise<import("axios").AxiosResponse<VoidTransactionResponse>>;
}
/**
 * V1EmployeesApi - axios parameter creator
 * @export
 */
export declare const V1EmployeesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
     * @summary CreateEmployee
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployee: (body: V1Employee, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     * @summary CreateEmployeeRole
     * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployeeRole: (employeeRole: V1EmployeeRole, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
     * @summary CreateTimecard
     * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTimecard: (body: V1Timecard, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
     * @summary DeleteTimecard
     * @param {string} timecardId The ID of the timecard to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTimecard: (timecardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
     * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShifts: (locationId: string, order?: string, beginTime?: string, endTime?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for all of a business\'s employee roles.
     * @summary ListEmployeeRoles
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeRoles: (order?: string, limit?: number, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for all of a business\'s employees.
     * @summary ListEmployees
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
     * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees: (order?: string, beginUpdatedAt?: string, endUpdatedAt?: string, beginCreatedAt?: string, endCreatedAt?: string, status?: string, externalId?: string, limit?: number, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary ListTimecardEvents
     * @param {string} timecardId The ID of the timecard to list events for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecardEvents: (timecardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for all of a business\'s employee timecards.
     * @summary ListTimecards
     * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
     * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
     * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecards: (order?: string, employeeId?: string, beginClockinTime?: string, endClockinTime?: string, beginClockoutTime?: string, endClockoutTime?: string, beginUpdatedAt?: string, endUpdatedAt?: string, deleted?: boolean, limit?: number, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCashDrawerShift: (locationId: string, shiftId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single employee.
     * @summary RetrieveEmployee
     * @param {string} employeeId The employee\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee: (employeeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single employee role.
     * @summary RetrieveEmployeeRole
     * @param {string} roleId The role\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployeeRole: (roleId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary RetrieveTimecard
     * @param {string} timecardId The timecard\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTimecard: (timecardId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary UpdateEmployee
     * @param {string} employeeId The ID of the role to modify.
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployee: (employeeId: string, body: V1Employee, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an employee role.
     * @summary UpdateEmployeeRole
     * @param {string} roleId The ID of the role to modify.
     * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployeeRole: (roleId: string, body: V1EmployeeRole, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
     * @summary UpdateTimecard
     * @param {string} timecardId TThe ID of the timecard to modify.
     * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTimecard: (timecardId: string, body: V1Timecard, options?: any) => Promise<RequestArgs>;
};
/**
 * V1EmployeesApi - functional programming interface
 * @export
 */
export declare const V1EmployeesApiFp: (configuration?: Configuration) => {
    /**
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
     * @summary CreateEmployee
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployee(body: V1Employee, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Employee>>;
    /**
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     * @summary CreateEmployeeRole
     * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployeeRole(employeeRole: V1EmployeeRole, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1EmployeeRole>>;
    /**
     * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
     * @summary CreateTimecard
     * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTimecard(body: V1Timecard, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Timecard>>;
    /**
     * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
     * @summary DeleteTimecard
     * @param {string} timecardId The ID of the timecard to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTimecard(timecardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
     * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShifts(locationId: string, order?: string, beginTime?: string, endTime?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1CashDrawerShift>>>;
    /**
     * Provides summary information for all of a business\'s employee roles.
     * @summary ListEmployeeRoles
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeRoles(order?: string, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1EmployeeRole>>>;
    /**
     * Provides summary information for all of a business\'s employees.
     * @summary ListEmployees
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
     * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees(order?: string, beginUpdatedAt?: string, endUpdatedAt?: string, beginCreatedAt?: string, endCreatedAt?: string, status?: string, externalId?: string, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Employee>>>;
    /**
     * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary ListTimecardEvents
     * @param {string} timecardId The ID of the timecard to list events for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecardEvents(timecardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1TimecardEvent>>>;
    /**
     * Provides summary information for all of a business\'s employee timecards.
     * @summary ListTimecards
     * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
     * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
     * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecards(order?: string, employeeId?: string, beginClockinTime?: string, endClockinTime?: string, beginClockoutTime?: string, endClockoutTime?: string, beginUpdatedAt?: string, endUpdatedAt?: string, deleted?: boolean, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Timecard>>>;
    /**
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCashDrawerShift(locationId: string, shiftId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CashDrawerShift>>;
    /**
     * Provides the details for a single employee.
     * @summary RetrieveEmployee
     * @param {string} employeeId The employee\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee(employeeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Employee>>;
    /**
     * Provides the details for a single employee role.
     * @summary RetrieveEmployeeRole
     * @param {string} roleId The role\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployeeRole(roleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1EmployeeRole>>;
    /**
     * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary RetrieveTimecard
     * @param {string} timecardId The timecard\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTimecard(timecardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Timecard>>;
    /**
     *
     * @summary UpdateEmployee
     * @param {string} employeeId The ID of the role to modify.
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployee(employeeId: string, body: V1Employee, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Employee>>;
    /**
     * Modifies the details of an employee role.
     * @summary UpdateEmployeeRole
     * @param {string} roleId The ID of the role to modify.
     * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployeeRole(roleId: string, body: V1EmployeeRole, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1EmployeeRole>>;
    /**
     * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
     * @summary UpdateTimecard
     * @param {string} timecardId TThe ID of the timecard to modify.
     * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTimecard(timecardId: string, body: V1Timecard, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Timecard>>;
};
/**
 * V1EmployeesApi - factory interface
 * @export
 */
export declare const V1EmployeesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
     * @summary CreateEmployee
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployee(body: V1Employee, options?: any): AxiosPromise<V1Employee>;
    /**
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     * @summary CreateEmployeeRole
     * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployeeRole(employeeRole: V1EmployeeRole, options?: any): AxiosPromise<V1EmployeeRole>;
    /**
     * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
     * @summary CreateTimecard
     * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTimecard(body: V1Timecard, options?: any): AxiosPromise<V1Timecard>;
    /**
     * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
     * @summary DeleteTimecard
     * @param {string} timecardId The ID of the timecard to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTimecard(timecardId: string, options?: any): AxiosPromise<object>;
    /**
     * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
     * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShifts(locationId: string, order?: string, beginTime?: string, endTime?: string, options?: any): AxiosPromise<Array<V1CashDrawerShift>>;
    /**
     * Provides summary information for all of a business\'s employee roles.
     * @summary ListEmployeeRoles
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeRoles(order?: string, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1EmployeeRole>>;
    /**
     * Provides summary information for all of a business\'s employees.
     * @summary ListEmployees
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
     * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees(order?: string, beginUpdatedAt?: string, endUpdatedAt?: string, beginCreatedAt?: string, endCreatedAt?: string, status?: string, externalId?: string, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1Employee>>;
    /**
     * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary ListTimecardEvents
     * @param {string} timecardId The ID of the timecard to list events for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecardEvents(timecardId: string, options?: any): AxiosPromise<Array<V1TimecardEvent>>;
    /**
     * Provides summary information for all of a business\'s employee timecards.
     * @summary ListTimecards
     * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
     * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
     * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecards(order?: string, employeeId?: string, beginClockinTime?: string, endClockinTime?: string, beginClockoutTime?: string, endClockoutTime?: string, beginUpdatedAt?: string, endUpdatedAt?: string, deleted?: boolean, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1Timecard>>;
    /**
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCashDrawerShift(locationId: string, shiftId: string, options?: any): AxiosPromise<V1CashDrawerShift>;
    /**
     * Provides the details for a single employee.
     * @summary RetrieveEmployee
     * @param {string} employeeId The employee\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee(employeeId: string, options?: any): AxiosPromise<V1Employee>;
    /**
     * Provides the details for a single employee role.
     * @summary RetrieveEmployeeRole
     * @param {string} roleId The role\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployeeRole(roleId: string, options?: any): AxiosPromise<V1EmployeeRole>;
    /**
     * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary RetrieveTimecard
     * @param {string} timecardId The timecard\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTimecard(timecardId: string, options?: any): AxiosPromise<V1Timecard>;
    /**
     *
     * @summary UpdateEmployee
     * @param {string} employeeId The ID of the role to modify.
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployee(employeeId: string, body: V1Employee, options?: any): AxiosPromise<V1Employee>;
    /**
     * Modifies the details of an employee role.
     * @summary UpdateEmployeeRole
     * @param {string} roleId The ID of the role to modify.
     * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployeeRole(roleId: string, body: V1EmployeeRole, options?: any): AxiosPromise<V1EmployeeRole>;
    /**
     * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
     * @summary UpdateTimecard
     * @param {string} timecardId TThe ID of the timecard to modify.
     * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTimecard(timecardId: string, body: V1Timecard, options?: any): AxiosPromise<V1Timecard>;
};
/**
 * V1EmployeesApi - object-oriented interface
 * @export
 * @class V1EmployeesApi
 * @extends {BaseAPI}
 */
export declare class V1EmployeesApi extends BaseAPI {
    /**
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
     * @summary CreateEmployee
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    createEmployee(body: V1Employee, options?: any): Promise<import("axios").AxiosResponse<V1Employee>>;
    /**
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     * @summary CreateEmployeeRole
     * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    createEmployeeRole(employeeRole: V1EmployeeRole, options?: any): Promise<import("axios").AxiosResponse<V1EmployeeRole>>;
    /**
     * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
     * @summary CreateTimecard
     * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    createTimecard(body: V1Timecard, options?: any): Promise<import("axios").AxiosResponse<V1Timecard>>;
    /**
     * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
     * @summary DeleteTimecard
     * @param {string} timecardId The ID of the timecard to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    deleteTimecard(timecardId: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
     * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    listCashDrawerShifts(locationId: string, order?: string, beginTime?: string, endTime?: string, options?: any): Promise<import("axios").AxiosResponse<V1CashDrawerShift[]>>;
    /**
     * Provides summary information for all of a business\'s employee roles.
     * @summary ListEmployeeRoles
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    listEmployeeRoles(order?: string, limit?: number, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1EmployeeRole[]>>;
    /**
     * Provides summary information for all of a business\'s employees.
     * @summary ListEmployees
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
     * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    listEmployees(order?: string, beginUpdatedAt?: string, endUpdatedAt?: string, beginCreatedAt?: string, endCreatedAt?: string, status?: string, externalId?: string, limit?: number, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1Employee[]>>;
    /**
     * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary ListTimecardEvents
     * @param {string} timecardId The ID of the timecard to list events for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    listTimecardEvents(timecardId: string, options?: any): Promise<import("axios").AxiosResponse<V1TimecardEvent[]>>;
    /**
     * Provides summary information for all of a business\'s employee timecards.
     * @summary ListTimecards
     * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
     * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
     * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    listTimecards(order?: string, employeeId?: string, beginClockinTime?: string, endClockinTime?: string, beginClockoutTime?: string, endClockoutTime?: string, beginUpdatedAt?: string, endUpdatedAt?: string, deleted?: boolean, limit?: number, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1Timecard[]>>;
    /**
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    retrieveCashDrawerShift(locationId: string, shiftId: string, options?: any): Promise<import("axios").AxiosResponse<V1CashDrawerShift>>;
    /**
     * Provides the details for a single employee.
     * @summary RetrieveEmployee
     * @param {string} employeeId The employee\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    retrieveEmployee(employeeId: string, options?: any): Promise<import("axios").AxiosResponse<V1Employee>>;
    /**
     * Provides the details for a single employee role.
     * @summary RetrieveEmployeeRole
     * @param {string} roleId The role\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    retrieveEmployeeRole(roleId: string, options?: any): Promise<import("axios").AxiosResponse<V1EmployeeRole>>;
    /**
     * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary RetrieveTimecard
     * @param {string} timecardId The timecard\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    retrieveTimecard(timecardId: string, options?: any): Promise<import("axios").AxiosResponse<V1Timecard>>;
    /**
     *
     * @summary UpdateEmployee
     * @param {string} employeeId The ID of the role to modify.
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    updateEmployee(employeeId: string, body: V1Employee, options?: any): Promise<import("axios").AxiosResponse<V1Employee>>;
    /**
     * Modifies the details of an employee role.
     * @summary UpdateEmployeeRole
     * @param {string} roleId The ID of the role to modify.
     * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    updateEmployeeRole(roleId: string, body: V1EmployeeRole, options?: any): Promise<import("axios").AxiosResponse<V1EmployeeRole>>;
    /**
     * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
     * @summary UpdateTimecard
     * @param {string} timecardId TThe ID of the timecard to modify.
     * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    updateTimecard(timecardId: string, body: V1Timecard, options?: any): Promise<import("axios").AxiosResponse<V1Timecard>>;
}
/**
 * V1ItemsApi - axios parameter creator
 * @export
 */
export declare const V1ItemsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adjusts the current available inventory of an item variation.
     * @summary AdjustInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} variationId The ID of the variation to adjust inventory information for.
     * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustInventory: (locationId: string, variationId: string, body: V1AdjustInventoryRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
     * @summary ApplyFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyFee: (locationId: string, itemId: string, feeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Associates a modifier list with an item so the associated modifier options can be applied to the item.
     * @summary ApplyModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to apply.
     * @param {string} itemId The ID of the item to add the modifier list to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyModifierList: (locationId: string, modifierListId: string, itemId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an item category.
     * @summary CreateCategory
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory: (locationId: string, body: V1Category, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a discount.
     * @summary CreateDiscount
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiscount: (locationId: string, body: V1Discount, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a fee (tax).
     * @summary CreateFee
     * @param {string} locationId The ID of the location to create a fee for.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFee: (locationId: string, body: V1Fee, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
     * @summary CreateItem
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem: (locationId: string, body: V1Item, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an item modifier list and at least 1 modifier option for it.
     * @summary CreateModifierList
     * @param {string} locationId The ID of the location to create a modifier list for.
     * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierList: (locationId: string, body: V1ModifierList, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an item modifier option and adds it to a modifier list.
     * @summary CreateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierOption: (locationId: string, modifierListId: string, body: V1ModifierOption, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a Favorites page in Square Point of Sale.
     * @summary CreatePage
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPage: (locationId: string, body: V1Page, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an item variation for an existing item.
     * @summary CreateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVariation: (locationId: string, itemId: string, body: V1Variation, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
     * @summary DeleteCategory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} categoryId The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory: (locationId: string, categoryId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
     * @summary DeleteDiscount
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} discountId The ID of the discount to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiscount: (locationId: string, discountId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
     * @summary DeleteFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFee: (locationId: string, feeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
     * @summary DeleteItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem: (locationId: string, itemId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
     * @summary DeleteModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierList: (locationId: string, modifierListId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
     * @summary DeleteModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierOption: (locationId: string, modifierListId: string, modifierOptionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
     * @summary DeletePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePage: (locationId: string, pageId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
     * @summary DeletePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePageCell: (locationId: string, pageId: string, row?: string, column?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
     * @summary DeleteVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to delete.
     * @param {string} variationId The ID of the variation to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariation: (locationId: string, itemId: string, variationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all the item categories for a given location.
     * @summary ListCategories
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all the discounts for a given location.
     * @summary ListDiscounts
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDiscounts: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all the fees (taxes) for a given location.
     * @summary ListFees
     * @param {string} locationId The ID of the location to list fees for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFees: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides inventory information for all inventory-enabled item variations.
     * @summary ListInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInventory: (locationId: string, limit?: number, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information of all items for a given location.
     * @summary ListItems
     * @param {string} locationId The ID of the location to list items for.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listItems: (locationId: string, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all the modifier lists for a given location.
     * @summary ListModifierLists
     * @param {string} locationId The ID of the location to list modifier lists for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModifierLists: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all Favorites pages (in Square Point of Sale) for a given location.
     * @summary ListPages
     * @param {string} locationId The ID of the location to list Favorites pages for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPages: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
     * @summary RemoveFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFee: (locationId: string, itemId: string, feeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
     * @summary RemoveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to remove.
     * @param {string} itemId The ID of the item to remove the modifier list from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeModifierList: (locationId: string, modifierListId: string, itemId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     * @summary RetrieveItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveItem: (locationId: string, itemId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single modifier list.
     * @summary RetrieveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The modifier list\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveModifierList: (locationId: string, modifierListId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing item category.
     * @summary UpdateCategory
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} categoryId The ID of the category to edit.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory: (locationId: string, categoryId: string, body: V1Category, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing discount.
     * @summary UpdateDiscount
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} discountId The ID of the discount to edit.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDiscount: (locationId: string, discountId: string, body: V1Discount, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing fee (tax).
     * @summary UpdateFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to edit.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFee: (locationId: string, feeId: string, body: V1Fee, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the core details of an existing item.
     * @summary UpdateItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem: (locationId: string, itemId: string, body: V1Item, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing item modifier list.
     * @summary UpdateModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierList: (locationId: string, modifierListId: string, body: V1UpdateModifierListRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing item modifier option.
     * @summary UpdateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierOption: (locationId: string, modifierListId: string, modifierOptionId: string, body: V1ModifierOption, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of a Favorites page in Square Point of Sale.
     * @summary UpdatePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location
     * @param {string} pageId The ID of the page to modify.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePage: (locationId: string, pageId: string, body: V1Page, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies a cell of a Favorites page in Square Point of Sale.
     * @summary UpdatePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page the cell belongs to.
     * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePageCell: (locationId: string, pageId: string, body: V1PageCell, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing item variation.
     * @summary UpdateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {string} variationId The ID of the variation to modify.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariation: (locationId: string, itemId: string, variationId: string, body: V1Variation, options?: any) => Promise<RequestArgs>;
};
/**
 * V1ItemsApi - functional programming interface
 * @export
 */
export declare const V1ItemsApiFp: (configuration?: Configuration) => {
    /**
     * Adjusts the current available inventory of an item variation.
     * @summary AdjustInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} variationId The ID of the variation to adjust inventory information for.
     * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustInventory(locationId: string, variationId: string, body: V1AdjustInventoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1InventoryEntry>>;
    /**
     * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
     * @summary ApplyFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyFee(locationId: string, itemId: string, feeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Associates a modifier list with an item so the associated modifier options can be applied to the item.
     * @summary ApplyModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to apply.
     * @param {string} itemId The ID of the item to add the modifier list to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Creates an item category.
     * @summary CreateCategory
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(locationId: string, body: V1Category, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Category>>;
    /**
     * Creates a discount.
     * @summary CreateDiscount
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiscount(locationId: string, body: V1Discount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Discount>>;
    /**
     * Creates a fee (tax).
     * @summary CreateFee
     * @param {string} locationId The ID of the location to create a fee for.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFee(locationId: string, body: V1Fee, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Fee>>;
    /**
     * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
     * @summary CreateItem
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem(locationId: string, body: V1Item, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Creates an item modifier list and at least 1 modifier option for it.
     * @summary CreateModifierList
     * @param {string} locationId The ID of the location to create a modifier list for.
     * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierList(locationId: string, body: V1ModifierList, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierList>>;
    /**
     * Creates an item modifier option and adds it to a modifier list.
     * @summary CreateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierOption(locationId: string, modifierListId: string, body: V1ModifierOption, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierOption>>;
    /**
     * Creates a Favorites page in Square Point of Sale.
     * @summary CreatePage
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPage(locationId: string, body: V1Page, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Page>>;
    /**
     * Creates an item variation for an existing item.
     * @summary CreateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVariation(locationId: string, itemId: string, body: V1Variation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Variation>>;
    /**
     * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
     * @summary DeleteCategory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} categoryId The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory(locationId: string, categoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Category>>;
    /**
     * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
     * @summary DeleteDiscount
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} discountId The ID of the discount to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiscount(locationId: string, discountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Discount>>;
    /**
     * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
     * @summary DeleteFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFee(locationId: string, feeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Fee>>;
    /**
     * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
     * @summary DeleteItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem(locationId: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
     * @summary DeleteModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierList(locationId: string, modifierListId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierList>>;
    /**
     * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
     * @summary DeleteModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierOption>>;
    /**
     * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
     * @summary DeletePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePage(locationId: string, pageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Page>>;
    /**
     * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
     * @summary DeletePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePageCell(locationId: string, pageId: string, row?: string, column?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Page>>;
    /**
     * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
     * @summary DeleteVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to delete.
     * @param {string} variationId The ID of the variation to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariation(locationId: string, itemId: string, variationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Variation>>;
    /**
     * Lists all the item categories for a given location.
     * @summary ListCategories
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Category>>>;
    /**
     * Lists all the discounts for a given location.
     * @summary ListDiscounts
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDiscounts(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Discount>>>;
    /**
     * Lists all the fees (taxes) for a given location.
     * @summary ListFees
     * @param {string} locationId The ID of the location to list fees for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFees(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Fee>>>;
    /**
     * Provides inventory information for all inventory-enabled item variations.
     * @summary ListInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInventory(locationId: string, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1InventoryEntry>>>;
    /**
     * Provides summary information of all items for a given location.
     * @summary ListItems
     * @param {string} locationId The ID of the location to list items for.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listItems(locationId: string, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Item>>>;
    /**
     * Lists all the modifier lists for a given location.
     * @summary ListModifierLists
     * @param {string} locationId The ID of the location to list modifier lists for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModifierLists(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1ModifierList>>>;
    /**
     * Lists all Favorites pages (in Square Point of Sale) for a given location.
     * @summary ListPages
     * @param {string} locationId The ID of the location to list Favorites pages for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPages(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Page>>>;
    /**
     * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
     * @summary RemoveFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFee(locationId: string, itemId: string, feeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
     * @summary RemoveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to remove.
     * @param {string} itemId The ID of the item to remove the modifier list from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     * @summary RetrieveItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveItem(locationId: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Provides the details for a single modifier list.
     * @summary RetrieveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The modifier list\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveModifierList(locationId: string, modifierListId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierList>>;
    /**
     * Modifies the details of an existing item category.
     * @summary UpdateCategory
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} categoryId The ID of the category to edit.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(locationId: string, categoryId: string, body: V1Category, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Category>>;
    /**
     * Modifies the details of an existing discount.
     * @summary UpdateDiscount
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} discountId The ID of the discount to edit.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDiscount(locationId: string, discountId: string, body: V1Discount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Discount>>;
    /**
     * Modifies the details of an existing fee (tax).
     * @summary UpdateFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to edit.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFee(locationId: string, feeId: string, body: V1Fee, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Fee>>;
    /**
     * Modifies the core details of an existing item.
     * @summary UpdateItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem(locationId: string, itemId: string, body: V1Item, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Modifies the details of an existing item modifier list.
     * @summary UpdateModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierList(locationId: string, modifierListId: string, body: V1UpdateModifierListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierList>>;
    /**
     * Modifies the details of an existing item modifier option.
     * @summary UpdateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, body: V1ModifierOption, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierOption>>;
    /**
     * Modifies the details of a Favorites page in Square Point of Sale.
     * @summary UpdatePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location
     * @param {string} pageId The ID of the page to modify.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePage(locationId: string, pageId: string, body: V1Page, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Page>>;
    /**
     * Modifies a cell of a Favorites page in Square Point of Sale.
     * @summary UpdatePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page the cell belongs to.
     * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePageCell(locationId: string, pageId: string, body: V1PageCell, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Page>>;
    /**
     * Modifies the details of an existing item variation.
     * @summary UpdateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {string} variationId The ID of the variation to modify.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariation(locationId: string, itemId: string, variationId: string, body: V1Variation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Variation>>;
};
/**
 * V1ItemsApi - factory interface
 * @export
 */
export declare const V1ItemsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adjusts the current available inventory of an item variation.
     * @summary AdjustInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} variationId The ID of the variation to adjust inventory information for.
     * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustInventory(locationId: string, variationId: string, body: V1AdjustInventoryRequest, options?: any): AxiosPromise<V1InventoryEntry>;
    /**
     * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
     * @summary ApplyFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyFee(locationId: string, itemId: string, feeId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Associates a modifier list with an item so the associated modifier options can be applied to the item.
     * @summary ApplyModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to apply.
     * @param {string} itemId The ID of the item to add the modifier list to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Creates an item category.
     * @summary CreateCategory
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(locationId: string, body: V1Category, options?: any): AxiosPromise<V1Category>;
    /**
     * Creates a discount.
     * @summary CreateDiscount
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiscount(locationId: string, body: V1Discount, options?: any): AxiosPromise<V1Discount>;
    /**
     * Creates a fee (tax).
     * @summary CreateFee
     * @param {string} locationId The ID of the location to create a fee for.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFee(locationId: string, body: V1Fee, options?: any): AxiosPromise<V1Fee>;
    /**
     * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
     * @summary CreateItem
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem(locationId: string, body: V1Item, options?: any): AxiosPromise<V1Item>;
    /**
     * Creates an item modifier list and at least 1 modifier option for it.
     * @summary CreateModifierList
     * @param {string} locationId The ID of the location to create a modifier list for.
     * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierList(locationId: string, body: V1ModifierList, options?: any): AxiosPromise<V1ModifierList>;
    /**
     * Creates an item modifier option and adds it to a modifier list.
     * @summary CreateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierOption(locationId: string, modifierListId: string, body: V1ModifierOption, options?: any): AxiosPromise<V1ModifierOption>;
    /**
     * Creates a Favorites page in Square Point of Sale.
     * @summary CreatePage
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPage(locationId: string, body: V1Page, options?: any): AxiosPromise<V1Page>;
    /**
     * Creates an item variation for an existing item.
     * @summary CreateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVariation(locationId: string, itemId: string, body: V1Variation, options?: any): AxiosPromise<V1Variation>;
    /**
     * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
     * @summary DeleteCategory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} categoryId The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory(locationId: string, categoryId: string, options?: any): AxiosPromise<V1Category>;
    /**
     * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
     * @summary DeleteDiscount
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} discountId The ID of the discount to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiscount(locationId: string, discountId: string, options?: any): AxiosPromise<V1Discount>;
    /**
     * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
     * @summary DeleteFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFee(locationId: string, feeId: string, options?: any): AxiosPromise<V1Fee>;
    /**
     * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
     * @summary DeleteItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem(locationId: string, itemId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
     * @summary DeleteModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierList(locationId: string, modifierListId: string, options?: any): AxiosPromise<V1ModifierList>;
    /**
     * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
     * @summary DeleteModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, options?: any): AxiosPromise<V1ModifierOption>;
    /**
     * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
     * @summary DeletePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePage(locationId: string, pageId: string, options?: any): AxiosPromise<V1Page>;
    /**
     * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
     * @summary DeletePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePageCell(locationId: string, pageId: string, row?: string, column?: string, options?: any): AxiosPromise<V1Page>;
    /**
     * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
     * @summary DeleteVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to delete.
     * @param {string} variationId The ID of the variation to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariation(locationId: string, itemId: string, variationId: string, options?: any): AxiosPromise<V1Variation>;
    /**
     * Lists all the item categories for a given location.
     * @summary ListCategories
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories(locationId: string, options?: any): AxiosPromise<Array<V1Category>>;
    /**
     * Lists all the discounts for a given location.
     * @summary ListDiscounts
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDiscounts(locationId: string, options?: any): AxiosPromise<Array<V1Discount>>;
    /**
     * Lists all the fees (taxes) for a given location.
     * @summary ListFees
     * @param {string} locationId The ID of the location to list fees for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFees(locationId: string, options?: any): AxiosPromise<Array<V1Fee>>;
    /**
     * Provides inventory information for all inventory-enabled item variations.
     * @summary ListInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInventory(locationId: string, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1InventoryEntry>>;
    /**
     * Provides summary information of all items for a given location.
     * @summary ListItems
     * @param {string} locationId The ID of the location to list items for.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listItems(locationId: string, batchToken?: string, options?: any): AxiosPromise<Array<V1Item>>;
    /**
     * Lists all the modifier lists for a given location.
     * @summary ListModifierLists
     * @param {string} locationId The ID of the location to list modifier lists for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModifierLists(locationId: string, options?: any): AxiosPromise<Array<V1ModifierList>>;
    /**
     * Lists all Favorites pages (in Square Point of Sale) for a given location.
     * @summary ListPages
     * @param {string} locationId The ID of the location to list Favorites pages for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPages(locationId: string, options?: any): AxiosPromise<Array<V1Page>>;
    /**
     * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
     * @summary RemoveFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFee(locationId: string, itemId: string, feeId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
     * @summary RemoveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to remove.
     * @param {string} itemId The ID of the item to remove the modifier list from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     * @summary RetrieveItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveItem(locationId: string, itemId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Provides the details for a single modifier list.
     * @summary RetrieveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The modifier list\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveModifierList(locationId: string, modifierListId: string, options?: any): AxiosPromise<V1ModifierList>;
    /**
     * Modifies the details of an existing item category.
     * @summary UpdateCategory
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} categoryId The ID of the category to edit.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(locationId: string, categoryId: string, body: V1Category, options?: any): AxiosPromise<V1Category>;
    /**
     * Modifies the details of an existing discount.
     * @summary UpdateDiscount
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} discountId The ID of the discount to edit.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDiscount(locationId: string, discountId: string, body: V1Discount, options?: any): AxiosPromise<V1Discount>;
    /**
     * Modifies the details of an existing fee (tax).
     * @summary UpdateFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to edit.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFee(locationId: string, feeId: string, body: V1Fee, options?: any): AxiosPromise<V1Fee>;
    /**
     * Modifies the core details of an existing item.
     * @summary UpdateItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem(locationId: string, itemId: string, body: V1Item, options?: any): AxiosPromise<V1Item>;
    /**
     * Modifies the details of an existing item modifier list.
     * @summary UpdateModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierList(locationId: string, modifierListId: string, body: V1UpdateModifierListRequest, options?: any): AxiosPromise<V1ModifierList>;
    /**
     * Modifies the details of an existing item modifier option.
     * @summary UpdateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, body: V1ModifierOption, options?: any): AxiosPromise<V1ModifierOption>;
    /**
     * Modifies the details of a Favorites page in Square Point of Sale.
     * @summary UpdatePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location
     * @param {string} pageId The ID of the page to modify.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePage(locationId: string, pageId: string, body: V1Page, options?: any): AxiosPromise<V1Page>;
    /**
     * Modifies a cell of a Favorites page in Square Point of Sale.
     * @summary UpdatePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page the cell belongs to.
     * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePageCell(locationId: string, pageId: string, body: V1PageCell, options?: any): AxiosPromise<V1Page>;
    /**
     * Modifies the details of an existing item variation.
     * @summary UpdateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {string} variationId The ID of the variation to modify.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariation(locationId: string, itemId: string, variationId: string, body: V1Variation, options?: any): AxiosPromise<V1Variation>;
};
/**
 * V1ItemsApi - object-oriented interface
 * @export
 * @class V1ItemsApi
 * @extends {BaseAPI}
 */
export declare class V1ItemsApi extends BaseAPI {
    /**
     * Adjusts the current available inventory of an item variation.
     * @summary AdjustInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} variationId The ID of the variation to adjust inventory information for.
     * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    adjustInventory(locationId: string, variationId: string, body: V1AdjustInventoryRequest, options?: any): Promise<import("axios").AxiosResponse<V1InventoryEntry>>;
    /**
     * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
     * @summary ApplyFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    applyFee(locationId: string, itemId: string, feeId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Associates a modifier list with an item so the associated modifier options can be applied to the item.
     * @summary ApplyModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to apply.
     * @param {string} itemId The ID of the item to add the modifier list to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    applyModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Creates an item category.
     * @summary CreateCategory
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createCategory(locationId: string, body: V1Category, options?: any): Promise<import("axios").AxiosResponse<V1Category>>;
    /**
     * Creates a discount.
     * @summary CreateDiscount
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createDiscount(locationId: string, body: V1Discount, options?: any): Promise<import("axios").AxiosResponse<V1Discount>>;
    /**
     * Creates a fee (tax).
     * @summary CreateFee
     * @param {string} locationId The ID of the location to create a fee for.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createFee(locationId: string, body: V1Fee, options?: any): Promise<import("axios").AxiosResponse<V1Fee>>;
    /**
     * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
     * @summary CreateItem
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createItem(locationId: string, body: V1Item, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Creates an item modifier list and at least 1 modifier option for it.
     * @summary CreateModifierList
     * @param {string} locationId The ID of the location to create a modifier list for.
     * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createModifierList(locationId: string, body: V1ModifierList, options?: any): Promise<import("axios").AxiosResponse<V1ModifierList>>;
    /**
     * Creates an item modifier option and adds it to a modifier list.
     * @summary CreateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createModifierOption(locationId: string, modifierListId: string, body: V1ModifierOption, options?: any): Promise<import("axios").AxiosResponse<V1ModifierOption>>;
    /**
     * Creates a Favorites page in Square Point of Sale.
     * @summary CreatePage
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createPage(locationId: string, body: V1Page, options?: any): Promise<import("axios").AxiosResponse<V1Page>>;
    /**
     * Creates an item variation for an existing item.
     * @summary CreateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createVariation(locationId: string, itemId: string, body: V1Variation, options?: any): Promise<import("axios").AxiosResponse<V1Variation>>;
    /**
     * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
     * @summary DeleteCategory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} categoryId The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteCategory(locationId: string, categoryId: string, options?: any): Promise<import("axios").AxiosResponse<V1Category>>;
    /**
     * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
     * @summary DeleteDiscount
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} discountId The ID of the discount to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteDiscount(locationId: string, discountId: string, options?: any): Promise<import("axios").AxiosResponse<V1Discount>>;
    /**
     * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
     * @summary DeleteFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteFee(locationId: string, feeId: string, options?: any): Promise<import("axios").AxiosResponse<V1Fee>>;
    /**
     * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
     * @summary DeleteItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteItem(locationId: string, itemId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
     * @summary DeleteModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteModifierList(locationId: string, modifierListId: string, options?: any): Promise<import("axios").AxiosResponse<V1ModifierList>>;
    /**
     * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
     * @summary DeleteModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, options?: any): Promise<import("axios").AxiosResponse<V1ModifierOption>>;
    /**
     * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
     * @summary DeletePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deletePage(locationId: string, pageId: string, options?: any): Promise<import("axios").AxiosResponse<V1Page>>;
    /**
     * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
     * @summary DeletePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deletePageCell(locationId: string, pageId: string, row?: string, column?: string, options?: any): Promise<import("axios").AxiosResponse<V1Page>>;
    /**
     * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
     * @summary DeleteVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to delete.
     * @param {string} variationId The ID of the variation to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteVariation(locationId: string, itemId: string, variationId: string, options?: any): Promise<import("axios").AxiosResponse<V1Variation>>;
    /**
     * Lists all the item categories for a given location.
     * @summary ListCategories
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listCategories(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1Category[]>>;
    /**
     * Lists all the discounts for a given location.
     * @summary ListDiscounts
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listDiscounts(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1Discount[]>>;
    /**
     * Lists all the fees (taxes) for a given location.
     * @summary ListFees
     * @param {string} locationId The ID of the location to list fees for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listFees(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1Fee[]>>;
    /**
     * Provides inventory information for all inventory-enabled item variations.
     * @summary ListInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listInventory(locationId: string, limit?: number, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1InventoryEntry[]>>;
    /**
     * Provides summary information of all items for a given location.
     * @summary ListItems
     * @param {string} locationId The ID of the location to list items for.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listItems(locationId: string, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1Item[]>>;
    /**
     * Lists all the modifier lists for a given location.
     * @summary ListModifierLists
     * @param {string} locationId The ID of the location to list modifier lists for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listModifierLists(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1ModifierList[]>>;
    /**
     * Lists all Favorites pages (in Square Point of Sale) for a given location.
     * @summary ListPages
     * @param {string} locationId The ID of the location to list Favorites pages for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listPages(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1Page[]>>;
    /**
     * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
     * @summary RemoveFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    removeFee(locationId: string, itemId: string, feeId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
     * @summary RemoveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to remove.
     * @param {string} itemId The ID of the item to remove the modifier list from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    removeModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     * @summary RetrieveItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    retrieveItem(locationId: string, itemId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Provides the details for a single modifier list.
     * @summary RetrieveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The modifier list\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    retrieveModifierList(locationId: string, modifierListId: string, options?: any): Promise<import("axios").AxiosResponse<V1ModifierList>>;
    /**
     * Modifies the details of an existing item category.
     * @summary UpdateCategory
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} categoryId The ID of the category to edit.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateCategory(locationId: string, categoryId: string, body: V1Category, options?: any): Promise<import("axios").AxiosResponse<V1Category>>;
    /**
     * Modifies the details of an existing discount.
     * @summary UpdateDiscount
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} discountId The ID of the discount to edit.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateDiscount(locationId: string, discountId: string, body: V1Discount, options?: any): Promise<import("axios").AxiosResponse<V1Discount>>;
    /**
     * Modifies the details of an existing fee (tax).
     * @summary UpdateFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to edit.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateFee(locationId: string, feeId: string, body: V1Fee, options?: any): Promise<import("axios").AxiosResponse<V1Fee>>;
    /**
     * Modifies the core details of an existing item.
     * @summary UpdateItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateItem(locationId: string, itemId: string, body: V1Item, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Modifies the details of an existing item modifier list.
     * @summary UpdateModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateModifierList(locationId: string, modifierListId: string, body: V1UpdateModifierListRequest, options?: any): Promise<import("axios").AxiosResponse<V1ModifierList>>;
    /**
     * Modifies the details of an existing item modifier option.
     * @summary UpdateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, body: V1ModifierOption, options?: any): Promise<import("axios").AxiosResponse<V1ModifierOption>>;
    /**
     * Modifies the details of a Favorites page in Square Point of Sale.
     * @summary UpdatePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location
     * @param {string} pageId The ID of the page to modify.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updatePage(locationId: string, pageId: string, body: V1Page, options?: any): Promise<import("axios").AxiosResponse<V1Page>>;
    /**
     * Modifies a cell of a Favorites page in Square Point of Sale.
     * @summary UpdatePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page the cell belongs to.
     * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updatePageCell(locationId: string, pageId: string, body: V1PageCell, options?: any): Promise<import("axios").AxiosResponse<V1Page>>;
    /**
     * Modifies the details of an existing item variation.
     * @summary UpdateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {string} variationId The ID of the variation to modify.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateVariation(locationId: string, itemId: string, variationId: string, body: V1Variation, options?: any): Promise<import("axios").AxiosResponse<V1Variation>>;
}
/**
 * V1LocationsApi - axios parameter creator
 * @export
 */
export declare const V1LocationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Provides details for all business locations associated with a Square account, including the Square-assigned object ID for the location.
     * @summary ListLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLocations: (options?: any) => Promise<RequestArgs>;
    /**
     * Get the general information for a business.
     * @summary RetrieveBusiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveBusiness: (options?: any) => Promise<RequestArgs>;
};
/**
 * V1LocationsApi - functional programming interface
 * @export
 */
export declare const V1LocationsApiFp: (configuration?: Configuration) => {
    /**
     * Provides details for all business locations associated with a Square account, including the Square-assigned object ID for the location.
     * @summary ListLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLocations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Merchant>>>;
    /**
     * Get the general information for a business.
     * @summary RetrieveBusiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveBusiness(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Merchant>>;
};
/**
 * V1LocationsApi - factory interface
 * @export
 */
export declare const V1LocationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Provides details for all business locations associated with a Square account, including the Square-assigned object ID for the location.
     * @summary ListLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLocations(options?: any): AxiosPromise<Array<V1Merchant>>;
    /**
     * Get the general information for a business.
     * @summary RetrieveBusiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveBusiness(options?: any): AxiosPromise<V1Merchant>;
};
/**
 * V1LocationsApi - object-oriented interface
 * @export
 * @class V1LocationsApi
 * @extends {BaseAPI}
 */
export declare class V1LocationsApi extends BaseAPI {
    /**
     * Provides details for all business locations associated with a Square account, including the Square-assigned object ID for the location.
     * @summary ListLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1LocationsApi
     */
    listLocations(options?: any): Promise<import("axios").AxiosResponse<V1Merchant[]>>;
    /**
     * Get the general information for a business.
     * @summary RetrieveBusiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1LocationsApi
     */
    retrieveBusiness(options?: any): Promise<import("axios").AxiosResponse<V1Merchant>>;
}
/**
 * V1TransactionsApi - axios parameter creator
 * @export
 */
export declare const V1TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
     * @summary CreateRefund
     * @param {string} locationId The ID of the original payment\&#39;s associated location.
     * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefund: (locationId: string, body: V1CreateRefundRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary ListBankAccounts
     * @param {string} locationId The ID of the location to list bank accounts for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBankAccounts: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for a merchant\'s online store orders.
     * @summary ListOrders
     * @param {string} locationId The ID of the location to list online store orders for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrders: (locationId: string, order?: string, limit?: number, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
     * @summary ListPayments
     * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayments: (locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, includePartial?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds: (locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
     * @summary ListSettlements
     * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which settlements are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
     * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSettlements: (locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, status?: string, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary RetrieveBankAccount
     * @param {string} locationId The ID of the bank account\&#39;s associated location.
     * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveBankAccount: (locationId: string, bankAccountId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides comprehensive information for a single online store order, including the order\'s history.
     * @summary RetrieveOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrder: (locationId: string, orderId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides comprehensive information for a single payment.
     * @summary RetrievePayment
     * @param {string} locationId The ID of the payment\&#39;s associated location.
     * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrievePayment: (locationId: string, paymentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
     * @summary RetrieveSettlement
     * @param {string} locationId The ID of the settlements\&#39;s associated location.
     * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveSettlement: (locationId: string, settlementId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
     * @summary UpdateOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder: (locationId: string, orderId: string, body: V1UpdateOrderRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * V1TransactionsApi - functional programming interface
 * @export
 */
export declare const V1TransactionsApiFp: (configuration?: Configuration) => {
    /**
     * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
     * @summary CreateRefund
     * @param {string} locationId The ID of the original payment\&#39;s associated location.
     * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefund(locationId: string, body: V1CreateRefundRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Refund>>;
    /**
     * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary ListBankAccounts
     * @param {string} locationId The ID of the location to list bank accounts for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBankAccounts(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1BankAccount>>>;
    /**
     * Provides summary information for a merchant\'s online store orders.
     * @summary ListOrders
     * @param {string} locationId The ID of the location to list online store orders for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrders(locationId: string, order?: string, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Order>>>;
    /**
     * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
     * @summary ListPayments
     * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayments(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, includePartial?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Payment>>>;
    /**
     * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Refund>>>;
    /**
     * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
     * @summary ListSettlements
     * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which settlements are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
     * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSettlements(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, status?: string, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Settlement>>>;
    /**
     * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary RetrieveBankAccount
     * @param {string} locationId The ID of the bank account\&#39;s associated location.
     * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveBankAccount(locationId: string, bankAccountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1BankAccount>>;
    /**
     * Provides comprehensive information for a single online store order, including the order\'s history.
     * @summary RetrieveOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrder(locationId: string, orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Order>>;
    /**
     * Provides comprehensive information for a single payment.
     * @summary RetrievePayment
     * @param {string} locationId The ID of the payment\&#39;s associated location.
     * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrievePayment(locationId: string, paymentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Payment>>;
    /**
     * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
     * @summary RetrieveSettlement
     * @param {string} locationId The ID of the settlements\&#39;s associated location.
     * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveSettlement(locationId: string, settlementId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Settlement>>;
    /**
     * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
     * @summary UpdateOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(locationId: string, orderId: string, body: V1UpdateOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Order>>;
};
/**
 * V1TransactionsApi - factory interface
 * @export
 */
export declare const V1TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
     * @summary CreateRefund
     * @param {string} locationId The ID of the original payment\&#39;s associated location.
     * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefund(locationId: string, body: V1CreateRefundRequest, options?: any): AxiosPromise<V1Refund>;
    /**
     * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary ListBankAccounts
     * @param {string} locationId The ID of the location to list bank accounts for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBankAccounts(locationId: string, options?: any): AxiosPromise<Array<V1BankAccount>>;
    /**
     * Provides summary information for a merchant\'s online store orders.
     * @summary ListOrders
     * @param {string} locationId The ID of the location to list online store orders for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrders(locationId: string, order?: string, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1Order>>;
    /**
     * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
     * @summary ListPayments
     * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayments(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, includePartial?: boolean, options?: any): AxiosPromise<Array<V1Payment>>;
    /**
     * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1Refund>>;
    /**
     * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
     * @summary ListSettlements
     * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which settlements are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
     * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSettlements(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, status?: string, batchToken?: string, options?: any): AxiosPromise<Array<V1Settlement>>;
    /**
     * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary RetrieveBankAccount
     * @param {string} locationId The ID of the bank account\&#39;s associated location.
     * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveBankAccount(locationId: string, bankAccountId: string, options?: any): AxiosPromise<V1BankAccount>;
    /**
     * Provides comprehensive information for a single online store order, including the order\'s history.
     * @summary RetrieveOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrder(locationId: string, orderId: string, options?: any): AxiosPromise<V1Order>;
    /**
     * Provides comprehensive information for a single payment.
     * @summary RetrievePayment
     * @param {string} locationId The ID of the payment\&#39;s associated location.
     * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrievePayment(locationId: string, paymentId: string, options?: any): AxiosPromise<V1Payment>;
    /**
     * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
     * @summary RetrieveSettlement
     * @param {string} locationId The ID of the settlements\&#39;s associated location.
     * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveSettlement(locationId: string, settlementId: string, options?: any): AxiosPromise<V1Settlement>;
    /**
     * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
     * @summary UpdateOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(locationId: string, orderId: string, body: V1UpdateOrderRequest, options?: any): AxiosPromise<V1Order>;
};
/**
 * V1TransactionsApi - object-oriented interface
 * @export
 * @class V1TransactionsApi
 * @extends {BaseAPI}
 */
export declare class V1TransactionsApi extends BaseAPI {
    /**
     * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
     * @summary CreateRefund
     * @param {string} locationId The ID of the original payment\&#39;s associated location.
     * @param {V1CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    createRefund(locationId: string, body: V1CreateRefundRequest, options?: any): Promise<import("axios").AxiosResponse<V1Refund>>;
    /**
     * Provides non-confidential details for all of a location\'s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary ListBankAccounts
     * @param {string} locationId The ID of the location to list bank accounts for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    listBankAccounts(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1BankAccount[]>>;
    /**
     * Provides summary information for a merchant\'s online store orders.
     * @summary ListOrders
     * @param {string} locationId The ID of the location to list online store orders for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    listOrders(locationId: string, order?: string, limit?: number, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1Order[]>>;
    /**
     * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
     * @summary ListPayments
     * @param {string} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    listPayments(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, includePartial?: boolean, options?: any): Promise<import("axios").AxiosResponse<V1Payment[]>>;
    /**
     * Provides the details for all refunds initiated by a merchant or any of the merchant\'s mobile staff during a date range. Date ranges cannot exceed one year in length.
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [order] TThe order in which payments are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    listRefunds(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1Refund[]>>;
    /**
     * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
     * @summary ListSettlements
     * @param {string} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business\&#39;s locations.
     * @param {string} [order] The order in which settlements are listed in the response.
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
     * @param {string} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    listSettlements(locationId: string, order?: string, beginTime?: string, endTime?: string, limit?: number, status?: string, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1Settlement[]>>;
    /**
     * Provides non-confidential details for a merchant\'s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
     * @summary RetrieveBankAccount
     * @param {string} locationId The ID of the bank account\&#39;s associated location.
     * @param {string} bankAccountId The bank account\&#39;s Square-issued ID. You obtain this value from Settlement objects returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    retrieveBankAccount(locationId: string, bankAccountId: string, options?: any): Promise<import("axios").AxiosResponse<V1BankAccount>>;
    /**
     * Provides comprehensive information for a single online store order, including the order\'s history.
     * @summary RetrieveOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    retrieveOrder(locationId: string, orderId: string, options?: any): Promise<import("axios").AxiosResponse<V1Order>>;
    /**
     * Provides comprehensive information for a single payment.
     * @summary RetrievePayment
     * @param {string} locationId The ID of the payment\&#39;s associated location.
     * @param {string} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    retrievePayment(locationId: string, paymentId: string, options?: any): Promise<import("axios").AxiosResponse<V1Payment>>;
    /**
     * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
     * @summary RetrieveSettlement
     * @param {string} locationId The ID of the settlements\&#39;s associated location.
     * @param {string} settlementId The settlement\&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    retrieveSettlement(locationId: string, settlementId: string, options?: any): Promise<import("axios").AxiosResponse<V1Settlement>>;
    /**
     * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
     * @summary UpdateOrder
     * @param {string} locationId The ID of the order\&#39;s associated location.
     * @param {string} orderId The order\&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {V1UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1TransactionsApi
     */
    updateOrder(locationId: string, orderId: string, body: V1UpdateOrderRequest, options?: any): Promise<import("axios").AxiosResponse<V1Order>>;
}
