/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BatchRetrieveOrdersRequest } from '../models';
import { BatchRetrieveOrdersResponse } from '../models';
import { CalculateOrderRequest } from '../models';
import { CalculateOrderResponse } from '../models';
import { CreateOrderRequest } from '../models';
import { CreateOrderResponse } from '../models';
import { PayOrderRequest } from '../models';
import { PayOrderResponse } from '../models';
import { RetrieveOrderResponse } from '../models';
import { SearchOrdersRequest } from '../models';
import { SearchOrdersResponse } from '../models';
import { UpdateOrderRequest } from '../models';
import { UpdateOrderResponse } from '../models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export declare const OrdersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
     * @summary BatchRetrieveOrders
     * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveOrders: (body: BatchRetrieveOrdersRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Calculates an [Order](#type-order).
     * @summary CalculateOrder
     * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateOrder: (body: CalculateOrderRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
     * @summary CreateOrder
     * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder: (body: CreateOrderRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
     * @summary PayOrder
     * @param {string} orderId The ID of the order being paid.
     * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payOrder: (orderId: string, body: PayOrderRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves an [Order](#type-order) by ID.
     * @summary RetrieveOrder
     * @param {string} orderId The ID of the order to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrder: (orderId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @summary SearchOrders
     * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOrders: (body: SearchOrdersRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
     * @summary UpdateOrder
     * @param {string} orderId The ID of the order to update.
     * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder: (orderId: string, body: UpdateOrderRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
export declare const OrdersApiFp: (configuration?: Configuration) => {
    /**
     * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
     * @summary BatchRetrieveOrders
     * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveOrders(body: BatchRetrieveOrdersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchRetrieveOrdersResponse>>;
    /**
     * Calculates an [Order](#type-order).
     * @summary CalculateOrder
     * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateOrder(body: CalculateOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculateOrderResponse>>;
    /**
     * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
     * @summary CreateOrder
     * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(body: CreateOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrderResponse>>;
    /**
     * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
     * @summary PayOrder
     * @param {string} orderId The ID of the order being paid.
     * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payOrder(orderId: string, body: PayOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayOrderResponse>>;
    /**
     * Retrieves an [Order](#type-order) by ID.
     * @summary RetrieveOrder
     * @param {string} orderId The ID of the order to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrder(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveOrderResponse>>;
    /**
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @summary SearchOrders
     * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOrders(body: SearchOrdersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchOrdersResponse>>;
    /**
     * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
     * @summary UpdateOrder
     * @param {string} orderId The ID of the order to update.
     * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(orderId: string, body: UpdateOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateOrderResponse>>;
};
/**
 * OrdersApi - factory interface
 * @export
 */
export declare const OrdersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
     * @summary BatchRetrieveOrders
     * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchRetrieveOrders(body: BatchRetrieveOrdersRequest, options?: any): AxiosPromise<BatchRetrieveOrdersResponse>;
    /**
     * Calculates an [Order](#type-order).
     * @summary CalculateOrder
     * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateOrder(body: CalculateOrderRequest, options?: any): AxiosPromise<CalculateOrderResponse>;
    /**
     * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
     * @summary CreateOrder
     * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(body: CreateOrderRequest, options?: any): AxiosPromise<CreateOrderResponse>;
    /**
     * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
     * @summary PayOrder
     * @param {string} orderId The ID of the order being paid.
     * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payOrder(orderId: string, body: PayOrderRequest, options?: any): AxiosPromise<PayOrderResponse>;
    /**
     * Retrieves an [Order](#type-order) by ID.
     * @summary RetrieveOrder
     * @param {string} orderId The ID of the order to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrder(orderId: string, options?: any): AxiosPromise<RetrieveOrderResponse>;
    /**
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @summary SearchOrders
     * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOrders(body: SearchOrdersRequest, options?: any): AxiosPromise<SearchOrdersResponse>;
    /**
     * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
     * @summary UpdateOrder
     * @param {string} orderId The ID of the order to update.
     * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(orderId: string, body: UpdateOrderRequest, options?: any): AxiosPromise<UpdateOrderResponse>;
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export declare class OrdersApi extends BaseAPI {
    /**
     * Retrieves a set of [Order](#type-order)s by their IDs.  If a given Order ID does not exist, the ID is ignored instead of generating an error.
     * @summary BatchRetrieveOrders
     * @param {BatchRetrieveOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    batchRetrieveOrders(body: BatchRetrieveOrdersRequest, options?: any): Promise<import("axios").AxiosResponse<BatchRetrieveOrdersResponse>>;
    /**
     * Calculates an [Order](#type-order).
     * @summary CalculateOrder
     * @param {CalculateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    calculateOrder(body: CalculateOrderRequest, options?: any): Promise<import("axios").AxiosResponse<CalculateOrderResponse>>;
    /**
     * Creates a new [Order](#type-order) which can include information on products for purchase and settings to apply to the purchase.  To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.  You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
     * @summary CreateOrder
     * @param {CreateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    createOrder(body: CreateOrderRequest, options?: any): Promise<import("axios").AxiosResponse<CreateOrderResponse>>;
    /**
     * Pay for an [order](#type-order) using one or more approved [payments](#type-payment), or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with PayOrder, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` will be canceled. - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture). Using a delayed capture payment with PayOrder will complete the approved payment.
     * @summary PayOrder
     * @param {string} orderId The ID of the order being paid.
     * @param {PayOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    payOrder(orderId: string, body: PayOrderRequest, options?: any): Promise<import("axios").AxiosResponse<PayOrderResponse>>;
    /**
     * Retrieves an [Order](#type-order) by ID.
     * @summary RetrieveOrder
     * @param {string} orderId The ID of the order to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    retrieveOrder(orderId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveOrderResponse>>;
    /**
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).  SearchOrders requests need to specify which locations to search and define a [`SearchOrdersQuery`](#type-searchordersquery) object which controls how to sort or filter the results. Your SearchOrdersQuery can:    Set filter criteria.   Set sort order.   Determine whether to return results as complete Order objects, or as [OrderEntry](#type-orderentry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @summary SearchOrders
     * @param {SearchOrdersRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    searchOrders(body: SearchOrdersRequest, options?: any): Promise<import("axios").AxiosResponse<SearchOrdersResponse>>;
    /**
     * Updates an open [Order](#type-order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An UpdateOrder request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version the update is being applied to. - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation) identifying fields to clear.  To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
     * @summary UpdateOrder
     * @param {string} orderId The ID of the order to update.
     * @param {UpdateOrderRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    updateOrder(orderId: string, body: UpdateOrderRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateOrderResponse>>;
}
