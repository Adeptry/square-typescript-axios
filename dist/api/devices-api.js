"use strict";
// tslint:disable
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevicesApi = exports.DevicesApiFactory = exports.DevicesApiFp = exports.DevicesApiAxiosParamCreator = void 0;
var globalImportUrl = require("url");
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * DevicesApi - axios parameter creator
 * @export
 */
exports.DevicesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
         * @summary CreateDeviceCode
         * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceCode: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createDeviceCode.');
                    }
                    localVarPath = "/v2/devices/codes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["DEVICE_CREDENTIAL_MANAGEMENT"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves DeviceCode with the associated ID.
         * @summary GetDeviceCode
         * @param {string} id The unique identifier for the device code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCode: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getDeviceCode.');
                    }
                    localVarPath = "/v2/devices/codes/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["DEVICE_CREDENTIAL_MANAGEMENT"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all DeviceCodes associated with the merchant.
         * @summary ListDeviceCodes
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
         * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
         * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeviceCodes: function (cursor, locationId, productType, status, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/v2/devices/codes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["DEVICE_CREDENTIAL_MANAGEMENT"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (cursor !== undefined) {
                        localVarQueryParameter['cursor'] = cursor;
                    }
                    if (locationId !== undefined) {
                        localVarQueryParameter['location_id'] = locationId;
                    }
                    if (productType !== undefined) {
                        localVarQueryParameter['product_type'] = productType;
                    }
                    if (status !== undefined) {
                        localVarQueryParameter['status'] = status;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * DevicesApi - functional programming interface
 * @export
 */
exports.DevicesApiFp = function (configuration) {
    return {
        /**
         * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
         * @summary CreateDeviceCode
         * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceCode: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DevicesApiAxiosParamCreator(configuration).createDeviceCode(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves DeviceCode with the associated ID.
         * @summary GetDeviceCode
         * @param {string} id The unique identifier for the device code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCode: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DevicesApiAxiosParamCreator(configuration).getDeviceCode(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all DeviceCodes associated with the merchant.
         * @summary ListDeviceCodes
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
         * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
         * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeviceCodes: function (cursor, locationId, productType, status, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DevicesApiAxiosParamCreator(configuration).listDeviceCodes(cursor, locationId, productType, status, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * DevicesApi - factory interface
 * @export
 */
exports.DevicesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
         * @summary CreateDeviceCode
         * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceCode: function (body, options) {
            return exports.DevicesApiFp(configuration).createDeviceCode(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves DeviceCode with the associated ID.
         * @summary GetDeviceCode
         * @param {string} id The unique identifier for the device code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCode: function (id, options) {
            return exports.DevicesApiFp(configuration).getDeviceCode(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all DeviceCodes associated with the merchant.
         * @summary ListDeviceCodes
         * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
         * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
         * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
         * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeviceCodes: function (cursor, locationId, productType, status, options) {
            return exports.DevicesApiFp(configuration).listDeviceCodes(cursor, locationId, productType, status, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
var DevicesApi = /** @class */ (function (_super) {
    __extends(DevicesApi, _super);
    function DevicesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
     * @summary CreateDeviceCode
     * @param {CreateDeviceCodeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.createDeviceCode = function (body, options) {
        var _this = this;
        return exports.DevicesApiFp(this.configuration).createDeviceCode(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves DeviceCode with the associated ID.
     * @summary GetDeviceCode
     * @param {string} id The unique identifier for the device code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.getDeviceCode = function (id, options) {
        var _this = this;
        return exports.DevicesApiFp(this.configuration).getDeviceCode(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all DeviceCodes associated with the merchant.
     * @summary ListDeviceCodes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {string} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
     * @param {string} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
     * @param {string} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.listDeviceCodes = function (cursor, locationId, productType, status, options) {
        var _this = this;
        return exports.DevicesApiFp(this.configuration).listDeviceCodes(cursor, locationId, productType, status, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DevicesApi;
}(base_1.BaseAPI));
exports.DevicesApi = DevicesApi;
