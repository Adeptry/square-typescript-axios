/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { V1AdjustInventoryRequest } from '../models';
import { V1Category } from '../models';
import { V1Discount } from '../models';
import { V1Fee } from '../models';
import { V1InventoryEntry } from '../models';
import { V1Item } from '../models';
import { V1ModifierList } from '../models';
import { V1ModifierOption } from '../models';
import { V1Page } from '../models';
import { V1PageCell } from '../models';
import { V1UpdateModifierListRequest } from '../models';
import { V1Variation } from '../models';
/**
 * V1ItemsApi - axios parameter creator
 * @export
 */
export declare const V1ItemsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adjusts the current available inventory of an item variation.
     * @summary AdjustInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} variationId The ID of the variation to adjust inventory information for.
     * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustInventory: (locationId: string, variationId: string, body: V1AdjustInventoryRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
     * @summary ApplyFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyFee: (locationId: string, itemId: string, feeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Associates a modifier list with an item so the associated modifier options can be applied to the item.
     * @summary ApplyModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to apply.
     * @param {string} itemId The ID of the item to add the modifier list to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyModifierList: (locationId: string, modifierListId: string, itemId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an item category.
     * @summary CreateCategory
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory: (locationId: string, body: V1Category, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a discount.
     * @summary CreateDiscount
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiscount: (locationId: string, body: V1Discount, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a fee (tax).
     * @summary CreateFee
     * @param {string} locationId The ID of the location to create a fee for.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFee: (locationId: string, body: V1Fee, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
     * @summary CreateItem
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem: (locationId: string, body: V1Item, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an item modifier list and at least 1 modifier option for it.
     * @summary CreateModifierList
     * @param {string} locationId The ID of the location to create a modifier list for.
     * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierList: (locationId: string, body: V1ModifierList, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an item modifier option and adds it to a modifier list.
     * @summary CreateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierOption: (locationId: string, modifierListId: string, body: V1ModifierOption, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a Favorites page in Square Point of Sale.
     * @summary CreatePage
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPage: (locationId: string, body: V1Page, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an item variation for an existing item.
     * @summary CreateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVariation: (locationId: string, itemId: string, body: V1Variation, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
     * @summary DeleteCategory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} categoryId The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory: (locationId: string, categoryId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
     * @summary DeleteDiscount
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} discountId The ID of the discount to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiscount: (locationId: string, discountId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
     * @summary DeleteFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFee: (locationId: string, feeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
     * @summary DeleteItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem: (locationId: string, itemId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
     * @summary DeleteModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierList: (locationId: string, modifierListId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
     * @summary DeleteModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierOption: (locationId: string, modifierListId: string, modifierOptionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
     * @summary DeletePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePage: (locationId: string, pageId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
     * @summary DeletePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePageCell: (locationId: string, pageId: string, row?: string, column?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
     * @summary DeleteVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to delete.
     * @param {string} variationId The ID of the variation to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariation: (locationId: string, itemId: string, variationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all the item categories for a given location.
     * @summary ListCategories
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all the discounts for a given location.
     * @summary ListDiscounts
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDiscounts: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all the fees (taxes) for a given location.
     * @summary ListFees
     * @param {string} locationId The ID of the location to list fees for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFees: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides inventory information for all inventory-enabled item variations.
     * @summary ListInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInventory: (locationId: string, limit?: number, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information of all items for a given location.
     * @summary ListItems
     * @param {string} locationId The ID of the location to list items for.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listItems: (locationId: string, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all the modifier lists for a given location.
     * @summary ListModifierLists
     * @param {string} locationId The ID of the location to list modifier lists for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModifierLists: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all Favorites pages (in Square Point of Sale) for a given location.
     * @summary ListPages
     * @param {string} locationId The ID of the location to list Favorites pages for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPages: (locationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
     * @summary RemoveFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFee: (locationId: string, itemId: string, feeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
     * @summary RemoveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to remove.
     * @param {string} itemId The ID of the item to remove the modifier list from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeModifierList: (locationId: string, modifierListId: string, itemId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     * @summary RetrieveItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveItem: (locationId: string, itemId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single modifier list.
     * @summary RetrieveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The modifier list\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveModifierList: (locationId: string, modifierListId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing item category.
     * @summary UpdateCategory
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} categoryId The ID of the category to edit.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory: (locationId: string, categoryId: string, body: V1Category, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing discount.
     * @summary UpdateDiscount
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} discountId The ID of the discount to edit.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDiscount: (locationId: string, discountId: string, body: V1Discount, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing fee (tax).
     * @summary UpdateFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to edit.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFee: (locationId: string, feeId: string, body: V1Fee, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the core details of an existing item.
     * @summary UpdateItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem: (locationId: string, itemId: string, body: V1Item, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing item modifier list.
     * @summary UpdateModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierList: (locationId: string, modifierListId: string, body: V1UpdateModifierListRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing item modifier option.
     * @summary UpdateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierOption: (locationId: string, modifierListId: string, modifierOptionId: string, body: V1ModifierOption, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of a Favorites page in Square Point of Sale.
     * @summary UpdatePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location
     * @param {string} pageId The ID of the page to modify.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePage: (locationId: string, pageId: string, body: V1Page, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies a cell of a Favorites page in Square Point of Sale.
     * @summary UpdatePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page the cell belongs to.
     * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePageCell: (locationId: string, pageId: string, body: V1PageCell, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an existing item variation.
     * @summary UpdateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {string} variationId The ID of the variation to modify.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariation: (locationId: string, itemId: string, variationId: string, body: V1Variation, options?: any) => Promise<RequestArgs>;
};
/**
 * V1ItemsApi - functional programming interface
 * @export
 */
export declare const V1ItemsApiFp: (configuration?: Configuration) => {
    /**
     * Adjusts the current available inventory of an item variation.
     * @summary AdjustInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} variationId The ID of the variation to adjust inventory information for.
     * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustInventory(locationId: string, variationId: string, body: V1AdjustInventoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1InventoryEntry>>;
    /**
     * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
     * @summary ApplyFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyFee(locationId: string, itemId: string, feeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Associates a modifier list with an item so the associated modifier options can be applied to the item.
     * @summary ApplyModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to apply.
     * @param {string} itemId The ID of the item to add the modifier list to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Creates an item category.
     * @summary CreateCategory
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(locationId: string, body: V1Category, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Category>>;
    /**
     * Creates a discount.
     * @summary CreateDiscount
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiscount(locationId: string, body: V1Discount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Discount>>;
    /**
     * Creates a fee (tax).
     * @summary CreateFee
     * @param {string} locationId The ID of the location to create a fee for.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFee(locationId: string, body: V1Fee, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Fee>>;
    /**
     * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
     * @summary CreateItem
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem(locationId: string, body: V1Item, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Creates an item modifier list and at least 1 modifier option for it.
     * @summary CreateModifierList
     * @param {string} locationId The ID of the location to create a modifier list for.
     * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierList(locationId: string, body: V1ModifierList, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierList>>;
    /**
     * Creates an item modifier option and adds it to a modifier list.
     * @summary CreateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierOption(locationId: string, modifierListId: string, body: V1ModifierOption, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierOption>>;
    /**
     * Creates a Favorites page in Square Point of Sale.
     * @summary CreatePage
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPage(locationId: string, body: V1Page, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Page>>;
    /**
     * Creates an item variation for an existing item.
     * @summary CreateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVariation(locationId: string, itemId: string, body: V1Variation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Variation>>;
    /**
     * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
     * @summary DeleteCategory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} categoryId The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory(locationId: string, categoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Category>>;
    /**
     * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
     * @summary DeleteDiscount
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} discountId The ID of the discount to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiscount(locationId: string, discountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Discount>>;
    /**
     * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
     * @summary DeleteFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFee(locationId: string, feeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Fee>>;
    /**
     * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
     * @summary DeleteItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem(locationId: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
     * @summary DeleteModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierList(locationId: string, modifierListId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierList>>;
    /**
     * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
     * @summary DeleteModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierOption>>;
    /**
     * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
     * @summary DeletePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePage(locationId: string, pageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Page>>;
    /**
     * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
     * @summary DeletePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePageCell(locationId: string, pageId: string, row?: string, column?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Page>>;
    /**
     * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
     * @summary DeleteVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to delete.
     * @param {string} variationId The ID of the variation to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariation(locationId: string, itemId: string, variationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Variation>>;
    /**
     * Lists all the item categories for a given location.
     * @summary ListCategories
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Category>>>;
    /**
     * Lists all the discounts for a given location.
     * @summary ListDiscounts
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDiscounts(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Discount>>>;
    /**
     * Lists all the fees (taxes) for a given location.
     * @summary ListFees
     * @param {string} locationId The ID of the location to list fees for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFees(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Fee>>>;
    /**
     * Provides inventory information for all inventory-enabled item variations.
     * @summary ListInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInventory(locationId: string, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1InventoryEntry>>>;
    /**
     * Provides summary information of all items for a given location.
     * @summary ListItems
     * @param {string} locationId The ID of the location to list items for.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listItems(locationId: string, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Item>>>;
    /**
     * Lists all the modifier lists for a given location.
     * @summary ListModifierLists
     * @param {string} locationId The ID of the location to list modifier lists for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModifierLists(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1ModifierList>>>;
    /**
     * Lists all Favorites pages (in Square Point of Sale) for a given location.
     * @summary ListPages
     * @param {string} locationId The ID of the location to list Favorites pages for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPages(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Page>>>;
    /**
     * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
     * @summary RemoveFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFee(locationId: string, itemId: string, feeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
     * @summary RemoveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to remove.
     * @param {string} itemId The ID of the item to remove the modifier list from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     * @summary RetrieveItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveItem(locationId: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Provides the details for a single modifier list.
     * @summary RetrieveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The modifier list\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveModifierList(locationId: string, modifierListId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierList>>;
    /**
     * Modifies the details of an existing item category.
     * @summary UpdateCategory
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} categoryId The ID of the category to edit.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(locationId: string, categoryId: string, body: V1Category, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Category>>;
    /**
     * Modifies the details of an existing discount.
     * @summary UpdateDiscount
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} discountId The ID of the discount to edit.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDiscount(locationId: string, discountId: string, body: V1Discount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Discount>>;
    /**
     * Modifies the details of an existing fee (tax).
     * @summary UpdateFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to edit.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFee(locationId: string, feeId: string, body: V1Fee, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Fee>>;
    /**
     * Modifies the core details of an existing item.
     * @summary UpdateItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem(locationId: string, itemId: string, body: V1Item, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Item>>;
    /**
     * Modifies the details of an existing item modifier list.
     * @summary UpdateModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierList(locationId: string, modifierListId: string, body: V1UpdateModifierListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierList>>;
    /**
     * Modifies the details of an existing item modifier option.
     * @summary UpdateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, body: V1ModifierOption, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ModifierOption>>;
    /**
     * Modifies the details of a Favorites page in Square Point of Sale.
     * @summary UpdatePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location
     * @param {string} pageId The ID of the page to modify.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePage(locationId: string, pageId: string, body: V1Page, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Page>>;
    /**
     * Modifies a cell of a Favorites page in Square Point of Sale.
     * @summary UpdatePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page the cell belongs to.
     * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePageCell(locationId: string, pageId: string, body: V1PageCell, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Page>>;
    /**
     * Modifies the details of an existing item variation.
     * @summary UpdateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {string} variationId The ID of the variation to modify.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariation(locationId: string, itemId: string, variationId: string, body: V1Variation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Variation>>;
};
/**
 * V1ItemsApi - factory interface
 * @export
 */
export declare const V1ItemsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adjusts the current available inventory of an item variation.
     * @summary AdjustInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} variationId The ID of the variation to adjust inventory information for.
     * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustInventory(locationId: string, variationId: string, body: V1AdjustInventoryRequest, options?: any): AxiosPromise<V1InventoryEntry>;
    /**
     * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
     * @summary ApplyFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyFee(locationId: string, itemId: string, feeId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Associates a modifier list with an item so the associated modifier options can be applied to the item.
     * @summary ApplyModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to apply.
     * @param {string} itemId The ID of the item to add the modifier list to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Creates an item category.
     * @summary CreateCategory
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(locationId: string, body: V1Category, options?: any): AxiosPromise<V1Category>;
    /**
     * Creates a discount.
     * @summary CreateDiscount
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiscount(locationId: string, body: V1Discount, options?: any): AxiosPromise<V1Discount>;
    /**
     * Creates a fee (tax).
     * @summary CreateFee
     * @param {string} locationId The ID of the location to create a fee for.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFee(locationId: string, body: V1Fee, options?: any): AxiosPromise<V1Fee>;
    /**
     * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
     * @summary CreateItem
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem(locationId: string, body: V1Item, options?: any): AxiosPromise<V1Item>;
    /**
     * Creates an item modifier list and at least 1 modifier option for it.
     * @summary CreateModifierList
     * @param {string} locationId The ID of the location to create a modifier list for.
     * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierList(locationId: string, body: V1ModifierList, options?: any): AxiosPromise<V1ModifierList>;
    /**
     * Creates an item modifier option and adds it to a modifier list.
     * @summary CreateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createModifierOption(locationId: string, modifierListId: string, body: V1ModifierOption, options?: any): AxiosPromise<V1ModifierOption>;
    /**
     * Creates a Favorites page in Square Point of Sale.
     * @summary CreatePage
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPage(locationId: string, body: V1Page, options?: any): AxiosPromise<V1Page>;
    /**
     * Creates an item variation for an existing item.
     * @summary CreateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVariation(locationId: string, itemId: string, body: V1Variation, options?: any): AxiosPromise<V1Variation>;
    /**
     * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
     * @summary DeleteCategory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} categoryId The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory(locationId: string, categoryId: string, options?: any): AxiosPromise<V1Category>;
    /**
     * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
     * @summary DeleteDiscount
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} discountId The ID of the discount to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiscount(locationId: string, discountId: string, options?: any): AxiosPromise<V1Discount>;
    /**
     * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
     * @summary DeleteFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFee(locationId: string, feeId: string, options?: any): AxiosPromise<V1Fee>;
    /**
     * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
     * @summary DeleteItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem(locationId: string, itemId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
     * @summary DeleteModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierList(locationId: string, modifierListId: string, options?: any): AxiosPromise<V1ModifierList>;
    /**
     * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
     * @summary DeleteModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, options?: any): AxiosPromise<V1ModifierOption>;
    /**
     * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
     * @summary DeletePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePage(locationId: string, pageId: string, options?: any): AxiosPromise<V1Page>;
    /**
     * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
     * @summary DeletePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePageCell(locationId: string, pageId: string, row?: string, column?: string, options?: any): AxiosPromise<V1Page>;
    /**
     * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
     * @summary DeleteVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to delete.
     * @param {string} variationId The ID of the variation to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariation(locationId: string, itemId: string, variationId: string, options?: any): AxiosPromise<V1Variation>;
    /**
     * Lists all the item categories for a given location.
     * @summary ListCategories
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories(locationId: string, options?: any): AxiosPromise<Array<V1Category>>;
    /**
     * Lists all the discounts for a given location.
     * @summary ListDiscounts
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDiscounts(locationId: string, options?: any): AxiosPromise<Array<V1Discount>>;
    /**
     * Lists all the fees (taxes) for a given location.
     * @summary ListFees
     * @param {string} locationId The ID of the location to list fees for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFees(locationId: string, options?: any): AxiosPromise<Array<V1Fee>>;
    /**
     * Provides inventory information for all inventory-enabled item variations.
     * @summary ListInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInventory(locationId: string, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1InventoryEntry>>;
    /**
     * Provides summary information of all items for a given location.
     * @summary ListItems
     * @param {string} locationId The ID of the location to list items for.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listItems(locationId: string, batchToken?: string, options?: any): AxiosPromise<Array<V1Item>>;
    /**
     * Lists all the modifier lists for a given location.
     * @summary ListModifierLists
     * @param {string} locationId The ID of the location to list modifier lists for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModifierLists(locationId: string, options?: any): AxiosPromise<Array<V1ModifierList>>;
    /**
     * Lists all Favorites pages (in Square Point of Sale) for a given location.
     * @summary ListPages
     * @param {string} locationId The ID of the location to list Favorites pages for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPages(locationId: string, options?: any): AxiosPromise<Array<V1Page>>;
    /**
     * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
     * @summary RemoveFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFee(locationId: string, itemId: string, feeId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
     * @summary RemoveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to remove.
     * @param {string} itemId The ID of the item to remove the modifier list from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     * @summary RetrieveItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveItem(locationId: string, itemId: string, options?: any): AxiosPromise<V1Item>;
    /**
     * Provides the details for a single modifier list.
     * @summary RetrieveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The modifier list\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveModifierList(locationId: string, modifierListId: string, options?: any): AxiosPromise<V1ModifierList>;
    /**
     * Modifies the details of an existing item category.
     * @summary UpdateCategory
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} categoryId The ID of the category to edit.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(locationId: string, categoryId: string, body: V1Category, options?: any): AxiosPromise<V1Category>;
    /**
     * Modifies the details of an existing discount.
     * @summary UpdateDiscount
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} discountId The ID of the discount to edit.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDiscount(locationId: string, discountId: string, body: V1Discount, options?: any): AxiosPromise<V1Discount>;
    /**
     * Modifies the details of an existing fee (tax).
     * @summary UpdateFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to edit.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFee(locationId: string, feeId: string, body: V1Fee, options?: any): AxiosPromise<V1Fee>;
    /**
     * Modifies the core details of an existing item.
     * @summary UpdateItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem(locationId: string, itemId: string, body: V1Item, options?: any): AxiosPromise<V1Item>;
    /**
     * Modifies the details of an existing item modifier list.
     * @summary UpdateModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierList(locationId: string, modifierListId: string, body: V1UpdateModifierListRequest, options?: any): AxiosPromise<V1ModifierList>;
    /**
     * Modifies the details of an existing item modifier option.
     * @summary UpdateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, body: V1ModifierOption, options?: any): AxiosPromise<V1ModifierOption>;
    /**
     * Modifies the details of a Favorites page in Square Point of Sale.
     * @summary UpdatePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location
     * @param {string} pageId The ID of the page to modify.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePage(locationId: string, pageId: string, body: V1Page, options?: any): AxiosPromise<V1Page>;
    /**
     * Modifies a cell of a Favorites page in Square Point of Sale.
     * @summary UpdatePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page the cell belongs to.
     * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePageCell(locationId: string, pageId: string, body: V1PageCell, options?: any): AxiosPromise<V1Page>;
    /**
     * Modifies the details of an existing item variation.
     * @summary UpdateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {string} variationId The ID of the variation to modify.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariation(locationId: string, itemId: string, variationId: string, body: V1Variation, options?: any): AxiosPromise<V1Variation>;
};
/**
 * V1ItemsApi - object-oriented interface
 * @export
 * @class V1ItemsApi
 * @extends {BaseAPI}
 */
export declare class V1ItemsApi extends BaseAPI {
    /**
     * Adjusts the current available inventory of an item variation.
     * @summary AdjustInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} variationId The ID of the variation to adjust inventory information for.
     * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    adjustInventory(locationId: string, variationId: string, body: V1AdjustInventoryRequest, options?: any): Promise<import("axios").AxiosResponse<V1InventoryEntry>>;
    /**
     * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
     * @summary ApplyFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    applyFee(locationId: string, itemId: string, feeId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Associates a modifier list with an item so the associated modifier options can be applied to the item.
     * @summary ApplyModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to apply.
     * @param {string} itemId The ID of the item to add the modifier list to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    applyModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Creates an item category.
     * @summary CreateCategory
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createCategory(locationId: string, body: V1Category, options?: any): Promise<import("axios").AxiosResponse<V1Category>>;
    /**
     * Creates a discount.
     * @summary CreateDiscount
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createDiscount(locationId: string, body: V1Discount, options?: any): Promise<import("axios").AxiosResponse<V1Discount>>;
    /**
     * Creates a fee (tax).
     * @summary CreateFee
     * @param {string} locationId The ID of the location to create a fee for.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createFee(locationId: string, body: V1Fee, options?: any): Promise<import("axios").AxiosResponse<V1Fee>>;
    /**
     * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
     * @summary CreateItem
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createItem(locationId: string, body: V1Item, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Creates an item modifier list and at least 1 modifier option for it.
     * @summary CreateModifierList
     * @param {string} locationId The ID of the location to create a modifier list for.
     * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createModifierList(locationId: string, body: V1ModifierList, options?: any): Promise<import("axios").AxiosResponse<V1ModifierList>>;
    /**
     * Creates an item modifier option and adds it to a modifier list.
     * @summary CreateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createModifierOption(locationId: string, modifierListId: string, body: V1ModifierOption, options?: any): Promise<import("axios").AxiosResponse<V1ModifierOption>>;
    /**
     * Creates a Favorites page in Square Point of Sale.
     * @summary CreatePage
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createPage(locationId: string, body: V1Page, options?: any): Promise<import("axios").AxiosResponse<V1Page>>;
    /**
     * Creates an item variation for an existing item.
     * @summary CreateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    createVariation(locationId: string, itemId: string, body: V1Variation, options?: any): Promise<import("axios").AxiosResponse<V1Variation>>;
    /**
     * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
     * @summary DeleteCategory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} categoryId The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteCategory(locationId: string, categoryId: string, options?: any): Promise<import("axios").AxiosResponse<V1Category>>;
    /**
     * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
     * @summary DeleteDiscount
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} discountId The ID of the discount to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteDiscount(locationId: string, discountId: string, options?: any): Promise<import("axios").AxiosResponse<V1Discount>>;
    /**
     * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
     * @summary DeleteFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteFee(locationId: string, feeId: string, options?: any): Promise<import("axios").AxiosResponse<V1Fee>>;
    /**
     * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
     * @summary DeleteItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteItem(locationId: string, itemId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
     * @summary DeleteModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteModifierList(locationId: string, modifierListId: string, options?: any): Promise<import("axios").AxiosResponse<V1ModifierList>>;
    /**
     * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
     * @summary DeleteModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, options?: any): Promise<import("axios").AxiosResponse<V1ModifierOption>>;
    /**
     * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
     * @summary DeletePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deletePage(locationId: string, pageId: string, options?: any): Promise<import("axios").AxiosResponse<V1Page>>;
    /**
     * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
     * @summary DeletePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deletePageCell(locationId: string, pageId: string, row?: string, column?: string, options?: any): Promise<import("axios").AxiosResponse<V1Page>>;
    /**
     * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
     * @summary DeleteVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to delete.
     * @param {string} variationId The ID of the variation to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    deleteVariation(locationId: string, itemId: string, variationId: string, options?: any): Promise<import("axios").AxiosResponse<V1Variation>>;
    /**
     * Lists all the item categories for a given location.
     * @summary ListCategories
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listCategories(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1Category[]>>;
    /**
     * Lists all the discounts for a given location.
     * @summary ListDiscounts
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listDiscounts(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1Discount[]>>;
    /**
     * Lists all the fees (taxes) for a given location.
     * @summary ListFees
     * @param {string} locationId The ID of the location to list fees for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listFees(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1Fee[]>>;
    /**
     * Provides inventory information for all inventory-enabled item variations.
     * @summary ListInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listInventory(locationId: string, limit?: number, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1InventoryEntry[]>>;
    /**
     * Provides summary information of all items for a given location.
     * @summary ListItems
     * @param {string} locationId The ID of the location to list items for.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listItems(locationId: string, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1Item[]>>;
    /**
     * Lists all the modifier lists for a given location.
     * @summary ListModifierLists
     * @param {string} locationId The ID of the location to list modifier lists for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listModifierLists(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1ModifierList[]>>;
    /**
     * Lists all Favorites pages (in Square Point of Sale) for a given location.
     * @summary ListPages
     * @param {string} locationId The ID of the location to list Favorites pages for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    listPages(locationId: string, options?: any): Promise<import("axios").AxiosResponse<V1Page[]>>;
    /**
     * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
     * @summary RemoveFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    removeFee(locationId: string, itemId: string, feeId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
     * @summary RemoveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to remove.
     * @param {string} itemId The ID of the item to remove the modifier list from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    removeModifierList(locationId: string, modifierListId: string, itemId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     * @summary RetrieveItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    retrieveItem(locationId: string, itemId: string, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Provides the details for a single modifier list.
     * @summary RetrieveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The modifier list\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    retrieveModifierList(locationId: string, modifierListId: string, options?: any): Promise<import("axios").AxiosResponse<V1ModifierList>>;
    /**
     * Modifies the details of an existing item category.
     * @summary UpdateCategory
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} categoryId The ID of the category to edit.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateCategory(locationId: string, categoryId: string, body: V1Category, options?: any): Promise<import("axios").AxiosResponse<V1Category>>;
    /**
     * Modifies the details of an existing discount.
     * @summary UpdateDiscount
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} discountId The ID of the discount to edit.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateDiscount(locationId: string, discountId: string, body: V1Discount, options?: any): Promise<import("axios").AxiosResponse<V1Discount>>;
    /**
     * Modifies the details of an existing fee (tax).
     * @summary UpdateFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to edit.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateFee(locationId: string, feeId: string, body: V1Fee, options?: any): Promise<import("axios").AxiosResponse<V1Fee>>;
    /**
     * Modifies the core details of an existing item.
     * @summary UpdateItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateItem(locationId: string, itemId: string, body: V1Item, options?: any): Promise<import("axios").AxiosResponse<V1Item>>;
    /**
     * Modifies the details of an existing item modifier list.
     * @summary UpdateModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateModifierList(locationId: string, modifierListId: string, body: V1UpdateModifierListRequest, options?: any): Promise<import("axios").AxiosResponse<V1ModifierList>>;
    /**
     * Modifies the details of an existing item modifier option.
     * @summary UpdateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateModifierOption(locationId: string, modifierListId: string, modifierOptionId: string, body: V1ModifierOption, options?: any): Promise<import("axios").AxiosResponse<V1ModifierOption>>;
    /**
     * Modifies the details of a Favorites page in Square Point of Sale.
     * @summary UpdatePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location
     * @param {string} pageId The ID of the page to modify.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updatePage(locationId: string, pageId: string, body: V1Page, options?: any): Promise<import("axios").AxiosResponse<V1Page>>;
    /**
     * Modifies a cell of a Favorites page in Square Point of Sale.
     * @summary UpdatePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page the cell belongs to.
     * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updatePageCell(locationId: string, pageId: string, body: V1PageCell, options?: any): Promise<import("axios").AxiosResponse<V1Page>>;
    /**
     * Modifies the details of an existing item variation.
     * @summary UpdateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {string} variationId The ID of the variation to modify.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    updateVariation(locationId: string, itemId: string, variationId: string, body: V1Variation, options?: any): Promise<import("axios").AxiosResponse<V1Variation>>;
}
