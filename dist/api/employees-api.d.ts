/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ListEmployeesResponse } from '../models';
import { RetrieveEmployeeResponse } from '../models';
/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export declare const EmployeesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary ListEmployees
     * @param {string} [locationId]
     * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {number} [limit] The number of employees to be returned on each page.
     * @param {string} [cursor] The token required to retrieve the specified page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees: (locationId?: string, status?: string, limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary RetrieveEmployee
     * @param {string} id UUID for the employee that was requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee: (id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * EmployeesApi - functional programming interface
 * @export
 */
export declare const EmployeesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary ListEmployees
     * @param {string} [locationId]
     * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {number} [limit] The number of employees to be returned on each page.
     * @param {string} [cursor] The token required to retrieve the specified page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees(locationId?: string, status?: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEmployeesResponse>>;
    /**
     *
     * @summary RetrieveEmployee
     * @param {string} id UUID for the employee that was requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveEmployeeResponse>>;
};
/**
 * EmployeesApi - factory interface
 * @export
 */
export declare const EmployeesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary ListEmployees
     * @param {string} [locationId]
     * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {number} [limit] The number of employees to be returned on each page.
     * @param {string} [cursor] The token required to retrieve the specified page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees(locationId?: string, status?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListEmployeesResponse>;
    /**
     *
     * @summary RetrieveEmployee
     * @param {string} id UUID for the employee that was requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee(id: string, options?: any): AxiosPromise<RetrieveEmployeeResponse>;
};
/**
 * EmployeesApi - object-oriented interface
 * @export
 * @class EmployeesApi
 * @extends {BaseAPI}
 */
export declare class EmployeesApi extends BaseAPI {
    /**
     *
     * @summary ListEmployees
     * @param {string} [locationId]
     * @param {string} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {number} [limit] The number of employees to be returned on each page.
     * @param {string} [cursor] The token required to retrieve the specified page of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    listEmployees(locationId?: string, status?: string, limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListEmployeesResponse>>;
    /**
     *
     * @summary RetrieveEmployee
     * @param {string} id UUID for the employee that was requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    retrieveEmployee(id: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveEmployeeResponse>>;
}
