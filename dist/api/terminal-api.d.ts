/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CancelTerminalCheckoutResponse } from '../models';
import { CancelTerminalRefundResponse } from '../models';
import { CreateTerminalCheckoutRequest } from '../models';
import { CreateTerminalCheckoutResponse } from '../models';
import { CreateTerminalRefundRequest } from '../models';
import { CreateTerminalRefundResponse } from '../models';
import { GetTerminalCheckoutResponse } from '../models';
import { GetTerminalRefundResponse } from '../models';
import { SearchTerminalCheckoutsRequest } from '../models';
import { SearchTerminalCheckoutsResponse } from '../models';
import { SearchTerminalRefundsRequest } from '../models';
import { SearchTerminalRefundsResponse } from '../models';
/**
 * TerminalApi - axios parameter creator
 * @export
 */
export declare const TerminalApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @summary CancelTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalCheckout: (checkoutId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
     * @summary CancelTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalRefund: (terminalRefundId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @summary CreateTerminalCheckout
     * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalCheckout: (body: CreateTerminalCheckoutRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @summary CreateTerminalRefund
     * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalRefund: (body: CreateTerminalRefundRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a Terminal checkout request by checkout_id.
     * @summary GetTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalCheckout: (checkoutId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves an Interac terminal refund object by ID.
     * @summary GetTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalRefund: (terminalRefundId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @summary SearchTerminalCheckouts
     * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalCheckouts: (body: SearchTerminalCheckoutsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
     * @summary SearchTerminalRefunds
     * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalRefunds: (body: SearchTerminalRefundsRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * TerminalApi - functional programming interface
 * @export
 */
export declare const TerminalApiFp: (configuration?: Configuration) => {
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @summary CancelTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalCheckout(checkoutId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelTerminalCheckoutResponse>>;
    /**
     * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
     * @summary CancelTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalRefund(terminalRefundId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelTerminalRefundResponse>>;
    /**
     * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @summary CreateTerminalCheckout
     * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalCheckout(body: CreateTerminalCheckoutRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTerminalCheckoutResponse>>;
    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @summary CreateTerminalRefund
     * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalRefund(body: CreateTerminalRefundRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTerminalRefundResponse>>;
    /**
     * Retrieves a Terminal checkout request by checkout_id.
     * @summary GetTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalCheckout(checkoutId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTerminalCheckoutResponse>>;
    /**
     * Retrieves an Interac terminal refund object by ID.
     * @summary GetTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalRefund(terminalRefundId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTerminalRefundResponse>>;
    /**
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @summary SearchTerminalCheckouts
     * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalCheckouts(body: SearchTerminalCheckoutsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchTerminalCheckoutsResponse>>;
    /**
     * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
     * @summary SearchTerminalRefunds
     * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalRefunds(body: SearchTerminalRefundsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchTerminalRefundsResponse>>;
};
/**
 * TerminalApi - factory interface
 * @export
 */
export declare const TerminalApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @summary CancelTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalCheckout(checkoutId: string, options?: any): AxiosPromise<CancelTerminalCheckoutResponse>;
    /**
     * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
     * @summary CancelTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTerminalRefund(terminalRefundId: string, options?: any): AxiosPromise<CancelTerminalRefundResponse>;
    /**
     * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @summary CreateTerminalCheckout
     * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalCheckout(body: CreateTerminalCheckoutRequest, options?: any): AxiosPromise<CreateTerminalCheckoutResponse>;
    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @summary CreateTerminalRefund
     * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTerminalRefund(body: CreateTerminalRefundRequest, options?: any): AxiosPromise<CreateTerminalRefundResponse>;
    /**
     * Retrieves a Terminal checkout request by checkout_id.
     * @summary GetTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalCheckout(checkoutId: string, options?: any): AxiosPromise<GetTerminalCheckoutResponse>;
    /**
     * Retrieves an Interac terminal refund object by ID.
     * @summary GetTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTerminalRefund(terminalRefundId: string, options?: any): AxiosPromise<GetTerminalRefundResponse>;
    /**
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @summary SearchTerminalCheckouts
     * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalCheckouts(body: SearchTerminalCheckoutsRequest, options?: any): AxiosPromise<SearchTerminalCheckoutsResponse>;
    /**
     * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
     * @summary SearchTerminalRefunds
     * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTerminalRefunds(body: SearchTerminalRefundsRequest, options?: any): AxiosPromise<SearchTerminalRefundsResponse>;
};
/**
 * TerminalApi - object-oriented interface
 * @export
 * @class TerminalApi
 * @extends {BaseAPI}
 */
export declare class TerminalApi extends BaseAPI {
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @summary CancelTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    cancelTerminalCheckout(checkoutId: string, options?: any): Promise<import("axios").AxiosResponse<CancelTerminalCheckoutResponse>>;
    /**
     * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
     * @summary CancelTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    cancelTerminalRefund(terminalRefundId: string, options?: any): Promise<import("axios").AxiosResponse<CancelTerminalRefundResponse>>;
    /**
     * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @summary CreateTerminalCheckout
     * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    createTerminalCheckout(body: CreateTerminalCheckoutRequest, options?: any): Promise<import("axios").AxiosResponse<CreateTerminalCheckoutResponse>>;
    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @summary CreateTerminalRefund
     * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    createTerminalRefund(body: CreateTerminalRefundRequest, options?: any): Promise<import("axios").AxiosResponse<CreateTerminalRefundResponse>>;
    /**
     * Retrieves a Terminal checkout request by checkout_id.
     * @summary GetTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    getTerminalCheckout(checkoutId: string, options?: any): Promise<import("axios").AxiosResponse<GetTerminalCheckoutResponse>>;
    /**
     * Retrieves an Interac terminal refund object by ID.
     * @summary GetTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    getTerminalRefund(terminalRefundId: string, options?: any): Promise<import("axios").AxiosResponse<GetTerminalRefundResponse>>;
    /**
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @summary SearchTerminalCheckouts
     * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    searchTerminalCheckouts(body: SearchTerminalCheckoutsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchTerminalCheckoutsResponse>>;
    /**
     * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
     * @summary SearchTerminalRefunds
     * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    searchTerminalRefunds(body: SearchTerminalRefundsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchTerminalRefundsResponse>>;
}
