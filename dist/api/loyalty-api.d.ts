/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AccumulateLoyaltyPointsRequest } from '../models';
import { AccumulateLoyaltyPointsResponse } from '../models';
import { AdjustLoyaltyPointsRequest } from '../models';
import { AdjustLoyaltyPointsResponse } from '../models';
import { CalculateLoyaltyPointsRequest } from '../models';
import { CalculateLoyaltyPointsResponse } from '../models';
import { CreateLoyaltyAccountRequest } from '../models';
import { CreateLoyaltyAccountResponse } from '../models';
import { CreateLoyaltyRewardRequest } from '../models';
import { CreateLoyaltyRewardResponse } from '../models';
import { DeleteLoyaltyRewardResponse } from '../models';
import { ListLoyaltyProgramsResponse } from '../models';
import { RedeemLoyaltyRewardRequest } from '../models';
import { RedeemLoyaltyRewardResponse } from '../models';
import { RetrieveLoyaltyAccountResponse } from '../models';
import { RetrieveLoyaltyRewardResponse } from '../models';
import { SearchLoyaltyAccountsRequest } from '../models';
import { SearchLoyaltyAccountsResponse } from '../models';
import { SearchLoyaltyEventsRequest } from '../models';
import { SearchLoyaltyEventsResponse } from '../models';
import { SearchLoyaltyRewardsRequest } from '../models';
import { SearchLoyaltyRewardsResponse } from '../models';
/**
 * LoyaltyApi - axios parameter creator
 * @export
 */
export declare const LoyaltyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
     * @summary AccumulateLoyaltyPoints
     * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
     * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accumulateLoyaltyPoints: (accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
     * @summary AdjustLoyaltyPoints
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
     * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustLoyaltyPoints: (accountId: string, body: AdjustLoyaltyPointsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
     * @summary CalculateLoyaltyPoints
     * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
     * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateLoyaltyPoints: (programId: string, body: CalculateLoyaltyPointsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a loyalty account.
     * @summary CreateLoyaltyAccount
     * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyAccount: (body: CreateLoyaltyAccountRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @summary CreateLoyaltyReward
     * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyReward: (body: CreateLoyaltyRewardRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @summary DeleteLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLoyaltyReward: (rewardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
     * @summary ListLoyaltyPrograms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLoyaltyPrograms: (options?: any) => Promise<RequestArgs>;
    /**
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @summary RedeemLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
     * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemLoyaltyReward: (rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a loyalty account.
     * @summary RetrieveLoyaltyAccount
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyAccount: (accountId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a loyalty reward.
     * @summary RetrieveLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyReward: (rewardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @summary SearchLoyaltyAccounts
     * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyAccounts: (body: SearchLoyaltyAccountsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * @summary SearchLoyaltyEvents
     * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyEvents: (body: SearchLoyaltyEventsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
     * @summary SearchLoyaltyRewards
     * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyRewards: (body: SearchLoyaltyRewardsRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * LoyaltyApi - functional programming interface
 * @export
 */
export declare const LoyaltyApiFp: (configuration?: Configuration) => {
    /**
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
     * @summary AccumulateLoyaltyPoints
     * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
     * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accumulateLoyaltyPoints(accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccumulateLoyaltyPointsResponse>>;
    /**
     * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
     * @summary AdjustLoyaltyPoints
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
     * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustLoyaltyPoints(accountId: string, body: AdjustLoyaltyPointsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdjustLoyaltyPointsResponse>>;
    /**
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
     * @summary CalculateLoyaltyPoints
     * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
     * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateLoyaltyPoints(programId: string, body: CalculateLoyaltyPointsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculateLoyaltyPointsResponse>>;
    /**
     * Creates a loyalty account.
     * @summary CreateLoyaltyAccount
     * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyAccount(body: CreateLoyaltyAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoyaltyAccountResponse>>;
    /**
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @summary CreateLoyaltyReward
     * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyReward(body: CreateLoyaltyRewardRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoyaltyRewardResponse>>;
    /**
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @summary DeleteLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLoyaltyReward(rewardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteLoyaltyRewardResponse>>;
    /**
     * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
     * @summary ListLoyaltyPrograms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLoyaltyPrograms(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLoyaltyProgramsResponse>>;
    /**
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @summary RedeemLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
     * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemLoyaltyReward(rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedeemLoyaltyRewardResponse>>;
    /**
     * Retrieves a loyalty account.
     * @summary RetrieveLoyaltyAccount
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyAccount(accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveLoyaltyAccountResponse>>;
    /**
     * Retrieves a loyalty reward.
     * @summary RetrieveLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyReward(rewardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveLoyaltyRewardResponse>>;
    /**
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @summary SearchLoyaltyAccounts
     * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyAccounts(body: SearchLoyaltyAccountsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLoyaltyAccountsResponse>>;
    /**
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * @summary SearchLoyaltyEvents
     * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyEvents(body: SearchLoyaltyEventsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLoyaltyEventsResponse>>;
    /**
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
     * @summary SearchLoyaltyRewards
     * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyRewards(body: SearchLoyaltyRewardsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLoyaltyRewardsResponse>>;
};
/**
 * LoyaltyApi - factory interface
 * @export
 */
export declare const LoyaltyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
     * @summary AccumulateLoyaltyPoints
     * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
     * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accumulateLoyaltyPoints(accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any): AxiosPromise<AccumulateLoyaltyPointsResponse>;
    /**
     * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
     * @summary AdjustLoyaltyPoints
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
     * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustLoyaltyPoints(accountId: string, body: AdjustLoyaltyPointsRequest, options?: any): AxiosPromise<AdjustLoyaltyPointsResponse>;
    /**
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
     * @summary CalculateLoyaltyPoints
     * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
     * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateLoyaltyPoints(programId: string, body: CalculateLoyaltyPointsRequest, options?: any): AxiosPromise<CalculateLoyaltyPointsResponse>;
    /**
     * Creates a loyalty account.
     * @summary CreateLoyaltyAccount
     * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyAccount(body: CreateLoyaltyAccountRequest, options?: any): AxiosPromise<CreateLoyaltyAccountResponse>;
    /**
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @summary CreateLoyaltyReward
     * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoyaltyReward(body: CreateLoyaltyRewardRequest, options?: any): AxiosPromise<CreateLoyaltyRewardResponse>;
    /**
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @summary DeleteLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLoyaltyReward(rewardId: string, options?: any): AxiosPromise<DeleteLoyaltyRewardResponse>;
    /**
     * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
     * @summary ListLoyaltyPrograms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLoyaltyPrograms(options?: any): AxiosPromise<ListLoyaltyProgramsResponse>;
    /**
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @summary RedeemLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
     * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemLoyaltyReward(rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any): AxiosPromise<RedeemLoyaltyRewardResponse>;
    /**
     * Retrieves a loyalty account.
     * @summary RetrieveLoyaltyAccount
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyAccount(accountId: string, options?: any): AxiosPromise<RetrieveLoyaltyAccountResponse>;
    /**
     * Retrieves a loyalty reward.
     * @summary RetrieveLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveLoyaltyReward(rewardId: string, options?: any): AxiosPromise<RetrieveLoyaltyRewardResponse>;
    /**
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @summary SearchLoyaltyAccounts
     * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyAccounts(body: SearchLoyaltyAccountsRequest, options?: any): AxiosPromise<SearchLoyaltyAccountsResponse>;
    /**
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * @summary SearchLoyaltyEvents
     * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyEvents(body: SearchLoyaltyEventsRequest, options?: any): AxiosPromise<SearchLoyaltyEventsResponse>;
    /**
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
     * @summary SearchLoyaltyRewards
     * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLoyaltyRewards(body: SearchLoyaltyRewardsRequest, options?: any): AxiosPromise<SearchLoyaltyRewardsResponse>;
};
/**
 * LoyaltyApi - object-oriented interface
 * @export
 * @class LoyaltyApi
 * @extends {BaseAPI}
 */
export declare class LoyaltyApi extends BaseAPI {
    /**
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer\'s account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can call  [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more information,  see [Loyalty Program Overview](/docs/loyalty/overview).  You then provide the points in a request to this endpoint.
     * @summary AccumulateLoyaltyPoints
     * @param {string} accountId The &#x60;loyalty account&#x60; ID to which to add the points.
     * @param {AccumulateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    accumulateLoyaltyPoints(accountId: string, body: AccumulateLoyaltyPointsRequest, options?: any): Promise<import("axios").AxiosResponse<AccumulateLoyaltyPointsResponse>>;
    /**
     * Adds points to or subtracts points from a buyer\'s account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)  to add points when a buyer pays for the purchase.
     * @summary AdjustLoyaltyPoints
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; in which to adjust the points.
     * @param {AdjustLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    adjustLoyaltyPoints(accountId: string, body: AdjustLoyaltyPointsRequest, options?: any): Promise<import("axios").AxiosResponse<AdjustLoyaltyPointsResponse>>;
    /**
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.
     * @summary CalculateLoyaltyPoints
     * @param {string} programId The &#x60;loyalty program&#x60; ID, which defines the rules for accruing points.
     * @param {CalculateLoyaltyPointsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    calculateLoyaltyPoints(programId: string, body: CalculateLoyaltyPointsRequest, options?: any): Promise<import("axios").AxiosResponse<CalculateLoyaltyPointsResponse>>;
    /**
     * Creates a loyalty account.
     * @summary CreateLoyaltyAccount
     * @param {CreateLoyaltyAccountRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    createLoyaltyAccount(body: CreateLoyaltyAccountRequest, options?: any): Promise<import("axios").AxiosResponse<CreateLoyaltyAccountResponse>>;
    /**
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @summary CreateLoyaltyReward
     * @param {CreateLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    createLoyaltyReward(body: CreateLoyaltyRewardRequest, options?: any): Promise<import("axios").AxiosResponse<CreateLoyaltyRewardResponse>>;
    /**
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @summary DeleteLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    deleteLoyaltyReward(rewardId: string, options?: any): Promise<import("axios").AxiosResponse<DeleteLoyaltyRewardResponse>>;
    /**
     * Returns a list of loyalty programs in the seller\'s account. Currently, a seller can only have one loyalty program.
     * @summary ListLoyaltyPrograms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    listLoyaltyPrograms(options?: any): Promise<import("axios").AxiosResponse<ListLoyaltyProgramsResponse>>;
    /**
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @summary RedeemLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to redeem.
     * @param {RedeemLoyaltyRewardRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    redeemLoyaltyReward(rewardId: string, body: RedeemLoyaltyRewardRequest, options?: any): Promise<import("axios").AxiosResponse<RedeemLoyaltyRewardResponse>>;
    /**
     * Retrieves a loyalty account.
     * @summary RetrieveLoyaltyAccount
     * @param {string} accountId The ID of the &#x60;loyalty account&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    retrieveLoyaltyAccount(accountId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveLoyaltyAccountResponse>>;
    /**
     * Retrieves a loyalty reward.
     * @summary RetrieveLoyaltyReward
     * @param {string} rewardId The ID of the &#x60;loyalty reward&#x60; to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    retrieveLoyaltyReward(rewardId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveLoyaltyRewardResponse>>;
    /**
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @summary SearchLoyaltyAccounts
     * @param {SearchLoyaltyAccountsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    searchLoyaltyAccounts(body: SearchLoyaltyAccountsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchLoyaltyAccountsResponse>>;
    /**
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer\'s loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * @summary SearchLoyaltyEvents
     * @param {SearchLoyaltyEventsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    searchLoyaltyEvents(body: SearchLoyaltyEventsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchLoyaltyEventsResponse>>;
    /**
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.
     * @summary SearchLoyaltyRewards
     * @param {SearchLoyaltyRewardsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoyaltyApi
     */
    searchLoyaltyRewards(body: SearchLoyaltyRewardsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchLoyaltyRewardsResponse>>;
}
