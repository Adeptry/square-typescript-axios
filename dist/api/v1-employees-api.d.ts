/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { V1CashDrawerShift } from '../models';
import { V1Employee } from '../models';
import { V1EmployeeRole } from '../models';
import { V1Timecard } from '../models';
import { V1TimecardEvent } from '../models';
/**
 * V1EmployeesApi - axios parameter creator
 * @export
 */
export declare const V1EmployeesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
     * @summary CreateEmployee
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployee: (body: V1Employee, options?: any) => Promise<RequestArgs>;
    /**
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     * @summary CreateEmployeeRole
     * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployeeRole: (employeeRole: V1EmployeeRole, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
     * @summary CreateTimecard
     * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTimecard: (body: V1Timecard, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
     * @summary DeleteTimecard
     * @param {string} timecardId The ID of the timecard to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTimecard: (timecardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
     * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShifts: (locationId: string, order?: string, beginTime?: string, endTime?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for all of a business\'s employee roles.
     * @summary ListEmployeeRoles
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeRoles: (order?: string, limit?: number, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for all of a business\'s employees.
     * @summary ListEmployees
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
     * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees: (order?: string, beginUpdatedAt?: string, endUpdatedAt?: string, beginCreatedAt?: string, endCreatedAt?: string, status?: string, externalId?: string, limit?: number, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary ListTimecardEvents
     * @param {string} timecardId The ID of the timecard to list events for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecardEvents: (timecardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides summary information for all of a business\'s employee timecards.
     * @summary ListTimecards
     * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
     * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
     * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecards: (order?: string, employeeId?: string, beginClockinTime?: string, endClockinTime?: string, beginClockoutTime?: string, endClockoutTime?: string, beginUpdatedAt?: string, endUpdatedAt?: string, deleted?: boolean, limit?: number, batchToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCashDrawerShift: (locationId: string, shiftId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single employee.
     * @summary RetrieveEmployee
     * @param {string} employeeId The employee\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee: (employeeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single employee role.
     * @summary RetrieveEmployeeRole
     * @param {string} roleId The role\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployeeRole: (roleId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary RetrieveTimecard
     * @param {string} timecardId The timecard\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTimecard: (timecardId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary UpdateEmployee
     * @param {string} employeeId The ID of the role to modify.
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployee: (employeeId: string, body: V1Employee, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of an employee role.
     * @summary UpdateEmployeeRole
     * @param {string} roleId The ID of the role to modify.
     * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployeeRole: (roleId: string, body: V1EmployeeRole, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
     * @summary UpdateTimecard
     * @param {string} timecardId TThe ID of the timecard to modify.
     * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTimecard: (timecardId: string, body: V1Timecard, options?: any) => Promise<RequestArgs>;
};
/**
 * V1EmployeesApi - functional programming interface
 * @export
 */
export declare const V1EmployeesApiFp: (configuration?: Configuration) => {
    /**
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
     * @summary CreateEmployee
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployee(body: V1Employee, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Employee>>;
    /**
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     * @summary CreateEmployeeRole
     * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployeeRole(employeeRole: V1EmployeeRole, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1EmployeeRole>>;
    /**
     * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
     * @summary CreateTimecard
     * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTimecard(body: V1Timecard, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Timecard>>;
    /**
     * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
     * @summary DeleteTimecard
     * @param {string} timecardId The ID of the timecard to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTimecard(timecardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
     * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShifts(locationId: string, order?: string, beginTime?: string, endTime?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1CashDrawerShift>>>;
    /**
     * Provides summary information for all of a business\'s employee roles.
     * @summary ListEmployeeRoles
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeRoles(order?: string, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1EmployeeRole>>>;
    /**
     * Provides summary information for all of a business\'s employees.
     * @summary ListEmployees
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
     * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees(order?: string, beginUpdatedAt?: string, endUpdatedAt?: string, beginCreatedAt?: string, endCreatedAt?: string, status?: string, externalId?: string, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Employee>>>;
    /**
     * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary ListTimecardEvents
     * @param {string} timecardId The ID of the timecard to list events for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecardEvents(timecardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1TimecardEvent>>>;
    /**
     * Provides summary information for all of a business\'s employee timecards.
     * @summary ListTimecards
     * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
     * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
     * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecards(order?: string, employeeId?: string, beginClockinTime?: string, endClockinTime?: string, beginClockoutTime?: string, endClockoutTime?: string, beginUpdatedAt?: string, endUpdatedAt?: string, deleted?: boolean, limit?: number, batchToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1Timecard>>>;
    /**
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCashDrawerShift(locationId: string, shiftId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CashDrawerShift>>;
    /**
     * Provides the details for a single employee.
     * @summary RetrieveEmployee
     * @param {string} employeeId The employee\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee(employeeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Employee>>;
    /**
     * Provides the details for a single employee role.
     * @summary RetrieveEmployeeRole
     * @param {string} roleId The role\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployeeRole(roleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1EmployeeRole>>;
    /**
     * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary RetrieveTimecard
     * @param {string} timecardId The timecard\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTimecard(timecardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Timecard>>;
    /**
     *
     * @summary UpdateEmployee
     * @param {string} employeeId The ID of the role to modify.
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployee(employeeId: string, body: V1Employee, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Employee>>;
    /**
     * Modifies the details of an employee role.
     * @summary UpdateEmployeeRole
     * @param {string} roleId The ID of the role to modify.
     * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployeeRole(roleId: string, body: V1EmployeeRole, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1EmployeeRole>>;
    /**
     * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
     * @summary UpdateTimecard
     * @param {string} timecardId TThe ID of the timecard to modify.
     * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTimecard(timecardId: string, body: V1Timecard, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Timecard>>;
};
/**
 * V1EmployeesApi - factory interface
 * @export
 */
export declare const V1EmployeesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
     * @summary CreateEmployee
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployee(body: V1Employee, options?: any): AxiosPromise<V1Employee>;
    /**
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     * @summary CreateEmployeeRole
     * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployeeRole(employeeRole: V1EmployeeRole, options?: any): AxiosPromise<V1EmployeeRole>;
    /**
     * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
     * @summary CreateTimecard
     * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTimecard(body: V1Timecard, options?: any): AxiosPromise<V1Timecard>;
    /**
     * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
     * @summary DeleteTimecard
     * @param {string} timecardId The ID of the timecard to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTimecard(timecardId: string, options?: any): AxiosPromise<object>;
    /**
     * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
     * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCashDrawerShifts(locationId: string, order?: string, beginTime?: string, endTime?: string, options?: any): AxiosPromise<Array<V1CashDrawerShift>>;
    /**
     * Provides summary information for all of a business\'s employee roles.
     * @summary ListEmployeeRoles
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeRoles(order?: string, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1EmployeeRole>>;
    /**
     * Provides summary information for all of a business\'s employees.
     * @summary ListEmployees
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
     * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployees(order?: string, beginUpdatedAt?: string, endUpdatedAt?: string, beginCreatedAt?: string, endCreatedAt?: string, status?: string, externalId?: string, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1Employee>>;
    /**
     * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary ListTimecardEvents
     * @param {string} timecardId The ID of the timecard to list events for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecardEvents(timecardId: string, options?: any): AxiosPromise<Array<V1TimecardEvent>>;
    /**
     * Provides summary information for all of a business\'s employee timecards.
     * @summary ListTimecards
     * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
     * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
     * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimecards(order?: string, employeeId?: string, beginClockinTime?: string, endClockinTime?: string, beginClockoutTime?: string, endClockoutTime?: string, beginUpdatedAt?: string, endUpdatedAt?: string, deleted?: boolean, limit?: number, batchToken?: string, options?: any): AxiosPromise<Array<V1Timecard>>;
    /**
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCashDrawerShift(locationId: string, shiftId: string, options?: any): AxiosPromise<V1CashDrawerShift>;
    /**
     * Provides the details for a single employee.
     * @summary RetrieveEmployee
     * @param {string} employeeId The employee\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployee(employeeId: string, options?: any): AxiosPromise<V1Employee>;
    /**
     * Provides the details for a single employee role.
     * @summary RetrieveEmployeeRole
     * @param {string} roleId The role\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveEmployeeRole(roleId: string, options?: any): AxiosPromise<V1EmployeeRole>;
    /**
     * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary RetrieveTimecard
     * @param {string} timecardId The timecard\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTimecard(timecardId: string, options?: any): AxiosPromise<V1Timecard>;
    /**
     *
     * @summary UpdateEmployee
     * @param {string} employeeId The ID of the role to modify.
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployee(employeeId: string, body: V1Employee, options?: any): AxiosPromise<V1Employee>;
    /**
     * Modifies the details of an employee role.
     * @summary UpdateEmployeeRole
     * @param {string} roleId The ID of the role to modify.
     * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployeeRole(roleId: string, body: V1EmployeeRole, options?: any): AxiosPromise<V1EmployeeRole>;
    /**
     * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
     * @summary UpdateTimecard
     * @param {string} timecardId TThe ID of the timecard to modify.
     * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTimecard(timecardId: string, body: V1Timecard, options?: any): AxiosPromise<V1Timecard>;
};
/**
 * V1EmployeesApi - object-oriented interface
 * @export
 * @class V1EmployeesApi
 * @extends {BaseAPI}
 */
export declare class V1EmployeesApi extends BaseAPI {
    /**
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  <aside class=\"important\"> Employee entities cannot be deleted. To disable employee profiles, set the employee\'s status to <code>INACTIVE</code> </aside>
     * @summary CreateEmployee
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    createEmployee(body: V1Employee, options?: any): Promise<import("axios").AxiosResponse<V1Employee>>;
    /**
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     * @summary CreateEmployeeRole
     * @param {V1EmployeeRole} employeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    createEmployeeRole(employeeRole: V1EmployeeRole, options?: any): Promise<import("axios").AxiosResponse<V1EmployeeRole>>;
    /**
     * Creates a timecard for an employee and clocks them in with an `API_CREATE` event and a `clockin_time` set to the current time unless the request provides a different value.  To import timecards from another system (rather than clocking someone in). Specify the `clockin_time` and* `clockout_time` in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the `clockin_time` and `clockout_time` fields. An employee is considered clocked in if they have a timecard that doesn\'t have a `clockout_time` set. An employee that is currently clocked in cannot be clocked in a second time.
     * @summary CreateTimecard
     * @param {V1Timecard} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    createTimecard(body: V1Timecard, options?: any): Promise<import("axios").AxiosResponse<V1Timecard>>;
    /**
     * Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The `deleted` field of the `Timecard` object indicates whether the timecard has been deleted.   __Note__: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the `deleted` query parameter in the list request.  Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API.
     * @summary DeleteTimecard
     * @param {string} timecardId The ID of the timecard to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    deleteTimecard(timecardId: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * Provides the details for all of a location\'s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     * @summary ListCashDrawerShifts
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} [order] The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC
     * @param {string} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.
     * @param {string} [endTime] The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    listCashDrawerShifts(locationId: string, order?: string, beginTime?: string, endTime?: string, options?: any): Promise<import("axios").AxiosResponse<V1CashDrawerShift[]>>;
    /**
     * Provides summary information for all of a business\'s employee roles.
     * @summary ListEmployeeRoles
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    listEmployeeRoles(order?: string, limit?: number, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1EmployeeRole[]>>;
    /**
     * Provides summary information for all of a business\'s employees.
     * @summary ListEmployees
     * @param {string} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @param {string} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
     * @param {string} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    listEmployees(order?: string, beginUpdatedAt?: string, endUpdatedAt?: string, beginCreatedAt?: string, endCreatedAt?: string, status?: string, externalId?: string, limit?: number, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1Employee[]>>;
    /**
     * Provides summary information for all events associated with a particular timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary ListTimecardEvents
     * @param {string} timecardId The ID of the timecard to list events for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    listTimecardEvents(timecardId: string, options?: any): Promise<import("axios").AxiosResponse<V1TimecardEvent[]>>;
    /**
     * Provides summary information for all of a business\'s employee timecards.
     * @summary ListTimecards
     * @param {string} [order] The order in which timecards are listed in the response, based on their created_at field.
     * @param {string} [employeeId] If provided, the endpoint returns only timecards for the employee with the specified ID.
     * @param {string} [beginClockinTime] If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockinTime] If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginClockoutTime] If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endClockoutTime] If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.
     * @param {string} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {string} [endUpdatedAt] If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {boolean} [deleted] If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don\&#39;t provide this parameter, both valid and deleted timecards are returned.
     * @param {number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    listTimecards(order?: string, employeeId?: string, beginClockinTime?: string, endClockinTime?: string, beginClockoutTime?: string, endClockoutTime?: string, beginUpdatedAt?: string, endUpdatedAt?: string, deleted?: boolean, limit?: number, batchToken?: string, options?: any): Promise<import("axios").AxiosResponse<V1Timecard[]>>;
    /**
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     * @summary RetrieveCashDrawerShift
     * @param {string} locationId The ID of the location to list cash drawer shifts for.
     * @param {string} shiftId The shift\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    retrieveCashDrawerShift(locationId: string, shiftId: string, options?: any): Promise<import("axios").AxiosResponse<V1CashDrawerShift>>;
    /**
     * Provides the details for a single employee.
     * @summary RetrieveEmployee
     * @param {string} employeeId The employee\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    retrieveEmployee(employeeId: string, options?: any): Promise<import("axios").AxiosResponse<V1Employee>>;
    /**
     * Provides the details for a single employee role.
     * @summary RetrieveEmployeeRole
     * @param {string} roleId The role\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    retrieveEmployeeRole(roleId: string, options?: any): Promise<import("axios").AxiosResponse<V1EmployeeRole>>;
    /**
     * Provides the details for a single timecard.   <aside> Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. </aside>
     * @summary RetrieveTimecard
     * @param {string} timecardId The timecard\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    retrieveTimecard(timecardId: string, options?: any): Promise<import("axios").AxiosResponse<V1Timecard>>;
    /**
     *
     * @summary UpdateEmployee
     * @param {string} employeeId The ID of the role to modify.
     * @param {V1Employee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    updateEmployee(employeeId: string, body: V1Employee, options?: any): Promise<import("axios").AxiosResponse<V1Employee>>;
    /**
     * Modifies the details of an employee role.
     * @summary UpdateEmployeeRole
     * @param {string} roleId The ID of the role to modify.
     * @param {V1EmployeeRole} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    updateEmployeeRole(roleId: string, body: V1EmployeeRole, options?: any): Promise<import("axios").AxiosResponse<V1EmployeeRole>>;
    /**
     * Modifies the details of a timecard with an `API_EDIT` event for the timecard. Updating an active timecard with a `clockout_time` clocks the employee out.
     * @summary UpdateTimecard
     * @param {string} timecardId TThe ID of the timecard to modify.
     * @param {V1Timecard} body An object containing the fields to POST for the request. See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1EmployeesApi
     */
    updateTimecard(timecardId: string, body: V1Timecard, options?: any): Promise<import("axios").AxiosResponse<V1Timecard>>;
}
