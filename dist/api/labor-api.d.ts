/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CreateBreakTypeRequest } from '../models';
import { CreateBreakTypeResponse } from '../models';
import { CreateShiftRequest } from '../models';
import { CreateShiftResponse } from '../models';
import { DeleteBreakTypeResponse } from '../models';
import { DeleteShiftResponse } from '../models';
import { GetBreakTypeResponse } from '../models';
import { GetEmployeeWageResponse } from '../models';
import { GetShiftResponse } from '../models';
import { GetTeamMemberWageResponse } from '../models';
import { ListBreakTypesResponse } from '../models';
import { ListEmployeeWagesResponse } from '../models';
import { ListTeamMemberWagesResponse } from '../models';
import { ListWorkweekConfigsResponse } from '../models';
import { SearchShiftsRequest } from '../models';
import { SearchShiftsResponse } from '../models';
import { UpdateBreakTypeRequest } from '../models';
import { UpdateBreakTypeResponse } from '../models';
import { UpdateShiftRequest } from '../models';
import { UpdateShiftResponse } from '../models';
import { UpdateWorkweekConfigRequest } from '../models';
import { UpdateWorkweekConfigResponse } from '../models';
/**
 * LaborApi - axios parameter creator
 * @export
 */
export declare const LaborApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     * @summary CreateBreakType
     * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBreakType: (body: CreateBreakTypeRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
     * @summary CreateShift
     * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShift: (body: CreateShiftRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * @summary DeleteBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBreakType: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a `Shift`.
     * @summary DeleteShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShift: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single `BreakType` specified by id.
     * @summary GetBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBreakType: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single `EmployeeWage` specified by id.
     * @summary GetEmployeeWage
     * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeWage: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single `Shift` specified by id.
     * @summary GetShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShift: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single `TeamMemberWage` specified by id.
     * @summary GetTeamMemberWage
     * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeamMemberWage: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of `BreakType` instances for a business.
     * @summary ListBreakTypes
     * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
     * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBreakTypes: (locationId?: string, limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * @summary ListEmployeeWages
     * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
     * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeWages: (employeeId?: string, limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * @summary ListTeamMemberWages
     * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
     * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamMemberWages: (teamMemberId?: string, limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of `WorkweekConfig` instances for a business.
     * @summary ListWorkweekConfigs
     * @param {number} [limit] Maximum number of Workweek Configs to return per page.
     * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkweekConfigs: (limit?: number, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
     * @summary SearchShifts
     * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchShifts: (body: SearchShiftsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates an existing `BreakType`.
     * @summary UpdateBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
     * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBreakType: (id: string, body: UpdateBreakTypeRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
     * @summary UpdateShift
     * @param {string} id ID of the object being updated.
     * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShift: (id: string, body: UpdateShiftRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a `WorkweekConfig`.
     * @summary UpdateWorkweekConfig
     * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
     * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkweekConfig: (id: string, body: UpdateWorkweekConfigRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * LaborApi - functional programming interface
 * @export
 */
export declare const LaborApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     * @summary CreateBreakType
     * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBreakType(body: CreateBreakTypeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBreakTypeResponse>>;
    /**
     * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
     * @summary CreateShift
     * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShift(body: CreateShiftRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShiftResponse>>;
    /**
     * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * @summary DeleteBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBreakType(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteBreakTypeResponse>>;
    /**
     * Deletes a `Shift`.
     * @summary DeleteShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShift(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteShiftResponse>>;
    /**
     * Returns a single `BreakType` specified by id.
     * @summary GetBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBreakType(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBreakTypeResponse>>;
    /**
     * Returns a single `EmployeeWage` specified by id.
     * @summary GetEmployeeWage
     * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeWage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmployeeWageResponse>>;
    /**
     * Returns a single `Shift` specified by id.
     * @summary GetShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShift(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShiftResponse>>;
    /**
     * Returns a single `TeamMemberWage` specified by id.
     * @summary GetTeamMemberWage
     * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeamMemberWage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTeamMemberWageResponse>>;
    /**
     * Returns a paginated list of `BreakType` instances for a business.
     * @summary ListBreakTypes
     * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
     * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBreakTypes(locationId?: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBreakTypesResponse>>;
    /**
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * @summary ListEmployeeWages
     * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
     * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeWages(employeeId?: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEmployeeWagesResponse>>;
    /**
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * @summary ListTeamMemberWages
     * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
     * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamMemberWages(teamMemberId?: string, limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTeamMemberWagesResponse>>;
    /**
     * Returns a list of `WorkweekConfig` instances for a business.
     * @summary ListWorkweekConfigs
     * @param {number} [limit] Maximum number of Workweek Configs to return per page.
     * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkweekConfigs(limit?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkweekConfigsResponse>>;
    /**
     * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
     * @summary SearchShifts
     * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchShifts(body: SearchShiftsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchShiftsResponse>>;
    /**
     * Updates an existing `BreakType`.
     * @summary UpdateBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
     * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBreakType(id: string, body: UpdateBreakTypeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBreakTypeResponse>>;
    /**
     * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
     * @summary UpdateShift
     * @param {string} id ID of the object being updated.
     * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShift(id: string, body: UpdateShiftRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateShiftResponse>>;
    /**
     * Updates a `WorkweekConfig`.
     * @summary UpdateWorkweekConfig
     * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
     * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkweekConfig(id: string, body: UpdateWorkweekConfigRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkweekConfigResponse>>;
};
/**
 * LaborApi - factory interface
 * @export
 */
export declare const LaborApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     * @summary CreateBreakType
     * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBreakType(body: CreateBreakTypeRequest, options?: any): AxiosPromise<CreateBreakTypeResponse>;
    /**
     * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
     * @summary CreateShift
     * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShift(body: CreateShiftRequest, options?: any): AxiosPromise<CreateShiftResponse>;
    /**
     * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * @summary DeleteBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBreakType(id: string, options?: any): AxiosPromise<DeleteBreakTypeResponse>;
    /**
     * Deletes a `Shift`.
     * @summary DeleteShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShift(id: string, options?: any): AxiosPromise<DeleteShiftResponse>;
    /**
     * Returns a single `BreakType` specified by id.
     * @summary GetBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBreakType(id: string, options?: any): AxiosPromise<GetBreakTypeResponse>;
    /**
     * Returns a single `EmployeeWage` specified by id.
     * @summary GetEmployeeWage
     * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeWage(id: string, options?: any): AxiosPromise<GetEmployeeWageResponse>;
    /**
     * Returns a single `Shift` specified by id.
     * @summary GetShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShift(id: string, options?: any): AxiosPromise<GetShiftResponse>;
    /**
     * Returns a single `TeamMemberWage` specified by id.
     * @summary GetTeamMemberWage
     * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeamMemberWage(id: string, options?: any): AxiosPromise<GetTeamMemberWageResponse>;
    /**
     * Returns a paginated list of `BreakType` instances for a business.
     * @summary ListBreakTypes
     * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
     * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBreakTypes(locationId?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListBreakTypesResponse>;
    /**
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * @summary ListEmployeeWages
     * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
     * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmployeeWages(employeeId?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListEmployeeWagesResponse>;
    /**
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * @summary ListTeamMemberWages
     * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
     * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamMemberWages(teamMemberId?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ListTeamMemberWagesResponse>;
    /**
     * Returns a list of `WorkweekConfig` instances for a business.
     * @summary ListWorkweekConfigs
     * @param {number} [limit] Maximum number of Workweek Configs to return per page.
     * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkweekConfigs(limit?: number, cursor?: string, options?: any): AxiosPromise<ListWorkweekConfigsResponse>;
    /**
     * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
     * @summary SearchShifts
     * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchShifts(body: SearchShiftsRequest, options?: any): AxiosPromise<SearchShiftsResponse>;
    /**
     * Updates an existing `BreakType`.
     * @summary UpdateBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
     * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBreakType(id: string, body: UpdateBreakTypeRequest, options?: any): AxiosPromise<UpdateBreakTypeResponse>;
    /**
     * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
     * @summary UpdateShift
     * @param {string} id ID of the object being updated.
     * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShift(id: string, body: UpdateShiftRequest, options?: any): AxiosPromise<UpdateShiftResponse>;
    /**
     * Updates a `WorkweekConfig`.
     * @summary UpdateWorkweekConfig
     * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
     * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkweekConfig(id: string, body: UpdateWorkweekConfigRequest, options?: any): AxiosPromise<UpdateWorkweekConfigResponse>;
};
/**
 * LaborApi - object-oriented interface
 * @export
 * @class LaborApi
 * @extends {BaseAPI}
 */
export declare class LaborApi extends BaseAPI {
    /**
     * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have 3 `BreakType` instances per location. If you attempt to add a 4th `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     * @summary CreateBreakType
     * @param {CreateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    createBreakType(body: CreateBreakTypeRequest, options?: any): Promise<import("axios").AxiosResponse<CreateBreakTypeResponse>>;
    /**
     * Creates a new `Shift`.  A `Shift` represents a complete work day for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future - the `start_at` or `end_at` overlaps another shift for the same employee - If `Break`s are set in the request, a break `start_at` must not be before the `Shift.start_at`. A break `end_at` must not be after the `Shift.end_at`
     * @summary CreateShift
     * @param {CreateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    createShift(body: CreateShiftRequest, options?: any): Promise<import("axios").AxiosResponse<CreateShiftResponse>>;
    /**
     * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * @summary DeleteBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    deleteBreakType(id: string, options?: any): Promise<import("axios").AxiosResponse<DeleteBreakTypeResponse>>;
    /**
     * Deletes a `Shift`.
     * @summary DeleteShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    deleteShift(id: string, options?: any): Promise<import("axios").AxiosResponse<DeleteShiftResponse>>;
    /**
     * Returns a single `BreakType` specified by id.
     * @summary GetBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    getBreakType(id: string, options?: any): Promise<import("axios").AxiosResponse<GetBreakTypeResponse>>;
    /**
     * Returns a single `EmployeeWage` specified by id.
     * @summary GetEmployeeWage
     * @param {string} id UUID for the &#x60;EmployeeWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    getEmployeeWage(id: string, options?: any): Promise<import("axios").AxiosResponse<GetEmployeeWageResponse>>;
    /**
     * Returns a single `Shift` specified by id.
     * @summary GetShift
     * @param {string} id UUID for the &#x60;Shift&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    getShift(id: string, options?: any): Promise<import("axios").AxiosResponse<GetShiftResponse>>;
    /**
     * Returns a single `TeamMemberWage` specified by id.
     * @summary GetTeamMemberWage
     * @param {string} id UUID for the &#x60;TeamMemberWage&#x60; being retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    getTeamMemberWage(id: string, options?: any): Promise<import("axios").AxiosResponse<GetTeamMemberWageResponse>>;
    /**
     * Returns a paginated list of `BreakType` instances for a business.
     * @summary ListBreakTypes
     * @param {string} [locationId] Filter Break Types returned to only those that are associated with the specified location.
     * @param {number} [limit] Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Break Type results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    listBreakTypes(locationId?: string, limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListBreakTypesResponse>>;
    /**
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * @summary ListEmployeeWages
     * @param {string} [employeeId] Filter wages returned to only those that are associated with the specified employee.
     * @param {number} [limit] Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    listEmployeeWages(employeeId?: string, limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListEmployeeWagesResponse>>;
    /**
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * @summary ListTeamMemberWages
     * @param {string} [teamMemberId] Filter wages returned to only those that are associated with the specified team member.
     * @param {number} [limit] Maximum number of Team Member Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.
     * @param {string} [cursor] Pointer to the next page of Employee Wage results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    listTeamMemberWages(teamMemberId?: string, limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListTeamMemberWagesResponse>>;
    /**
     * Returns a list of `WorkweekConfig` instances for a business.
     * @summary ListWorkweekConfigs
     * @param {number} [limit] Maximum number of Workweek Configs to return per page.
     * @param {string} [cursor] Pointer to the next page of Workweek Config results to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    listWorkweekConfigs(limit?: number, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListWorkweekConfigsResponse>>;
    /**
     * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (`OPEN`, `CLOSED`) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - `start_at` - `end_at` - `created_at` - `updated_at`
     * @summary SearchShifts
     * @param {SearchShiftsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    searchShifts(body: SearchShiftsRequest, options?: any): Promise<import("axios").AxiosResponse<SearchShiftsResponse>>;
    /**
     * Updates an existing `BreakType`.
     * @summary UpdateBreakType
     * @param {string} id UUID for the &#x60;BreakType&#x60; being updated.
     * @param {UpdateBreakTypeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    updateBreakType(id: string, body: UpdateBreakTypeRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateBreakTypeResponse>>;
    /**
     * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at` set on each `Break`.
     * @summary UpdateShift
     * @param {string} id ID of the object being updated.
     * @param {UpdateShiftRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    updateShift(id: string, body: UpdateShiftRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateShiftResponse>>;
    /**
     * Updates a `WorkweekConfig`.
     * @summary UpdateWorkweekConfig
     * @param {string} id UUID for the &#x60;WorkweekConfig&#x60; object being updated.
     * @param {UpdateWorkweekConfigRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaborApi
     */
    updateWorkweekConfig(id: string, body: UpdateWorkweekConfigRequest, options?: any): Promise<import("axios").AxiosResponse<UpdateWorkweekConfigResponse>>;
}
