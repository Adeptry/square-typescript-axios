/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CaptureTransactionResponse } from '../models';
import { ChargeRequest } from '../models';
import { ChargeResponse } from '../models';
import { CreateRefundRequest } from '../models';
import { CreateRefundResponse } from '../models';
import { ListRefundsResponse } from '../models';
import { ListTransactionsResponse } from '../models';
import { RetrieveTransactionResponse } from '../models';
import { VoidTransactionResponse } from '../models';
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary CaptureTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureTransaction: (locationId: string, transactionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
     * @summary Charge
     * @param {string} locationId The ID of the location to associate the created transaction with.
     * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    charge: (locationId: string, body: ChargeRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     * @summary CreateRefund
     * @param {string} locationId The ID of the original transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
     * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefund: (locationId: string, transactionId: string, body: CreateRefundRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds: (locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
     * @summary ListTransactions
     * @param {string} locationId The ID of the location to list transactions for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions: (locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves details for a single transaction.
     * @summary RetrieveTransaction
     * @param {string} locationId The ID of the transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTransaction: (locationId: string, transactionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary VoidTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidTransaction: (locationId: string, transactionId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export declare const TransactionsApiFp: (configuration?: Configuration) => {
    /**
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary CaptureTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureTransaction(locationId: string, transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaptureTransactionResponse>>;
    /**
     * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
     * @summary Charge
     * @param {string} locationId The ID of the location to associate the created transaction with.
     * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    charge(locationId: string, body: ChargeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeResponse>>;
    /**
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     * @summary CreateRefund
     * @param {string} locationId The ID of the original transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
     * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefund(locationId: string, transactionId: string, body: CreateRefundRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRefundResponse>>;
    /**
     * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRefundsResponse>>;
    /**
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
     * @summary ListTransactions
     * @param {string} locationId The ID of the location to list transactions for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTransactionsResponse>>;
    /**
     * Retrieves details for a single transaction.
     * @summary RetrieveTransaction
     * @param {string} locationId The ID of the transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTransaction(locationId: string, transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveTransactionResponse>>;
    /**
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary VoidTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidTransaction(locationId: string, transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoidTransactionResponse>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export declare const TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary CaptureTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureTransaction(locationId: string, transactionId: string, options?: any): AxiosPromise<CaptureTransactionResponse>;
    /**
     * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
     * @summary Charge
     * @param {string} locationId The ID of the location to associate the created transaction with.
     * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    charge(locationId: string, body: ChargeRequest, options?: any): AxiosPromise<ChargeResponse>;
    /**
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     * @summary CreateRefund
     * @param {string} locationId The ID of the original transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
     * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefund(locationId: string, transactionId: string, body: CreateRefundRequest, options?: any): AxiosPromise<CreateRefundResponse>;
    /**
     * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): AxiosPromise<ListRefundsResponse>;
    /**
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
     * @summary ListTransactions
     * @param {string} locationId The ID of the location to list transactions for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): AxiosPromise<ListTransactionsResponse>;
    /**
     * Retrieves details for a single transaction.
     * @summary RetrieveTransaction
     * @param {string} locationId The ID of the transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveTransaction(locationId: string, transactionId: string, options?: any): AxiosPromise<RetrieveTransactionResponse>;
    /**
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary VoidTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidTransaction(locationId: string, transactionId: string, options?: any): AxiosPromise<VoidTransactionResponse>;
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export declare class TransactionsApi extends BaseAPI {
    /**
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary CaptureTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    captureTransaction(locationId: string, transactionId: string, options?: any): Promise<import("axios").AxiosResponse<CaptureTransactionResponse>>;
    /**
     * Charges a card represented by a card nonce or a customer\'s card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer\'s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square\'s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
     * @summary Charge
     * @param {string} locationId The ID of the location to associate the created transaction with.
     * @param {ChargeRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    charge(locationId: string, body: ChargeRequest, options?: any): Promise<import("axios").AxiosResponse<ChargeResponse>>;
    /**
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     * @summary CreateRefund
     * @param {string} locationId The ID of the original transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the original transaction that includes the tender to refund.
     * @param {CreateRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createRefund(locationId: string, transactionId: string, body: CreateRefundRequest, options?: any): Promise<import("axios").AxiosResponse<CreateRefundResponse>>;
    /**
     * Lists refunds for one of a business\'s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square\'s Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint\'s response.  Max results per [page](#paginatingresults): 50
     * @summary ListRefunds
     * @param {string} locationId The ID of the location to list refunds for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    listRefunds(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListRefundsResponse>>;
    /**
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](#paginatingresults): 50
     * @summary ListTransactions
     * @param {string} locationId The ID of the location to list transactions for.
     * @param {string} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {string} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {string} [sortOrder] The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    listTransactions(locationId: string, beginTime?: string, endTime?: string, sortOrder?: string, cursor?: string, options?: any): Promise<import("axios").AxiosResponse<ListTransactionsResponse>>;
    /**
     * Retrieves details for a single transaction.
     * @summary RetrieveTransaction
     * @param {string} locationId The ID of the transaction\&#39;s associated location.
     * @param {string} transactionId The ID of the transaction to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    retrieveTransaction(locationId: string, transactionId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveTransactionResponse>>;
    /**
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](/payments/transactions/overview#delayed-capture) for more information.
     * @summary VoidTransaction
     * @param {string} locationId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    voidTransaction(locationId: string, transactionId: string, options?: any): Promise<import("axios").AxiosResponse<VoidTransactionResponse>>;
}
