"use strict";
// tslint:disable
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1ItemsApi = exports.V1ItemsApiFactory = exports.V1ItemsApiFp = exports.V1ItemsApiAxiosParamCreator = void 0;
var globalImportUrl = require("url");
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * V1ItemsApi - axios parameter creator
 * @export
 */
exports.V1ItemsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adjusts the current available inventory of an item variation.
         * @summary AdjustInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} variationId The ID of the variation to adjust inventory information for.
         * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustInventory: function (locationId, variationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling adjustInventory.');
                    }
                    // verify required parameter 'variationId' is not null or undefined
                    if (variationId === null || variationId === undefined) {
                        throw new base_1.RequiredError('variationId', 'Required parameter variationId was null or undefined when calling adjustInventory.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling adjustInventory.');
                    }
                    localVarPath = "/v1/{location_id}/inventory/{variation_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "variation_id" + "}", encodeURIComponent(String(variationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
         * @summary ApplyFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyFee: function (locationId, itemId, feeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling applyFee.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling applyFee.');
                    }
                    // verify required parameter 'feeId' is not null or undefined
                    if (feeId === null || feeId === undefined) {
                        throw new base_1.RequiredError('feeId', 'Required parameter feeId was null or undefined when calling applyFee.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)))
                        .replace("{" + "fee_id" + "}", encodeURIComponent(String(feeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Associates a modifier list with an item so the associated modifier options can be applied to the item.
         * @summary ApplyModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to apply.
         * @param {string} itemId The ID of the item to add the modifier list to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyModifierList: function (locationId, modifierListId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling applyModifierList.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling applyModifierList.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling applyModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an item category.
         * @summary CreateCategory
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createCategory.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createCategory.');
                    }
                    localVarPath = "/v1/{location_id}/categories"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a discount.
         * @summary CreateDiscount
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createDiscount.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createDiscount.');
                    }
                    localVarPath = "/v1/{location_id}/discounts"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a fee (tax).
         * @summary CreateFee
         * @param {string} locationId The ID of the location to create a fee for.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFee: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createFee.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createFee.');
                    }
                    localVarPath = "/v1/{location_id}/fees"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
         * @summary CreateItem
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createItem.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createItem.');
                    }
                    localVarPath = "/v1/{location_id}/items"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an item modifier list and at least 1 modifier option for it.
         * @summary CreateModifierList
         * @param {string} locationId The ID of the location to create a modifier list for.
         * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierList: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createModifierList.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an item modifier option and adds it to a modifier list.
         * @summary CreateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierOption: function (locationId, modifierListId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createModifierOption.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling createModifierOption.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createModifierOption.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates a Favorites page in Square Point of Sale.
         * @summary CreatePage
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: function (locationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createPage.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createPage.');
                    }
                    localVarPath = "/v1/{location_id}/pages"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Creates an item variation for an existing item.
         * @summary CreateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariation: function (locationId, itemId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createVariation.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling createVariation.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createVariation.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/variations"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
         * @summary DeleteCategory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} categoryId The ID of the category to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: function (locationId, categoryId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteCategory.');
                    }
                    // verify required parameter 'categoryId' is not null or undefined
                    if (categoryId === null || categoryId === undefined) {
                        throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling deleteCategory.');
                    }
                    localVarPath = "/v1/{location_id}/categories/{category_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "category_id" + "}", encodeURIComponent(String(categoryId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
         * @summary DeleteDiscount
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} discountId The ID of the discount to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount: function (locationId, discountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteDiscount.');
                    }
                    // verify required parameter 'discountId' is not null or undefined
                    if (discountId === null || discountId === undefined) {
                        throw new base_1.RequiredError('discountId', 'Required parameter discountId was null or undefined when calling deleteDiscount.');
                    }
                    localVarPath = "/v1/{location_id}/discounts/{discount_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "discount_id" + "}", encodeURIComponent(String(discountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
         * @summary DeleteFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFee: function (locationId, feeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteFee.');
                    }
                    // verify required parameter 'feeId' is not null or undefined
                    if (feeId === null || feeId === undefined) {
                        throw new base_1.RequiredError('feeId', 'Required parameter feeId was null or undefined when calling deleteFee.');
                    }
                    localVarPath = "/v1/{location_id}/fees/{fee_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "fee_id" + "}", encodeURIComponent(String(feeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
         * @summary DeleteItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (locationId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteItem.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling deleteItem.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
         * @summary DeleteModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierList: function (locationId, modifierListId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteModifierList.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling deleteModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
         * @summary DeleteModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierOption: function (locationId, modifierListId, modifierOptionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteModifierOption.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling deleteModifierOption.');
                    }
                    // verify required parameter 'modifierOptionId' is not null or undefined
                    if (modifierOptionId === null || modifierOptionId === undefined) {
                        throw new base_1.RequiredError('modifierOptionId', 'Required parameter modifierOptionId was null or undefined when calling deleteModifierOption.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)))
                        .replace("{" + "modifier_option_id" + "}", encodeURIComponent(String(modifierOptionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
         * @summary DeletePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: function (locationId, pageId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deletePage.');
                    }
                    // verify required parameter 'pageId' is not null or undefined
                    if (pageId === null || pageId === undefined) {
                        throw new base_1.RequiredError('pageId', 'Required parameter pageId was null or undefined when calling deletePage.');
                    }
                    localVarPath = "/v1/{location_id}/pages/{page_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "page_id" + "}", encodeURIComponent(String(pageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
         * @summary DeletePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
         * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePageCell: function (locationId, pageId, row, column, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deletePageCell.');
                    }
                    // verify required parameter 'pageId' is not null or undefined
                    if (pageId === null || pageId === undefined) {
                        throw new base_1.RequiredError('pageId', 'Required parameter pageId was null or undefined when calling deletePageCell.');
                    }
                    localVarPath = "/v1/{location_id}/pages/{page_id}/cells"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "page_id" + "}", encodeURIComponent(String(pageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (row !== undefined) {
                        localVarQueryParameter['row'] = row;
                    }
                    if (column !== undefined) {
                        localVarQueryParameter['column'] = column;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
         * @summary DeleteVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to delete.
         * @param {string} variationId The ID of the variation to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariation: function (locationId, itemId, variationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteVariation.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling deleteVariation.');
                    }
                    // verify required parameter 'variationId' is not null or undefined
                    if (variationId === null || variationId === undefined) {
                        throw new base_1.RequiredError('variationId', 'Required parameter variationId was null or undefined when calling deleteVariation.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)))
                        .replace("{" + "variation_id" + "}", encodeURIComponent(String(variationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all the item categories for a given location.
         * @summary ListCategories
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listCategories.');
                    }
                    localVarPath = "/v1/{location_id}/categories"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all the discounts for a given location.
         * @summary ListDiscounts
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listDiscounts.');
                    }
                    localVarPath = "/v1/{location_id}/discounts"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all the fees (taxes) for a given location.
         * @summary ListFees
         * @param {string} locationId The ID of the location to list fees for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFees: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listFees.');
                    }
                    localVarPath = "/v1/{location_id}/fees"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides inventory information for all inventory-enabled item variations.
         * @summary ListInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventory: function (locationId, limit, batchToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listInventory.');
                    }
                    localVarPath = "/v1/{location_id}/inventory"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides summary information of all items for a given location.
         * @summary ListItems
         * @param {string} locationId The ID of the location to list items for.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: function (locationId, batchToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listItems.');
                    }
                    localVarPath = "/v1/{location_id}/items"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    if (batchToken !== undefined) {
                        localVarQueryParameter['batch_token'] = batchToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all the modifier lists for a given location.
         * @summary ListModifierLists
         * @param {string} locationId The ID of the location to list modifier lists for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModifierLists: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listModifierLists.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Lists all Favorites pages (in Square Point of Sale) for a given location.
         * @summary ListPages
         * @param {string} locationId The ID of the location to list Favorites pages for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPages: function (locationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling listPages.');
                    }
                    localVarPath = "/v1/{location_id}/pages"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
         * @summary RemoveFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFee: function (locationId, itemId, feeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling removeFee.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeFee.');
                    }
                    // verify required parameter 'feeId' is not null or undefined
                    if (feeId === null || feeId === undefined) {
                        throw new base_1.RequiredError('feeId', 'Required parameter feeId was null or undefined when calling removeFee.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)))
                        .replace("{" + "fee_id" + "}", encodeURIComponent(String(feeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
         * @summary RemoveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to remove.
         * @param {string} itemId The ID of the item to remove the modifier list from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeModifierList: function (locationId, modifierListId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling removeModifierList.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling removeModifierList.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for a single item, including associated modifier lists and fees.
         * @summary RetrieveItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItem: function (locationId, itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveItem.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling retrieveItem.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides the details for a single modifier list.
         * @summary RetrieveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The modifier list\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveModifierList: function (locationId, modifierListId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling retrieveModifierList.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling retrieveModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_READ"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing item category.
         * @summary UpdateCategory
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} categoryId The ID of the category to edit.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (locationId, categoryId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateCategory.');
                    }
                    // verify required parameter 'categoryId' is not null or undefined
                    if (categoryId === null || categoryId === undefined) {
                        throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling updateCategory.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateCategory.');
                    }
                    localVarPath = "/v1/{location_id}/categories/{category_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "category_id" + "}", encodeURIComponent(String(categoryId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing discount.
         * @summary UpdateDiscount
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} discountId The ID of the discount to edit.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiscount: function (locationId, discountId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateDiscount.');
                    }
                    // verify required parameter 'discountId' is not null or undefined
                    if (discountId === null || discountId === undefined) {
                        throw new base_1.RequiredError('discountId', 'Required parameter discountId was null or undefined when calling updateDiscount.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateDiscount.');
                    }
                    localVarPath = "/v1/{location_id}/discounts/{discount_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "discount_id" + "}", encodeURIComponent(String(discountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing fee (tax).
         * @summary UpdateFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to edit.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFee: function (locationId, feeId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateFee.');
                    }
                    // verify required parameter 'feeId' is not null or undefined
                    if (feeId === null || feeId === undefined) {
                        throw new base_1.RequiredError('feeId', 'Required parameter feeId was null or undefined when calling updateFee.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateFee.');
                    }
                    localVarPath = "/v1/{location_id}/fees/{fee_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "fee_id" + "}", encodeURIComponent(String(feeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the core details of an existing item.
         * @summary UpdateItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (locationId, itemId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateItem.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateItem.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateItem.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing item modifier list.
         * @summary UpdateModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierList: function (locationId, modifierListId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateModifierList.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling updateModifierList.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateModifierList.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing item modifier option.
         * @summary UpdateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierOption: function (locationId, modifierListId, modifierOptionId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateModifierOption.');
                    }
                    // verify required parameter 'modifierListId' is not null or undefined
                    if (modifierListId === null || modifierListId === undefined) {
                        throw new base_1.RequiredError('modifierListId', 'Required parameter modifierListId was null or undefined when calling updateModifierOption.');
                    }
                    // verify required parameter 'modifierOptionId' is not null or undefined
                    if (modifierOptionId === null || modifierOptionId === undefined) {
                        throw new base_1.RequiredError('modifierOptionId', 'Required parameter modifierOptionId was null or undefined when calling updateModifierOption.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateModifierOption.');
                    }
                    localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "modifier_list_id" + "}", encodeURIComponent(String(modifierListId)))
                        .replace("{" + "modifier_option_id" + "}", encodeURIComponent(String(modifierOptionId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of a Favorites page in Square Point of Sale.
         * @summary UpdatePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location
         * @param {string} pageId The ID of the page to modify.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage: function (locationId, pageId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updatePage.');
                    }
                    // verify required parameter 'pageId' is not null or undefined
                    if (pageId === null || pageId === undefined) {
                        throw new base_1.RequiredError('pageId', 'Required parameter pageId was null or undefined when calling updatePage.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updatePage.');
                    }
                    localVarPath = "/v1/{location_id}/pages/{page_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "page_id" + "}", encodeURIComponent(String(pageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies a cell of a Favorites page in Square Point of Sale.
         * @summary UpdatePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page the cell belongs to.
         * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageCell: function (locationId, pageId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updatePageCell.');
                    }
                    // verify required parameter 'pageId' is not null or undefined
                    if (pageId === null || pageId === undefined) {
                        throw new base_1.RequiredError('pageId', 'Required parameter pageId was null or undefined when calling updatePageCell.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updatePageCell.');
                    }
                    localVarPath = "/v1/{location_id}/pages/{page_id}/cells"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "page_id" + "}", encodeURIComponent(String(pageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Modifies the details of an existing item variation.
         * @summary UpdateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {string} variationId The ID of the variation to modify.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariation: function (locationId, itemId, variationId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'locationId' is not null or undefined
                    if (locationId === null || locationId === undefined) {
                        throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateVariation.');
                    }
                    // verify required parameter 'itemId' is not null or undefined
                    if (itemId === null || itemId === undefined) {
                        throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateVariation.');
                    }
                    // verify required parameter 'variationId' is not null or undefined
                    if (variationId === null || variationId === undefined) {
                        throw new base_1.RequiredError('variationId', 'Required parameter variationId was null or undefined when calling updateVariation.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateVariation.');
                    }
                    localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}"
                        .replace("{" + "location_id" + "}", encodeURIComponent(String(locationId)))
                        .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)))
                        .replace("{" + "variation_id" + "}", encodeURIComponent(String(variationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication oauth2 required
                    // oauth required
                    if (configuration && configuration.accessToken) {
                        localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                            ? configuration.accessToken("oauth2", ["ITEMS_WRITE"])
                            : configuration.accessToken;
                        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * V1ItemsApi - functional programming interface
 * @export
 */
exports.V1ItemsApiFp = function (configuration) {
    return {
        /**
         * Adjusts the current available inventory of an item variation.
         * @summary AdjustInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} variationId The ID of the variation to adjust inventory information for.
         * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustInventory: function (locationId, variationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).adjustInventory(locationId, variationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
         * @summary ApplyFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyFee: function (locationId, itemId, feeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).applyFee(locationId, itemId, feeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Associates a modifier list with an item so the associated modifier options can be applied to the item.
         * @summary ApplyModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to apply.
         * @param {string} itemId The ID of the item to add the modifier list to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyModifierList: function (locationId, modifierListId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).applyModifierList(locationId, modifierListId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an item category.
         * @summary CreateCategory
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createCategory(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a discount.
         * @summary CreateDiscount
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createDiscount(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a fee (tax).
         * @summary CreateFee
         * @param {string} locationId The ID of the location to create a fee for.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFee: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createFee(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
         * @summary CreateItem
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createItem(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an item modifier list and at least 1 modifier option for it.
         * @summary CreateModifierList
         * @param {string} locationId The ID of the location to create a modifier list for.
         * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierList: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createModifierList(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an item modifier option and adds it to a modifier list.
         * @summary CreateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierOption: function (locationId, modifierListId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createModifierOption(locationId, modifierListId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates a Favorites page in Square Point of Sale.
         * @summary CreatePage
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: function (locationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createPage(locationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Creates an item variation for an existing item.
         * @summary CreateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariation: function (locationId, itemId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).createVariation(locationId, itemId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
         * @summary DeleteCategory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} categoryId The ID of the category to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: function (locationId, categoryId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteCategory(locationId, categoryId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
         * @summary DeleteDiscount
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} discountId The ID of the discount to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount: function (locationId, discountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteDiscount(locationId, discountId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
         * @summary DeleteFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFee: function (locationId, feeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteFee(locationId, feeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
         * @summary DeleteItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (locationId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteItem(locationId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
         * @summary DeleteModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierList: function (locationId, modifierListId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteModifierList(locationId, modifierListId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
         * @summary DeleteModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierOption: function (locationId, modifierListId, modifierOptionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteModifierOption(locationId, modifierListId, modifierOptionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
         * @summary DeletePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: function (locationId, pageId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deletePage(locationId, pageId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
         * @summary DeletePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
         * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePageCell: function (locationId, pageId, row, column, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deletePageCell(locationId, pageId, row, column, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
         * @summary DeleteVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to delete.
         * @param {string} variationId The ID of the variation to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariation: function (locationId, itemId, variationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).deleteVariation(locationId, itemId, variationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all the item categories for a given location.
         * @summary ListCategories
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listCategories(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all the discounts for a given location.
         * @summary ListDiscounts
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listDiscounts(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all the fees (taxes) for a given location.
         * @summary ListFees
         * @param {string} locationId The ID of the location to list fees for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFees: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listFees(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides inventory information for all inventory-enabled item variations.
         * @summary ListInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventory: function (locationId, limit, batchToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listInventory(locationId, limit, batchToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides summary information of all items for a given location.
         * @summary ListItems
         * @param {string} locationId The ID of the location to list items for.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: function (locationId, batchToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listItems(locationId, batchToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all the modifier lists for a given location.
         * @summary ListModifierLists
         * @param {string} locationId The ID of the location to list modifier lists for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModifierLists: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listModifierLists(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Lists all Favorites pages (in Square Point of Sale) for a given location.
         * @summary ListPages
         * @param {string} locationId The ID of the location to list Favorites pages for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPages: function (locationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).listPages(locationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
         * @summary RemoveFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFee: function (locationId, itemId, feeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).removeFee(locationId, itemId, feeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
         * @summary RemoveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to remove.
         * @param {string} itemId The ID of the item to remove the modifier list from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeModifierList: function (locationId, modifierListId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).removeModifierList(locationId, modifierListId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for a single item, including associated modifier lists and fees.
         * @summary RetrieveItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItem: function (locationId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).retrieveItem(locationId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Provides the details for a single modifier list.
         * @summary RetrieveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The modifier list\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveModifierList: function (locationId, modifierListId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).retrieveModifierList(locationId, modifierListId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing item category.
         * @summary UpdateCategory
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} categoryId The ID of the category to edit.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (locationId, categoryId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateCategory(locationId, categoryId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing discount.
         * @summary UpdateDiscount
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} discountId The ID of the discount to edit.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiscount: function (locationId, discountId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateDiscount(locationId, discountId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing fee (tax).
         * @summary UpdateFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to edit.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFee: function (locationId, feeId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateFee(locationId, feeId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the core details of an existing item.
         * @summary UpdateItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (locationId, itemId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateItem(locationId, itemId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing item modifier list.
         * @summary UpdateModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierList: function (locationId, modifierListId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateModifierList(locationId, modifierListId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing item modifier option.
         * @summary UpdateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierOption: function (locationId, modifierListId, modifierOptionId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateModifierOption(locationId, modifierListId, modifierOptionId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of a Favorites page in Square Point of Sale.
         * @summary UpdatePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location
         * @param {string} pageId The ID of the page to modify.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage: function (locationId, pageId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updatePage(locationId, pageId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies a cell of a Favorites page in Square Point of Sale.
         * @summary UpdatePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page the cell belongs to.
         * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageCell: function (locationId, pageId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updatePageCell(locationId, pageId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the details of an existing item variation.
         * @summary UpdateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {string} variationId The ID of the variation to modify.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariation: function (locationId, itemId, variationId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.V1ItemsApiAxiosParamCreator(configuration).updateVariation(locationId, itemId, variationId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * V1ItemsApi - factory interface
 * @export
 */
exports.V1ItemsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Adjusts the current available inventory of an item variation.
         * @summary AdjustInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} variationId The ID of the variation to adjust inventory information for.
         * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustInventory: function (locationId, variationId, body, options) {
            return exports.V1ItemsApiFp(configuration).adjustInventory(locationId, variationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
         * @summary ApplyFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyFee: function (locationId, itemId, feeId, options) {
            return exports.V1ItemsApiFp(configuration).applyFee(locationId, itemId, feeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Associates a modifier list with an item so the associated modifier options can be applied to the item.
         * @summary ApplyModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to apply.
         * @param {string} itemId The ID of the item to add the modifier list to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyModifierList: function (locationId, modifierListId, itemId, options) {
            return exports.V1ItemsApiFp(configuration).applyModifierList(locationId, modifierListId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an item category.
         * @summary CreateCategory
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createCategory(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a discount.
         * @summary CreateDiscount
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createDiscount(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a fee (tax).
         * @summary CreateFee
         * @param {string} locationId The ID of the location to create a fee for.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFee: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createFee(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
         * @summary CreateItem
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createItem(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an item modifier list and at least 1 modifier option for it.
         * @summary CreateModifierList
         * @param {string} locationId The ID of the location to create a modifier list for.
         * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierList: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createModifierList(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an item modifier option and adds it to a modifier list.
         * @summary CreateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModifierOption: function (locationId, modifierListId, body, options) {
            return exports.V1ItemsApiFp(configuration).createModifierOption(locationId, modifierListId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a Favorites page in Square Point of Sale.
         * @summary CreatePage
         * @param {string} locationId The ID of the location to create an item for.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: function (locationId, body, options) {
            return exports.V1ItemsApiFp(configuration).createPage(locationId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates an item variation for an existing item.
         * @summary CreateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariation: function (locationId, itemId, body, options) {
            return exports.V1ItemsApiFp(configuration).createVariation(locationId, itemId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
         * @summary DeleteCategory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} categoryId The ID of the category to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: function (locationId, categoryId, options) {
            return exports.V1ItemsApiFp(configuration).deleteCategory(locationId, categoryId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
         * @summary DeleteDiscount
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} discountId The ID of the discount to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount: function (locationId, discountId, options) {
            return exports.V1ItemsApiFp(configuration).deleteDiscount(locationId, discountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
         * @summary DeleteFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFee: function (locationId, feeId, options) {
            return exports.V1ItemsApiFp(configuration).deleteFee(locationId, feeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
         * @summary DeleteItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (locationId, itemId, options) {
            return exports.V1ItemsApiFp(configuration).deleteItem(locationId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
         * @summary DeleteModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierList: function (locationId, modifierListId, options) {
            return exports.V1ItemsApiFp(configuration).deleteModifierList(locationId, modifierListId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
         * @summary DeleteModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to delete.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModifierOption: function (locationId, modifierListId, modifierOptionId, options) {
            return exports.V1ItemsApiFp(configuration).deleteModifierOption(locationId, modifierListId, modifierOptionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
         * @summary DeletePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: function (locationId, pageId, options) {
            return exports.V1ItemsApiFp(configuration).deletePage(locationId, pageId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
         * @summary DeletePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page to delete.
         * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
         * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePageCell: function (locationId, pageId, row, column, options) {
            return exports.V1ItemsApiFp(configuration).deletePageCell(locationId, pageId, row, column, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
         * @summary DeleteVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to delete.
         * @param {string} variationId The ID of the variation to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariation: function (locationId, itemId, variationId, options) {
            return exports.V1ItemsApiFp(configuration).deleteVariation(locationId, itemId, variationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all the item categories for a given location.
         * @summary ListCategories
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: function (locationId, options) {
            return exports.V1ItemsApiFp(configuration).listCategories(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all the discounts for a given location.
         * @summary ListDiscounts
         * @param {string} locationId The ID of the location to list categories for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts: function (locationId, options) {
            return exports.V1ItemsApiFp(configuration).listDiscounts(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all the fees (taxes) for a given location.
         * @summary ListFees
         * @param {string} locationId The ID of the location to list fees for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFees: function (locationId, options) {
            return exports.V1ItemsApiFp(configuration).listFees(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides inventory information for all inventory-enabled item variations.
         * @summary ListInventory
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventory: function (locationId, limit, batchToken, options) {
            return exports.V1ItemsApiFp(configuration).listInventory(locationId, limit, batchToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides summary information of all items for a given location.
         * @summary ListItems
         * @param {string} locationId The ID of the location to list items for.
         * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: function (locationId, batchToken, options) {
            return exports.V1ItemsApiFp(configuration).listItems(locationId, batchToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all the modifier lists for a given location.
         * @summary ListModifierLists
         * @param {string} locationId The ID of the location to list modifier lists for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModifierLists: function (locationId, options) {
            return exports.V1ItemsApiFp(configuration).listModifierLists(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Lists all Favorites pages (in Square Point of Sale) for a given location.
         * @summary ListPages
         * @param {string} locationId The ID of the location to list Favorites pages for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPages: function (locationId, options) {
            return exports.V1ItemsApiFp(configuration).listPages(locationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
         * @summary RemoveFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} itemId The ID of the item to add the fee to.
         * @param {string} feeId The ID of the fee to apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFee: function (locationId, itemId, feeId, options) {
            return exports.V1ItemsApiFp(configuration).removeFee(locationId, itemId, feeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
         * @summary RemoveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to remove.
         * @param {string} itemId The ID of the item to remove the modifier list from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeModifierList: function (locationId, modifierListId, itemId, options) {
            return exports.V1ItemsApiFp(configuration).removeModifierList(locationId, modifierListId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for a single item, including associated modifier lists and fees.
         * @summary RetrieveItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The item\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveItem: function (locationId, itemId, options) {
            return exports.V1ItemsApiFp(configuration).retrieveItem(locationId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides the details for a single modifier list.
         * @summary RetrieveModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The modifier list\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveModifierList: function (locationId, modifierListId, options) {
            return exports.V1ItemsApiFp(configuration).retrieveModifierList(locationId, modifierListId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing item category.
         * @summary UpdateCategory
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} categoryId The ID of the category to edit.
         * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (locationId, categoryId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateCategory(locationId, categoryId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing discount.
         * @summary UpdateDiscount
         * @param {string} locationId The ID of the category\&#39;s associated location.
         * @param {string} discountId The ID of the discount to edit.
         * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiscount: function (locationId, discountId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateDiscount(locationId, discountId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing fee (tax).
         * @summary UpdateFee
         * @param {string} locationId The ID of the fee\&#39;s associated location.
         * @param {string} feeId The ID of the fee to edit.
         * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFee: function (locationId, feeId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateFee(locationId, feeId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the core details of an existing item.
         * @summary UpdateItem
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (locationId, itemId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateItem(locationId, itemId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing item modifier list.
         * @summary UpdateModifierList
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierList: function (locationId, modifierListId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateModifierList(locationId, modifierListId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing item modifier option.
         * @summary UpdateModifierOption
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} modifierListId The ID of the modifier list to edit.
         * @param {string} modifierOptionId The ID of the modifier list to edit.
         * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModifierOption: function (locationId, modifierListId, modifierOptionId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateModifierOption(locationId, modifierListId, modifierOptionId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of a Favorites page in Square Point of Sale.
         * @summary UpdatePage
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location
         * @param {string} pageId The ID of the page to modify.
         * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage: function (locationId, pageId, body, options) {
            return exports.V1ItemsApiFp(configuration).updatePage(locationId, pageId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies a cell of a Favorites page in Square Point of Sale.
         * @summary UpdatePageCell
         * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
         * @param {string} pageId The ID of the page the cell belongs to.
         * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageCell: function (locationId, pageId, body, options) {
            return exports.V1ItemsApiFp(configuration).updatePageCell(locationId, pageId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the details of an existing item variation.
         * @summary UpdateVariation
         * @param {string} locationId The ID of the item\&#39;s associated location.
         * @param {string} itemId The ID of the item to modify.
         * @param {string} variationId The ID of the variation to modify.
         * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariation: function (locationId, itemId, variationId, body, options) {
            return exports.V1ItemsApiFp(configuration).updateVariation(locationId, itemId, variationId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * V1ItemsApi - object-oriented interface
 * @export
 * @class V1ItemsApi
 * @extends {BaseAPI}
 */
var V1ItemsApi = /** @class */ (function (_super) {
    __extends(V1ItemsApi, _super);
    function V1ItemsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adjusts the current available inventory of an item variation.
     * @summary AdjustInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} variationId The ID of the variation to adjust inventory information for.
     * @param {V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.adjustInventory = function (locationId, variationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).adjustInventory(locationId, variationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Associates a fee with an item so the fee is automatically applied to the item in Square Point of Sale.
     * @summary ApplyFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.applyFee = function (locationId, itemId, feeId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).applyFee(locationId, itemId, feeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Associates a modifier list with an item so the associated modifier options can be applied to the item.
     * @summary ApplyModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to apply.
     * @param {string} itemId The ID of the item to add the modifier list to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.applyModifierList = function (locationId, modifierListId, itemId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).applyModifierList(locationId, modifierListId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an item category.
     * @summary CreateCategory
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createCategory = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createCategory(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a discount.
     * @summary CreateDiscount
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createDiscount = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createDiscount(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a fee (tax).
     * @summary CreateFee
     * @param {string} locationId The ID of the location to create a fee for.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createFee = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createFee(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an item and at least one variation for it.    Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify `id`. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a `user_data` string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
     * @summary CreateItem
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createItem = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createItem(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an item modifier list and at least 1 modifier option for it.
     * @summary CreateModifierList
     * @param {string} locationId The ID of the location to create a modifier list for.
     * @param {V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createModifierList = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createModifierList(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an item modifier option and adds it to a modifier list.
     * @summary CreateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createModifierOption = function (locationId, modifierListId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createModifierOption(locationId, modifierListId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a Favorites page in Square Point of Sale.
     * @summary CreatePage
     * @param {string} locationId The ID of the location to create an item for.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createPage = function (locationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createPage(locationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates an item variation for an existing item.
     * @summary CreateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.createVariation = function (locationId, itemId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).createVariation(locationId, itemId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing item category.   __DeleteCategory__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteCategoryRequest` object as documented below.
     * @summary DeleteCategory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} categoryId The ID of the category to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteCategory = function (locationId, categoryId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteCategory(locationId, categoryId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing discount.   __DeleteDiscount__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteDiscountRequest` object as documented below.
     * @summary DeleteDiscount
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} discountId The ID of the discount to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteDiscount = function (locationId, discountId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteDiscount(locationId, discountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing fee (tax).   __DeleteFee__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteFeeRequest` object as documented below.
     * @summary DeleteFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteFee = function (locationId, feeId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteFee(locationId, feeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing item and all item variations associated with it.   __DeleteItem__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteItemRequest` object as documented below.
     * @summary DeleteItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteItem = function (locationId, itemId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteItem(locationId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.   __DeleteModifierList__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierListRequest` object as documented below.
     * @summary DeleteModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteModifierList = function (locationId, modifierListId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteModifierList(locationId, modifierListId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing item modifier option from a modifier list.   __DeleteModifierOption__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteModifierOptionRequest` object.
     * @summary DeleteModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to delete.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteModifierOption = function (locationId, modifierListId, modifierOptionId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteModifierOption(locationId, modifierListId, modifierOptionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing Favorites page and all of its cells.   __DeletePage__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageRequest` object.
     * @summary DeletePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deletePage = function (locationId, pageId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deletePage(locationId, pageId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a cell from a Favorites page in Square Point of Sale.   __DeletePageCell__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeletePageCellRequest` object as documented below.
     * @summary DeletePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page to delete.
     * @param {string} [row] The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
     * @param {string} [column] The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deletePageCell = function (locationId, pageId, row, column, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deletePageCell(locationId, pageId, row, column, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing item variation from an item.   __DeleteVariation__ returns nothing on success but Connect SDKs map the empty response to an empty `V1DeleteVariationRequest` object as documented below.
     * @summary DeleteVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to delete.
     * @param {string} variationId The ID of the variation to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.deleteVariation = function (locationId, itemId, variationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).deleteVariation(locationId, itemId, variationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all the item categories for a given location.
     * @summary ListCategories
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listCategories = function (locationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listCategories(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all the discounts for a given location.
     * @summary ListDiscounts
     * @param {string} locationId The ID of the location to list categories for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listDiscounts = function (locationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listDiscounts(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all the fees (taxes) for a given location.
     * @summary ListFees
     * @param {string} locationId The ID of the location to list fees for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listFees = function (locationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listFees(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides inventory information for all inventory-enabled item variations.
     * @summary ListInventory
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {number} [limit] The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listInventory = function (locationId, limit, batchToken, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listInventory(locationId, limit, batchToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides summary information of all items for a given location.
     * @summary ListItems
     * @param {string} locationId The ID of the location to list items for.
     * @param {string} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listItems = function (locationId, batchToken, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listItems(locationId, batchToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all the modifier lists for a given location.
     * @summary ListModifierLists
     * @param {string} locationId The ID of the location to list modifier lists for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listModifierLists = function (locationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listModifierLists(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Lists all Favorites pages (in Square Point of Sale) for a given location.
     * @summary ListPages
     * @param {string} locationId The ID of the location to list Favorites pages for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.listPages = function (locationId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).listPages(locationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes a fee assocation from an item so the fee is no longer automatically applied to the item in Square Point of Sale.
     * @summary RemoveFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} itemId The ID of the item to add the fee to.
     * @param {string} feeId The ID of the fee to apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.removeFee = function (locationId, itemId, feeId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).removeFee(locationId, itemId, feeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes a modifier list association from an item so the modifier options from the list can no longer be applied to the item.
     * @summary RemoveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to remove.
     * @param {string} itemId The ID of the item to remove the modifier list from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.removeModifierList = function (locationId, modifierListId, itemId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).removeModifierList(locationId, modifierListId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     * @summary RetrieveItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The item\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.retrieveItem = function (locationId, itemId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).retrieveItem(locationId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides the details for a single modifier list.
     * @summary RetrieveModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The modifier list\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.retrieveModifierList = function (locationId, modifierListId, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).retrieveModifierList(locationId, modifierListId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing item category.
     * @summary UpdateCategory
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} categoryId The ID of the category to edit.
     * @param {V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateCategory = function (locationId, categoryId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateCategory(locationId, categoryId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing discount.
     * @summary UpdateDiscount
     * @param {string} locationId The ID of the category\&#39;s associated location.
     * @param {string} discountId The ID of the discount to edit.
     * @param {V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateDiscount = function (locationId, discountId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateDiscount(locationId, discountId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing fee (tax).
     * @summary UpdateFee
     * @param {string} locationId The ID of the fee\&#39;s associated location.
     * @param {string} feeId The ID of the fee to edit.
     * @param {V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateFee = function (locationId, feeId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateFee(locationId, feeId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the core details of an existing item.
     * @summary UpdateItem
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateItem = function (locationId, itemId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateItem(locationId, itemId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing item modifier list.
     * @summary UpdateModifierList
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateModifierList = function (locationId, modifierListId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateModifierList(locationId, modifierListId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing item modifier option.
     * @summary UpdateModifierOption
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} modifierListId The ID of the modifier list to edit.
     * @param {string} modifierOptionId The ID of the modifier list to edit.
     * @param {V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateModifierOption = function (locationId, modifierListId, modifierOptionId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateModifierOption(locationId, modifierListId, modifierOptionId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of a Favorites page in Square Point of Sale.
     * @summary UpdatePage
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location
     * @param {string} pageId The ID of the page to modify.
     * @param {V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updatePage = function (locationId, pageId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updatePage(locationId, pageId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies a cell of a Favorites page in Square Point of Sale.
     * @summary UpdatePageCell
     * @param {string} locationId The ID of the Favorites page\&#39;s associated location.
     * @param {string} pageId The ID of the page the cell belongs to.
     * @param {V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updatePageCell = function (locationId, pageId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updatePageCell(locationId, pageId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the details of an existing item variation.
     * @summary UpdateVariation
     * @param {string} locationId The ID of the item\&#39;s associated location.
     * @param {string} itemId The ID of the item to modify.
     * @param {string} variationId The ID of the variation to modify.
     * @param {V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ItemsApi
     */
    V1ItemsApi.prototype.updateVariation = function (locationId, itemId, variationId, body, options) {
        var _this = this;
        return exports.V1ItemsApiFp(this.configuration).updateVariation(locationId, itemId, variationId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return V1ItemsApi;
}(base_1.BaseAPI));
exports.V1ItemsApi = V1ItemsApi;
