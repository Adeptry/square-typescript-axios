/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AcceptDisputeResponse } from '../models';
import { CreateDisputeEvidenceTextRequest } from '../models';
import { CreateDisputeEvidenceTextResponse } from '../models';
import { ListDisputeEvidenceResponse } from '../models';
import { ListDisputesResponse } from '../models';
import { RemoveDisputeEvidenceResponse } from '../models';
import { RetrieveDisputeEvidenceResponse } from '../models';
import { RetrieveDisputeResponse } from '../models';
import { SubmitEvidenceResponse } from '../models';
/**
 * DisputesApi - axios parameter creator
 * @export
 */
export declare const DisputesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
     * @summary AcceptDispute
     * @param {string} disputeId ID of the dispute you want to accept.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptDispute: (disputeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Uploads text to use as evidence for a dispute challenge.
     * @summary CreateDisputeEvidenceText
     * @param {string} disputeId The ID of the dispute you want to upload evidence for.
     * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDisputeEvidenceText: (disputeId: string, body: CreateDisputeEvidenceTextRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of evidence associated with a dispute.
     * @summary ListDisputeEvidence
     * @param {string} disputeId The ID of the dispute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputeEvidence: (disputeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of disputes associated with a particular account.
     * @summary ListDisputes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
     * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputes: (cursor?: string, states?: string, locationId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
     * @summary RemoveDisputeEvidence
     * @param {string} disputeId The ID of the dispute you want to remove evidence from.
     * @param {string} evidenceId The ID of the evidence you want to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDisputeEvidence: (disputeId: string, evidenceId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns details of a specific dispute.
     * @summary RetrieveDispute
     * @param {string} disputeId The ID of the dispute you want more details about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDispute: (disputeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @summary RetrieveDisputeEvidence
     * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
     * @param {string} evidenceId The ID of the evidence to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDisputeEvidence: (disputeId: string, evidenceId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
     * @summary SubmitEvidence
     * @param {string} disputeId The ID of the dispute you want to submit evidence for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitEvidence: (disputeId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * DisputesApi - functional programming interface
 * @export
 */
export declare const DisputesApiFp: (configuration?: Configuration) => {
    /**
     * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
     * @summary AcceptDispute
     * @param {string} disputeId ID of the dispute you want to accept.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptDispute(disputeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcceptDisputeResponse>>;
    /**
     * Uploads text to use as evidence for a dispute challenge.
     * @summary CreateDisputeEvidenceText
     * @param {string} disputeId The ID of the dispute you want to upload evidence for.
     * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDisputeEvidenceText(disputeId: string, body: CreateDisputeEvidenceTextRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDisputeEvidenceTextResponse>>;
    /**
     * Returns a list of evidence associated with a dispute.
     * @summary ListDisputeEvidence
     * @param {string} disputeId The ID of the dispute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputeEvidence(disputeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDisputeEvidenceResponse>>;
    /**
     * Returns a list of disputes associated with a particular account.
     * @summary ListDisputes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
     * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputes(cursor?: string, states?: string, locationId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDisputesResponse>>;
    /**
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
     * @summary RemoveDisputeEvidence
     * @param {string} disputeId The ID of the dispute you want to remove evidence from.
     * @param {string} evidenceId The ID of the evidence you want to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDisputeEvidence(disputeId: string, evidenceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveDisputeEvidenceResponse>>;
    /**
     * Returns details of a specific dispute.
     * @summary RetrieveDispute
     * @param {string} disputeId The ID of the dispute you want more details about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDispute(disputeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveDisputeResponse>>;
    /**
     * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @summary RetrieveDisputeEvidence
     * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
     * @param {string} evidenceId The ID of the evidence to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDisputeEvidence(disputeId: string, evidenceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveDisputeEvidenceResponse>>;
    /**
     * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
     * @summary SubmitEvidence
     * @param {string} disputeId The ID of the dispute you want to submit evidence for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitEvidence(disputeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitEvidenceResponse>>;
};
/**
 * DisputesApi - factory interface
 * @export
 */
export declare const DisputesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
     * @summary AcceptDispute
     * @param {string} disputeId ID of the dispute you want to accept.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptDispute(disputeId: string, options?: any): AxiosPromise<AcceptDisputeResponse>;
    /**
     * Uploads text to use as evidence for a dispute challenge.
     * @summary CreateDisputeEvidenceText
     * @param {string} disputeId The ID of the dispute you want to upload evidence for.
     * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDisputeEvidenceText(disputeId: string, body: CreateDisputeEvidenceTextRequest, options?: any): AxiosPromise<CreateDisputeEvidenceTextResponse>;
    /**
     * Returns a list of evidence associated with a dispute.
     * @summary ListDisputeEvidence
     * @param {string} disputeId The ID of the dispute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputeEvidence(disputeId: string, options?: any): AxiosPromise<ListDisputeEvidenceResponse>;
    /**
     * Returns a list of disputes associated with a particular account.
     * @summary ListDisputes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
     * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDisputes(cursor?: string, states?: string, locationId?: string, options?: any): AxiosPromise<ListDisputesResponse>;
    /**
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
     * @summary RemoveDisputeEvidence
     * @param {string} disputeId The ID of the dispute you want to remove evidence from.
     * @param {string} evidenceId The ID of the evidence you want to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDisputeEvidence(disputeId: string, evidenceId: string, options?: any): AxiosPromise<RemoveDisputeEvidenceResponse>;
    /**
     * Returns details of a specific dispute.
     * @summary RetrieveDispute
     * @param {string} disputeId The ID of the dispute you want more details about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDispute(disputeId: string, options?: any): AxiosPromise<RetrieveDisputeResponse>;
    /**
     * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @summary RetrieveDisputeEvidence
     * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
     * @param {string} evidenceId The ID of the evidence to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveDisputeEvidence(disputeId: string, evidenceId: string, options?: any): AxiosPromise<RetrieveDisputeEvidenceResponse>;
    /**
     * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
     * @summary SubmitEvidence
     * @param {string} disputeId The ID of the dispute you want to submit evidence for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitEvidence(disputeId: string, options?: any): AxiosPromise<SubmitEvidenceResponse>;
};
/**
 * DisputesApi - object-oriented interface
 * @export
 * @class DisputesApi
 * @extends {BaseAPI}
 */
export declare class DisputesApi extends BaseAPI {
    /**
     * Accepts loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account balance does not have sufficient funds, Square debits the associated bank account.
     * @summary AcceptDispute
     * @param {string} disputeId ID of the dispute you want to accept.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    acceptDispute(disputeId: string, options?: any): Promise<import("axios").AxiosResponse<AcceptDisputeResponse>>;
    /**
     * Uploads text to use as evidence for a dispute challenge.
     * @summary CreateDisputeEvidenceText
     * @param {string} disputeId The ID of the dispute you want to upload evidence for.
     * @param {CreateDisputeEvidenceTextRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    createDisputeEvidenceText(disputeId: string, body: CreateDisputeEvidenceTextRequest, options?: any): Promise<import("axios").AxiosResponse<CreateDisputeEvidenceTextResponse>>;
    /**
     * Returns a list of evidence associated with a dispute.
     * @summary ListDisputeEvidence
     * @param {string} disputeId The ID of the dispute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    listDisputeEvidence(disputeId: string, options?: any): Promise<import("axios").AxiosResponse<ListDisputeEvidenceResponse>>;
    /**
     * Returns a list of disputes associated with a particular account.
     * @summary ListDisputes
     * @param {string} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query. For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {string} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;).
     * @param {string} [locationId] The ID of the location for which to return  a list of disputes. If not specified, the endpoint returns all open disputes (dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or  &#x60;LOST&#x60;) associated with all locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    listDisputes(cursor?: string, states?: string, locationId?: string, options?: any): Promise<import("axios").AxiosResponse<ListDisputesResponse>>;
    /**
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](/reference/square/disputes-api/submit-evidence).
     * @summary RemoveDisputeEvidence
     * @param {string} disputeId The ID of the dispute you want to remove evidence from.
     * @param {string} evidenceId The ID of the evidence you want to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    removeDisputeEvidence(disputeId: string, evidenceId: string, options?: any): Promise<import("axios").AxiosResponse<RemoveDisputeEvidenceResponse>>;
    /**
     * Returns details of a specific dispute.
     * @summary RetrieveDispute
     * @param {string} disputeId The ID of the dispute you want more details about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    retrieveDispute(disputeId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveDisputeResponse>>;
    /**
     * Returns the specific evidence metadata associated with a specific dispute.  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @summary RetrieveDisputeEvidence
     * @param {string} disputeId The ID of the dispute that you want to retrieve evidence from.
     * @param {string} evidenceId The ID of the evidence to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    retrieveDisputeEvidence(disputeId: string, evidenceId: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveDisputeEvidenceResponse>>;
    /**
     * Submits evidence to the cardholder\'s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](/reference/square/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](/reference/square/disputes-api/create-dispute-evidence-text) endpoints, and evidence automatically provided by Square, when available.
     * @summary SubmitEvidence
     * @param {string} disputeId The ID of the dispute you want to submit evidence for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    submitEvidence(disputeId: string, options?: any): Promise<import("axios").AxiosResponse<SubmitEvidenceResponse>>;
}
