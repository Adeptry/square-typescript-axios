"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1Tender = void 0;
var v1_money_1 = require("./v1-money");
var graphql_1 = require("@nestjs/graphql");
/**
 * A tender represents a discrete monetary exchange. Square represents this exchange as a money object with a specific currency and amount, where the amount is given in the smallest denomination of the given currency.  Square POS can accept more than one form of tender for a single payment (such as by splitting a bill between a credit card and a gift card). The `tender` field of the Payment object lists all forms of tender used for the payment.  Split tender payments behave slightly differently from single tender payments:  The receipt_url for a split tender corresponds only to the first tender listed in the tender field. To get the receipt URLs for the remaining tenders, use the receipt_url fields of the corresponding Tender objects.  *A note on gift cards**: when a customer purchases a Square gift card from a merchant, the merchant receives the full amount of the gift card in the associated payment.  When that gift card is used as a tender, the balance of the gift card is reduced and the merchant receives no funds. A `Tender` object with a type of `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the associated payment.
 * @export
 * @class V1Tender
 */
var V1Tender = /** @class */ (function () {
    function V1Tender() {
    }
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "id", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "type", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "name", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "employee_id", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "receipt_url", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "card_brand", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "pan_suffix", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "entry_method", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "payment_note", void 0);
    __decorate([
        graphql_1.Field(function () { return v1_money_1.V1Money; }),
        __metadata("design:type", v1_money_1.V1Money)
    ], V1Tender.prototype, "total_money", void 0);
    __decorate([
        graphql_1.Field(function () { return v1_money_1.V1Money; }),
        __metadata("design:type", v1_money_1.V1Money)
    ], V1Tender.prototype, "tendered_money", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "tendered_at", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", String)
    ], V1Tender.prototype, "settled_at", void 0);
    __decorate([
        graphql_1.Field(function () { return v1_money_1.V1Money; }),
        __metadata("design:type", v1_money_1.V1Money)
    ], V1Tender.prototype, "change_back_money", void 0);
    __decorate([
        graphql_1.Field(function () { return v1_money_1.V1Money; }),
        __metadata("design:type", v1_money_1.V1Money)
    ], V1Tender.prototype, "refunded_money", void 0);
    __decorate([
        graphql_1.Field(),
        __metadata("design:type", Boolean)
    ], V1Tender.prototype, "is_exchange", void 0);
    V1Tender = __decorate([
        graphql_1.ObjectType()
    ], V1Tender);
    return V1Tender;
}());
exports.V1Tender = V1Tender;
